This setup provides a comprehensive, containerized environment for QuickBuild, featuring a QuickBuild server, a dedicated PostgreSQL database, and a scalable build agent. This configuration is designed for local development and testing, ensuring persistence and ease of management.

### Prerequisites

1.  **Docker and Docker Compose:** Ensure both are installed on your host machine.
2.  **Download QuickBuild:** Manually download the latest QuickBuild distribution (Linux `tar.gz` format) from the PMEase website.

### Project Structure

Create the following directory structure. You only need the single QuickBuild distribution file.

```
quickbuild-docker/
│
├── docker-compose.yml
├── quickbuild.tar.gz  <-- Place the downloaded distribution file here
│
├── server/
│   ├── Dockerfile
│   └── entrypoint.sh
│
└── agent/
    ├── Dockerfile
    └── entrypoint.sh
```

**Important:** For simplicity, rename the downloaded distribution file (e.g., `quickbuild-14.0.x.tar.gz`) to exactly `quickbuild.tar.gz` and place it in the root `quickbuild-docker/` directory.

### 1. QuickBuild Server Configuration

#### server/Dockerfile

This Dockerfile sets up the QuickBuild server using OpenJDK 21 (recommended for QuickBuild 14+). It extracts the distribution and sets the recommended memory configuration.

```dockerfile
# Use OpenJDK 21, as required by QuickBuild 14.0+
FROM eclipse-temurin:21-jdk-jammy

# Define the installation directory
ENV QB_HOME /opt/quickbuild
WORKDIR $QB_HOME

# Copy the distribution file from the parent context (handled in docker-compose.yml)
COPY quickbuild.tar.gz .

# Extract QuickBuild, assuming the archive contains a top-level directory (e.g., quickbuild-14.0.x)
# And move the contents to the QB_HOME directory.
RUN set -ex && \
    tar -xzf quickbuild.tar.gz && \
    DIST_DIR=$(ls -d quickbuild-*/) && \
    mv $DIST_DIR* . && \
    rmdir $DIST_DIR && \
    rm quickbuild.tar.gz

# Configure memory settings (1GB recommended for the server)
# QuickBuild uses Java Service Wrapper; configuration is in conf/wrapper.conf
RUN sed -i 's/wrapper.java.maxmemory=.*/wrapper.java.maxmemory=1024/' conf/wrapper.conf

# Add and prepare the entrypoint script
COPY server/entrypoint.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh

# Expose the default QuickBuild web interface port
EXPOSE 8810

# Define volumes for persistence
VOLUME ["$QB_HOME/conf", "$QB_HOME/logs", "$QB_HOME/storage", "$QB_HOME/plugins/site"]

ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
# Default command to run the server in console mode
CMD ["bin/server.sh", "console"]
```

#### server/entrypoint.sh

This script dynamically configures the PostgreSQL connection settings in `hibernate.properties` before the server starts, using environment variables passed from Docker Compose. This ensures the server connects to the external database immediately rather than the embedded H2 database.

```bash
#!/bin/bash
set -e

QB_HOME="/opt/quickbuild"
HIBERNATE_PROPS="${QB_HOME}/conf/hibernate.properties"

# Check if the configuration file still uses the default H2 database settings or if it doesn't exist
if grep -q "hibernate.connection.driver_class=org.h2.Driver" "$HIBERNATE_PROPS" || [ ! -f "$HIBERNATE_PROPS" ]; then
    echo "Configuring hibernate.properties for PostgreSQL..."

    # Ensure the password environment variable is set
    if [ -z "$DB_PASSWORD" ]; then
        echo "Error: DB_PASSWORD environment variable not set. Cannot configure database. Exiting."
        exit 1
    fi

    # Create/Overwrite hibernate.properties with PostgreSQL settings
    cat > "$HIBERNATE_PROPS" <<EOF
# Auto-generated by Docker entrypoint script
hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
hibernate.connection.driver_class=org.postgresql.Driver
# Environment variables are set in docker-compose.yml
hibernate.connection.url=jdbc:postgresql://${DB_HOST:-quickbuild-db}:${DB_PORT:-5432}/${DB_NAME:-quickbuild}
hibernate.connection.username=${DB_USER:-qbuser}
hibernate.connection.password=${DB_PASSWORD}
# Recommended Pool settings
hibernate.c3p0.min_size=5
hibernate.c3p0.max_size=20
EOF
    echo "hibernate.properties configured for PostgreSQL."
else
    echo "hibernate.properties appears already configured for an external database. Skipping auto-configuration."
fi

# Execute the main command (bin/server.sh console)
exec "$@"
```

### 2. QuickBuild Agent Configuration

#### agent/Dockerfile

This Dockerfile creates an optimized agent image. It efficiently extracts only the necessary agent components from the main distribution file provided in the build context.

```dockerfile
# Use OpenJDK 21
FROM eclipse-temurin:21-jdk-jammy

# Define the installation directory
ENV QB_AGENT_HOME /opt/quickbuild-agent
WORKDIR $QB_AGENT_HOME

# Copy the distribution file from the parent context
COPY quickbuild.tar.gz /tmp/quickbuild.tar.gz

# Efficiently install the agent.
# The main QuickBuild distribution contains the agent package in its 'lib/agent.tar.gz'.
RUN set -ex && \
    # 1. Extract only the agent package from the main distribution archive
    tar -xzf /tmp/quickbuild.tar.gz --wildcards '*/lib/agent.tar.gz' -C /tmp && \
    # 2. Find the extracted agent package
    AGENT_PKG=$(find /tmp -name agent.tar.gz) && \
    # 3. Extract the agent components to the installation directory
    tar -xzf $AGENT_PKG -C $QB_AGENT_HOME && \
    # 4. Clean up
    rm -rf /tmp/quickbuild.tar.gz /tmp/quickbuild-*

# Configure memory settings (256MB recommended for agents)
RUN sed -i 's/wrapper.java.maxmemory=.*/wrapper.java.maxmemory=256/' conf/wrapper.conf

# Add and prepare the entrypoint script
COPY agent/entrypoint.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh

VOLUME ["$QB_AGENT_HOME/logs"]

ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
# Default command to run the agent in console mode
CMD ["bin/agent.sh", "console"]
```

#### agent/entrypoint.sh

This script ensures the agent is configured with the correct server URL in `conf/node.properties` at runtime.

```bash
#!/bin/bash
set -e

QB_AGENT_HOME="/opt/quickbuild-agent"
NODE_PROPS="${QB_AGENT_HOME}/conf/node.properties"

# Use the SERVER_URL environment variable if set (from docker-compose.yml), otherwise default
SERVER_URL="${SERVER_URL:-http://quickbuild-server:8810/}"

echo "Configuring agent to connect to: $SERVER_URL"
# Update the serverUrl in node.properties
sed -i "s|^serverUrl=.*|serverUrl=${SERVER_URL}|" "$NODE_PROPS"


# Optional: Example of adding custom user attributes (Uncomment to use)
# ATTRIBUTES_PROPS="${QB_AGENT_HOME}/conf/attributes.properties"
# echo "os.family=Linux-Container" > "$ATTRIBUTES_PROPS"
# echo "build.environment=docker-compose" >> "$ATTRIBUTES_PROPS"

# Execute the main command (bin/agent.sh console)
exec "$@"
```

### 3. Docker Compose Definition

#### docker-compose.yml

This file orchestrates the server, database, and agent services, defining networking, persistent volumes, and dependencies.

```yaml
version: '3.8'

services:

  # PostgreSQL Database Service
  quickbuild-db:
    image: postgres:13-alpine # Using a stable, recent PostgreSQL image
    container_name: quickbuild-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: quickbuild
      POSTGRES_USER: qbuser
      # SECURITY WARNING: Change this password immediately.
      # For production environments, do not hardcode credentials here.
      # Use Docker secrets or an external .env file instead.
      POSTGRES_PASSWORD: MySecurePassword123!
    volumes:
      - qb-db-data:/var/lib/postgresql/data
    networks:
      - quickbuild-net
    # Healthcheck ensures the database is ready before the server attempts to connect
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U qbuser -d quickbuild"]
      interval: 10s
      timeout: 5s
      retries: 5

  # QuickBuild Server Service
  quickbuild-server:
    build:
      # Set the context to the root directory so the quickbuild.tar.gz is available
      context: .
      dockerfile: ./server/Dockerfile
    container_name: quickbuild-server
    restart: unless-stopped
    depends_on:
      quickbuild-db:
        condition: service_healthy
    ports:
      - "8810:8810"
    environment:
      # Pass database connection details to the server's entrypoint script
      DB_HOST: quickbuild-db
      DB_NAME: quickbuild
      DB_USER: qbuser
      # Must match the password set for the quickbuild-db service
      DB_PASSWORD: MySecurePassword123!
    volumes:
      - qb-server-conf:/opt/quickbuild/conf
      - qb-server-logs:/opt/quickbuild/logs
      - qb-server-storage:/opt/quickbuild/storage
      - qb-server-plugins:/opt/quickbuild/plugins/site
    networks:
      - quickbuild-net

  # QuickBuild Build Agent Service
  quickbuild-agent:
    build:
      # Set the context to the root directory
      context: .
      dockerfile: ./agent/Dockerfile
    # Do not set container_name to allow scaling (e.g., docker-compose up --scale quickbuild-agent=3)
    restart: unless-stopped
    depends_on:
      - quickbuild-server
    environment:
      # Define the server URL for the agent's entrypoint script
      SERVER_URL: http://quickbuild-server:8810/
    networks:
      - quickbuild-net
    # Optional: If agents need to execute Docker commands (e.g., building images), uncomment the following lines:
    # volumes:
    #   - /var/run/docker.sock:/var/run/docker.sock

# Define persistent named volumes
volumes:
  qb-db-data:
  qb-server-conf:
  qb-server-logs:
  qb-server-storage:
  qb-server-plugins:

# Define the internal bridge network
networks:
  quickbuild-net:
    driver: bridge
```

### How to Run

1.  **Prepare:** Ensure the QuickBuild distribution file is renamed to `quickbuild.tar.gz` and placed in the root directory.
2.  **Security:** Update the default `POSTGRES_PASSWORD` and `DB_PASSWORD` in the `docker-compose.yml` file.
3.  **Start:** Build and start the containers:
    ```bash
    docker-compose up -d --build
    ```
4.  **Monitor:** The server may take a few minutes to initialize the database on the first run. Monitor the logs:
    ```bash
    docker-compose logs -f quickbuild-server
    ```
5.  **Scale (Optional):** To run multiple agents (e.g., 3 agents):
    ```bash
    docker-compose up -d --scale quickbuild-agent=3
    ```

### Post-Deployment Steps & Important Considerations

1.  **Initial Server Setup:**
    *   Once the `quickbuild-server` is running, access the web interface at `http://localhost:8810`.
    *   You will be guided through the initial setup to create the administrator user and apply your license key. The database connection step should already be completed by the entrypoint script.

2.  **Agent Authorization:**
    *   The build agents will connect to the server and appear in the QuickBuild interface under the **Grid** tab as "unauthorized nodes".
    *   An administrator must manually authorize these agents before they can join the build grid and accept jobs.

3.  **Performance and Reliability:**
    *   This setup correctly uses PostgreSQL instead of the embedded H2 database, which is crucial for performance and data integrity.

4.  **Customization:**
    *   **Memory:** The Dockerfiles set the server memory to 1GB and the agent memory to 256MB. If adjustments are needed later, modify the `wrapper.conf` file within the persisted `qb-server-conf` volume.
    *   **Attributes:** You can customize agent capabilities by editing the `agent/entrypoint.sh` to add properties to `conf/attributes.properties` (see the commented example in the script).

5.  **Cloud Profiles vs. Docker Compose Agents (Production Consideration):**
    *   This Docker Compose setup is ideal for local testing, development, and small, static CI/CD environments.
    *   For dynamic production environments (like Kubernetes, AWS EC2, Azure), QuickBuild strongly recommends using the **Cloud Profile** feature. Cloud Profiles allow QuickBuild to dynamically provision and terminate agents based on build queue load, offering better scalability and resource management by utilizing specific plugins and pre-configured agent images (e.g., AMIs or Kubernetes-ready Docker images).

6.  **Security:**
    *   Ensure you have changed the default database passwords.
    *   In production, manage credentials using Docker Secrets or dedicated environment files rather than hardcoding them in `docker-compose.yml`.
    *   Ensure proper firewall rules are in place if exposing port 8810.
