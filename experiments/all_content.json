[
  {
    "url": "https://wiki.pmease.com/display/QB14/",
    "title": "QuickBuild 14.0 Release Highlights",
    "breadcrumb": [
      ""
    ],
    "full_text": "QuickBuild 14.0 Release Highlights\nVersion: QB14\nOn this page\nQuickBuild 14.0 Release Highlights\nNew Features and Improvements\nâ\nQB-3918: Audit log for dashboard change\nQB-3935: Able to rename overriden variables as well when rename a variable\nQB-3941: Add Logging for step type: Execute groovy script from file\nQB-3943: Export users/groups as csv with user/group relationship\nQB-3956: Able to annotate inactive nodes for offline reason\nQB-3969: Able to mark configuration as favorite to show in favorite configurations gadget\nQB-3970: Able to search by build description\nQB-3971: Able to export build search result as Excel\nQB-3978: Improve user restful api to be able to list administrators\nQB-3983: Filter out builds not accessible instead of throw AccessDeniedException for build query restful api\nQB-3998: Allow the addition of other users to cc on the \"Submit Support Request\" page\nQB-4002: Permission to edit settings of child configurations\nQB-4018: Add timeout parameter to Context's methods\nQB-4025: Able to customize k8s agent service definition\nQB-4027: Add additional columns to scripted build list gadget\nQB-4030: Able to save step log as text file via script api\nQB-4031: Improve agent heartbeat to check connection fro server to agent also\nQB-4040: Add wordcount in ckeditor for various html editor.\nQB-4046: Java 21 LTS support\nQB-4050: \"All open pull request\" in \"Pull requests\" of \"Repositories/Github\" couldn't filter the 'Draft' PR\nQB-4052: Able to launch build agent in EC2 with temporal credentials of IAM role\nQB-4053: Able to launch on-demand EC2 build agent with specified IAM instance profile\nQB-4054: Able to publish artifacts to AWS S3 with temporal credentials of IAM role\nQB-4057: Able to rename overrided steps in descendent configurations when rename a step\nQB-4058: Able to rename overrided repositories in descendent configurations when rename a repository\nQB-4060: Able to add comment to build\nQB-4061: An option to show recent builds triggered by current user in configuration recent builds table\nBugs\nâ\nQB-3955: Variables accessed via configuration.getVarValue() is not masked in build log\nQB-4048: Authoriz/Unauthorize build agent API error\nQB-4055: UI no response when save a copied dashboard\nQB-4056: Dashboard button is disappeared after menu popped up\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "QuickBuild 14.0 Release Highlights",
        "content": ""
      },
      {
        "header": "New Features and Improvementsâ",
        "content": "QB-3918: Audit log for dashboard changeQB-3935: Able to rename overriden variables as well when rename a variableQB-3941: Add Logging for step type: Execute groovy script from fileQB-3943: Export users/groups as csv with user/group relationshipQB-3956: Able to annotate inactive nodes for offline reasonQB-3969: Able to mark configuration as favorite to show in favorite configurations gadgetQB-3970: Able to search by build descriptionQB-3971: Able to export build search result as ExcelQB-3978: Improve user restful api to be able to list administratorsQB-3983: Filter out builds not accessible instead of throw AccessDeniedException for build query restful apiQB-3998: Allow the addition of other users to cc on the \"Submit Support Request\" pageQB-4002: Permission to edit settings of child configurationsQB-4018: Add timeout parameter to Context's methodsQB-4025: Able to customize k8s agent service definitionQB-4027: Add additional columns to scripted build list gadgetQB-4030: Able to save step log as text file via script apiQB-4031: Improve agent heartbeat to check connection fro server to agent alsoQB-4040: Add wordcount in ckeditor for various html editor.QB-4046: Java 21 LTS supportQB-4050: \"All open pull request\" in \"Pull requests\" of \"Repositories/Github\" couldn't filter the 'Draft' PRQB-4052: Able to launch build agent in EC2 with temporal credentials of IAM roleQB-4053: Able to launch on-demand EC2 build agent with specified IAM instance profileQB-4054: Able to publish artifacts to AWS S3 with temporal credentials of IAM roleQB-4057: Able to rename overrided steps in descendent configurations when rename a stepQB-4058: Able to rename overrided repositories in descendent configurations when rename a repositoryQB-4060: Able to add comment to buildQB-4061: An option to show recent builds triggered by current user in configuration recent builds table"
      },
      {
        "header": "Bugsâ",
        "content": "QB-3955: Variables accessed via configuration.getVarValue() is not masked in build logQB-4048: Authoriz/Unauthorize build agent API errorQB-4055: UI no response when save a copied dashboardQB-4056: Dashboard button is disappeared after menu popped up"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/category/Concepts",
      "https://wiki.pmease.com/display/QB14/category/Installation+Guide",
      "https://wiki.pmease.com/display/QB14/category/Upgrade+Guide",
      "https://wiki.pmease.com/display/QB14/category/User's+Guide",
      "https://wiki.pmease.com/display/QB14/category/Administrator's+Guide",
      "https://wiki.pmease.com/display/QB14/category/Developer's+Guide",
      "https://wiki.pmease.com/display/QB14/category/Build+Setup+Tutorials",
      "https://wiki.pmease.com/display/QB14/category/References",
      "https://wiki.pmease.com/display/QB14/category/Concepts"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/category/Concepts",
    "title": "Concepts",
    "breadcrumb": [
      ""
    ],
    "full_text": "ðï¸\nSCM\nSCM refers to Source Code Management system, Example of SCM systems are CVS , Subversion , Visual Sourcesafe , ClearCase , Perforce , and Starteam.\nðï¸\nConfiguration\nConfiguration holds all the configuration information needed to generate builds. It includes information about what to build, how to build, and when to build, etc. Configurations are organized in a hierarchical structure. To refer to a configuration, the names of all its ancestor configurations should be chained together and concatenated with forward slash, for example: root/department1/project1/nightly. This is called configuration path. Child configurations can inherit build settings from its parent, and they can selectively override some of the parent settings. This behavior is referred as inherit and override rule, which simplifies the build management of multiple projects.\nðï¸\nConfiguration Hierarchy\nFor a particular configuration, the configuration hierarchy refers to the configuration and all its parent configurations (direct and non-direct).\nðï¸\nConfiguration Subtree\nFor a particular configuration, the configuration subtree refers to current configuration and all its child configurations (direct and non-direct).\nðï¸\nBuild\nBuild is generated by running a configuration. When a particular configuration is triggered (either by user or by the scheduling system), the build condition of the configuration is evaluated. If the result of the evaluation is true, the configuration will be run to generate a new build.\nðï¸\nBuild Pipeline\nBuild pipeline is a set of builds connected with promotions, visualizing different stages in a build or deployment process with commit information displayed on each stage. Defined promotion actions can be taken directly on the pipeline to push commits going through different stages.\nðï¸\nRepository\nRepository is the place, where the files used to generate builds are stored. It normally refers to various SCM systems which holds source files to generate the build. It is used by QuickBuild to checkout/update files from various SCM as part of the build process. Repository definition follows the inherit and override rule: repositories defined in descendant configurations with the same name will override those defined in ancestor configuration.\nðï¸\nQuickBuild Repository\nQuickBuild repository is a special repository which holds published artifacts of a build. By checking out from this repository, artifacts of upstream builds (normally library projects) can be retrieved and used by downstream builds. This is how dependency handled in QuickBuild: the downstream builds depends on upstream builds and it uses QuickBuild repository to resolve the dependency.\nðï¸\nStep\nQuickBuild uses steps to control how a build should be performed. Multiple steps can be chained sequentially or in parallel to define the build process of a configuration, and they can be configured to run on different build nodes (see the Build Node definition below) to perform remote builds. Step definition follows the inherit and override rule: steps defined in descendant configurations with the same name will override those defined in ancestor configuration.\nðï¸\nComposite Step\nComposite step is a special step which may be used to execute other steps sequentially or in parallel. It can recursively contain other composite steps which can be overridden in descendant configurations.\nðï¸\nMaster Step\nMaster step acts as the entry point for build execution and it is always named master . When a build is started, it looks for master step and executes it. The master step is normally defined as a composite step to exuecute other steps.\nðï¸\nStep Path\nStep path can be used to reference an executed step. Since QuickBuild 3.0, the same step can be reused in a single build, therefore it is not sufficient to reference an executed step simply with a step name. Path of a particular step instance can be constructed by concatenating names of all its container steps with character \"\\>\", from outer-most to inner-most, with the last element being name of the step itself. Below screen explains how to construct step path of various steps:\nðï¸\nBuild Grid\nQuickBuild 2.0 introduces the concept of a build grid to serve purposes including but not limited to:\nðï¸\nBuild Server\nBuild server represents the QuickBuild instance configured to run as a server. It is responsible for overall central management of build tasks, and it distributes steps to the connected build agents based on defined rules.\nðï¸\nBuild Agent\nBuild agents connect to build server to form a build grid. Since a grid node (server node and agent node) can only run one build at a time, multiple build agents means the ability to run multiple builds concurrently, which is important to a busy build system. It also make multi-platform build/test possible as a build can distribute different steps to different agents for execution. Build agent can be upgraded automatically when the build server upgrades to a new version.\nðï¸\nUser Agent\nUser agent is installed on user's desktop and is mainly used for the purpose of Proof Build. It responsible for collecting uncommitted changes from user's desktop and send to build grid for verification. It can be upgraded automatically when server upgrades to a new version.\nðï¸\nGrid Node\nGrid node represents a member of the build grid, it is either a build server, a build agent or a user agent. It is identified by the node address in the form of \\:\\ , where \\ represents the host name of the machine running the build node instance, and \\ represents the port number the build node instance uses.\nðï¸\nResource\nResource means any physical or virtual component of limited availability within the grid, and is provided by grid nodes. A build step can declare to require certain resources to run. If some nodes are found with desired resources, the step will run on the fastest node; otherwise, the step will wait until a node with free resource is available. This way, the resource contention problem between builds and steps can be solved efficiently.\nðï¸\nCloud Profile\nCloud profile exists to support launch build agent on demand in cloud environment. It defines how to launch build agents as well as describing characteristics of the build agents. Build agents launched by the same cloud profile will have same characteristics. Often you need to define multiple cloud profiles to satisfy different build requirements.\nðï¸\nProof Build\nQuickBuild 2.0 introduces concept of proof build to build and test your uncommitted changes at server side. With proof build, the risk of polluting SCM with bad code will be reduced to minimum as developer can submit a proof build and only commit their changes if the proof build is successful.\nðï¸\nBuild Promotion\nBuild promotion is a process of generating new build based on information or artifacts of another build. It is used by QuickBuild to implement build life cycle management. For example, a gold QA build can be promoted as a release build. Arbitrary custom actions can be configured for the promotion process so that you can deploy the build to test servers, create tags on SCMs for release builds, or send notifications to interesting parts.\nðï¸\nLocal Change\nLocal change refers to uncommitted changes collected from project work area at user's desktop when running a proof build. It is called local from user's perspective, as they've not submitted to SCM. For distributed version control systems, local change refers to local commits which will be pushed to a central repository.\nðï¸\nConfiguration Workspace\nConfiguration workspace is the place to build your projects. It is used to hold files used during a build such as source files checked out from SCM, intermediate files generated during the build etc. In a grid environment, each node has a separate workspace for each configuration. By default, workspace for a particular configuration on a particular node points to the directory named by configuration path under QuickBuild's installation directory on that node.\nðï¸\nStorage Directory\nStorage directory is a place on build server or agent to store below contents:\nðï¸\nConfiguration Publish Directory\nConfiguration publish directory is a place on build server to hold published materials of the configuration such as various statistics reports. Each configuration will create its own publish directory named by configuration id under the configurations sub directory of storage directory.\nðï¸\nBuild Publish Directory\nBuild publish directory is a place on build server to hold published materials of the build such as build artifacts and various build reports. Each build will create its own publish directory named by build id under the builds sub directory of storage directory.",
    "sections": [
      {
        "header": "ðï¸ SCM",
        "content": "SCM refers to Source Code Management system, Example of SCM systems are CVS , Subversion , Visual Sourcesafe , ClearCase , Perforce , and Starteam."
      },
      {
        "header": "ðï¸ Configuration",
        "content": "Configuration holds all the configuration information needed to generate builds. It includes information about what to build, how to build, and when to build, etc. Configurations are organized in a hierarchical structure. To refer to a configuration, the names of all its ancestor configurations should be chained together and concatenated with forward slash, for example: root/department1/project1/nightly. This is called configuration path. Child configurations can inherit build settings from its parent, and they can selectively override some of the parent settings. This behavior is referred as inherit and override rule, which simplifies the build management of multiple projects."
      },
      {
        "header": "ðï¸ Configuration Hierarchy",
        "content": "For a particular configuration, the configuration hierarchy refers to the configuration and all its parent configurations (direct and non-direct)."
      },
      {
        "header": "ðï¸ Configuration Subtree",
        "content": "For a particular configuration, the configuration subtree refers to current configuration and all its child configurations (direct and non-direct)."
      },
      {
        "header": "ðï¸ Build",
        "content": "Build is generated by running a configuration. When a particular configuration is triggered (either by user or by the scheduling system), the build condition of the configuration is evaluated. If the result of the evaluation is true, the configuration will be run to generate a new build."
      },
      {
        "header": "ðï¸ Build Pipeline",
        "content": "Build pipeline is a set of builds connected with promotions, visualizing different stages in a build or deployment process with commit information displayed on each stage. Defined promotion actions can be taken directly on the pipeline to push commits going through different stages."
      },
      {
        "header": "ðï¸ Repository",
        "content": "Repository is the place, where the files used to generate builds are stored. It normally refers to various SCM systems which holds source files to generate the build. It is used by QuickBuild to checkout/update files from various SCM as part of the build process. Repository definition follows the inherit and override rule: repositories defined in descendant configurations with the same name will override those defined in ancestor configuration."
      },
      {
        "header": "ðï¸ QuickBuild Repository",
        "content": "QuickBuild repository is a special repository which holds published artifacts of a build. By checking out from this repository, artifacts of upstream builds (normally library projects) can be retrieved and used by downstream builds. This is how dependency handled in QuickBuild: the downstream builds depends on upstream builds and it uses QuickBuild repository to resolve the dependency."
      },
      {
        "header": "ðï¸ Step",
        "content": "QuickBuild uses steps to control how a build should be performed. Multiple steps can be chained sequentially or in parallel to define the build process of a configuration, and they can be configured to run on different build nodes (see the Build Node definition below) to perform remote builds. Step definition follows the inherit and override rule: steps defined in descendant configurations with the same name will override those defined in ancestor configuration."
      },
      {
        "header": "ðï¸ Composite Step",
        "content": "Composite step is a special step which may be used to execute other steps sequentially or in parallel. It can recursively contain other composite steps which can be overridden in descendant configurations."
      },
      {
        "header": "ðï¸ Master Step",
        "content": "Master step acts as the entry point for build execution and it is always named master . When a build is started, it looks for master step and executes it. The master step is normally defined as a composite step to exuecute other steps."
      },
      {
        "header": "ðï¸ Step Path",
        "content": "Step path can be used to reference an executed step. Since QuickBuild 3.0, the same step can be reused in a single build, therefore it is not sufficient to reference an executed step simply with a step name. Path of a particular step instance can be constructed by concatenating names of all its container steps with character \"\\>\", from outer-most to inner-most, with the last element being name of the step itself. Below screen explains how to construct step path of various steps:"
      },
      {
        "header": "ðï¸ Build Grid",
        "content": "QuickBuild 2.0 introduces the concept of a build grid to serve purposes including but not limited to:"
      },
      {
        "header": "ðï¸ Build Server",
        "content": "Build server represents the QuickBuild instance configured to run as a server. It is responsible for overall central management of build tasks, and it distributes steps to the connected build agents based on defined rules."
      },
      {
        "header": "ðï¸ Build Agent",
        "content": "Build agents connect to build server to form a build grid. Since a grid node (server node and agent node) can only run one build at a time, multiple build agents means the ability to run multiple builds concurrently, which is important to a busy build system. It also make multi-platform build/test possible as a build can distribute different steps to different agents for execution. Build agent can be upgraded automatically when the build server upgrades to a new version."
      },
      {
        "header": "ðï¸ User Agent",
        "content": "User agent is installed on user's desktop and is mainly used for the purpose of Proof Build. It responsible for collecting uncommitted changes from user's desktop and send to build grid for verification. It can be upgraded automatically when server upgrades to a new version."
      },
      {
        "header": "ðï¸ Grid Node",
        "content": "Grid node represents a member of the build grid, it is either a build server, a build agent or a user agent. It is identified by the node address in the form of \\:\\ , where \\ represents the host name of the machine running the build node instance, and \\ represents the port number the build node instance uses."
      },
      {
        "header": "ðï¸ Resource",
        "content": "Resource means any physical or virtual component of limited availability within the grid, and is provided by grid nodes. A build step can declare to require certain resources to run. If some nodes are found with desired resources, the step will run on the fastest node; otherwise, the step will wait until a node with free resource is available. This way, the resource contention problem between builds and steps can be solved efficiently."
      },
      {
        "header": "ðï¸ Cloud Profile",
        "content": "Cloud profile exists to support launch build agent on demand in cloud environment. It defines how to launch build agents as well as describing characteristics of the build agents. Build agents launched by the same cloud profile will have same characteristics. Often you need to define multiple cloud profiles to satisfy different build requirements."
      },
      {
        "header": "ðï¸ Proof Build",
        "content": "QuickBuild 2.0 introduces concept of proof build to build and test your uncommitted changes at server side. With proof build, the risk of polluting SCM with bad code will be reduced to minimum as developer can submit a proof build and only commit their changes if the proof build is successful."
      },
      {
        "header": "ðï¸ Build Promotion",
        "content": "Build promotion is a process of generating new build based on information or artifacts of another build. It is used by QuickBuild to implement build life cycle management. For example, a gold QA build can be promoted as a release build. Arbitrary custom actions can be configured for the promotion process so that you can deploy the build to test servers, create tags on SCMs for release builds, or send notifications to interesting parts."
      },
      {
        "header": "ðï¸ Local Change",
        "content": "Local change refers to uncommitted changes collected from project work area at user's desktop when running a proof build. It is called local from user's perspective, as they've not submitted to SCM. For distributed version control systems, local change refers to local commits which will be pushed to a central repository."
      },
      {
        "header": "ðï¸ Configuration Workspace",
        "content": "Configuration workspace is the place to build your projects. It is used to hold files used during a build such as source files checked out from SCM, intermediate files generated during the build etc. In a grid environment, each node has a separate workspace for each configuration. By default, workspace for a particular configuration on a particular node points to the directory named by configuration path under QuickBuild's installation directory on that node."
      },
      {
        "header": "ðï¸ Storage Directory",
        "content": "Storage directory is a place on build server or agent to store below contents:"
      },
      {
        "header": "ðï¸ Configuration Publish Directory",
        "content": "Configuration publish directory is a place on build server to hold published materials of the configuration such as various statistics reports. Each configuration will create its own publish directory named by configuration id under the configurations sub directory of storage directory."
      },
      {
        "header": "ðï¸ Build Publish Directory",
        "content": "Build publish directory is a place on build server to hold published materials of the build such as build artifacts and various build reports. Each build will create its own publish directory named by build id under the builds sub directory of storage directory."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/SCM",
      "https://wiki.pmease.com/display/QB14/Configuration",
      "https://wiki.pmease.com/display/QB14/Configuration+Hierarchy",
      "https://wiki.pmease.com/display/QB14/Configuration+Subtree",
      "https://wiki.pmease.com/display/QB14/Build",
      "https://wiki.pmease.com/display/QB14/Build+Pipeline",
      "https://wiki.pmease.com/display/QB14/Repository",
      "https://wiki.pmease.com/display/QB14/QuickBuild+Repository",
      "https://wiki.pmease.com/display/QB14/Step",
      "https://wiki.pmease.com/display/QB14/Composite+Step",
      "https://wiki.pmease.com/display/QB14/Master+Step",
      "https://wiki.pmease.com/display/QB14/Step+Path",
      "https://wiki.pmease.com/display/QB14/Build+Grid",
      "https://wiki.pmease.com/display/QB14/Build+Server",
      "https://wiki.pmease.com/display/QB14/Build+Agent",
      "https://wiki.pmease.com/display/QB14/User+Agent",
      "https://wiki.pmease.com/display/QB14/Grid+Node",
      "https://wiki.pmease.com/display/QB14/Resource",
      "https://wiki.pmease.com/display/QB14/Cloud+Profile",
      "https://wiki.pmease.com/display/QB14/Proof+Build",
      "https://wiki.pmease.com/display/QB14/Build+Promotion",
      "https://wiki.pmease.com/display/QB14/Local+Change",
      "https://wiki.pmease.com/display/QB14/Configuration+Workspace",
      "https://wiki.pmease.com/display/QB14/Storage+Directory",
      "https://wiki.pmease.com/display/QB14/Configuration+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/Build+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/category/Installation+Guide",
      "https://wiki.pmease.com/display/QB14/category/Upgrade+Guide",
      "https://wiki.pmease.com/display/QB14/category/User's+Guide",
      "https://wiki.pmease.com/display/QB14/category/Administrator's+Guide",
      "https://wiki.pmease.com/display/QB14/category/Developer's+Guide",
      "https://wiki.pmease.com/display/QB14/category/Build+Setup+Tutorials",
      "https://wiki.pmease.com/display/QB14/category/References",
      "https://wiki.pmease.com/display/QB14/SCM",
      "https://wiki.pmease.com/display/QB14/Configuration",
      "https://wiki.pmease.com/display/QB14/Configuration+Hierarchy",
      "https://wiki.pmease.com/display/QB14/Configuration+Subtree",
      "https://wiki.pmease.com/display/QB14/Build",
      "https://wiki.pmease.com/display/QB14/Build+Pipeline",
      "https://wiki.pmease.com/display/QB14/Repository",
      "https://wiki.pmease.com/display/QB14/QuickBuild+Repository",
      "https://wiki.pmease.com/display/QB14/Step",
      "https://wiki.pmease.com/display/QB14/Composite+Step",
      "https://wiki.pmease.com/display/QB14/Master+Step",
      "https://wiki.pmease.com/display/QB14/Step+Path",
      "https://wiki.pmease.com/display/QB14/Build+Grid",
      "https://wiki.pmease.com/display/QB14/Build+Server",
      "https://wiki.pmease.com/display/QB14/Build+Agent",
      "https://wiki.pmease.com/display/QB14/User+Agent",
      "https://wiki.pmease.com/display/QB14/Grid+Node",
      "https://wiki.pmease.com/display/QB14/Resource",
      "https://wiki.pmease.com/display/QB14/Cloud+Profile",
      "https://wiki.pmease.com/display/QB14/Proof+Build",
      "https://wiki.pmease.com/display/QB14/Build+Promotion",
      "https://wiki.pmease.com/display/QB14/Local+Change",
      "https://wiki.pmease.com/display/QB14/Configuration+Workspace",
      "https://wiki.pmease.com/display/QB14/Storage+Directory",
      "https://wiki.pmease.com/display/QB14/Configuration+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/Build+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/SCM"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/category/Installation+Guide",
    "title": "Installation Guide",
    "breadcrumb": [
      ""
    ],
    "full_text": "ðï¸\nServer Installation Guide\nSupported operating systems\nðï¸\nBuild Agent Installation Guide\nSupported operating systems\nðï¸\nUser Agent Installation Guide\nSupported operating systems\nðï¸\nInstall As System Service\nThis document explains how to configure QuickBuild programs (server, build agent, and user agent) to run as system service.",
    "sections": [
      {
        "header": "ðï¸ Server Installation Guide",
        "content": "Supported operating systems"
      },
      {
        "header": "ðï¸ Build Agent Installation Guide",
        "content": "Supported operating systems"
      },
      {
        "header": "ðï¸ User Agent Installation Guide",
        "content": "Supported operating systems"
      },
      {
        "header": "ðï¸ Install As System Service",
        "content": "This document explains how to configure QuickBuild programs (server, build agent, and user agent) to run as system service."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Server+Installation+Guide",
      "https://wiki.pmease.com/display/QB14/Build+Agent+Installation+Guide",
      "https://wiki.pmease.com/display/QB14/User+Agent+Installation+Guide",
      "https://wiki.pmease.com/display/QB14/Install+As+System+Service",
      "https://wiki.pmease.com/display/QB14/category/Upgrade+Guide",
      "https://wiki.pmease.com/display/QB14/category/User's+Guide",
      "https://wiki.pmease.com/display/QB14/category/Administrator's+Guide",
      "https://wiki.pmease.com/display/QB14/category/Developer's+Guide",
      "https://wiki.pmease.com/display/QB14/category/Build+Setup+Tutorials",
      "https://wiki.pmease.com/display/QB14/category/References",
      "https://wiki.pmease.com/display/QB14/Server+Installation+Guide",
      "https://wiki.pmease.com/display/QB14/Build+Agent+Installation+Guide",
      "https://wiki.pmease.com/display/QB14/User+Agent+Installation+Guide",
      "https://wiki.pmease.com/display/QB14/Install+As+System+Service",
      "https://wiki.pmease.com/display/QB14/Build+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/Server+Installation+Guide"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/category/Upgrade+Guide",
    "title": "Upgrade Guide",
    "breadcrumb": [
      ""
    ],
    "full_text": "ðï¸\nUpgrade to 14.0.x\nQB9 or higher requires Java 1.8 or higher both for server and agent\nðï¸\nUpgrade to 13.0.x\nQB9 or higher requires Java 1.8 or higher both for server and agent\nðï¸\nUpgrade to 12.0.x\nQB9 or higher requires Java 1.8 or higher both for server and agent\nðï¸\nUpgrade to 11.0.x\nQB9 or higher requires Java 1.8 or higher both for server and agent\nðï¸\nUpgrade to 10.0.x\nQB9 or higher requires Java 1.8 or higher both for server and agent\nðï¸\nUpgrade to 9.0.x\n9.0.x now requires Java 1.8 or higher both for server and agent\nðï¸\nUpgrade to 8.0.x\nUpgrade procedures\nðï¸\nUpgrade to 7.0.x\nUpgrade procedures\nðï¸\nUpgrade to 6.1.x\nUpgrade Procedures\nðï¸\nUpgrade to 6.0.x\nUpgrade Procedures\nðï¸\nUpgrade to 5.1.x\nUpgrade Procedures\nðï¸\nUpgrade to 5.0.x\nUpgrade Procedures\nðï¸\nUpgrade to 4.0.x\nUpgrade Procedures\nðï¸\nUpgrade to 3.1.x\nUpgrade procedures\nðï¸\nUpgrade to 3.0.x\nUpgrade procedures\nðï¸\nUpgrade to 2.1.x\nUpgrade procedures\nðï¸\nUpgrade to 2.0.x\nUpgrade procedures\nðï¸\nProcedures\n9 items",
    "sections": [
      {
        "header": "ðï¸ Upgrade to 14.0.x",
        "content": "QB9 or higher requires Java 1.8 or higher both for server and agent"
      },
      {
        "header": "ðï¸ Upgrade to 13.0.x",
        "content": "QB9 or higher requires Java 1.8 or higher both for server and agent"
      },
      {
        "header": "ðï¸ Upgrade to 12.0.x",
        "content": "QB9 or higher requires Java 1.8 or higher both for server and agent"
      },
      {
        "header": "ðï¸ Upgrade to 11.0.x",
        "content": "QB9 or higher requires Java 1.8 or higher both for server and agent"
      },
      {
        "header": "ðï¸ Upgrade to 10.0.x",
        "content": "QB9 or higher requires Java 1.8 or higher both for server and agent"
      },
      {
        "header": "ðï¸ Upgrade to 9.0.x",
        "content": "9.0.x now requires Java 1.8 or higher both for server and agent"
      },
      {
        "header": "ðï¸ Upgrade to 8.0.x",
        "content": "Upgrade procedures"
      },
      {
        "header": "ðï¸ Upgrade to 7.0.x",
        "content": "Upgrade procedures"
      },
      {
        "header": "ðï¸ Upgrade to 6.1.x",
        "content": "Upgrade Procedures"
      },
      {
        "header": "ðï¸ Upgrade to 6.0.x",
        "content": "Upgrade Procedures"
      },
      {
        "header": "ðï¸ Upgrade to 5.1.x",
        "content": "Upgrade Procedures"
      },
      {
        "header": "ðï¸ Upgrade to 5.0.x",
        "content": "Upgrade Procedures"
      },
      {
        "header": "ðï¸ Upgrade to 4.0.x",
        "content": "Upgrade Procedures"
      },
      {
        "header": "ðï¸ Upgrade to 3.1.x",
        "content": "Upgrade procedures"
      },
      {
        "header": "ðï¸ Upgrade to 3.0.x",
        "content": "Upgrade procedures"
      },
      {
        "header": "ðï¸ Upgrade to 2.1.x",
        "content": "Upgrade procedures"
      },
      {
        "header": "ðï¸ Upgrade to 2.0.x",
        "content": "Upgrade procedures"
      },
      {
        "header": "ðï¸ Procedures",
        "content": "9 items"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Upgrade+to+14.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+13.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+12.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+11.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+10.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+9.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+8.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+7.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+6.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+6.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+5.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+5.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+4.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+3.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+3.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+2.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+2.0.x",
      "https://wiki.pmease.com/display/QB14/category/Procedures",
      "https://wiki.pmease.com/display/QB14/category/User's+Guide",
      "https://wiki.pmease.com/display/QB14/category/Administrator's+Guide",
      "https://wiki.pmease.com/display/QB14/category/Developer's+Guide",
      "https://wiki.pmease.com/display/QB14/category/Build+Setup+Tutorials",
      "https://wiki.pmease.com/display/QB14/category/References",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+14.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+13.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+12.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+11.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+10.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+9.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+8.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+7.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+6.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+6.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+5.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+5.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+4.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+3.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+3.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+2.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+2.0.x",
      "https://wiki.pmease.com/display/QB14/category/Procedures",
      "https://wiki.pmease.com/display/QB14/Install+As+System+Service",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+14.0.x"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/category/User's+Guide",
    "title": "User's Guide",
    "breadcrumb": [
      ""
    ],
    "full_text": "ðï¸\nBadge for build status\nQuickBuild can generate a badge image for build status, report stats, so you can add the badge image to markdown, or anywhere you want.\nðï¸\nWorking with Dashboard\nDashboard can be used to access interesting information in system quickly. If no dashboard is defined, QuickBuild will display a default dashboard displaying the configuration tree. The default dashboard will saved as your own dashboard once it is edited (change layout, edit gadget, change name, etc).\nðï¸\nWorking with Configurations\n10 items\nðï¸\nWorking with Builds\n11 items\nðï¸\nWorking with Changes\nWhen a build takes place, SCM changes will be calculated against previous build. Changes will not be calculated for the first build in a configuration since there is no base build to calculate changes against. If you've changed name of the repository, changes of that repository will not be calculated for the first build after the name change, since QuickBuild uses repository name as the key to look up repository revision in previous build.\nðï¸\nWorking with Build Pipeline\nBuild pipeline in QuickBuild is series of builds connected via build promotions, with commits information attached. It pushes commits going through different phases of the build workflow, either automaticly or manually. The build pipeline page can be accessed from the build pipeline link in configuration tab, and can be added as a gadget to user dashboards. A typical pipeline is like below:\nðï¸\nWorking with Issues\nIf you defined issue tracker in the configuration, QuickBuild can generate the issues report based on your commit comments or update issue step. Below is a sample of the issue report displayed in the build page:\nðï¸\nWorking with Artifacts\nAccess build artifacts\nðï¸\nWorking with Reports\n3 items\nðï¸\nWorking with Statistics\nAll statistics data of a configuration can be viewed in Statistics Tab.\nðï¸\nManage User Profile\nFor logged in user, user profile can be managed through My tab like below:\nðï¸\nManage Build Subscriptions\nUser can subscribe to get build notifications for one or more configurations through the My tab like below:\nðï¸\nManage User Agent\nInstall user agent\nðï¸\nWorking with Proof Build\nIntroduction\nðï¸\nWorking With Addons\n1 item\nðï¸\nWorking with Grid Measurements\nFrom QuickBuild v5, grid measurements are collected every 5 minutes from all action nodes. All measurement are separated into below group:\nðï¸\nWorking with Alerts\nFrom QuickBuild v5, all alerts reported by the QuickBuild system can be viewed in Grid tab like below and all alerts can be subscribed by email, tray monitor, Jabber and MSN messenger.",
    "sections": [
      {
        "header": "ðï¸ Badge for build status",
        "content": "QuickBuild can generate a badge image for build status, report stats, so you can add the badge image to markdown, or anywhere you want."
      },
      {
        "header": "ðï¸ Working with Dashboard",
        "content": "Dashboard can be used to access interesting information in system quickly. If no dashboard is defined, QuickBuild will display a default dashboard displaying the configuration tree. The default dashboard will saved as your own dashboard once it is edited (change layout, edit gadget, change name, etc)."
      },
      {
        "header": "ðï¸ Working with Configurations",
        "content": "10 items"
      },
      {
        "header": "ðï¸ Working with Builds",
        "content": "11 items"
      },
      {
        "header": "ðï¸ Working with Changes",
        "content": "When a build takes place, SCM changes will be calculated against previous build. Changes will not be calculated for the first build in a configuration since there is no base build to calculate changes against. If you've changed name of the repository, changes of that repository will not be calculated for the first build after the name change, since QuickBuild uses repository name as the key to look up repository revision in previous build."
      },
      {
        "header": "ðï¸ Working with Build Pipeline",
        "content": "Build pipeline in QuickBuild is series of builds connected via build promotions, with commits information attached. It pushes commits going through different phases of the build workflow, either automaticly or manually. The build pipeline page can be accessed from the build pipeline link in configuration tab, and can be added as a gadget to user dashboards. A typical pipeline is like below:"
      },
      {
        "header": "ðï¸ Working with Issues",
        "content": "If you defined issue tracker in the configuration, QuickBuild can generate the issues report based on your commit comments or update issue step. Below is a sample of the issue report displayed in the build page:"
      },
      {
        "header": "ðï¸ Working with Artifacts",
        "content": "Access build artifacts"
      },
      {
        "header": "ðï¸ Working with Reports",
        "content": "3 items"
      },
      {
        "header": "ðï¸ Working with Statistics",
        "content": "All statistics data of a configuration can be viewed in Statistics Tab."
      },
      {
        "header": "ðï¸ Manage User Profile",
        "content": "For logged in user, user profile can be managed through My tab like below:"
      },
      {
        "header": "ðï¸ Manage Build Subscriptions",
        "content": "User can subscribe to get build notifications for one or more configurations through the My tab like below:"
      },
      {
        "header": "ðï¸ Manage User Agent",
        "content": "Install user agent"
      },
      {
        "header": "ðï¸ Working with Proof Build",
        "content": "Introduction"
      },
      {
        "header": "ðï¸ Working With Addons",
        "content": "1 item"
      },
      {
        "header": "ðï¸ Working with Grid Measurements",
        "content": "From QuickBuild v5, grid measurements are collected every 5 minutes from all action nodes. All measurement are separated into below group:"
      },
      {
        "header": "ðï¸ Working with Alerts",
        "content": "From QuickBuild v5, all alerts reported by the QuickBuild system can be viewed in Grid tab like below and all alerts can be subscribed by email, tray monitor, Jabber and MSN messenger."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Badge+for+build+status",
      "https://wiki.pmease.com/display/QB14/Working+with+Dashboard",
      "https://wiki.pmease.com/display/QB14/category/Working+with+Configurations",
      "https://wiki.pmease.com/display/QB14/category/Working+with+Builds",
      "https://wiki.pmease.com/display/QB14/Working+with+Changes",
      "https://wiki.pmease.com/display/QB14/Working+with+Build+Pipeline",
      "https://wiki.pmease.com/display/QB14/Working+with+Issues",
      "https://wiki.pmease.com/display/QB14/Working+with+Artifacts",
      "https://wiki.pmease.com/display/QB14/category/Working+with+Reports",
      "https://wiki.pmease.com/display/QB14/Working+with+Statistics",
      "https://wiki.pmease.com/display/QB14/Manage+User+Profile",
      "https://wiki.pmease.com/display/QB14/Manage+Build+Subscriptions",
      "https://wiki.pmease.com/display/QB14/Manage+User+Agent",
      "https://wiki.pmease.com/display/QB14/Working+with+Proof+Build",
      "https://wiki.pmease.com/display/QB14/category/Working+With+Addons",
      "https://wiki.pmease.com/display/QB14/Working+with+Grid+Measurements",
      "https://wiki.pmease.com/display/QB14/Working+with+Alerts",
      "https://wiki.pmease.com/display/QB14/category/Administrator's+Guide",
      "https://wiki.pmease.com/display/QB14/category/Developer's+Guide",
      "https://wiki.pmease.com/display/QB14/category/Build+Setup+Tutorials",
      "https://wiki.pmease.com/display/QB14/category/References",
      "https://wiki.pmease.com/display/QB14/Badge+for+build+status",
      "https://wiki.pmease.com/display/QB14/Working+with+Dashboard",
      "https://wiki.pmease.com/display/QB14/category/Working+with+Configurations",
      "https://wiki.pmease.com/display/QB14/category/Working+with+Builds",
      "https://wiki.pmease.com/display/QB14/Working+with+Changes",
      "https://wiki.pmease.com/display/QB14/Working+with+Build+Pipeline",
      "https://wiki.pmease.com/display/QB14/Working+with+Issues",
      "https://wiki.pmease.com/display/QB14/Working+with+Artifacts",
      "https://wiki.pmease.com/display/QB14/category/Working+with+Reports",
      "https://wiki.pmease.com/display/QB14/Working+with+Statistics",
      "https://wiki.pmease.com/display/QB14/Manage+User+Profile",
      "https://wiki.pmease.com/display/QB14/Manage+Build+Subscriptions",
      "https://wiki.pmease.com/display/QB14/Manage+User+Agent",
      "https://wiki.pmease.com/display/QB14/Working+with+Proof+Build",
      "https://wiki.pmease.com/display/QB14/category/Working+With+Addons",
      "https://wiki.pmease.com/display/QB14/Working+with+Grid+Measurements",
      "https://wiki.pmease.com/display/QB14/Working+with+Alerts",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+And+Agent",
      "https://wiki.pmease.com/display/QB14/Badge+for+build+status"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/category/Administrator's+Guide",
    "title": "Administrator's Guide",
    "breadcrumb": [
      ""
    ],
    "full_text": "ðï¸\nCSS Customization\nSince QB 13.0, dark theme is introduced. And now, it is easy to do some customization for both light mode and dark mode.\nðï¸\nWorking with Steps\nStep is the key concept in QuickBuild. A build process is actually the execution of sequence of steps. Steps can be defined in step setting page of a configuration like below:\nðï¸\nWorking with SCM systems\n20 items\nðï¸\nWorking with Build Tools\n9 items\nðï¸\nWorking with Issue Tracker\n10 items\nðï¸\nArtifact Management\n4 items\nðï¸\nPublish Build Reports\n24 items\nðï¸\nPublish HTML Reports\nQuickBuild is able to publish and display some commonly used build reports, such as JUnit, Checkstyle, NUnit, EMMA, etc. For reports that QuickBuild does not have native support, if it generates reports in html format, you can instruct QuickBuild to create a report tab in build detail page displaying this html report. This is done by adding the step Publish -\\> Html Report from the step menu. We will demonstrate its usage through an example:\nðï¸\nSet Up Build Dependency\nIt is quite common that a product is comprised of different components, and a component is used by different products. We suggest to set up builds for these components and products separately in this case, and utilize QuickBuild's dependency mechanism to use result of component builds in product builds.\nðï¸\nSet Up Build Promotion\nDefine promomotions\nðï¸\nBuild Notifications\nUsers can subscribe to configurations to get build notifications if they are willing to do so. On the other hand, you can set up the configuration to forcibly send build notifications to users under certain conditions even if they do not choose to subscribe. This can be done by editing notification setting of corresponding configuration like below:\nðï¸\nCustomize Notification Templates\nBuild notification templates can be customized following below steps:\nðï¸\nSet Up Proof Build\nProof build support is enabled per SCM. Refer to below links on how to set up proof build for different SCMs:\nðï¸\nWorking with Resources\nWhat is Resource\nðï¸\nBuild Concurrency and Deadlock\nControl Build Concurrency with Resources\nðï¸\nWorking with Build Grid\nGrid overview\nðï¸\nWorking with Cloud Profiles\n4 items\nðï¸\nDiagnose Build Issues\nInvestigate build failure\nðï¸\nRunning Behind Apache\nIntroduction\nðï¸\nData Management\nData backup and restore\nðï¸\nLicense Management\nðï¸\nSecurity Management\n9 items\nðï¸\nAuditing User Activities\nQuickBuild audits all user activities in the system such as configuration modification, build triggering/cancelling. Authorized users may open the audit log to find out what has been changed in the system during a certain time period, and can compare the changes if necessary as demonstrated by below screenshot:\nðï¸\nPlugin Management\nQuickBuild is designed around OSGi, a plugin framework. This enables QuickBuild to be extended easily by just installing new plugins. In fact many of its features are provided by plugins out of the box, such as steps, repositories, reports, etc. All QuickBuild plugins are kept in the plugins folder under QuickBuild's installation directory, with each file representing a single plugin.\nðï¸\nConfiguring System Alerts\nAlert Definition\nðï¸\nConfiguring Disk Monitoring\nBy default, QuickBuild will only monitor the disk where node storage directory is on. You may want to specify the disks yourself, so you need:\nðï¸\nWebhooks\nSince 8.0.12",
    "sections": [
      {
        "header": "ðï¸ CSS Customization",
        "content": "Since QB 13.0, dark theme is introduced. And now, it is easy to do some customization for both light mode and dark mode."
      },
      {
        "header": "ðï¸ Working with Steps",
        "content": "Step is the key concept in QuickBuild. A build process is actually the execution of sequence of steps. Steps can be defined in step setting page of a configuration like below:"
      },
      {
        "header": "ðï¸ Working with SCM systems",
        "content": "20 items"
      },
      {
        "header": "ðï¸ Working with Build Tools",
        "content": "9 items"
      },
      {
        "header": "ðï¸ Working with Issue Tracker",
        "content": "10 items"
      },
      {
        "header": "ðï¸ Artifact Management",
        "content": "4 items"
      },
      {
        "header": "ðï¸ Publish Build Reports",
        "content": "24 items"
      },
      {
        "header": "ðï¸ Publish HTML Reports",
        "content": "QuickBuild is able to publish and display some commonly used build reports, such as JUnit, Checkstyle, NUnit, EMMA, etc. For reports that QuickBuild does not have native support, if it generates reports in html format, you can instruct QuickBuild to create a report tab in build detail page displaying this html report. This is done by adding the step Publish -\\> Html Report from the step menu. We will demonstrate its usage through an example:"
      },
      {
        "header": "ðï¸ Set Up Build Dependency",
        "content": "It is quite common that a product is comprised of different components, and a component is used by different products. We suggest to set up builds for these components and products separately in this case, and utilize QuickBuild's dependency mechanism to use result of component builds in product builds."
      },
      {
        "header": "ðï¸ Set Up Build Promotion",
        "content": "Define promomotions"
      },
      {
        "header": "ðï¸ Build Notifications",
        "content": "Users can subscribe to configurations to get build notifications if they are willing to do so. On the other hand, you can set up the configuration to forcibly send build notifications to users under certain conditions even if they do not choose to subscribe. This can be done by editing notification setting of corresponding configuration like below:"
      },
      {
        "header": "ðï¸ Customize Notification Templates",
        "content": "Build notification templates can be customized following below steps:"
      },
      {
        "header": "ðï¸ Set Up Proof Build",
        "content": "Proof build support is enabled per SCM. Refer to below links on how to set up proof build for different SCMs:"
      },
      {
        "header": "ðï¸ Working with Resources",
        "content": "What is Resource"
      },
      {
        "header": "ðï¸ Build Concurrency and Deadlock",
        "content": "Control Build Concurrency with Resources"
      },
      {
        "header": "ðï¸ Working with Build Grid",
        "content": "Grid overview"
      },
      {
        "header": "ðï¸ Working with Cloud Profiles",
        "content": "4 items"
      },
      {
        "header": "ðï¸ Diagnose Build Issues",
        "content": "Investigate build failure"
      },
      {
        "header": "ðï¸ Running Behind Apache",
        "content": "Introduction"
      },
      {
        "header": "ðï¸ Data Management",
        "content": "Data backup and restore"
      },
      {
        "header": "ðï¸ License Management",
        "content": ""
      },
      {
        "header": "ðï¸ Security Management",
        "content": "9 items"
      },
      {
        "header": "ðï¸ Auditing User Activities",
        "content": "QuickBuild audits all user activities in the system such as configuration modification, build triggering/cancelling. Authorized users may open the audit log to find out what has been changed in the system during a certain time period, and can compare the changes if necessary as demonstrated by below screenshot:"
      },
      {
        "header": "ðï¸ Plugin Management",
        "content": "QuickBuild is designed around OSGi, a plugin framework. This enables QuickBuild to be extended easily by just installing new plugins. In fact many of its features are provided by plugins out of the box, such as steps, repositories, reports, etc. All QuickBuild plugins are kept in the plugins folder under QuickBuild's installation directory, with each file representing a single plugin."
      },
      {
        "header": "ðï¸ Configuring System Alerts",
        "content": "Alert Definition"
      },
      {
        "header": "ðï¸ Configuring Disk Monitoring",
        "content": "By default, QuickBuild will only monitor the disk where node storage directory is on. You may want to specify the disks yourself, so you need:"
      },
      {
        "header": "ðï¸ Webhooks",
        "content": "Since 8.0.12"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/CSS+Customization",
      "https://wiki.pmease.com/display/QB14/Working+with+Steps",
      "https://wiki.pmease.com/display/QB14/category/Working+with+SCM+systems",
      "https://wiki.pmease.com/display/QB14/category/Working+with+Build+Tools",
      "https://wiki.pmease.com/display/QB14/category/Working+with+Issue+Tracker",
      "https://wiki.pmease.com/display/QB14/category/Artifact+Management",
      "https://wiki.pmease.com/display/QB14/category/Publish+Build+Reports",
      "https://wiki.pmease.com/display/QB14/Publish+HTML+Reports",
      "https://wiki.pmease.com/display/QB14/Set+Up+Build+Dependency",
      "https://wiki.pmease.com/display/QB14/Set+Up+Build+Promotion",
      "https://wiki.pmease.com/display/QB14/Build+Notifications",
      "https://wiki.pmease.com/display/QB14/Customize+Notification+Templates",
      "https://wiki.pmease.com/display/QB14/Set+Up+Proof+Build",
      "https://wiki.pmease.com/display/QB14/Working+with+Resources",
      "https://wiki.pmease.com/display/QB14/Build+Concurrency+and+Deadlock",
      "https://wiki.pmease.com/display/QB14/Working+with+Build+Grid",
      "https://wiki.pmease.com/display/QB14/category/Working+with+Cloud+Profiles",
      "https://wiki.pmease.com/display/QB14/Diagnose+Build+Issues",
      "https://wiki.pmease.com/display/QB14/Running+Behind+Apache",
      "https://wiki.pmease.com/display/QB14/Data+Management",
      "https://wiki.pmease.com/display/QB14/License+Management",
      "https://wiki.pmease.com/display/QB14/category/Security+Management",
      "https://wiki.pmease.com/display/QB14/Auditing+User+Activities",
      "https://wiki.pmease.com/display/QB14/Plugin+Management",
      "https://wiki.pmease.com/display/QB14/Configuring+System+Alerts",
      "https://wiki.pmease.com/display/QB14/Configuring+Disk+Monitoring",
      "https://wiki.pmease.com/display/QB14/Webhooks",
      "https://wiki.pmease.com/display/QB14/category/Developer's+Guide",
      "https://wiki.pmease.com/display/QB14/category/Build+Setup+Tutorials",
      "https://wiki.pmease.com/display/QB14/category/References",
      "https://wiki.pmease.com/display/QB14/CSS+Customization",
      "https://wiki.pmease.com/display/QB14/Working+with+Steps",
      "https://wiki.pmease.com/display/QB14/category/Working+with+SCM+systems",
      "https://wiki.pmease.com/display/QB14/category/Working+with+Build+Tools",
      "https://wiki.pmease.com/display/QB14/category/Working+with+Issue+Tracker",
      "https://wiki.pmease.com/display/QB14/category/Artifact+Management",
      "https://wiki.pmease.com/display/QB14/category/Publish+Build+Reports",
      "https://wiki.pmease.com/display/QB14/Publish+HTML+Reports",
      "https://wiki.pmease.com/display/QB14/Set+Up+Build+Dependency",
      "https://wiki.pmease.com/display/QB14/Set+Up+Build+Promotion",
      "https://wiki.pmease.com/display/QB14/Build+Notifications",
      "https://wiki.pmease.com/display/QB14/Customize+Notification+Templates",
      "https://wiki.pmease.com/display/QB14/Set+Up+Proof+Build",
      "https://wiki.pmease.com/display/QB14/Working+with+Resources",
      "https://wiki.pmease.com/display/QB14/Build+Concurrency+and+Deadlock",
      "https://wiki.pmease.com/display/QB14/Working+with+Build+Grid",
      "https://wiki.pmease.com/display/QB14/category/Working+with+Cloud+Profiles",
      "https://wiki.pmease.com/display/QB14/Diagnose+Build+Issues",
      "https://wiki.pmease.com/display/QB14/Running+Behind+Apache",
      "https://wiki.pmease.com/display/QB14/Data+Management",
      "https://wiki.pmease.com/display/QB14/License+Management",
      "https://wiki.pmease.com/display/QB14/category/Security+Management",
      "https://wiki.pmease.com/display/QB14/Auditing+User+Activities",
      "https://wiki.pmease.com/display/QB14/Plugin+Management",
      "https://wiki.pmease.com/display/QB14/Configuring+System+Alerts",
      "https://wiki.pmease.com/display/QB14/Configuring+Disk+Monitoring",
      "https://wiki.pmease.com/display/QB14/Webhooks",
      "https://wiki.pmease.com/display/QB14/Working+with+Alerts",
      "https://wiki.pmease.com/display/QB14/CSS+Customization"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/category/Developer's+Guide",
    "title": "Developer's Guide",
    "breadcrumb": [
      ""
    ],
    "full_text": "ðï¸\nDevelop Plugins\n3 items\nðï¸\nRESTful API\n32 items\nðï¸\nRESTful API (JSON Edition)\nStarting from QuickBuild 10, A JSON based RESTful api is supported. It works exactly the same as the traditional XML based api, except that one has to specify http header Accept application/json when posting json content back to server.",
    "sections": [
      {
        "header": "ðï¸ Develop Plugins",
        "content": "3 items"
      },
      {
        "header": "ðï¸ RESTful API",
        "content": "32 items"
      },
      {
        "header": "ðï¸ RESTful API (JSON Edition)",
        "content": "Starting from QuickBuild 10, A JSON based RESTful api is supported. It works exactly the same as the traditional XML based api, except that one has to specify http header Accept application/json when posting json content back to server."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/category/Develop+Plugins",
      "https://wiki.pmease.com/display/QB14/category/RESTful+API",
      "https://wiki.pmease.com/display/QB14/RESTful+API++JSON+Edition+",
      "https://wiki.pmease.com/display/QB14/category/Build+Setup+Tutorials",
      "https://wiki.pmease.com/display/QB14/category/References",
      "https://wiki.pmease.com/display/QB14/category/Develop+Plugins",
      "https://wiki.pmease.com/display/QB14/category/RESTful+API",
      "https://wiki.pmease.com/display/QB14/RESTful+API++JSON+Edition+",
      "https://wiki.pmease.com/display/QB14/Webhooks",
      "https://wiki.pmease.com/display/QB14/category/Develop+Plugins"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/category/Build+Setup+Tutorials",
    "title": "Build Setup Tutorials",
    "breadcrumb": [
      ""
    ],
    "full_text": "ðï¸\nBuild Against Specific Gerrit Change\nSituation\nðï¸\nSet up Your First Build\nSituation\nðï¸\nControl Build Versions\n6 items\nðï¸\nBuild Against Specified Tag\nSituation\nðï¸\nRe-run Build Using Same SCM Revision\nSituation\nðï¸\nInherit and Override\n1 item\nðï¸\nChained Build Options\nSituation\nðï¸\nDistributed Builds\n4 items\nðï¸\nResource Management\n2 items\nðï¸\nBuild Dependencies\n4 items\nðï¸\nClean and Incremental Build\nSituation\nðï¸\nComplicated Build Options\nSituation\nðï¸\nComplicated Build Cleanup Strategy\nSituation\nðï¸\nPromote Builds\n2 items\nðï¸\nSet up Build Pipeline\nSituation\nðï¸\nLDAP Authentication\n2 items\nðï¸\nSingle Sign-On\n4 items\nðï¸\nTrigger Builds\nSituation\nðï¸\nPublish Reports\nIn Quickbuild (from Version 2.0), if we want to publish reports, we need add a publish step. Below gives an example for publishing JUnit reports, for other reports supported by Quickbuild, they are almost the same.\nðï¸\nJIRA Integration\nSituation\nðï¸\nReports Aggregation\nScenario\nðï¸\nLaunch Build Agent On Demand\n5 items",
    "sections": [
      {
        "header": "ðï¸ Build Against Specific Gerrit Change",
        "content": "Situation"
      },
      {
        "header": "ðï¸ Set up Your First Build",
        "content": "Situation"
      },
      {
        "header": "ðï¸ Control Build Versions",
        "content": "6 items"
      },
      {
        "header": "ðï¸ Build Against Specified Tag",
        "content": "Situation"
      },
      {
        "header": "ðï¸ Re-run Build Using Same SCM Revision",
        "content": "Situation"
      },
      {
        "header": "ðï¸ Inherit and Override",
        "content": "1 item"
      },
      {
        "header": "ðï¸ Chained Build Options",
        "content": "Situation"
      },
      {
        "header": "ðï¸ Distributed Builds",
        "content": "4 items"
      },
      {
        "header": "ðï¸ Resource Management",
        "content": "2 items"
      },
      {
        "header": "ðï¸ Build Dependencies",
        "content": "4 items"
      },
      {
        "header": "ðï¸ Clean and Incremental Build",
        "content": "Situation"
      },
      {
        "header": "ðï¸ Complicated Build Options",
        "content": "Situation"
      },
      {
        "header": "ðï¸ Complicated Build Cleanup Strategy",
        "content": "Situation"
      },
      {
        "header": "ðï¸ Promote Builds",
        "content": "2 items"
      },
      {
        "header": "ðï¸ Set up Build Pipeline",
        "content": "Situation"
      },
      {
        "header": "ðï¸ LDAP Authentication",
        "content": "2 items"
      },
      {
        "header": "ðï¸ Single Sign-On",
        "content": "4 items"
      },
      {
        "header": "ðï¸ Trigger Builds",
        "content": "Situation"
      },
      {
        "header": "ðï¸ Publish Reports",
        "content": "In Quickbuild (from Version 2.0), if we want to publish reports, we need add a publish step. Below gives an example for publishing JUnit reports, for other reports supported by Quickbuild, they are almost the same."
      },
      {
        "header": "ðï¸ JIRA Integration",
        "content": "Situation"
      },
      {
        "header": "ðï¸ Reports Aggregation",
        "content": "Scenario"
      },
      {
        "header": "ðï¸ Launch Build Agent On Demand",
        "content": "5 items"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Build+Against+Specific+Gerrit+Change",
      "https://wiki.pmease.com/display/QB14/Set+up+Your+First+Build",
      "https://wiki.pmease.com/display/QB14/category/Control+Build+Versions",
      "https://wiki.pmease.com/display/QB14/Build+Against+Specified+Tag",
      "https://wiki.pmease.com/display/QB14/Re-run+Build+Using+Same+SCM+Revision",
      "https://wiki.pmease.com/display/QB14/category/Inherit+and+Override",
      "https://wiki.pmease.com/display/QB14/Chained+Build+Options",
      "https://wiki.pmease.com/display/QB14/category/Distributed+Builds",
      "https://wiki.pmease.com/display/QB14/category/Resource+Management",
      "https://wiki.pmease.com/display/QB14/category/Build+Dependencies",
      "https://wiki.pmease.com/display/QB14/Clean+and+Incremental+Build",
      "https://wiki.pmease.com/display/QB14/Complicated+Build+Options",
      "https://wiki.pmease.com/display/QB14/Complicated+Build+Cleanup+Strategy",
      "https://wiki.pmease.com/display/QB14/category/Promote+Builds",
      "https://wiki.pmease.com/display/QB14/Set+up+Build+Pipeline",
      "https://wiki.pmease.com/display/QB14/category/LDAP+Authentication",
      "https://wiki.pmease.com/display/QB14/category/Single+Sign-On",
      "https://wiki.pmease.com/display/QB14/Trigger+Builds",
      "https://wiki.pmease.com/display/QB14/Publish+Reports",
      "https://wiki.pmease.com/display/QB14/JIRA+Integration",
      "https://wiki.pmease.com/display/QB14/Reports+Aggregation",
      "https://wiki.pmease.com/display/QB14/category/Launch+Build+Agent+On+Demand",
      "https://wiki.pmease.com/display/QB14/category/References",
      "https://wiki.pmease.com/display/QB14/Build+Against+Specific+Gerrit+Change",
      "https://wiki.pmease.com/display/QB14/Set+up+Your+First+Build",
      "https://wiki.pmease.com/display/QB14/category/Control+Build+Versions",
      "https://wiki.pmease.com/display/QB14/Build+Against+Specified+Tag",
      "https://wiki.pmease.com/display/QB14/Re-run+Build+Using+Same+SCM+Revision",
      "https://wiki.pmease.com/display/QB14/category/Inherit+and+Override",
      "https://wiki.pmease.com/display/QB14/Chained+Build+Options",
      "https://wiki.pmease.com/display/QB14/category/Distributed+Builds",
      "https://wiki.pmease.com/display/QB14/category/Resource+Management",
      "https://wiki.pmease.com/display/QB14/category/Build+Dependencies",
      "https://wiki.pmease.com/display/QB14/Clean+and+Incremental+Build",
      "https://wiki.pmease.com/display/QB14/Complicated+Build+Options",
      "https://wiki.pmease.com/display/QB14/Complicated+Build+Cleanup+Strategy",
      "https://wiki.pmease.com/display/QB14/category/Promote+Builds",
      "https://wiki.pmease.com/display/QB14/Set+up+Build+Pipeline",
      "https://wiki.pmease.com/display/QB14/category/LDAP+Authentication",
      "https://wiki.pmease.com/display/QB14/category/Single+Sign-On",
      "https://wiki.pmease.com/display/QB14/Trigger+Builds",
      "https://wiki.pmease.com/display/QB14/Publish+Reports",
      "https://wiki.pmease.com/display/QB14/JIRA+Integration",
      "https://wiki.pmease.com/display/QB14/Reports+Aggregation",
      "https://wiki.pmease.com/display/QB14/category/Launch+Build+Agent+On+Demand",
      "https://wiki.pmease.com/display/QB14/RESTful+API++JSON+Edition+",
      "https://wiki.pmease.com/display/QB14/Build+Against+Specific+Gerrit+Change"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/category/References",
    "title": "References",
    "breadcrumb": [
      ""
    ],
    "full_text": "ðï¸\nRepository Path\nRepository path is used to refer to file in SCM systems. Example repository urls for different SCM systems:\nðï¸\nFile Pattern Reference\nDefinition",
    "sections": [
      {
        "header": "ðï¸ Repository Path",
        "content": "Repository path is used to refer to file in SCM systems. Example repository urls for different SCM systems:"
      },
      {
        "header": "ðï¸ File Pattern Reference",
        "content": "Definition"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Repository+Path",
      "https://wiki.pmease.com/display/QB14/File+Pattern+Reference",
      "https://wiki.pmease.com/display/QB14/Repository+Path",
      "https://wiki.pmease.com/display/QB14/File+Pattern+Reference",
      "https://wiki.pmease.com/display/QB14/Kubernetes+Integration",
      "https://wiki.pmease.com/display/QB14/Repository+Path"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/SCM",
    "title": "SCM",
    "breadcrumb": [
      "",
      "Concepts"
    ],
    "full_text": "Concepts\nSCM\nVersion: QB14\nSCM\nSCM refers to\nSource Code Management\nsystem, Example of SCM systems are\nCVS\n,\nSubversion\n,\nVisual Sourcesafe\n,\nClearCase\n,\nPerforce\n, and\nStarteam\n.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "SCM",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Configuration",
      "https://wiki.pmease.com/display/QB14/Configuration+Hierarchy",
      "https://wiki.pmease.com/display/QB14/Configuration+Subtree",
      "https://wiki.pmease.com/display/QB14/Build",
      "https://wiki.pmease.com/display/QB14/Build+Pipeline",
      "https://wiki.pmease.com/display/QB14/Repository",
      "https://wiki.pmease.com/display/QB14/QuickBuild+Repository",
      "https://wiki.pmease.com/display/QB14/Step",
      "https://wiki.pmease.com/display/QB14/Composite+Step",
      "https://wiki.pmease.com/display/QB14/Master+Step",
      "https://wiki.pmease.com/display/QB14/Step+Path",
      "https://wiki.pmease.com/display/QB14/Build+Grid",
      "https://wiki.pmease.com/display/QB14/Build+Server",
      "https://wiki.pmease.com/display/QB14/Build+Agent",
      "https://wiki.pmease.com/display/QB14/User+Agent",
      "https://wiki.pmease.com/display/QB14/Grid+Node",
      "https://wiki.pmease.com/display/QB14/Resource",
      "https://wiki.pmease.com/display/QB14/Cloud+Profile",
      "https://wiki.pmease.com/display/QB14/Proof+Build",
      "https://wiki.pmease.com/display/QB14/Build+Promotion",
      "https://wiki.pmease.com/display/QB14/Local+Change",
      "https://wiki.pmease.com/display/QB14/Configuration+Workspace",
      "https://wiki.pmease.com/display/QB14/Storage+Directory",
      "https://wiki.pmease.com/display/QB14/Configuration+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/Build+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/Configuration"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Configuration",
    "title": "Configuration",
    "breadcrumb": [
      "",
      "Concepts"
    ],
    "full_text": "Concepts\nConfiguration\nVersion: QB14\nConfiguration\nConfiguration holds all the configuration information needed to generate builds. It includes information about what to build, how to build, and when to build, etc. Configurations are organized in a hierarchical structure. To refer to a configuration, the names of all its ancestor configurations should be chained together and concatenated with forward slash, for example:\nroot/department1/project1/nightly\n. This is called configuration path. Child configurations can inherit build settings from its parent, and they can selectively override some of the parent settings. This behavior is referred as inherit and override rule, which simplifies the build management of multiple projects.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Configuration",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Configuration+Hierarchy",
      "https://wiki.pmease.com/display/QB14/Configuration+Subtree",
      "https://wiki.pmease.com/display/QB14/Build",
      "https://wiki.pmease.com/display/QB14/Build+Pipeline",
      "https://wiki.pmease.com/display/QB14/Repository",
      "https://wiki.pmease.com/display/QB14/QuickBuild+Repository",
      "https://wiki.pmease.com/display/QB14/Step",
      "https://wiki.pmease.com/display/QB14/Composite+Step",
      "https://wiki.pmease.com/display/QB14/Master+Step",
      "https://wiki.pmease.com/display/QB14/Step+Path",
      "https://wiki.pmease.com/display/QB14/Build+Grid",
      "https://wiki.pmease.com/display/QB14/Build+Server",
      "https://wiki.pmease.com/display/QB14/Build+Agent",
      "https://wiki.pmease.com/display/QB14/User+Agent",
      "https://wiki.pmease.com/display/QB14/Grid+Node",
      "https://wiki.pmease.com/display/QB14/Resource",
      "https://wiki.pmease.com/display/QB14/Cloud+Profile",
      "https://wiki.pmease.com/display/QB14/Proof+Build",
      "https://wiki.pmease.com/display/QB14/Build+Promotion",
      "https://wiki.pmease.com/display/QB14/Local+Change",
      "https://wiki.pmease.com/display/QB14/Configuration+Workspace",
      "https://wiki.pmease.com/display/QB14/Storage+Directory",
      "https://wiki.pmease.com/display/QB14/Configuration+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/Build+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/Configuration+Hierarchy"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Configuration+Hierarchy",
    "title": "Configuration Hierarchy",
    "breadcrumb": [
      "",
      "Concepts"
    ],
    "full_text": "Concepts\nConfiguration Hierarchy\nVersion: QB14\nConfiguration Hierarchy\nFor a particular configuration, the configuration hierarchy refers to the configuration and all its parent configurations (direct and non-direct).\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Configuration Hierarchy",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Configuration+Subtree",
      "https://wiki.pmease.com/display/QB14/Build",
      "https://wiki.pmease.com/display/QB14/Build+Pipeline",
      "https://wiki.pmease.com/display/QB14/Repository",
      "https://wiki.pmease.com/display/QB14/QuickBuild+Repository",
      "https://wiki.pmease.com/display/QB14/Step",
      "https://wiki.pmease.com/display/QB14/Composite+Step",
      "https://wiki.pmease.com/display/QB14/Master+Step",
      "https://wiki.pmease.com/display/QB14/Step+Path",
      "https://wiki.pmease.com/display/QB14/Build+Grid",
      "https://wiki.pmease.com/display/QB14/Build+Server",
      "https://wiki.pmease.com/display/QB14/Build+Agent",
      "https://wiki.pmease.com/display/QB14/User+Agent",
      "https://wiki.pmease.com/display/QB14/Grid+Node",
      "https://wiki.pmease.com/display/QB14/Resource",
      "https://wiki.pmease.com/display/QB14/Cloud+Profile",
      "https://wiki.pmease.com/display/QB14/Proof+Build",
      "https://wiki.pmease.com/display/QB14/Build+Promotion",
      "https://wiki.pmease.com/display/QB14/Local+Change",
      "https://wiki.pmease.com/display/QB14/Configuration+Workspace",
      "https://wiki.pmease.com/display/QB14/Storage+Directory",
      "https://wiki.pmease.com/display/QB14/Configuration+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/Build+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/Configuration+Subtree"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Configuration+Subtree",
    "title": "Configuration Subtree",
    "breadcrumb": [
      "",
      "Concepts"
    ],
    "full_text": "Concepts\nConfiguration Subtree\nVersion: QB14\nConfiguration Subtree\nFor a particular configuration, the configuration subtree refers to current configuration and all its child configurations (direct and non-direct).\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Configuration Subtree",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Build",
      "https://wiki.pmease.com/display/QB14/Build+Pipeline",
      "https://wiki.pmease.com/display/QB14/Repository",
      "https://wiki.pmease.com/display/QB14/QuickBuild+Repository",
      "https://wiki.pmease.com/display/QB14/Step",
      "https://wiki.pmease.com/display/QB14/Composite+Step",
      "https://wiki.pmease.com/display/QB14/Master+Step",
      "https://wiki.pmease.com/display/QB14/Step+Path",
      "https://wiki.pmease.com/display/QB14/Build+Grid",
      "https://wiki.pmease.com/display/QB14/Build+Server",
      "https://wiki.pmease.com/display/QB14/Build+Agent",
      "https://wiki.pmease.com/display/QB14/User+Agent",
      "https://wiki.pmease.com/display/QB14/Grid+Node",
      "https://wiki.pmease.com/display/QB14/Resource",
      "https://wiki.pmease.com/display/QB14/Cloud+Profile",
      "https://wiki.pmease.com/display/QB14/Proof+Build",
      "https://wiki.pmease.com/display/QB14/Build+Promotion",
      "https://wiki.pmease.com/display/QB14/Local+Change",
      "https://wiki.pmease.com/display/QB14/Configuration+Workspace",
      "https://wiki.pmease.com/display/QB14/Storage+Directory",
      "https://wiki.pmease.com/display/QB14/Configuration+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/Build+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/Build"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Build",
    "title": "Build",
    "breadcrumb": [
      "",
      "Concepts"
    ],
    "full_text": "Concepts\nBuild\nVersion: QB14\nBuild\nBuild is generated by running a configuration. When a particular configuration is triggered (either by user or by the scheduling system), the\nbuild condition\nof the configuration is evaluated. If the result of the evaluation is\ntrue\n, the configuration will be run to generate a new build.\n{#Build-version}\nBuild version can be used to identify a build inside a configuration, for example:\n1.0.0\n. Some special version can be used to identify latest build of different status:\nVersion\nExplanation\nlatest\nrepresents latest build of a configuration\nlatest_finished\nrepresents latest finished build of a configuration\nlatest_successful\nrepresents latest successful build of a configuration\nlatest_recommended\nrepresents latest recommended build of a configuration\nlatest_failed\nrepresents latest failed build of a configuration\nlatest_cancelled\nrepresents latest cancelled build of a configuration\nlatest_running\nrepresents latest running build of a configuration\n{#Build-name}\nBuild name can be used to uniquely identify a build inside the system. It is in the format of\n<configuration id>.<build version>\n, where\n<configuration id>\nrepresents id of a configuration, and\n<build version>\nrepresents version of a build (including special version as introduced above). Some examples:\nName\nExplanation\n1.1.0.0\nrepresents build\n1.0.0\nin configuration with id\n1\n2.latest\nrepresents latest build in configuration with id\n2\n2.latest_successful\nrepresents latest successful build in configuration with id\n2\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Build",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Build+Pipeline",
      "https://wiki.pmease.com/display/QB14/Repository",
      "https://wiki.pmease.com/display/QB14/QuickBuild+Repository",
      "https://wiki.pmease.com/display/QB14/Step",
      "https://wiki.pmease.com/display/QB14/Composite+Step",
      "https://wiki.pmease.com/display/QB14/Master+Step",
      "https://wiki.pmease.com/display/QB14/Step+Path",
      "https://wiki.pmease.com/display/QB14/Build+Grid",
      "https://wiki.pmease.com/display/QB14/Build+Server",
      "https://wiki.pmease.com/display/QB14/Build+Agent",
      "https://wiki.pmease.com/display/QB14/User+Agent",
      "https://wiki.pmease.com/display/QB14/Grid+Node",
      "https://wiki.pmease.com/display/QB14/Resource",
      "https://wiki.pmease.com/display/QB14/Cloud+Profile",
      "https://wiki.pmease.com/display/QB14/Proof+Build",
      "https://wiki.pmease.com/display/QB14/Build+Promotion",
      "https://wiki.pmease.com/display/QB14/Local+Change",
      "https://wiki.pmease.com/display/QB14/Configuration+Workspace",
      "https://wiki.pmease.com/display/QB14/Storage+Directory",
      "https://wiki.pmease.com/display/QB14/Configuration+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/Build+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/Build+Pipeline"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Build+Pipeline",
    "title": "Build Pipeline",
    "breadcrumb": [
      "",
      "Concepts"
    ],
    "full_text": "Concepts\nBuild Pipeline\nVersion: QB14\nBuild Pipeline\nBuild pipeline is a set of builds connected with promotions, visualizing different stages in a build or deployment process with commit information displayed on each stage. Defined promotion actions can be taken directly on the pipeline to push commits going through different stages.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Build Pipeline",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Repository",
      "https://wiki.pmease.com/display/QB14/QuickBuild+Repository",
      "https://wiki.pmease.com/display/QB14/Step",
      "https://wiki.pmease.com/display/QB14/Composite+Step",
      "https://wiki.pmease.com/display/QB14/Master+Step",
      "https://wiki.pmease.com/display/QB14/Step+Path",
      "https://wiki.pmease.com/display/QB14/Build+Grid",
      "https://wiki.pmease.com/display/QB14/Build+Server",
      "https://wiki.pmease.com/display/QB14/Build+Agent",
      "https://wiki.pmease.com/display/QB14/User+Agent",
      "https://wiki.pmease.com/display/QB14/Grid+Node",
      "https://wiki.pmease.com/display/QB14/Resource",
      "https://wiki.pmease.com/display/QB14/Cloud+Profile",
      "https://wiki.pmease.com/display/QB14/Proof+Build",
      "https://wiki.pmease.com/display/QB14/Build+Promotion",
      "https://wiki.pmease.com/display/QB14/Local+Change",
      "https://wiki.pmease.com/display/QB14/Configuration+Workspace",
      "https://wiki.pmease.com/display/QB14/Storage+Directory",
      "https://wiki.pmease.com/display/QB14/Configuration+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/Build+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/Repository"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Repository",
    "title": "Repository",
    "breadcrumb": [
      "",
      "Concepts"
    ],
    "full_text": "Concepts\nRepository\nVersion: QB14\nRepository\nRepository is the place, where the files used to generate builds are stored. It normally refers to various SCM systems which holds source files to generate the build. It is used by QuickBuild to checkout/update files from various SCM as part of the build process. Repository definition follows the\ninherit and override\nrule: repositories defined in descendant configurations with the same name will override those defined in ancestor configuration.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Repository",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/QuickBuild+Repository",
      "https://wiki.pmease.com/display/QB14/Step",
      "https://wiki.pmease.com/display/QB14/Composite+Step",
      "https://wiki.pmease.com/display/QB14/Master+Step",
      "https://wiki.pmease.com/display/QB14/Step+Path",
      "https://wiki.pmease.com/display/QB14/Build+Grid",
      "https://wiki.pmease.com/display/QB14/Build+Server",
      "https://wiki.pmease.com/display/QB14/Build+Agent",
      "https://wiki.pmease.com/display/QB14/User+Agent",
      "https://wiki.pmease.com/display/QB14/Grid+Node",
      "https://wiki.pmease.com/display/QB14/Resource",
      "https://wiki.pmease.com/display/QB14/Cloud+Profile",
      "https://wiki.pmease.com/display/QB14/Proof+Build",
      "https://wiki.pmease.com/display/QB14/Build+Promotion",
      "https://wiki.pmease.com/display/QB14/Local+Change",
      "https://wiki.pmease.com/display/QB14/Configuration+Workspace",
      "https://wiki.pmease.com/display/QB14/Storage+Directory",
      "https://wiki.pmease.com/display/QB14/Configuration+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/Build+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/QuickBuild+Repository"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/QuickBuild+Repository",
    "title": "QuickBuild Repository",
    "breadcrumb": [
      "",
      "Concepts"
    ],
    "full_text": "Concepts\nQuickBuild Repository\nVersion: QB14\nQuickBuild Repository\nQuickBuild repository is a special repository which holds published artifacts of a build. By checking out from this repository, artifacts of upstream builds (normally library projects) can be retrieved and used by downstream builds. This is how dependency handled in QuickBuild: the downstream builds depends on upstream builds and it uses QuickBuild repository to resolve the dependency.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "QuickBuild Repository",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Step",
      "https://wiki.pmease.com/display/QB14/Composite+Step",
      "https://wiki.pmease.com/display/QB14/Master+Step",
      "https://wiki.pmease.com/display/QB14/Step+Path",
      "https://wiki.pmease.com/display/QB14/Build+Grid",
      "https://wiki.pmease.com/display/QB14/Build+Server",
      "https://wiki.pmease.com/display/QB14/Build+Agent",
      "https://wiki.pmease.com/display/QB14/User+Agent",
      "https://wiki.pmease.com/display/QB14/Grid+Node",
      "https://wiki.pmease.com/display/QB14/Resource",
      "https://wiki.pmease.com/display/QB14/Cloud+Profile",
      "https://wiki.pmease.com/display/QB14/Proof+Build",
      "https://wiki.pmease.com/display/QB14/Build+Promotion",
      "https://wiki.pmease.com/display/QB14/Local+Change",
      "https://wiki.pmease.com/display/QB14/Configuration+Workspace",
      "https://wiki.pmease.com/display/QB14/Storage+Directory",
      "https://wiki.pmease.com/display/QB14/Configuration+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/Build+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/Step"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Step",
    "title": "Step",
    "breadcrumb": [
      "",
      "Concepts"
    ],
    "full_text": "Concepts\nStep\nVersion: QB14\nStep\nQuickBuild uses steps to control how a build should be performed. Multiple steps can be chained sequentially or in parallel to define the build process of a configuration, and they can be configured to run on different build nodes (see the Build Node definition below) to perform remote builds. Step definition follows the\ninherit and override\nrule: steps defined in descendant configurations with the same name will override those defined in ancestor configuration.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Step",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Composite+Step",
      "https://wiki.pmease.com/display/QB14/Master+Step",
      "https://wiki.pmease.com/display/QB14/Step+Path",
      "https://wiki.pmease.com/display/QB14/Build+Grid",
      "https://wiki.pmease.com/display/QB14/Build+Server",
      "https://wiki.pmease.com/display/QB14/Build+Agent",
      "https://wiki.pmease.com/display/QB14/User+Agent",
      "https://wiki.pmease.com/display/QB14/Grid+Node",
      "https://wiki.pmease.com/display/QB14/Resource",
      "https://wiki.pmease.com/display/QB14/Cloud+Profile",
      "https://wiki.pmease.com/display/QB14/Proof+Build",
      "https://wiki.pmease.com/display/QB14/Build+Promotion",
      "https://wiki.pmease.com/display/QB14/Local+Change",
      "https://wiki.pmease.com/display/QB14/Configuration+Workspace",
      "https://wiki.pmease.com/display/QB14/Storage+Directory",
      "https://wiki.pmease.com/display/QB14/Configuration+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/Build+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/Composite+Step"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Composite+Step",
    "title": "Composite Step",
    "breadcrumb": [
      "",
      "Concepts"
    ],
    "full_text": "Concepts\nComposite Step\nVersion: QB14\nComposite Step\nComposite step is a special step which may be used to execute other steps sequentially or in parallel. It can recursively contain other composite steps which can be overridden in descendant configurations.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Composite Step",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Master+Step",
      "https://wiki.pmease.com/display/QB14/Step+Path",
      "https://wiki.pmease.com/display/QB14/Build+Grid",
      "https://wiki.pmease.com/display/QB14/Build+Server",
      "https://wiki.pmease.com/display/QB14/Build+Agent",
      "https://wiki.pmease.com/display/QB14/User+Agent",
      "https://wiki.pmease.com/display/QB14/Grid+Node",
      "https://wiki.pmease.com/display/QB14/Resource",
      "https://wiki.pmease.com/display/QB14/Cloud+Profile",
      "https://wiki.pmease.com/display/QB14/Proof+Build",
      "https://wiki.pmease.com/display/QB14/Build+Promotion",
      "https://wiki.pmease.com/display/QB14/Local+Change",
      "https://wiki.pmease.com/display/QB14/Configuration+Workspace",
      "https://wiki.pmease.com/display/QB14/Storage+Directory",
      "https://wiki.pmease.com/display/QB14/Configuration+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/Build+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/Master+Step"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Master+Step",
    "title": "Master Step",
    "breadcrumb": [
      "",
      "Concepts"
    ],
    "full_text": "Concepts\nMaster Step\nVersion: QB14\nMaster Step\nMaster step acts as the entry point for build execution and it is always named\nmaster\n. When a build is started, it looks for\nmaster\nstep and executes it. The master step is normally defined as a composite step to exuecute other steps.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Master Step",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Step+Path",
      "https://wiki.pmease.com/display/QB14/Build+Grid",
      "https://wiki.pmease.com/display/QB14/Build+Server",
      "https://wiki.pmease.com/display/QB14/Build+Agent",
      "https://wiki.pmease.com/display/QB14/User+Agent",
      "https://wiki.pmease.com/display/QB14/Grid+Node",
      "https://wiki.pmease.com/display/QB14/Resource",
      "https://wiki.pmease.com/display/QB14/Cloud+Profile",
      "https://wiki.pmease.com/display/QB14/Proof+Build",
      "https://wiki.pmease.com/display/QB14/Build+Promotion",
      "https://wiki.pmease.com/display/QB14/Local+Change",
      "https://wiki.pmease.com/display/QB14/Configuration+Workspace",
      "https://wiki.pmease.com/display/QB14/Storage+Directory",
      "https://wiki.pmease.com/display/QB14/Configuration+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/Build+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/Step+Path"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Step+Path",
    "title": "Step Path",
    "breadcrumb": [
      "",
      "Concepts"
    ],
    "full_text": "Concepts\nStep Path\nVersion: QB14\nStep Path\nStep path can be used to reference an executed step. Since QuickBuild 3.0, the same step can be reused in a single build, therefore it is not sufficient to reference an executed step simply with a step name. Path of a particular step instance can be constructed by concatenating names of all its container steps with character \">\", from outer-most to inner-most, with the last element being name of the step itself. Below screen explains how to construct step path of various steps:\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Step Path",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Build+Grid",
      "https://wiki.pmease.com/display/QB14/Build+Server",
      "https://wiki.pmease.com/display/QB14/Build+Agent",
      "https://wiki.pmease.com/display/QB14/User+Agent",
      "https://wiki.pmease.com/display/QB14/Grid+Node",
      "https://wiki.pmease.com/display/QB14/Resource",
      "https://wiki.pmease.com/display/QB14/Cloud+Profile",
      "https://wiki.pmease.com/display/QB14/Proof+Build",
      "https://wiki.pmease.com/display/QB14/Build+Promotion",
      "https://wiki.pmease.com/display/QB14/Local+Change",
      "https://wiki.pmease.com/display/QB14/Configuration+Workspace",
      "https://wiki.pmease.com/display/QB14/Storage+Directory",
      "https://wiki.pmease.com/display/QB14/Configuration+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/Build+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/Build+Grid"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Build+Grid",
    "title": "Build Grid",
    "breadcrumb": [
      "",
      "Concepts"
    ],
    "full_text": "Concepts\nBuild Grid\nVersion: QB14\nBuild Grid\nQuickBuild 2.0 introduces the concept of a build grid to serve purposes including but not limited to:\nAccelerate the build process of a single build. As described earlier (see step definition), build process is defined by steps and they can be configured to run in parallel on different grid nodes (grid node represents a build machine with QuickBuild installed) based on load balancing algorithm.\nRun build tasks on build agents to reduce load of central build server. Steps can be configured to run on server or agent, however you should configure CPU and I/O intensive steps to run on agent nodes.\nBuild, test or package multiple platform products. It is not unusual that a product contains components that need to be build or tested on different platforms. In QuickBuild, this can be easily achieved by specifying proper\nnode match condition\nof the corresponding steps. For example, you can specify that a step compiling Linux components runs only on Linux nodes with GCC 4.0 installed, or it runs only on a node with the specified IP address or with the specified host name, while another step compiles Windows components and runs only on Windows nodes with Visual Studio 2008 installed.\nBuild grid consists of build nodes, where one build node is always the build server. Other build nodes are build agents connected to the build server.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Build Grid",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Build+Server",
      "https://wiki.pmease.com/display/QB14/Build+Agent",
      "https://wiki.pmease.com/display/QB14/User+Agent",
      "https://wiki.pmease.com/display/QB14/Grid+Node",
      "https://wiki.pmease.com/display/QB14/Resource",
      "https://wiki.pmease.com/display/QB14/Cloud+Profile",
      "https://wiki.pmease.com/display/QB14/Proof+Build",
      "https://wiki.pmease.com/display/QB14/Build+Promotion",
      "https://wiki.pmease.com/display/QB14/Local+Change",
      "https://wiki.pmease.com/display/QB14/Configuration+Workspace",
      "https://wiki.pmease.com/display/QB14/Storage+Directory",
      "https://wiki.pmease.com/display/QB14/Configuration+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/Build+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/Build+Server"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Build+Server",
    "title": "Build Server",
    "breadcrumb": [
      "",
      "Concepts"
    ],
    "full_text": "Concepts\nBuild Server\nVersion: QB14\nBuild Server\nBuild server represents the QuickBuild instance configured to run as a server. It is responsible for overall central management of build tasks, and it distributes steps to the connected build agents based on defined rules.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Build Server",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Build+Agent",
      "https://wiki.pmease.com/display/QB14/User+Agent",
      "https://wiki.pmease.com/display/QB14/Grid+Node",
      "https://wiki.pmease.com/display/QB14/Resource",
      "https://wiki.pmease.com/display/QB14/Cloud+Profile",
      "https://wiki.pmease.com/display/QB14/Proof+Build",
      "https://wiki.pmease.com/display/QB14/Build+Promotion",
      "https://wiki.pmease.com/display/QB14/Local+Change",
      "https://wiki.pmease.com/display/QB14/Configuration+Workspace",
      "https://wiki.pmease.com/display/QB14/Storage+Directory",
      "https://wiki.pmease.com/display/QB14/Configuration+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/Build+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/Build+Agent"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Build+Agent",
    "title": "Build Agent",
    "breadcrumb": [
      "",
      "Concepts"
    ],
    "full_text": "Concepts\nBuild Agent\nVersion: QB14\nBuild Agent\nBuild agents connect to build server to form a build grid. Since a grid node (server node and agent node) can only run one build at a time, multiple build agents means the ability to run multiple builds concurrently, which is important to a busy build system. It also make multi-platform build/test possible as a build can distribute different steps to different agents for execution. Build agent can be upgraded automatically when the build server upgrades to a new version.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Build Agent",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/User+Agent",
      "https://wiki.pmease.com/display/QB14/Grid+Node",
      "https://wiki.pmease.com/display/QB14/Resource",
      "https://wiki.pmease.com/display/QB14/Cloud+Profile",
      "https://wiki.pmease.com/display/QB14/Proof+Build",
      "https://wiki.pmease.com/display/QB14/Build+Promotion",
      "https://wiki.pmease.com/display/QB14/Local+Change",
      "https://wiki.pmease.com/display/QB14/Configuration+Workspace",
      "https://wiki.pmease.com/display/QB14/Storage+Directory",
      "https://wiki.pmease.com/display/QB14/Configuration+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/Build+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/User+Agent"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/User+Agent",
    "title": "User Agent",
    "breadcrumb": [
      "",
      "Concepts"
    ],
    "full_text": "Concepts\nUser Agent\nVersion: QB14\nUser Agent\nUser agent is installed on user's desktop and is mainly used for the purpose of\nProof Build\n. It responsible for collecting uncommitted changes from user's desktop and send to build grid for verification. It can be upgraded automatically when server upgrades to a new version.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "User Agent",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Grid+Node",
      "https://wiki.pmease.com/display/QB14/Resource",
      "https://wiki.pmease.com/display/QB14/Cloud+Profile",
      "https://wiki.pmease.com/display/QB14/Proof+Build",
      "https://wiki.pmease.com/display/QB14/Build+Promotion",
      "https://wiki.pmease.com/display/QB14/Local+Change",
      "https://wiki.pmease.com/display/QB14/Configuration+Workspace",
      "https://wiki.pmease.com/display/QB14/Storage+Directory",
      "https://wiki.pmease.com/display/QB14/Configuration+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/Build+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/Proof+Build",
      "https://wiki.pmease.com/display/QB14/Grid+Node"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Grid+Node",
    "title": "Grid Node",
    "breadcrumb": [
      "",
      "Concepts"
    ],
    "full_text": "Concepts\nGrid Node\nVersion: QB14\nGrid Node\nGrid node represents a member of the build grid, it is either a build server, a build agent or a user agent. It is identified by the node address in the form of\n<node host>:<node port>\n, where\n<node host>\nrepresents the host name of the machine running the build node instance, and\n<node port>\nrepresents the port number the build node instance uses.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Grid Node",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Resource",
      "https://wiki.pmease.com/display/QB14/Cloud+Profile",
      "https://wiki.pmease.com/display/QB14/Proof+Build",
      "https://wiki.pmease.com/display/QB14/Build+Promotion",
      "https://wiki.pmease.com/display/QB14/Local+Change",
      "https://wiki.pmease.com/display/QB14/Configuration+Workspace",
      "https://wiki.pmease.com/display/QB14/Storage+Directory",
      "https://wiki.pmease.com/display/QB14/Configuration+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/Build+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/Resource"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Resource",
    "title": "Resource",
    "breadcrumb": [
      "",
      "Concepts"
    ],
    "full_text": "Concepts\nResource\nVersion: QB14\nResource\nResource means any physical or virtual component of limited availability within the grid, and is provided by grid nodes. A build step can declare to require certain resources to run. If some nodes are found with desired resources, the step will run on the fastest node; otherwise, the step will wait until a node with free resource is available. This way, the resource contention problem between builds and steps can be solved efficiently.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Resource",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Cloud+Profile",
      "https://wiki.pmease.com/display/QB14/Proof+Build",
      "https://wiki.pmease.com/display/QB14/Build+Promotion",
      "https://wiki.pmease.com/display/QB14/Local+Change",
      "https://wiki.pmease.com/display/QB14/Configuration+Workspace",
      "https://wiki.pmease.com/display/QB14/Storage+Directory",
      "https://wiki.pmease.com/display/QB14/Configuration+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/Build+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/Cloud+Profile"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Cloud+Profile",
    "title": "Cloud Profile",
    "breadcrumb": [
      "",
      "Concepts"
    ],
    "full_text": "Concepts\nCloud Profile\nVersion: QB14\nCloud Profile\nCloud profile exists to support launch build agent on demand in cloud environment. It defines how to launch build agents as well as describing characteristics of the build agents. Build agents launched by the same cloud profile will have same characteristics. Often you need to define multiple cloud profiles to satisfy different build requirements.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Cloud Profile",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Proof+Build",
      "https://wiki.pmease.com/display/QB14/Build+Promotion",
      "https://wiki.pmease.com/display/QB14/Local+Change",
      "https://wiki.pmease.com/display/QB14/Configuration+Workspace",
      "https://wiki.pmease.com/display/QB14/Storage+Directory",
      "https://wiki.pmease.com/display/QB14/Configuration+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/Build+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/Proof+Build"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Proof+Build",
    "title": "Proof Build",
    "breadcrumb": [
      "",
      "Concepts"
    ],
    "full_text": "Concepts\nProof Build\nVersion: QB14\nProof Build\nQuickBuild 2.0 introduces concept of proof build to build and test your uncommitted changes at server side. With proof build, the risk of polluting SCM with bad code will be reduced to minimum as developer can submit a proof build and only commit their changes if the proof build is successful.\nThe source code used to generate a proof build is first checked out from trunk of the SCM, and then patched with uncommitted changes collected from project work area at user's desktop (with the help of user agent which will be mentioned later).\nFor distributed version control systems, instead of verifying uncommitted changes, proof build is used to verify local commits which will be pushed to central repository.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Proof Build",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Build+Promotion",
      "https://wiki.pmease.com/display/QB14/Local+Change",
      "https://wiki.pmease.com/display/QB14/Configuration+Workspace",
      "https://wiki.pmease.com/display/QB14/Storage+Directory",
      "https://wiki.pmease.com/display/QB14/Configuration+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/Build+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/Build+Promotion"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Build+Promotion",
    "title": "Build Promotion",
    "breadcrumb": [
      "",
      "Concepts"
    ],
    "full_text": "Concepts\nBuild Promotion\nVersion: QB14\nBuild Promotion\nBuild promotion is a process of generating new build based on information or artifacts of another build. It is used by QuickBuild to implement build life cycle management. For example, a gold QA build can be promoted as a release build. Arbitrary custom actions can be configured for the promotion process so that you can deploy the build to test servers, create tags on SCMs for release builds, or send notifications to interesting parts.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Build Promotion",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Local+Change",
      "https://wiki.pmease.com/display/QB14/Configuration+Workspace",
      "https://wiki.pmease.com/display/QB14/Storage+Directory",
      "https://wiki.pmease.com/display/QB14/Configuration+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/Build+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/Local+Change"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Local+Change",
    "title": "Local Change",
    "breadcrumb": [
      "",
      "Concepts"
    ],
    "full_text": "Concepts\nLocal Change\nVersion: QB14\nLocal Change\nLocal change refers to uncommitted changes collected from project work area at user's desktop when running a proof build. It is called\nlocal\nfrom user's perspective, as they've not submitted to SCM. For distributed version control systems, local change refers to local commits which will be pushed to a central repository.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Local Change",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Configuration+Workspace",
      "https://wiki.pmease.com/display/QB14/Storage+Directory",
      "https://wiki.pmease.com/display/QB14/Configuration+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/Build+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/Configuration+Workspace"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Configuration+Workspace",
    "title": "Configuration Workspace",
    "breadcrumb": [
      "",
      "Concepts"
    ],
    "full_text": "Concepts\nConfiguration Workspace\nVersion: QB14\nConfiguration Workspace\nConfiguration workspace is the place to build your projects. It is used to hold files used during a build such as source files checked out from SCM, intermediate files generated during the build etc. In a grid environment, each node has a separate workspace for each configuration. By default, workspace for a particular configuration on a particular node points to the directory named by configuration path under QuickBuild's installation directory on that node.\nFor a particular configuraiton, the workspace directory is configurable through the configuration property\nworkspace path\n. Once it is defined, it will be inherited by the descendent configurations if it is not overwritten. For the same configuration, you can define different workspace path on different node with the help of scripting and grid node user attribute.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Configuration Workspace",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Storage+Directory",
      "https://wiki.pmease.com/display/QB14/Configuration+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/Build+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/Storage+Directory"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Storage+Directory",
    "title": "Storage Directory",
    "breadcrumb": [
      "",
      "Concepts"
    ],
    "full_text": "Concepts\nStorage Directory\nVersion: QB14\nStorage Directory\nStorage directory is a place on build server or agent to store below contents:\npublished build materials\nPublished build materials includes build artifacts and various build reports. These materials are stored under the\nbuild publish directory\n, which is a directory named by build id under\nbuilds\nsub directory of the storage area. For example, if the storage directory is\n/storage\n, the publish directory for build with identifier\n100\nwill be\n/storage/builds/100\n.\npublished configuration materials\nPublished configuration materials includes various configuration level statistics reports. These materials are stored under the\nconfiguration publish directory\n, which is a directory named by configuration id under\nconfigurations\nsub directory of the storage area. For example, if the storage directory is\n/storage\n, the publish directory for configuration with identifier\n100\nwill be\n/storage/configurations/100\n.\nBy default, all configurations and builds use the same storage directory identified by system setting\nstorage directory\n. However, each configuration can define its own storage directory through configuration property\nstorage path\n. Once this configuration property is set, all descendent configurations will inherit this storage path if they've not overwritten this property, and this takes effect on both server and agent.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Storage Directory",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Configuration+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/Build+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/Build+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/Configuration+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/Configuration+Publish+Directory"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Configuration+Publish+Directory",
    "title": "Configuration Publish Directory",
    "breadcrumb": [
      "",
      "Concepts"
    ],
    "full_text": "Concepts\nConfiguration Publish Directory\nVersion: QB14\nConfiguration Publish Directory\nConfiguration publish directory is a place on build server to hold published materials of the configuration such as various statistics reports. Each configuration will create its own publish directory named by configuration id under the\nconfigurations\nsub directory of\nstorage directory\n.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Configuration Publish Directory",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Build+Publish+Directory",
      "https://wiki.pmease.com/display/QB14/Build+Publish+Directory"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Build+Publish+Directory",
    "title": "Build Publish Directory",
    "breadcrumb": [
      "",
      "Concepts"
    ],
    "full_text": "Concepts\nBuild Publish Directory\nVersion: QB14\nBuild Publish Directory\nBuild publish directory is a place on build server to hold published materials of the build such as build artifacts and various build reports. Each build will create its own publish directory named by build id under the\nbuilds\nsub directory of\nstorage directory\n.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Build Publish Directory",
        "content": ""
      }
    ],
    "links": []
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Server+Installation+Guide",
    "title": "Server Installation Guide",
    "breadcrumb": [
      "",
      "Installation Guide"
    ],
    "full_text": "Installation Guide\nServer Installation Guide\nVersion: QB14\nOn this page\nServer Installation Guide\nSupported operating systems\nâ\nWindows 2000/XP/Vista/7/10/11, Windows server 2003-2025, 32 bit and 64 bit, amd64 and arm64 architecture\nLinux, 32 bit and 64 bit, amd64 and arm64 architecture\nMac OS X, 32 bit and 64 bit, amd64 and arm64 architecture\nSolaris, 32 bit and 64 bit, Sparc and x86 architecture\nAIX, 32 bit and 64 bit, PowerPC architecture\nHP-UX, 32 bit and 64 bit, IA and PARISC architecture\nFreeBSD, 32 bit and 64 bit, x86 architecture\nMemory requirement\nâ\n512M minimum, 1G recommended\nInstallation Steps\nâ\nDownload QuickBuild distribution from\nhttps://www.pmease.com/downloads\n.\nExtract the downloaded file into the selected installation directory. Make sure the user running the server has\nfull access rights\nto the installation directory.\nMake sure you have\nJDK8 or higher version\ninstalled. Download the appropriate JDK version from\nhttps://java.sun.com\nif necessary.\nMake sure the\njava\ncommand exists in the system path; if not, you will need to modify the file\n<QuickBuild install dir>/conf/wrapper.conf\n, and point the entry\nwrapper.java.command\nto path of the java command.\nOptionally run command\n<server install dir>/bin/config.(bat|sh)\nto configure port number and SSL setting of the server.\nOpen a command window, switch to folder\n<server install dir>/bin\n, and run command\nserver.(bat|sh) console\nto start the server.\nwarning\nFollow\nthis guide\non how to install the server as system service so that it auto-starts when machine reboots.\nMonitor the console window for any error or warning messages. You may ignore warning message\nplugin xxxxx is not enabled as it needs to be configured\n, if you don't use these plugins; otherwise, please refer to\nplugin management\non how to configure a plugin after server starts up.\nAfter the server starts up, follow the instruction in the console to open a browser window and connect to the server. Following browsers are supported:\nInternet Explorer 9.0 or higher\nFirefox 3.0 or higher\nSafari 3.0 or higher\nChrome 4.0 or higher\nBy default, QuickBuild uses embedded database for demonstration purpose. For production usage, please switch to other serious database following guide in\ndata management section\n.\nLast updated\non\nJul 11, 2025",
    "sections": [
      {
        "header": "Server Installation Guide",
        "content": ""
      },
      {
        "header": "Supported operating systemsâ",
        "content": "Windows 2000/XP/Vista/7/10/11, Windows server 2003-2025, 32 bit and 64 bit, amd64 and arm64 architectureLinux, 32 bit and 64 bit, amd64 and arm64 architectureMac OS X, 32 bit and 64 bit, amd64 and arm64 architectureSolaris, 32 bit and 64 bit, Sparc and x86 architectureAIX, 32 bit and 64 bit, PowerPC architectureHP-UX, 32 bit and 64 bit, IA and PARISC architectureFreeBSD, 32 bit and 64 bit, x86 architecture"
      },
      {
        "header": "Memory requirementâ",
        "content": "512M minimum, 1G recommended"
      },
      {
        "header": "Installation Stepsâ",
        "content": "Download QuickBuild distribution fromhttps://www.pmease.com/downloads.Extract the downloaded file into the selected installation directory. Make sure the user running the server hasfull access rightsto the installation directory.Make sure you haveJDK8 or higher versioninstalled. Download the appropriate JDK version fromhttps://java.sun.comif necessary.Make sure thejavacommand exists in the system path; if not, you will need to modify the file<QuickBuild install dir>/conf/wrapper.conf, and point the entrywrapper.java.commandto path of the java command.Optionally run command<server install dir>/bin/config.(bat|sh)to configure port number and SSL setting of the server.Open a command window, switch to folder<server install dir>/bin, and run commandserver.(bat|sh) consoleto start the server.warningFollowthis guideon how to install the server as system service so that it auto-starts when machine reboots.Monitor the console window for any error or warning messages. You may ignore warning messageplugin xxxxx is not enabled as it needs to be configured, if you don't use these plugins; otherwise, please refer toplugin managementon how to configure a plugin after server starts up.After the server starts up, follow the instruction in the console to open a browser window and connect to the server. Following browsers are supported:Internet Explorer 9.0 or higherFirefox 3.0 or higherSafari 3.0 or higherChrome 4.0 or higherBy default, QuickBuild uses embedded database for demonstration purpose. For production usage, please switch to other serious database following guide indata management section."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Build+Agent+Installation+Guide",
      "https://wiki.pmease.com/display/QB14/User+Agent+Installation+Guide",
      "https://wiki.pmease.com/display/QB14/Install+As+System+Service",
      "https://wiki.pmease.com/display/QB14/Install+As+System+Service",
      "https://wiki.pmease.com/display/QB14/Plugin+Management",
      "https://wiki.pmease.com/display/QB14/Data+Management",
      "https://wiki.pmease.com/display/QB14/Build+Agent+Installation+Guide"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Build+Agent+Installation+Guide",
    "title": "Build Agent Installation Guide",
    "breadcrumb": [
      "",
      "Installation Guide"
    ],
    "full_text": "Installation Guide\nBuild Agent Installation Guide\nVersion: QB14\nOn this page\nBuild Agent Installation Guide\nSupported operating systems\nâ\nWindows 2000/XP/Vista/7/10/11, Windows server 2003-2025, 32 bit and 64 bit, amd64 and arm64 architecture\nLinux, 32 bit and 64 bit, amd64 and arm64 architecture\nMac OS X, 32 bit and 64 bit, amd64 and arm64 architecture\nSolaris, 32 bit and 64 bit, Sparc and x86 architecture\nAIX, 32 bit and 64 bit, PowerPC architecture\nHP-UX, 32 bit and 64 bit, IA and PARISC architecture\nFreeBSD, 32 bit and 64 bit, x86 architecture\nMemory requirement\nâ\n64M minimum, 256M recommended\nInstallation Steps\nâ\nMake sure QuickBuild server is up and running,\nlogin to QuickBuild as administrator\nand navigate to\nGrid\ntab, follow the\ndownload build agent\nlink to download the build agent. Extract downloaded file into the directory where the build agent should be installed. Make sure the user running user agent has\nfull access rights\nto the installation directory.\nMake sure you have\nJDK8 or higher version\ninstalled. Download the appropriate JDK version from\nhttps://java.sun.com\nif needed.\nMake sure the\njava\ncommand exists in the system path; if not, you will need to modify the file\nconf/wrapper.conf\nunder the build agent's installation directory, and point the entry\nwrapper.java.command\nto path of the java command.\nOptionally run\n<agent install dir>/bin/config.bat|sh)\nto configure build agent properties such as IP address, port number, SSL setting, etc.\nOpen a command prompt window, switch to folder\n<agent install dir>/bin\n, and run command\nagent.(bat|sh) console\nto start the agent.\nwarning\nFollow\nthis guide\non how to install the agent as system service so that it auto-starts when machine reboots.\nAfter the agent starts up, it may complain with the message \"This build agent is not authorized to join the grid\". Upon this, you need to login to QuickBuild server and authorize the agent to join the grid. Refer to\nWorking with Build Grid\nfor how to authorize build agents to join grid.\nIf the build agent is connected to QuickBuild server correctly, you will see its entry in active node list of the build grid like below by logging in as administrator:\nTrouble Shooting\nâ\nIf your agent does not connect with server, please make sure that:\nYou can telnet to server port from agent machine with below command:\ntelnet _\n<\nserver host name\n>\n_ _\n<\nserver port\n>\n_\nHere\n<server host name>\nand\n<server port>\nhas to be extracted from\nserverUrl\nin file\nconf/node.properties\nof under agent directory.\nYou can telnet to agent port from server machine with below command:\ntelnet\n<agent ip address>\n<agent port>\nIf auto-detected agent ip reported in server console log is incorrect, specify it explicitly by editing\nconf/node.properties\nof the agent to add below property:\nip\n=\n_\n<\nagent ip address\n>\n_\nRecently we found a case where QB agent from other subnets connects to server but then times out during initialization (agents from same subnet works fine), and it turns out that server response package is dropped for some reason (maybe the package content matches some pre-set drop rule) across the gateway, and the problem is solved by connecting to server via ssl port so that server response package is encrypted.\nLast updated\non\nJul 11, 2025",
    "sections": [
      {
        "header": "Build Agent Installation Guide",
        "content": ""
      },
      {
        "header": "Supported operating systemsâ",
        "content": "Windows 2000/XP/Vista/7/10/11, Windows server 2003-2025, 32 bit and 64 bit, amd64 and arm64 architectureLinux, 32 bit and 64 bit, amd64 and arm64 architectureMac OS X, 32 bit and 64 bit, amd64 and arm64 architectureSolaris, 32 bit and 64 bit, Sparc and x86 architectureAIX, 32 bit and 64 bit, PowerPC architectureHP-UX, 32 bit and 64 bit, IA and PARISC architectureFreeBSD, 32 bit and 64 bit, x86 architecture"
      },
      {
        "header": "Memory requirementâ",
        "content": "64M minimum, 256M recommended"
      },
      {
        "header": "Installation Stepsâ",
        "content": "Make sure QuickBuild server is up and running,login to QuickBuild as administratorand navigate toGridtab, follow thedownload build agentlink to download the build agent. Extract downloaded file into the directory where the build agent should be installed. Make sure the user running user agent hasfull access rightsto the installation directory.Make sure you haveJDK8 or higher versioninstalled. Download the appropriate JDK version fromhttps://java.sun.comif needed.Make sure thejavacommand exists in the system path; if not, you will need to modify the fileconf/wrapper.confunder the build agent's installation directory, and point the entrywrapper.java.commandto path of the java command.Optionally run<agent install dir>/bin/config.bat|sh)to configure build agent properties such as IP address, port number, SSL setting, etc.Open a command prompt window, switch to folder<agent install dir>/bin, and run commandagent.(bat|sh) consoleto start the agent.warningFollowthis guideon how to install the agent as system service so that it auto-starts when machine reboots.After the agent starts up, it may complain with the message \"This build agent is not authorized to join the grid\". Upon this, you need to login to QuickBuild server and authorize the agent to join the grid. Refer toWorking with Build Gridfor how to authorize build agents to join grid.If the build agent is connected to QuickBuild server correctly, you will see its entry in active node list of the build grid like below by logging in as administrator:"
      },
      {
        "header": "Trouble Shootingâ",
        "content": "If your agent does not connect with server, please make sure that: You can telnet to server port from agent machine with below command:telnet _<server host name>_ _<server port>_Here<server host name>and<server port>has to be extracted fromserverUrlin fileconf/node.propertiesof under agent directory.You can telnet to agent port from server machine with below command:telnet<agent ip address><agent port>If auto-detected agent ip reported in server console log is incorrect, specify it explicitly by editingconf/node.propertiesof the agent to add below property:ip=_<agent ip address>_Recently we found a case where QB agent from other subnets connects to server but then times out during initialization (agents from same subnet works fine), and it turns out that server response package is dropped for some reason (maybe the package content matches some pre-set drop rule) across the gateway, and the problem is solved by connecting to server via ssl port so that server response package is encrypted."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/User+Agent+Installation+Guide",
      "https://wiki.pmease.com/display/QB14/Install+As+System+Service",
      "https://wiki.pmease.com/display/QB14/Install+As+System+Service",
      "https://wiki.pmease.com/display/QB14/Working+with+Build+Grid",
      "https://wiki.pmease.com/display/QB14/User+Agent+Installation+Guide"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/User+Agent+Installation+Guide",
    "title": "User Agent Installation Guide",
    "breadcrumb": [
      "",
      "Installation Guide"
    ],
    "full_text": "Installation Guide\nUser Agent Installation Guide\nVersion: QB14\nOn this page\nUser Agent Installation Guide\nSupported operating systems\nâ\nWindows 2000/XP/Vista/7/10/11, Windows server 2003-2025, 32 bit and 64 bit, amd64 and arm64 architecture\nLinux, 32 bit and 64 bit, amd64 and arm64 architecture\nMac OS X, 32 bit and 64 bit, amd64 and arm64 architecture\nSolaris, 32 bit and 64 bit, Sparc and x86 architecture\nAIX, 32 bit and 64 bit, PowerPC architecture\nHP-UX, 32 bit and 64 bit, IA and PARISC architecture\nFreeBSD, 32 bit and 64 bit, x86 architecture\nMemory requirement\nâ\n16M minimum, 64M recommended\nInstallation Steps\nâ\nMake sure QuickBuild server is up and running, login to QuickBuild using your own account (the account who wants to run user agent on his/her desktop), and navigate to\nMy\ntab, follow the\ndownload user agent\nlink to download the user agent. Please note that\nthis link will not be available\nif the account do not have [permission to run user agent](Other permissions.html#Otherpermissions-allowuseragent). Extract downloaded file into the directory where the user agent should be installed. Make sure the user running the user agent has\nfull access rights\nto the installation directory.\nMake sure you have\nJDK8 or higher version\ninstalled. Download the appropriate JDK version from\nhttps://java.sun.com\nif needed.\nMake sure the\njava\ncommand exists in the system path; if not, you will need to modify the file\nconf/wrapper.conf\nunder the build agent's installation directory, and point the entry\nwrapper.java.command\nto path of the java command.\nRun command\n<agent install dir>bin/config.(bat|sh)\nto configure agent properties such as user name, password, IP address, port number, SSL setting, etc.\nOpen a command prompt window, switch to folder\n<agent install dir>/bin\n, and run command\nagent.(bat|sh) console\nto start the agent.\nwarning\nFollow\nthis guide\non how to install the agent as system service so that it auto-starts when machine reboots.\nIf user agent starts and connects to server correctly, you will see\nMy Agent\ntab is displaying information of the user agent by logging to QuickBuild using your account:\nLast updated\non\nJul 11, 2025",
    "sections": [
      {
        "header": "User Agent Installation Guide",
        "content": ""
      },
      {
        "header": "Supported operating systemsâ",
        "content": "Windows 2000/XP/Vista/7/10/11, Windows server 2003-2025, 32 bit and 64 bit, amd64 and arm64 architectureLinux, 32 bit and 64 bit, amd64 and arm64 architectureMac OS X, 32 bit and 64 bit, amd64 and arm64 architectureSolaris, 32 bit and 64 bit, Sparc and x86 architectureAIX, 32 bit and 64 bit, PowerPC architectureHP-UX, 32 bit and 64 bit, IA and PARISC architectureFreeBSD, 32 bit and 64 bit, x86 architecture"
      },
      {
        "header": "Memory requirementâ",
        "content": "16M minimum, 64M recommended"
      },
      {
        "header": "Installation Stepsâ",
        "content": "Make sure QuickBuild server is up and running, login to QuickBuild using your own account (the account who wants to run user agent on his/her desktop), and navigate toMytab, follow thedownload user agentlink to download the user agent. Please note thatthis link will not be availableif the account do not have [permission to run user agent](Other permissions.html#Otherpermissions-allowuseragent). Extract downloaded file into the directory where the user agent should be installed. Make sure the user running the user agent hasfull access rightsto the installation directory.Make sure you haveJDK8 or higher versioninstalled. Download the appropriate JDK version fromhttps://java.sun.comif needed.Make sure thejavacommand exists in the system path; if not, you will need to modify the fileconf/wrapper.confunder the build agent's installation directory, and point the entrywrapper.java.commandto path of the java command.Run command<agent install dir>bin/config.(bat|sh)to configure agent properties such as user name, password, IP address, port number, SSL setting, etc.Open a command prompt window, switch to folder<agent install dir>/bin, and run commandagent.(bat|sh) consoleto start the agent.warningFollowthis guideon how to install the agent as system service so that it auto-starts when machine reboots.If user agent starts and connects to server correctly, you will seeMy Agenttab is displaying information of the user agent by logging to QuickBuild using your account:"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Install+As+System+Service",
      "https://wiki.pmease.com/display/QB14/Install+As+System+Service",
      "https://wiki.pmease.com/display/QB14/Install+As+System+Service"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Install+As+System+Service",
    "title": "Install As System Service",
    "breadcrumb": [
      "",
      "Installation Guide"
    ],
    "full_text": "Installation Guide\nInstall As System Service\nVersion: QB14\nOn this page\nInstall As System Service\nThis document explains how to configure QuickBuild programs (server, build agent, and user agent) to run as system service.\nOn Windows Platform\nâ\nIf necessary, edit file\n<QuickBuild server (or agent) install dir>/conf/wrapper.conf\nto specify service account via below properties:\nwrapper\n.\nntservice\n.\naccount\n=\nwrapper\n.\nntservice\n.\npassword\n=\nThe service will run under local system account if these properties are not specified.\nIf necessary, edit above file to specify desired display name and description of the service via property\nwrapper.displayname\nand\nwrapper.description\n.\nwarning\nMake sure to modify these properties to use different service name and description if you want to install multiple QuickBuild servers or agents in the same machine.\nOpen a command prompt window and switch to folder\n<QuickBuild server (or agent) install dir>/bin\n. On Windows system with UAC enabled, you will need to\nopen the command prompt window as Administrator\n.\nRun command\nserver.bat install\n(or\nagent.bat install\n) from command prompt window, and a Windows service with the name\nQuickBuild Server\nwill be installed.\nIf you want to uninstall the service later, just run command\nserver.bat remove\n(or\nagent.bat remove\n) in the command prompt window (make sure the command prompt window is\nopened with administrative right\non Windows system with UAC enabled).\nOn Unix family Platforms (including MacOS X and Linux)\nâ\nOpen a command shell and switch to folder\n<QuickBuild server (or agent) install dir>/bin\n.\nEdit file\nserver.sh\n(or\nagent.sh\n) to uncomment below line to specify the OS user to run the service as. Make sure the user has full permission against QuickBuild installation directory including all sub directories and files.\n#\nRUN_AS_USER\n=\nThe service will be run under root account if this line is commented out.\nIf necessary, edit above file to specify desired display name and description of the service via property\nAPP_NAME\nand\nAPP_LONG_NAME\n.\nwarning\nMake sure to modify these properties to use different service name and description if you want to install multiple QuickBuild servers or agents in the same machine.\nRun command\nserver.sh install\n(or\nagent.sh install\n) to install the service.\nIf you want to uninstall the service later, just run command\nserver.sh remove\n(or\nagent.sh remove\n) in the command shell.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Install As System Service",
        "content": ""
      },
      {
        "header": "On Windows Platformâ",
        "content": "If necessary, edit file<QuickBuild server (or agent) install dir>/conf/wrapper.confto specify service account via below properties:wrapper.ntservice.account=wrapper.ntservice.password=The service will run under local system account if these properties are not specified.If necessary, edit above file to specify desired display name and description of the service via propertywrapper.displaynameandwrapper.description.warningMake sure to modify these properties to use different service name and description if you want to install multiple QuickBuild servers or agents in the same machine.Open a command prompt window and switch to folder<QuickBuild server (or agent) install dir>/bin. On Windows system with UAC enabled, you will need toopen the command prompt window as Administrator.Run commandserver.bat install(oragent.bat install) from command prompt window, and a Windows service with the nameQuickBuild Serverwill be installed.If you want to uninstall the service later, just run commandserver.bat remove(oragent.bat remove) in the command prompt window (make sure the command prompt window isopened with administrative righton Windows system with UAC enabled)."
      },
      {
        "header": "On Unix family Platforms (including MacOS X and Linux)â",
        "content": "Open a command shell and switch to folder<QuickBuild server (or agent) install dir>/bin.Edit fileserver.sh(oragent.sh) to uncomment below line to specify the OS user to run the service as. Make sure the user has full permission against QuickBuild installation directory including all sub directories and files.#RUN_AS_USER=The service will be run under root account if this line is commented out.If necessary, edit above file to specify desired display name and description of the service via propertyAPP_NAMEandAPP_LONG_NAME.warningMake sure to modify these properties to use different service name and description if you want to install multiple QuickBuild servers or agents in the same machine.Run commandserver.sh install(oragent.sh install) to install the service.If you want to uninstall the service later, just run commandserver.sh remove(oragent.sh remove) in the command shell."
      }
    ],
    "links": []
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Upgrade+to+14.0.x",
    "title": "Upgrade to 14.0.x",
    "breadcrumb": [
      "",
      "Upgrade Guide"
    ],
    "full_text": "Upgrade Guide\nUpgrade to 14.0.x\nVersion: QB14\nOn this page\nUpgrade to 14.0.x\nwarning\nQB9 or higher requires Java 1.8 or higher both for server and agent\nUpgrade procedures\nâ\nfrom 14.0.x\nfrom 13.0.x\nfrom 12.0.x\nfrom 11.0.x\nfrom 10.0.x\nfrom 9.0.x\nfrom 8.0.x\nfrom 7.0.x\nfrom 6.1.x\nfrom 6.0.x\nfrom 5.1.x\nfrom 5.0.x\nfrom 4.0.x (except 4.0.61 and 4.0.62)\nfrom 4.0.61 or 4.0.62\nfrom 3.1.x\nfrom 3.0.x\nfrom 2.1.x\nfrom 2.0.x\nfrom 1.x\nfrom Luntbuild\nTypical errors when upgrade to 9.0 with Java 11\nResolution\nJDBC driver related errors\nUpdate JDBC driver in current QuickBuild installation to latest version\nClass format related errors\nUse Java 11.0.2 instead of 11.0.1\nImportant changes affecting versions before 7.0\nâ\nPublish directory of new build will be stored into a sub directory using last three digits of build id to avoid too many files issue. Old builds still remains in old place and can be recognized by QuickBuild. If you need to get path to build publish directory, please call build.getPublishDir() as it handles the change transparently\nBean editor annotation\n@FileInput\nnow populates related field with below format instead of a single file name:\n<\noriginal upload file name\n>\n/\n<\nBase64\nencoding of upload file content\n>\nThis only affects users using the annotation @FileInput while writing their QuickBuild plugins\nImportant changes affecting 4.0.x Users\nâ\nQuickBuild server, user agent and build agent now requires at least Java 6.\nAs mentioned in the upgrade guide, the first upgrade to 5.0.x from 4.0.x may require the user and build agent to be started manually due to introducing of the new bootstrap update mechanism. This manually start will not be necessary for subsequent upgrades.\nUsers will not be able to share dashboards to groups unless they are authorized with permission\nShare Dashboard Allowed\n.\nPermanent link to a set of published artifacts have been changed. Refer to below link for details:\nhttps://wiki.pmease.com/display/QB50/Working+with+Artifacts#WorkingwithArtifacts-Permanentlinkstoasetofartifactfiles\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Upgrade to 14.0.x",
        "content": ""
      },
      {
        "header": "Upgrade proceduresâ",
        "content": "from 14.0.xfrom 13.0.xfrom 12.0.xfrom 11.0.xfrom 10.0.xfrom 9.0.xfrom 8.0.xfrom 7.0.xfrom 6.1.xfrom 6.0.xfrom 5.1.xfrom 5.0.xfrom 4.0.x (except 4.0.61 and 4.0.62)from 4.0.61 or 4.0.62from 3.1.xfrom 3.0.xfrom 2.1.xfrom 2.0.xfrom 1.xfrom Luntbuild Typical errors when upgrade to 9.0 with Java 11ResolutionJDBC driver related errorsUpdate JDBC driver in current QuickBuild installation to latest versionClass format related errorsUse Java 11.0.2 instead of 11.0.1"
      },
      {
        "header": "Important changes affecting versions before 7.0â",
        "content": "Publish directory of new build will be stored into a sub directory using last three digits of build id to avoid too many files issue. Old builds still remains in old place and can be recognized by QuickBuild. If you need to get path to build publish directory, please call build.getPublishDir() as it handles the change transparentlyBean editor annotation@FileInputnow populates related field with below format instead of a single file name:<original upload file name>/<Base64encoding of upload file content>This only affects users using the annotation @FileInput while writing their QuickBuild plugins"
      },
      {
        "header": "Important changes affecting 4.0.x Usersâ",
        "content": "QuickBuild server, user agent and build agent now requires at least Java 6.As mentioned in the upgrade guide, the first upgrade to 5.0.x from 4.0.x may require the user and build agent to be started manually due to introducing of the new bootstrap update mechanism. This manually start will not be necessary for subsequent upgrades.Users will not be able to share dashboards to groups unless they are authorized with permissionShare Dashboard Allowed.Permanent link to a set of published artifacts have been changed. Refer to below link for details:https://wiki.pmease.com/display/QB50/Working+with+Artifacts#WorkingwithArtifacts-Permanentlinkstoasetofartifactfiles"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Upgrade+to+13.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+12.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+11.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+10.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+9.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+8.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+7.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+6.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+6.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+5.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+5.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+4.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+3.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+3.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+2.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+2.0.x",
      "https://wiki.pmease.com/display/QB14/category/Procedures",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+and+Start+Agent",
      "https://wiki.pmease.com/display/QB14/Backup+and+Restore+Data",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+And+Agent",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+And+Agent",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+And+Agent",
      "https://wiki.pmease.com/display/QB14/Upgrade+2.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+QuickBuild+1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+Luntbuild",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+13.0.x"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Upgrade+to+13.0.x",
    "title": "Upgrade to 13.0.x",
    "breadcrumb": [
      "",
      "Upgrade Guide"
    ],
    "full_text": "Upgrade Guide\nUpgrade to 13.0.x\nVersion: QB14\nOn this page\nUpgrade to 13.0.x\nwarning\nQB9 or higher requires Java 1.8 or higher both for server and agent\nUpgrade procedures\nâ\nfrom 13.0.x\nfrom 12.0.x\nfrom 11.0.x\nfrom 10.0.x\nfrom 9.0.x\nfrom 8.0.x\nfrom 7.0.x\nfrom 6.1.x\nfrom 6.0.x\nfrom 5.1.x\nfrom 5.0.x\nfrom 4.0.x (except 4.0.61 and 4.0.62)\nfrom 4.0.61 or 4.0.62\nfrom 3.1.x\nfrom 3.0.x\nfrom 2.1.x\nfrom 2.0.x\nfrom 1.x\nfrom Luntbuild\nTypical errors when upgrade to 9.0 with Java 11\nResolution\nJDBC driver related errors\nUpdate JDBC driver in current QuickBuild installation to latest version\nClass format related errors\nUse Java 11.0.2 instead of 11.0.1\nImportant changes affecting versions before 7.0\nâ\nPublish directory of new build will be stored into a sub directory using last three digits of build id to avoid too many files issue. Old builds still remains in old place and can be recognized by QuickBuild. If you need to get path to build publish directory, please call build.getPublishDir() as it handles the change transparently\nBean editor annotation\n@FileInput\nnow populates related field with below format instead of a single file name:\n<\noriginal upload file name\n>\n/\n<\nBase64\nencoding of upload file content\n>\nThis only affects users using the annotation @FileInput while writing their QuickBuild plugins\nImportant changes affecting 4.0.x Users\nâ\nQuickBuild server, user agent and build agent now requires at least Java 6.\nAs mentioned in the upgrade guide, the first upgrade to 5.0.x from 4.0.x may require the user and build agent to be started manually due to introducing of the new bootstrap update mechanism. This manually start will not be necessary for subsequent upgrades.\nUsers will not be able to share dashboards to groups unless they are authorized with permission\nShare Dashboard Allowed\n.\nPermanent link to a set of published artifacts have been changed. Refer to below link for details:\nhttps://wiki.pmease.com/display/QB50/Working+with+Artifacts#WorkingwithArtifacts-Permanentlinkstoasetofartifactfiles\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Upgrade to 13.0.x",
        "content": ""
      },
      {
        "header": "Upgrade proceduresâ",
        "content": "from 13.0.xfrom 12.0.xfrom 11.0.xfrom 10.0.xfrom 9.0.xfrom 8.0.xfrom 7.0.xfrom 6.1.xfrom 6.0.xfrom 5.1.xfrom 5.0.xfrom 4.0.x (except 4.0.61 and 4.0.62)from 4.0.61 or 4.0.62from 3.1.xfrom 3.0.xfrom 2.1.xfrom 2.0.xfrom 1.xfrom Luntbuild Typical errors when upgrade to 9.0 with Java 11ResolutionJDBC driver related errorsUpdate JDBC driver in current QuickBuild installation to latest versionClass format related errorsUse Java 11.0.2 instead of 11.0.1"
      },
      {
        "header": "Important changes affecting versions before 7.0â",
        "content": "Publish directory of new build will be stored into a sub directory using last three digits of build id to avoid too many files issue. Old builds still remains in old place and can be recognized by QuickBuild. If you need to get path to build publish directory, please call build.getPublishDir() as it handles the change transparentlyBean editor annotation@FileInputnow populates related field with below format instead of a single file name:<original upload file name>/<Base64encoding of upload file content>This only affects users using the annotation @FileInput while writing their QuickBuild plugins"
      },
      {
        "header": "Important changes affecting 4.0.x Usersâ",
        "content": "QuickBuild server, user agent and build agent now requires at least Java 6.As mentioned in the upgrade guide, the first upgrade to 5.0.x from 4.0.x may require the user and build agent to be started manually due to introducing of the new bootstrap update mechanism. This manually start will not be necessary for subsequent upgrades.Users will not be able to share dashboards to groups unless they are authorized with permissionShare Dashboard Allowed.Permanent link to a set of published artifacts have been changed. Refer to below link for details:https://wiki.pmease.com/display/QB50/Working+with+Artifacts#WorkingwithArtifacts-Permanentlinkstoasetofartifactfiles"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Upgrade+to+12.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+11.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+10.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+9.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+8.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+7.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+6.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+6.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+5.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+5.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+4.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+3.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+3.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+2.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+2.0.x",
      "https://wiki.pmease.com/display/QB14/category/Procedures",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+and+Start+Agent",
      "https://wiki.pmease.com/display/QB14/Backup+and+Restore+Data",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+And+Agent",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+And+Agent",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+And+Agent",
      "https://wiki.pmease.com/display/QB14/Upgrade+2.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+QuickBuild+1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+Luntbuild",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+12.0.x"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Upgrade+to+12.0.x",
    "title": "Upgrade to 12.0.x",
    "breadcrumb": [
      "",
      "Upgrade Guide"
    ],
    "full_text": "Upgrade Guide\nUpgrade to 12.0.x\nVersion: QB14\nOn this page\nUpgrade to 12.0.x\nwarning\nQB9 or higher requires Java 1.8 or higher both for server and agent\nUpgrade procedures\nâ\nfrom 12.0.x\nfrom 11.0.x\nfrom 10.0.x\nfrom 9.0.x\nfrom 8.0.x\nfrom 7.0.x\nfrom 6.1.x\nfrom 6.0.x\nfrom 5.1.x\nfrom 5.0.x\nfrom 4.0.x (except 4.0.61 and 4.0.62)\nfrom 4.0.61 or 4.0.62\nfrom 3.1.x\nfrom 3.0.x\nfrom 2.1.x\nfrom 2.0.x\nfrom 1.x\nfrom Luntbuild\nTypical errors when upgrade to 9.0 with Java 11\nResolution\nJDBC driver related errors\nUpdate JDBC driver in current QuickBuild installation to latest version\nClass format related errors\nUse Java 11.0.2 instead of 11.0.1\nImportant changes affecting versions before 7.0\nâ\nPublish directory of new build will be stored into a sub directory using last three digits of build id to avoid too many files issue. Old builds still remains in old place and can be recognized by QuickBuild. If you need to get path to build publish directory, please call build.getPublishDir() as it handles the change transparently\nBean editor annotation\n@FileInput\nnow populates related field with below format instead of a single file name:\n<\noriginal upload file name\n>\n/\n<\nBase64\nencoding of upload file content\n>\nThis only affects users using the annotation @FileInput while writing their QuickBuild plugins\nImportant changes affecting 4.0.x Users\nâ\nQuickBuild server, user agent and build agent now requires at least Java 6.\nAs mentioned in the upgrade guide, the first upgrade to 5.0.x from 4.0.x may require the user and build agent to be started manually due to introducing of the new bootstrap update mechanism. This manually start will not be necessary for subsequent upgrades.\nUsers will not be able to share dashboards to groups unless they are authorized with permission\nShare Dashboard Allowed\n.\nPermanent link to a set of published artifacts have been changed. Refer to below link for details:\nhttps://wiki.pmease.com/display/QB50/Working+with+Artifacts#WorkingwithArtifacts-Permanentlinkstoasetofartifactfiles\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Upgrade to 12.0.x",
        "content": ""
      },
      {
        "header": "Upgrade proceduresâ",
        "content": "from 12.0.xfrom 11.0.xfrom 10.0.xfrom 9.0.xfrom 8.0.xfrom 7.0.xfrom 6.1.xfrom 6.0.xfrom 5.1.xfrom 5.0.xfrom 4.0.x (except 4.0.61 and 4.0.62)from 4.0.61 or 4.0.62from 3.1.xfrom 3.0.xfrom 2.1.xfrom 2.0.xfrom 1.xfrom Luntbuild Typical errors when upgrade to 9.0 with Java 11ResolutionJDBC driver related errorsUpdate JDBC driver in current QuickBuild installation to latest versionClass format related errorsUse Java 11.0.2 instead of 11.0.1"
      },
      {
        "header": "Important changes affecting versions before 7.0â",
        "content": "Publish directory of new build will be stored into a sub directory using last three digits of build id to avoid too many files issue. Old builds still remains in old place and can be recognized by QuickBuild. If you need to get path to build publish directory, please call build.getPublishDir() as it handles the change transparentlyBean editor annotation@FileInputnow populates related field with below format instead of a single file name:<original upload file name>/<Base64encoding of upload file content>This only affects users using the annotation @FileInput while writing their QuickBuild plugins"
      },
      {
        "header": "Important changes affecting 4.0.x Usersâ",
        "content": "QuickBuild server, user agent and build agent now requires at least Java 6.As mentioned in the upgrade guide, the first upgrade to 5.0.x from 4.0.x may require the user and build agent to be started manually due to introducing of the new bootstrap update mechanism. This manually start will not be necessary for subsequent upgrades.Users will not be able to share dashboards to groups unless they are authorized with permissionShare Dashboard Allowed.Permanent link to a set of published artifacts have been changed. Refer to below link for details:https://wiki.pmease.com/display/QB50/Working+with+Artifacts#WorkingwithArtifacts-Permanentlinkstoasetofartifactfiles"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Upgrade+to+11.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+10.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+9.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+8.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+7.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+6.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+6.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+5.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+5.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+4.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+3.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+3.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+2.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+2.0.x",
      "https://wiki.pmease.com/display/QB14/category/Procedures",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+and+Start+Agent",
      "https://wiki.pmease.com/display/QB14/Backup+and+Restore+Data",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+And+Agent",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+And+Agent",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+And+Agent",
      "https://wiki.pmease.com/display/QB14/Upgrade+2.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+QuickBuild+1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+Luntbuild",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+11.0.x"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Upgrade+to+11.0.x",
    "title": "Upgrade to 11.0.x",
    "breadcrumb": [
      "",
      "Upgrade Guide"
    ],
    "full_text": "Upgrade Guide\nUpgrade to 11.0.x\nVersion: QB14\nOn this page\nUpgrade to 11.0.x\nwarning\nQB9 or higher requires Java 1.8 or higher both for server and agent\nUpgrade procedures\nâ\nfrom 11.0.x\nfrom 10.0.x\nfrom 9.0.x\nfrom 8.0.x\nfrom 7.0.x\nfrom 6.1.x\nfrom 6.0.x\nfrom 5.1.x\nfrom 5.0.x\nfrom 4.0.x (except 4.0.61 and 4.0.62)\nfrom 4.0.61 or 4.0.62\nfrom 3.1.x\nfrom 3.0.x\nfrom 2.1.x\nfrom 2.0.x\nfrom 1.x\nfrom Luntbuild\nTypical errors when upgrade to 9.0 with Java 11\nResolution\nJDBC driver related errors\nUpdate JDBC driver in current QuickBuild installation to latest version\nClass format related errors\nUse Java 11.0.2 instead of 11.0.1\nImportant changes affecting versions before 7.0\nâ\nPublish directory of new build will be stored into a sub directory using last three digits of build id to avoid too many files issue. Old builds still remains in old place and can be recognized by QuickBuild. If you need to get path to build publish directory, please call build.getPublishDir() as it handles the change transparently\nBean editor annotation\n@FileInput\nnow populates related field with below format instead of a single file name:\n<\noriginal upload file name\n>\n/\n<\nBase64\nencoding of upload file content\n>\nThis only affects users using the annotation @FileInput while writing their QuickBuild plugins\nImportant changes affecting 4.0.x Users\nâ\nQuickBuild server, user agent and build agent now requires at least Java 6.\nAs mentioned in the upgrade guide, the first upgrade to 5.0.x from 4.0.x may require the user and build agent to be started manually due to introducing of the new bootstrap update mechanism. This manually start will not be necessary for subsequent upgrades.\nUsers will not be able to share dashboards to groups unless they are authorized with permission\nShare Dashboard Allowed\n.\nPermanent link to a set of published artifacts have been changed. Refer to below link for details:\nhttps://wiki.pmease.com/display/QB50/Working+with+Artifacts#WorkingwithArtifacts-Permanentlinkstoasetofartifactfiles\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Upgrade to 11.0.x",
        "content": ""
      },
      {
        "header": "Upgrade proceduresâ",
        "content": "from 11.0.xfrom 10.0.xfrom 9.0.xfrom 8.0.xfrom 7.0.xfrom 6.1.xfrom 6.0.xfrom 5.1.xfrom 5.0.xfrom 4.0.x (except 4.0.61 and 4.0.62)from 4.0.61 or 4.0.62from 3.1.xfrom 3.0.xfrom 2.1.xfrom 2.0.xfrom 1.xfrom Luntbuild Typical errors when upgrade to 9.0 with Java 11ResolutionJDBC driver related errorsUpdate JDBC driver in current QuickBuild installation to latest versionClass format related errorsUse Java 11.0.2 instead of 11.0.1"
      },
      {
        "header": "Important changes affecting versions before 7.0â",
        "content": "Publish directory of new build will be stored into a sub directory using last three digits of build id to avoid too many files issue. Old builds still remains in old place and can be recognized by QuickBuild. If you need to get path to build publish directory, please call build.getPublishDir() as it handles the change transparentlyBean editor annotation@FileInputnow populates related field with below format instead of a single file name:<original upload file name>/<Base64encoding of upload file content>This only affects users using the annotation @FileInput while writing their QuickBuild plugins"
      },
      {
        "header": "Important changes affecting 4.0.x Usersâ",
        "content": "QuickBuild server, user agent and build agent now requires at least Java 6.As mentioned in the upgrade guide, the first upgrade to 5.0.x from 4.0.x may require the user and build agent to be started manually due to introducing of the new bootstrap update mechanism. This manually start will not be necessary for subsequent upgrades.Users will not be able to share dashboards to groups unless they are authorized with permissionShare Dashboard Allowed.Permanent link to a set of published artifacts have been changed. Refer to below link for details:https://wiki.pmease.com/display/QB50/Working+with+Artifacts#WorkingwithArtifacts-Permanentlinkstoasetofartifactfiles"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Upgrade+to+10.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+9.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+8.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+7.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+6.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+6.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+5.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+5.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+4.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+3.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+3.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+2.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+2.0.x",
      "https://wiki.pmease.com/display/QB14/category/Procedures",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+and+Start+Agent",
      "https://wiki.pmease.com/display/QB14/Backup+and+Restore+Data",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+And+Agent",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+And+Agent",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+And+Agent",
      "https://wiki.pmease.com/display/QB14/Upgrade+2.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+QuickBuild+1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+Luntbuild",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+10.0.x"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Upgrade+to+10.0.x",
    "title": "Upgrade to 10.0.x",
    "breadcrumb": [
      "",
      "Upgrade Guide"
    ],
    "full_text": "Upgrade Guide\nUpgrade to 10.0.x\nVersion: QB14\nOn this page\nUpgrade to 10.0.x\nwarning\nQB9 or higher requires Java 1.8 or higher both for server and agent\nUpgrade procedures\nâ\nfrom 10.0.x\nfrom 9.0.x\nfrom 8.0.x\nfrom 7.0.x\nfrom 6.1.x\nfrom 6.0.x\nfrom 5.1.x\nfrom 5.0.x\nfrom 4.0.x (except 4.0.61 and 4.0.62)\nfrom 4.0.61 or 4.0.62\nfrom 3.1.x\nfrom 3.0.x\nfrom 2.1.x\nfrom 2.0.x\nfrom 1.x\nfrom Luntbuild\nTypical errors when upgrade to 9.0 with Java 11\nResolution\nJDBC driver related errors\nUpdate JDBC driver in current QuickBuild installation to latest version\nClass format related errors\nUse Java 11.0.2 instead of 11.0.1\nImportant changes affecting versions before 7.0\nâ\nPublish directory of new build will be stored into a sub directory using last three digits of build id to avoid too many files issue. Old builds still remains in old place and can be recognized by QuickBuild. If you need to get path to build publish directory, please call build.getPublishDir() as it handles the change transparently\nBean editor annotation\n@FileInput\nnow populates related field with below format instead of a single file name:\n<\noriginal upload file name\n>\n/\n<\nBase64\nencoding of upload file content\n>\nThis only affects users using the annotation @FileInput while writing their QuickBuild plugins\nImportant changes affecting 4.0.x Users\nâ\nQuickBuild server, user agent and build agent now requires at least Java 6.\nAs mentioned in the upgrade guide, the first upgrade to 5.0.x from 4.0.x may require the user and build agent to be started manually due to introducing of the new bootstrap update mechanism. This manually start will not be necessary for subsequent upgrades.\nUsers will not be able to share dashboards to groups unless they are authorized with permission\nShare Dashboard Allowed\n.\nPermanent link to a set of published artifacts have been changed. Refer to below link for details:\nhttps://wiki.pmease.com/display/QB50/Working+with+Artifacts#WorkingwithArtifacts-Permanentlinkstoasetofartifactfiles\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Upgrade to 10.0.x",
        "content": ""
      },
      {
        "header": "Upgrade proceduresâ",
        "content": "from 10.0.xfrom 9.0.xfrom 8.0.xfrom 7.0.xfrom 6.1.xfrom 6.0.xfrom 5.1.xfrom 5.0.xfrom 4.0.x (except 4.0.61 and 4.0.62)from 4.0.61 or 4.0.62from 3.1.xfrom 3.0.xfrom 2.1.xfrom 2.0.xfrom 1.xfrom Luntbuild Typical errors when upgrade to 9.0 with Java 11ResolutionJDBC driver related errorsUpdate JDBC driver in current QuickBuild installation to latest versionClass format related errorsUse Java 11.0.2 instead of 11.0.1"
      },
      {
        "header": "Important changes affecting versions before 7.0â",
        "content": "Publish directory of new build will be stored into a sub directory using last three digits of build id to avoid too many files issue. Old builds still remains in old place and can be recognized by QuickBuild. If you need to get path to build publish directory, please call build.getPublishDir() as it handles the change transparentlyBean editor annotation@FileInputnow populates related field with below format instead of a single file name:<original upload file name>/<Base64encoding of upload file content>This only affects users using the annotation @FileInput while writing their QuickBuild plugins"
      },
      {
        "header": "Important changes affecting 4.0.x Usersâ",
        "content": "QuickBuild server, user agent and build agent now requires at least Java 6.As mentioned in the upgrade guide, the first upgrade to 5.0.x from 4.0.x may require the user and build agent to be started manually due to introducing of the new bootstrap update mechanism. This manually start will not be necessary for subsequent upgrades.Users will not be able to share dashboards to groups unless they are authorized with permissionShare Dashboard Allowed.Permanent link to a set of published artifacts have been changed. Refer to below link for details:https://wiki.pmease.com/display/QB50/Working+with+Artifacts#WorkingwithArtifacts-Permanentlinkstoasetofartifactfiles"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Upgrade+to+9.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+8.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+7.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+6.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+6.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+5.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+5.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+4.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+3.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+3.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+2.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+2.0.x",
      "https://wiki.pmease.com/display/QB14/category/Procedures",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+and+Start+Agent",
      "https://wiki.pmease.com/display/QB14/Backup+and+Restore+Data",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+And+Agent",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+And+Agent",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+And+Agent",
      "https://wiki.pmease.com/display/QB14/Upgrade+2.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+QuickBuild+1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+Luntbuild",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+9.0.x"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Upgrade+to+9.0.x",
    "title": "Upgrade to 9.0.x",
    "breadcrumb": [
      "",
      "Upgrade Guide"
    ],
    "full_text": "Upgrade Guide\nUpgrade to 9.0.x\nVersion: QB14\nOn this page\nUpgrade to 9.0.x\nwarning\n9.0.x now requires Java 1.8 or higher both for server and agent\nUpgrade procedures\nâ\nfrom 9.0.x\nfrom 8.0.x\nfrom 7.0.x\nfrom 6.1.x\nfrom 6.0.x\nfrom 5.1.x\nfrom 5.0.x\nfrom 4.0.x (except 4.0.61 and 4.0.62)\nfrom 4.0.61 or 4.0.62\nfrom 3.1.x\nfrom 3.0.x\nfrom 2.1.x\nfrom 2.0.x\nfrom 1.x\nfrom Luntbuild\nTypical errors when upgrade to 9.0 with Java 11\nResolution\nJDBC driver related errors\nUpdate JDBC driver in current QuickBuild installation to latest version\nClass format related errors\nUse Java 11.0.2 instead of 11.0.1\nImportant changes affecting versions before 7.0\nâ\nPublish directory of new build will be stored into a sub directory using last three digits of build id to avoid too many files issue. Old builds still remains in old place and can be recognized by QuickBuild. If you need to get path to build publish directory, please call build.getPublishDir() as it handles the change transparently\nBean editor annotation\n@FileInput\nnow populates related field with below format instead of a single file name:\n<\noriginal upload file name\n>\n/\n<\nBase64\nencoding of upload file content\n>\nThis only affects users using the annotation @FileInput while writing their QuickBuild plugins\nImportant changes affecting 4.0.x Users\nâ\nQuickBuild server, user agent and build agent now requires at least Java 6.\nAs mentioned in the upgrade guide, the first upgrade to 5.0.x from 4.0.x may require the user and build agent to be started manually due to introducing of the new bootstrap update mechanism. This manually start will not be necessary for subsequent upgrades.\nUsers will not be able to share dashboards to groups unless they are authorized with permission\nShare Dashboard Allowed\n.\nPermanent link to a set of published artifacts have been changed. Refer to below link for details:\nhttps://wiki.pmease.com/display/QB50/Working+with+Artifacts#WorkingwithArtifacts-Permanentlinkstoasetofartifactfiles\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Upgrade to 9.0.x",
        "content": ""
      },
      {
        "header": "Upgrade proceduresâ",
        "content": "from 9.0.xfrom 8.0.xfrom 7.0.xfrom 6.1.xfrom 6.0.xfrom 5.1.xfrom 5.0.xfrom 4.0.x (except 4.0.61 and 4.0.62)from 4.0.61 or 4.0.62from 3.1.xfrom 3.0.xfrom 2.1.xfrom 2.0.xfrom 1.xfrom Luntbuild Typical errors when upgrade to 9.0 with Java 11ResolutionJDBC driver related errorsUpdate JDBC driver in current QuickBuild installation to latest versionClass format related errorsUse Java 11.0.2 instead of 11.0.1"
      },
      {
        "header": "Important changes affecting versions before 7.0â",
        "content": "Publish directory of new build will be stored into a sub directory using last three digits of build id to avoid too many files issue. Old builds still remains in old place and can be recognized by QuickBuild. If you need to get path to build publish directory, please call build.getPublishDir() as it handles the change transparentlyBean editor annotation@FileInputnow populates related field with below format instead of a single file name:<original upload file name>/<Base64encoding of upload file content>This only affects users using the annotation @FileInput while writing their QuickBuild plugins"
      },
      {
        "header": "Important changes affecting 4.0.x Usersâ",
        "content": "QuickBuild server, user agent and build agent now requires at least Java 6.As mentioned in the upgrade guide, the first upgrade to 5.0.x from 4.0.x may require the user and build agent to be started manually due to introducing of the new bootstrap update mechanism. This manually start will not be necessary for subsequent upgrades.Users will not be able to share dashboards to groups unless they are authorized with permissionShare Dashboard Allowed.Permanent link to a set of published artifacts have been changed. Refer to below link for details:https://wiki.pmease.com/display/QB50/Working+with+Artifacts#WorkingwithArtifacts-Permanentlinkstoasetofartifactfiles"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Upgrade+to+8.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+7.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+6.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+6.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+5.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+5.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+4.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+3.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+3.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+2.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+2.0.x",
      "https://wiki.pmease.com/display/QB14/category/Procedures",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+and+Start+Agent",
      "https://wiki.pmease.com/display/QB14/Backup+and+Restore+Data",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+And+Agent",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+And+Agent",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+And+Agent",
      "https://wiki.pmease.com/display/QB14/Upgrade+2.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+QuickBuild+1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+Luntbuild",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+8.0.x"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Upgrade+to+8.0.x",
    "title": "Upgrade to 8.0.x",
    "breadcrumb": [
      "",
      "Upgrade Guide"
    ],
    "full_text": "Upgrade Guide\nUpgrade to 8.0.x\nVersion: QB14\nOn this page\nUpgrade to 8.0.x\nUpgrade procedures\nâ\nfrom 8.0.x\nfrom 7.0.x\nfrom 6.1.x\nfrom 6.0.x\nfrom 5.1.x\nfrom 5.0.x\nfrom 4.0.x (except 4.0.61 and 4.0.62)\nfrom 4.0.61 or 4.0.62\nfrom 3.1.x\nfrom 3.0.x\nfrom 2.1.x\nfrom 2.0.x\nfrom 1.x\nfrom Luntbuild\nImportant changes affecting versions before 7.0\nâ\nPublish directory of new build will be stored into a sub directory using last three digits of build id to avoid too many files issue. Old builds still remains in old place and can be recognized by QuickBuild. If you need to get path to build publish directory, please call build.getPublishDir() as it handles the change transparently\nBean editor annotation\n@FileInput\nnow populates related field with below format instead of a single file name:\n<\noriginal upload file name\n>\n/\n<\nBase64\nencoding of upload file content\n>\nThis only affects users using the annotation @FileInput while writing their QuickBuild plugins\nImportant changes affecting 4.0.x Users\nâ\nQuickBuild server, user agent and build agent now requires at least Java 6.\nAs mentioned in the upgrade guide, the first upgrade to 5.0.x from 4.0.x may require the user and build agent to be started manually due to introducing of the new bootstrap update mechanism. This manually start will not be necessary for subsequent upgrades.\nUsers will not be able to share dashboards to groups unless they are authorized with permission\nShare Dashboard Allowed\n.\nPermanent link to a set of published artifacts have been changed. Refer to below link for details:\nhttps://wiki.pmease.com/display/QB50/Working+with+Artifacts#WorkingwithArtifacts-Permanentlinkstoasetofartifactfiles\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Upgrade to 8.0.x",
        "content": ""
      },
      {
        "header": "Upgrade proceduresâ",
        "content": "from 8.0.xfrom 7.0.xfrom 6.1.xfrom 6.0.xfrom 5.1.xfrom 5.0.xfrom 4.0.x (except 4.0.61 and 4.0.62)from 4.0.61 or 4.0.62from 3.1.xfrom 3.0.xfrom 2.1.xfrom 2.0.xfrom 1.xfrom Luntbuild"
      },
      {
        "header": "Important changes affecting versions before 7.0â",
        "content": "Publish directory of new build will be stored into a sub directory using last three digits of build id to avoid too many files issue. Old builds still remains in old place and can be recognized by QuickBuild. If you need to get path to build publish directory, please call build.getPublishDir() as it handles the change transparentlyBean editor annotation@FileInputnow populates related field with below format instead of a single file name:<original upload file name>/<Base64encoding of upload file content>This only affects users using the annotation @FileInput while writing their QuickBuild plugins"
      },
      {
        "header": "Important changes affecting 4.0.x Usersâ",
        "content": "QuickBuild server, user agent and build agent now requires at least Java 6.As mentioned in the upgrade guide, the first upgrade to 5.0.x from 4.0.x may require the user and build agent to be started manually due to introducing of the new bootstrap update mechanism. This manually start will not be necessary for subsequent upgrades.Users will not be able to share dashboards to groups unless they are authorized with permissionShare Dashboard Allowed.Permanent link to a set of published artifacts have been changed. Refer to below link for details:https://wiki.pmease.com/display/QB50/Working+with+Artifacts#WorkingwithArtifacts-Permanentlinkstoasetofartifactfiles"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Upgrade+to+7.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+6.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+6.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+5.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+5.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+4.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+3.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+3.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+2.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+2.0.x",
      "https://wiki.pmease.com/display/QB14/category/Procedures",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+and+Start+Agent",
      "https://wiki.pmease.com/display/QB14/Backup+and+Restore+Data",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+And+Agent",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+And+Agent",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+And+Agent",
      "https://wiki.pmease.com/display/QB14/Upgrade+2.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+QuickBuild+1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+Luntbuild",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+7.0.x"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Upgrade+to+7.0.x",
    "title": "Upgrade to 7.0.x",
    "breadcrumb": [
      "",
      "Upgrade Guide"
    ],
    "full_text": "Upgrade Guide\nUpgrade to 7.0.x\nVersion: QB14\nOn this page\nUpgrade to 7.0.x\nUpgrade procedures\nâ\nfrom 7.0.x\nfrom 6.1.x\nfrom 6.0.x\nfrom 5.1.x\nfrom 5.0.x\nfrom 4.0.x (except 4.0.61 and 4.0.62)\nfrom 4.0.61 or 4.0.62\nfrom 3.1.x\nfrom 3.0.x\nfrom 2.1.x\nfrom 2.0.x\nfrom 1.x\nfrom Luntbuild\nImportant changes affecting versions before 7.0\nâ\nPublish directory of new build will be stored into a sub directory using last three digits of build id to avoid too many files issue. Old builds still remains in old place and can be recognized by QuickBuild. If you need to get path to build publish directory, please call build.getPublishDir() as it handles the change transparently\nBean editor annotation\n@FileInput\nnow populates related field with below format instead of a single file name:\n<\noriginal upload file name\n>\n/\n<\nBase64\nencoding of upload file content\n>\nThis only affects users using the annotation @FileInput while writing their QuickBuild plugins\nImportant changes affecting 4.0.x Users\nâ\nQuickBuild server, user agent and build agent now requires at least Java 6.\nAs mentioned in the upgrade guide, the first upgrade to 5.0.x from 4.0.x may require the user and build agent to be started manually due to introducing of the new bootstrap update mechanism. This manually start will not be necessary for subsequent upgrades.\nUsers will not be able to share dashboards to groups unless they are authorized with permission\nShare Dashboard Allowed\n.\nPermanent link to a set of published artifacts have been changed. Refer to below link for details:\nhttps://wiki.pmease.com/display/QB50/Working+with+Artifacts#WorkingwithArtifacts-Permanentlinkstoasetofartifactfiles\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Upgrade to 7.0.x",
        "content": ""
      },
      {
        "header": "Upgrade proceduresâ",
        "content": "from 7.0.xfrom 6.1.xfrom 6.0.xfrom 5.1.xfrom 5.0.xfrom 4.0.x (except 4.0.61 and 4.0.62)from 4.0.61 or 4.0.62from 3.1.xfrom 3.0.xfrom 2.1.xfrom 2.0.xfrom 1.xfrom Luntbuild"
      },
      {
        "header": "Important changes affecting versions before 7.0â",
        "content": "Publish directory of new build will be stored into a sub directory using last three digits of build id to avoid too many files issue. Old builds still remains in old place and can be recognized by QuickBuild. If you need to get path to build publish directory, please call build.getPublishDir() as it handles the change transparentlyBean editor annotation@FileInputnow populates related field with below format instead of a single file name:<original upload file name>/<Base64encoding of upload file content>This only affects users using the annotation @FileInput while writing their QuickBuild plugins"
      },
      {
        "header": "Important changes affecting 4.0.x Usersâ",
        "content": "QuickBuild server, user agent and build agent now requires at least Java 6.As mentioned in the upgrade guide, the first upgrade to 5.0.x from 4.0.x may require the user and build agent to be started manually due to introducing of the new bootstrap update mechanism. This manually start will not be necessary for subsequent upgrades.Users will not be able to share dashboards to groups unless they are authorized with permissionShare Dashboard Allowed.Permanent link to a set of published artifacts have been changed. Refer to below link for details:https://wiki.pmease.com/display/QB50/Working+with+Artifacts#WorkingwithArtifacts-Permanentlinkstoasetofartifactfiles"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Upgrade+to+6.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+6.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+5.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+5.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+4.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+3.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+3.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+2.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+2.0.x",
      "https://wiki.pmease.com/display/QB14/category/Procedures",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+and+Start+Agent",
      "https://wiki.pmease.com/display/QB14/Backup+and+Restore+Data",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+And+Agent",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+And+Agent",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+And+Agent",
      "https://wiki.pmease.com/display/QB14/Upgrade+2.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+QuickBuild+1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+Luntbuild",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+6.1.x"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Upgrade+to+6.1.x",
    "title": "Upgrade to 6.1.x",
    "breadcrumb": [
      "",
      "Upgrade Guide"
    ],
    "full_text": "Upgrade Guide\nUpgrade to 6.1.x\nVersion: QB14\nOn this page\nUpgrade to 6.1.x\nUpgrade Procedures\nâ\nfrom 6.1.x\nfrom 6.0.x\nfrom 5.1.x\nfrom 5.0.x\nfrom 4.0.x (except 4.0.61 and 4.0.62)\nfrom 4.0.61 or 4.0.62\nfrom 3.1.x\nfrom 3.0.x\nfrom 2.1.x\nfrom 2.0.x\nfrom 1.x\nfrom Luntbuild\nImportant Changes Affecting 4.0.x Users\nâ\nQuickBuild server, user agent and build agent now requires at least Java 6.\nAs mentioned in the upgrade guide, the first upgrade to 5.0.x from 4.0.x may require the user and build agent to be started manually due to introducing of the new bootstrap update mechanism. This manually start will not be necessary for subsequent upgrades.\nUsers will not be able to share dashboards to groups unless they are authorized with permission\nShare Dashboard Allowed\n.\nPermanent link to a set of published artifacts have been changed. Refer to below link for details:\nhttps://wiki.pmease.com/display/QB50/Working+with+Artifacts#WorkingwithArtifacts-Permanentlinkstoasetofartifactfiles\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Upgrade to 6.1.x",
        "content": ""
      },
      {
        "header": "Upgrade Proceduresâ",
        "content": "from 6.1.xfrom 6.0.xfrom 5.1.xfrom 5.0.xfrom 4.0.x (except 4.0.61 and 4.0.62)from 4.0.61 or 4.0.62from 3.1.xfrom 3.0.xfrom 2.1.xfrom 2.0.xfrom 1.xfrom Luntbuild"
      },
      {
        "header": "Important Changes Affecting 4.0.x Usersâ",
        "content": "QuickBuild server, user agent and build agent now requires at least Java 6.As mentioned in the upgrade guide, the first upgrade to 5.0.x from 4.0.x may require the user and build agent to be started manually due to introducing of the new bootstrap update mechanism. This manually start will not be necessary for subsequent upgrades.Users will not be able to share dashboards to groups unless they are authorized with permissionShare Dashboard Allowed.Permanent link to a set of published artifacts have been changed. Refer to below link for details:https://wiki.pmease.com/display/QB50/Working+with+Artifacts#WorkingwithArtifacts-Permanentlinkstoasetofartifactfiles"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Upgrade+to+6.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+5.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+5.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+4.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+3.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+3.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+2.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+2.0.x",
      "https://wiki.pmease.com/display/QB14/category/Procedures",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+and+Start+Agent",
      "https://wiki.pmease.com/display/QB14/Backup+and+Restore+Data",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+And+Agent",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+And+Agent",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+And+Agent",
      "https://wiki.pmease.com/display/QB14/Upgrade+2.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+QuickBuild+1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+Luntbuild",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+6.0.x"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Upgrade+to+6.0.x",
    "title": "Upgrade to 6.0.x",
    "breadcrumb": [
      "",
      "Upgrade Guide"
    ],
    "full_text": "Upgrade Guide\nUpgrade to 6.0.x\nVersion: QB14\nOn this page\nUpgrade to 6.0.x\nUpgrade Procedures\nâ\nfrom 6.0.x\nfrom 5.1.x\nfrom 5.0.x\nfrom 4.0.x (except 4.0.61 and 4.0.62)\nfrom 4.0.61 or 4.0.62\nfrom 3.1.x\nfrom 3.0.x\nfrom 2.1.x\nfrom 2.0.x\nfrom 1.x\nfrom Luntbuild\nImportant Changes Affecting 4.0.x Users\nâ\nQuickBuild server, user agent and build agent now requires at least Java 6.\nAs mentioned in the upgrade guide, the first upgrade to 5.0.x from 4.0.x may require the user and build agent to be started manually due to introducing of the new bootstrap update mechanism. This manually start will not be necessary for subsequent upgrades.\nUsers will not be able to share dashboards to groups unless they are authorized with permission\nShare Dashboard Allowed\n.\nPermanent link to a set of published artifacts have been changed. Refer to below link for details:\nhttps://wiki.pmease.com/display/QB50/Working+with+Artifacts#WorkingwithArtifacts-Permanentlinkstoasetofartifactfiles\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Upgrade to 6.0.x",
        "content": ""
      },
      {
        "header": "Upgrade Proceduresâ",
        "content": "from 6.0.xfrom 5.1.xfrom 5.0.xfrom 4.0.x (except 4.0.61 and 4.0.62)from 4.0.61 or 4.0.62from 3.1.xfrom 3.0.xfrom 2.1.xfrom 2.0.xfrom 1.xfrom Luntbuild"
      },
      {
        "header": "Important Changes Affecting 4.0.x Usersâ",
        "content": "QuickBuild server, user agent and build agent now requires at least Java 6.As mentioned in the upgrade guide, the first upgrade to 5.0.x from 4.0.x may require the user and build agent to be started manually due to introducing of the new bootstrap update mechanism. This manually start will not be necessary for subsequent upgrades.Users will not be able to share dashboards to groups unless they are authorized with permissionShare Dashboard Allowed.Permanent link to a set of published artifacts have been changed. Refer to below link for details:https://wiki.pmease.com/display/QB50/Working+with+Artifacts#WorkingwithArtifacts-Permanentlinkstoasetofartifactfiles"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Upgrade+to+5.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+5.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+4.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+3.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+3.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+2.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+2.0.x",
      "https://wiki.pmease.com/display/QB14/category/Procedures",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+and+Start+Agent",
      "https://wiki.pmease.com/display/QB14/Backup+and+Restore+Data",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+And+Agent",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+And+Agent",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+And+Agent",
      "https://wiki.pmease.com/display/QB14/Upgrade+2.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+QuickBuild+1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+Luntbuild",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+5.1.x"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Upgrade+to+5.1.x",
    "title": "Upgrade to 5.1.x",
    "breadcrumb": [
      "",
      "Upgrade Guide"
    ],
    "full_text": "Upgrade Guide\nUpgrade to 5.1.x\nVersion: QB14\nOn this page\nUpgrade to 5.1.x\nUpgrade Procedures\nâ\nfrom 5.1.x\nfrom 5.0.x\nfrom 4.0.x (except 4.0.61 and 4.0.62)\nfrom 4.0.61 or 4.0.62\nfrom 3.1.x\nfrom 3.0.x\nfrom 2.1.x\nfrom 2.0.x\nfrom 1.x\nfrom Luntbuild\nImportant Changes Affecting 4.0.x Users\nâ\nQuickBuild server, user agent and build agent now requires at least Java 6.\nAs mentioned in the upgrade guide, the first upgrade to 5.0.x from 4.0.x may require the user and build agent to be started manually due to introducing of the new bootstrap update mechanism. This manually start will not be necessary for subsequent upgrades.\nUsers will not be able to share dashboards to groups unless they are authorized with permission\nShare Dashboard Allowed\n.\nPermanent link to a set of published artifacts have been changed. Refer to below link for details:\nhttps://wiki.pmease.com/display/QB50/Working+with+Artifacts#WorkingwithArtifacts-Permanentlinkstoasetofartifactfiles\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Upgrade to 5.1.x",
        "content": ""
      },
      {
        "header": "Upgrade Proceduresâ",
        "content": "from 5.1.xfrom 5.0.xfrom 4.0.x (except 4.0.61 and 4.0.62)from 4.0.61 or 4.0.62from 3.1.xfrom 3.0.xfrom 2.1.xfrom 2.0.xfrom 1.xfrom Luntbuild"
      },
      {
        "header": "Important Changes Affecting 4.0.x Usersâ",
        "content": "QuickBuild server, user agent and build agent now requires at least Java 6.As mentioned in the upgrade guide, the first upgrade to 5.0.x from 4.0.x may require the user and build agent to be started manually due to introducing of the new bootstrap update mechanism. This manually start will not be necessary for subsequent upgrades.Users will not be able to share dashboards to groups unless they are authorized with permissionShare Dashboard Allowed.Permanent link to a set of published artifacts have been changed. Refer to below link for details:https://wiki.pmease.com/display/QB50/Working+with+Artifacts#WorkingwithArtifacts-Permanentlinkstoasetofartifactfiles"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Upgrade+to+5.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+4.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+3.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+3.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+2.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+2.0.x",
      "https://wiki.pmease.com/display/QB14/category/Procedures",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+and+Start+Agent",
      "https://wiki.pmease.com/display/QB14/Backup+and+Restore+Data",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+And+Agent",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+And+Agent",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+And+Agent",
      "https://wiki.pmease.com/display/QB14/Upgrade+2.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+QuickBuild+1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+Luntbuild",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+5.0.x"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Upgrade+to+5.0.x",
    "title": "Upgrade to 5.0.x",
    "breadcrumb": [
      "",
      "Upgrade Guide"
    ],
    "full_text": "Upgrade Guide\nUpgrade to 5.0.x\nVersion: QB14\nOn this page\nUpgrade to 5.0.x\nUpgrade Procedures\nâ\nfrom 5.0.x\nfrom 4.0.x (except 4.0.61 and 4.0.62)\nfrom 4.0.61 or 4.0.62\nfrom 3.1.x\nfrom 3.0.x\nfrom 2.1.x\nfrom 2.0.x\nfrom 1.x\nfrom Luntbuild\nImportant Changes Affecting 4.0.x Users\nâ\nQuickBuild server, user agent and build agent now requires at least Java 6.\nAs mentioned in the upgrade guide, the first upgrade to 5.0.x from 4.0.x may require the user and build agent to be started manually due to introducing of the new bootstrap update mechanism. This manually start will not be necessary for subsequent upgrades.\nUsers will not be able to share dashboards to groups unless they are authorized with permission\nShare Dashboard Allowed\n.\nPermanent link to a set of published artifacts have been changed. Refer to below link for details:\nhttps://wiki.pmease.com/display/QB50/Working+with+Artifacts#WorkingwithArtifacts-Permanentlinkstoasetofartifactfiles\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Upgrade to 5.0.x",
        "content": ""
      },
      {
        "header": "Upgrade Proceduresâ",
        "content": "from 5.0.xfrom 4.0.x (except 4.0.61 and 4.0.62)from 4.0.61 or 4.0.62from 3.1.xfrom 3.0.xfrom 2.1.xfrom 2.0.xfrom 1.xfrom Luntbuild"
      },
      {
        "header": "Important Changes Affecting 4.0.x Usersâ",
        "content": "QuickBuild server, user agent and build agent now requires at least Java 6.As mentioned in the upgrade guide, the first upgrade to 5.0.x from 4.0.x may require the user and build agent to be started manually due to introducing of the new bootstrap update mechanism. This manually start will not be necessary for subsequent upgrades.Users will not be able to share dashboards to groups unless they are authorized with permissionShare Dashboard Allowed.Permanent link to a set of published artifacts have been changed. Refer to below link for details:https://wiki.pmease.com/display/QB50/Working+with+Artifacts#WorkingwithArtifacts-Permanentlinkstoasetofartifactfiles"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Upgrade+to+4.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+3.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+3.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+2.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+2.0.x",
      "https://wiki.pmease.com/display/QB14/category/Procedures",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+and+Start+Agent",
      "https://wiki.pmease.com/display/QB14/Backup+and+Restore+Data",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+And+Agent",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+And+Agent",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+And+Agent",
      "https://wiki.pmease.com/display/QB14/Upgrade+2.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+QuickBuild+1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+Luntbuild",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+4.0.x"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Upgrade+to+4.0.x",
    "title": "Upgrade to 4.0.x",
    "breadcrumb": [
      "",
      "Upgrade Guide"
    ],
    "full_text": "Upgrade Guide\nUpgrade to 4.0.x\nVersion: QB14\nOn this page\nUpgrade to 4.0.x\nUpgrade Procedures\nâ\nfrom 4.0.x\nfrom 3.1.x\nfrom 3.0.x\nfrom 2.1.x\nfrom 2.0.x\nfrom 1.x\nfrom Luntbuild\nImportant Changes Affecting 1.x, 2.x and 3.x Users\nâ\nThe queue concept in previous versions has a major drawback that it does not tie with agents, therefore, it is hard to tune concurrent builds based on available agents. Therefore we replaced queue with resource which can be configured to play the role of queue and can be more powerful. However since queue and resource are different concepts, we can not migrate previous queue settings. Users migrated from previous versions will see that the grid allows all builds to happen immediately without queuing. Refer to\nResource Management\non how to queue your builds by configuring appropriate resources.\nChanges for builds generated by QuickBuild 2.x will not be displayed, as we changed the storage mechanism in 4.x to disclose more commit information, and this mechanism is not compatible with the one used in 2.x. Changes information for builds generated by QuickBuild 3.x can still be displayed.\nExisting test history of TestNG will be dropped. The reason is that previously we used method name as key, which is not accurate due to method overloads. In 4.0.x, we use method signature instead to avoid this issue and unfortunately this is not compatible with test history generated by previous versions.\nChanges detection is now happens on the node running master step in order to reduce server load. So please make sure that relevant SCM tools are installed on the master node if necessary.\nThe step pre/post action\nCancel sibling steps if current is failed\nhas been removed. To fail other steps if one step fails, please edit the parallel composition step, and check the\nCancel On Error\noption.\nThe notation to reference latest build with a configuration id has been changed from\n<configuration id>:latest\nto\n<configuration id>.latest\n, and the same applies for latest successful/finished/failed builds. Refer to\nbuild name\nfor details.\nIf you have custom plugins, make sure to [export all packages of the plugin](Write Your First Plugin.html#WriteYourFirstPlugin-exportpackage), and then rebuild and redeploy your plugins.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Upgrade to 4.0.x",
        "content": ""
      },
      {
        "header": "Upgrade Proceduresâ",
        "content": "from 4.0.xfrom 3.1.xfrom 3.0.xfrom 2.1.xfrom 2.0.xfrom 1.xfrom Luntbuild"
      },
      {
        "header": "Important Changes Affecting 1.x, 2.x and 3.x Usersâ",
        "content": "The queue concept in previous versions has a major drawback that it does not tie with agents, therefore, it is hard to tune concurrent builds based on available agents. Therefore we replaced queue with resource which can be configured to play the role of queue and can be more powerful. However since queue and resource are different concepts, we can not migrate previous queue settings. Users migrated from previous versions will see that the grid allows all builds to happen immediately without queuing. Refer toResource Managementon how to queue your builds by configuring appropriate resources.Changes for builds generated by QuickBuild 2.x will not be displayed, as we changed the storage mechanism in 4.x to disclose more commit information, and this mechanism is not compatible with the one used in 2.x. Changes information for builds generated by QuickBuild 3.x can still be displayed.Existing test history of TestNG will be dropped. The reason is that previously we used method name as key, which is not accurate due to method overloads. In 4.0.x, we use method signature instead to avoid this issue and unfortunately this is not compatible with test history generated by previous versions.Changes detection is now happens on the node running master step in order to reduce server load. So please make sure that relevant SCM tools are installed on the master node if necessary.The step pre/post actionCancel sibling steps if current is failedhas been removed. To fail other steps if one step fails, please edit the parallel composition step, and check theCancel On Erroroption.The notation to reference latest build with a configuration id has been changed from<configuration id>:latestto<configuration id>.latest, and the same applies for latest successful/finished/failed builds. Refer tobuild namefor details.If you have custom plugins, make sure to [export all packages of the plugin](Write Your First Plugin.html#WriteYourFirstPlugin-exportpackage), and then rebuild and redeploy your plugins."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Upgrade+to+3.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+3.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+2.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+2.0.x",
      "https://wiki.pmease.com/display/QB14/category/Procedures",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+And+Agent",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+And+Agent",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+And+Agent",
      "https://wiki.pmease.com/display/QB14/Upgrade+2.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+QuickBuild+1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+Luntbuild",
      "https://wiki.pmease.com/display/QB14/Resource+Management",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+3.1.x"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Upgrade+to+3.1.x",
    "title": "Upgrade to 3.1.x",
    "breadcrumb": [
      "",
      "Upgrade Guide"
    ],
    "full_text": "Upgrade Guide\nUpgrade to 3.1.x\nVersion: QB14\nOn this page\nUpgrade to 3.1.x\nUpgrade procedures\nâ\nfrom 3.1.x\nfrom 3.0.x\nfrom 2.1.x\nfrom 2.0.x\nfrom 1.x\nfrom Luntbuild\nIncompatibilities with previous versions\nâ\nCustom plugins created for 3.0.x or 2.x versions need to be re-compiled and re-exported.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Upgrade to 3.1.x",
        "content": ""
      },
      {
        "header": "Upgrade proceduresâ",
        "content": "from 3.1.xfrom 3.0.xfrom 2.1.xfrom 2.0.xfrom 1.xfrom Luntbuild"
      },
      {
        "header": "Incompatibilities with previous versionsâ",
        "content": "Custom plugins created for 3.0.x or 2.x versions need to be re-compiled and re-exported."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Upgrade+to+3.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+2.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+2.0.x",
      "https://wiki.pmease.com/display/QB14/category/Procedures",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data",
      "https://wiki.pmease.com/display/QB14/Upgrade+2.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+QuickBuild+1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+Luntbuild",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+3.0.x"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Upgrade+to+3.0.x",
    "title": "Upgrade to 3.0.x",
    "breadcrumb": [
      "",
      "Upgrade Guide"
    ],
    "full_text": "Upgrade Guide\nUpgrade to 3.0.x\nVersion: QB14\nOn this page\nUpgrade to 3.0.x\nUpgrade procedures\nâ\nfrom 3.0.x\nfrom 2.1.x\nfrom 2.0.x\nfrom 1.x\nfrom Luntbuild\nIncompatibilities with 2.x\nâ\nIf empty value is specified for a prompted variable, the variable will get value of\nnull\n. In 2.x, the default value will be used when prompted value is left empty.\nView log by step is not possible for migrated builds.\nExecuted steps should be referenced by\nStep Path\ninstead of step name.\nRESTful API is not compatible with 2.x. Existing programs needs to be changed to use the\nnew API\nin order to interact with 3.x server.\nQuickBuild tray monitor needs to be reinstalled in order to interact with 3.x server.\nThe method\nisScheduled()\nof configuration object is now removed. Call\nrequest.scheduled\ninstead to check for scheduled build.\nThe\ncurrent\nobject used in next build version field needs to be replaced with\nconfiguration\nas\ncurrent\nnow points to the version manager object itself.\nBuilds can not be moved from one configuration to another; otherwise, change and issue comparison will not be accurate.\nTo build in a future time, define a variable prompting for date or time input, and specify pre-queue script as below:\nrequest\n.\nsetRequestDate\n(\nvars\n.\nget\n(\n\"name_of_the_date_var\"\n)\n.\nasDate\n(\n)\n)\nThe method\nbuild.getSteps()\nis removed. If a custom email notification template is used (other than using\ndefault_html_notification.vm\n), please change error message rendering part of the template as below:\n#\nif\n(\n$build\n.\nhasErrors\n(\n)\n)\n<\nh3\n>\nError\nMessages\n<\n/\nh3\n>\n<\ntable\nclass\n=\n\"error-messages\"\n>\n#\nif\n(\n$build\n.\nerrorMessage\n)\n<\ntr\n>\n<\ntd colspan\n=\n\"2\"\nvalign\n=\n\"top\"\n>\n$util\n.\nformatString\n(\n$build\n.\nerrorMessage\n)\n<\n/\ntd\n>\n<\ntd valign\n=\n\"top\"\n>\n<\na href\n=\n\"$build.logUrl\"\n>\nbuild log\n<\n/\na\n>\n<\n/\ntd\n>\n<\n/\ntr\n>\n#end\n#foreach\n(\n$stepPathName in $build\n.\nstepRuntimes\n.\nkeySet\n(\n)\n)\n#\nset\n(\n$step\n=\n$build\n.\nstepRuntimes\n.\nget\n(\n$stepPathName\n)\n)\n#\nif\n(\n$step\n.\nerrorMessage\n)\n<\ntr\n>\n<\ntd valign\n=\n\"top\"\n>\n$stepPathName\n<\n/\ntd\n>\n<\ntd valign\n=\n\"top\"\n>\n$util\n.\nformatString\n(\n$step\n.\nerrorMessage\n)\n<\n/\ntd\n>\n<\ntd valign\n=\n\"top\"\n>\n<\na href\n=\n\"$build.getLogUrl($stepPathName)\"\n>\nstep log\n<\n/\na\n>\n<\n/\ntd\n>\n<\n/\ntr\n>\n#end\n#end\n<\n/\ntable\n>\n#end\nCustom plugins for 2.x need to be re-compiled and re-exported. Below changes may affect your plugin:\nClass\ncom.pmease.quickbuild.web.component.editor\nis renamed to\ncom.pmease.quickbuild.web.component.editor.BeanEditor\n.\nRead only mode of BeanEditor is removed, and a separate class\ncom.pmease.quickbuild.web.component.BeanViewer\nis added for display bean properties.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Upgrade to 3.0.x",
        "content": ""
      },
      {
        "header": "Upgrade proceduresâ",
        "content": "from 3.0.xfrom 2.1.xfrom 2.0.xfrom 1.xfrom Luntbuild"
      },
      {
        "header": "Incompatibilities with 2.xâ",
        "content": "If empty value is specified for a prompted variable, the variable will get value ofnull. In 2.x, the default value will be used when prompted value is left empty.View log by step is not possible for migrated builds.Executed steps should be referenced byStep Pathinstead of step name.RESTful API is not compatible with 2.x. Existing programs needs to be changed to use thenew APIin order to interact with 3.x server.QuickBuild tray monitor needs to be reinstalled in order to interact with 3.x server.The methodisScheduled()of configuration object is now removed. Callrequest.scheduledinstead to check for scheduled build.Thecurrentobject used in next build version field needs to be replaced withconfigurationascurrentnow points to the version manager object itself.Builds can not be moved from one configuration to another; otherwise, change and issue comparison will not be accurate.To build in a future time, define a variable prompting for date or time input, and specify pre-queue script as below:request.setRequestDate(vars.get(\"name_of_the_date_var\").asDate())The methodbuild.getSteps()is removed. If a custom email notification template is used (other than usingdefault_html_notification.vm), please change error message rendering part of the template as below:#if($build.hasErrors())<h3>ErrorMessages</h3><tableclass=\"error-messages\">#if($build.errorMessage)<tr><td colspan=\"2\"valign=\"top\">$util.formatString($build.errorMessage)</td><td valign=\"top\"><a href=\"$build.logUrl\">build log</a></td></tr>#end#foreach($stepPathName in $build.stepRuntimes.keySet())#set($step=$build.stepRuntimes.get($stepPathName))#if($step.errorMessage)<tr><td valign=\"top\">$stepPathName</td><td valign=\"top\">$util.formatString($step.errorMessage)</td><td valign=\"top\"><a href=\"$build.getLogUrl($stepPathName)\">step log</a></td></tr>#end#end</table>#endCustom plugins for 2.x need to be re-compiled and re-exported. Below changes may affect your plugin:Classcom.pmease.quickbuild.web.component.editoris renamed tocom.pmease.quickbuild.web.component.editor.BeanEditor.Read only mode of BeanEditor is removed, and a separate classcom.pmease.quickbuild.web.component.BeanVieweris added for display bean properties."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Upgrade+to+2.1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+2.0.x",
      "https://wiki.pmease.com/display/QB14/category/Procedures",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data",
      "https://wiki.pmease.com/display/QB14/Upgrade+2.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+QuickBuild+1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+Luntbuild",
      "https://wiki.pmease.com/display/QB14/RESTful+API",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+2.1.x"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Upgrade+to+2.1.x",
    "title": "Upgrade to 2.1.x",
    "breadcrumb": [
      "",
      "Upgrade Guide"
    ],
    "full_text": "Upgrade Guide\nUpgrade to 2.1.x\nVersion: QB14\nOn this page\nUpgrade to 2.1.x\nUpgrade procedures\nâ\nfrom 2.1.x\nfrom 2.0.x\nfrom 1.x\nfrom Luntbuild\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Upgrade to 2.1.x",
        "content": ""
      },
      {
        "header": "Upgrade proceduresâ",
        "content": "from 2.1.xfrom 2.0.xfrom 1.xfrom Luntbuild"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Upgrade+to+2.0.x",
      "https://wiki.pmease.com/display/QB14/category/Procedures",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data",
      "https://wiki.pmease.com/display/QB14/Upgrade+2.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+QuickBuild+1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+Luntbuild",
      "https://wiki.pmease.com/display/QB14/Upgrade+to+2.0.x"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Upgrade+to+2.0.x",
    "title": "Upgrade to 2.0.x",
    "breadcrumb": [
      "",
      "Upgrade Guide"
    ],
    "full_text": "Upgrade Guide\nUpgrade to 2.0.x\nVersion: QB14\nOn this page\nUpgrade to 2.0.x\nUpgrade procedures\nâ\nfrom 2.0.x\nfrom 1.x\nfrom Luntbuild\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Upgrade to 2.0.x",
        "content": ""
      },
      {
        "header": "Upgrade proceduresâ",
        "content": "from 2.0.xfrom 1.xfrom Luntbuild"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/category/Procedures",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data",
      "https://wiki.pmease.com/display/QB14/Upgrade+QuickBuild+1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+Luntbuild",
      "https://wiki.pmease.com/display/QB14/category/Procedures"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/category/Procedures",
    "title": "Procedures",
    "breadcrumb": [
      "",
      "Upgrade Guide"
    ],
    "full_text": "ðï¸\nBackup and Restore Data\nIn this procedure, we assume that installation directory of 4.0.61 or 4.0.61 server is /quickbuild-old , and new version of QuickBuild is extracted to directory /quickbuild-new.\nðï¸\nIn-place upgrade\n1. Stop your QuickBuild server. You do not need to stop agents since they will be auto-upgraded after server is upgraded.\nðï¸\nReinstall Agents\nReinstall build agents\nðï¸\nUpgrade 2.0.x\nIn this procedure, we assume that installation directory of 2.0.x server is /quickbuild-old , and new version of QuickBuild is extracted to directory /quickbuild-new.\nðï¸\nUpgrade Data and Start Agent\n1. Stop QuickBuild server of previous version, you do not need to stop agents since they will be auto-upgraded after server is upgraded.\nðï¸\nUpgrade Luntbuild\nPlease follow below procedure to migrate from Luntbuild:\nðï¸\nUpgrade QuickBuild 1.x\nUpgrade procedure\nðï¸\nUpgrade Data\n1. Stop QuickBuild server of previous version, you do not need to stop agents since they will be auto-upgraded after server is upgraded.\nðï¸\nUpgrade Data And Agent\n1. Stop QuickBuild server of previous version.",
    "sections": [
      {
        "header": "ðï¸ Backup and Restore Data",
        "content": "In this procedure, we assume that installation directory of 4.0.61 or 4.0.61 server is /quickbuild-old , and new version of QuickBuild is extracted to directory /quickbuild-new."
      },
      {
        "header": "ðï¸ In-place upgrade",
        "content": "1. Stop your QuickBuild server. You do not need to stop agents since they will be auto-upgraded after server is upgraded."
      },
      {
        "header": "ðï¸ Reinstall Agents",
        "content": "Reinstall build agents"
      },
      {
        "header": "ðï¸ Upgrade 2.0.x",
        "content": "In this procedure, we assume that installation directory of 2.0.x server is /quickbuild-old , and new version of QuickBuild is extracted to directory /quickbuild-new."
      },
      {
        "header": "ðï¸ Upgrade Data and Start Agent",
        "content": "1. Stop QuickBuild server of previous version, you do not need to stop agents since they will be auto-upgraded after server is upgraded."
      },
      {
        "header": "ðï¸ Upgrade Luntbuild",
        "content": "Please follow below procedure to migrate from Luntbuild:"
      },
      {
        "header": "ðï¸ Upgrade QuickBuild 1.x",
        "content": "Upgrade procedure"
      },
      {
        "header": "ðï¸ Upgrade Data",
        "content": "1. Stop QuickBuild server of previous version, you do not need to stop agents since they will be auto-upgraded after server is upgraded."
      },
      {
        "header": "ðï¸ Upgrade Data And Agent",
        "content": "1. Stop QuickBuild server of previous version."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Backup+and+Restore+Data",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/Reinstall+Agents",
      "https://wiki.pmease.com/display/QB14/Upgrade+2.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+and+Start+Agent",
      "https://wiki.pmease.com/display/QB14/Upgrade+Luntbuild",
      "https://wiki.pmease.com/display/QB14/Upgrade+QuickBuild+1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+And+Agent",
      "https://wiki.pmease.com/display/QB14/Backup+and+Restore+Data",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/Reinstall+Agents",
      "https://wiki.pmease.com/display/QB14/Upgrade+2.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+and+Start+Agent",
      "https://wiki.pmease.com/display/QB14/Upgrade+Luntbuild",
      "https://wiki.pmease.com/display/QB14/Upgrade+QuickBuild+1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+And+Agent",
      "https://wiki.pmease.com/display/QB14/Backup+and+Restore+Data"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Badge+for+build+status",
    "title": "Badge for build status",
    "breadcrumb": [
      "",
      "User's Guide"
    ],
    "full_text": "User's Guide\nBadge for build status\nVersion: QB14\nOn this page\nBadge for build status\nQuickBuild can generate a badge image for build status, report stats, so you can add the badge image to markdown, or anywhere you want.\nURL syntax\nâ\nThe badge url can be located at:\nhttp\n:\n/\n/\nyour\n-\nserver\n/\nrest\n/\nbadge\n/\nbuild\n/\n{\nbuildIdOrName\n}\n/\n{\ntype\n}\n.\nsvg\nbuildIdOrName\nâ\nbuildIdOrName\nis a build id or a name, the name is in the following format:\n{\nconfigurationId\n}\n.\n{\nbuildName\n}\nbuildName can be one of the following value:\nlatest\nlatest_successful\nlatest_failed\nlatest_timeout\nlatest_cancelled\ntype\nâ\ntype\ncan be one of the following value:\nstatus\nbuild status\nboost\nBoost test report\nbullseye\nBullseye report\nbusted\nBusted report\ncheckstyle\nCheckStyle report\nclover\nClover report\ncobertura\nCobertura report\ncodenarc\nCodenarc report\ncoverity\nCoverity report\ncpd\nCPD report\ncppcheck\nCPPCheck report\nemma\nEMMA report\nfindbugs\nFindBugs report\nfxcop\nFxcop report\nJacoco\nJacoco report\njunit\nJUnit report\nmbunit\nMBUnit report\nmstest\nMSTest report\nncover\nNCover report\npmd\nPMD report\ntap\nTAP report\ntestng\nTestNG report\nvalgrind\nValgrind report\nExample\nâ\nBelow is an example that shows how to add a badge to GitHub README in markdown:\n[\n!\n[\nBuild\nstatus\n]\n(\nhttp\n:\n/\n/\ndemo\n.\npmease\n.\ncom\n/\nrest\n/\nbadge\n/\nbuild\n/\n25.l\natest\n/\nstatus\n.\nsvg\n)\n]\n(\nhttp\n:\n/\n/\ndemo\n.\npmease\n.\ncom\n)\nSee it in action in below url:\nhttps://github.com/steveluo/qb\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Badge for build status",
        "content": ""
      },
      {
        "header": "URL syntaxâ",
        "content": "The badge url can be located at: http://your-server/rest/badge/build/{buildIdOrName}/{type}.svg"
      },
      {
        "header": "buildIdOrNameâ",
        "content": "buildIdOrNameis a build id or a name, the name is in the following format: {configurationId}.{buildName} buildName can be one of the following value: latestlatest_successfullatest_failedlatest_timeoutlatest_cancelled"
      },
      {
        "header": "typeâ",
        "content": "typecan be one of the following value: statusbuild statusboostBoost test reportbullseyeBullseye reportbustedBusted reportcheckstyleCheckStyle reportcloverClover reportcoberturaCobertura reportcodenarcCodenarc reportcoverityCoverity reportcpdCPD reportcppcheckCPPCheck reportemmaEMMA reportfindbugsFindBugs reportfxcopFxcop reportJacocoJacoco reportjunitJUnit reportmbunitMBUnit reportmstestMSTest reportncoverNCover reportpmdPMD reporttapTAP reporttestngTestNG reportvalgrindValgrind report"
      },
      {
        "header": "Exampleâ",
        "content": "Below is an example that shows how to add a badge to GitHub README in markdown: [![Buildstatus](http://demo.pmease.com/rest/badge/build/25.latest/status.svg)](http://demo.pmease.com) See it in action in below url: https://github.com/steveluo/qb"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Working+with+Dashboard",
      "https://wiki.pmease.com/display/QB14/category/Working+with+Configurations",
      "https://wiki.pmease.com/display/QB14/category/Working+with+Builds",
      "https://wiki.pmease.com/display/QB14/Working+with+Changes",
      "https://wiki.pmease.com/display/QB14/Working+with+Build+Pipeline",
      "https://wiki.pmease.com/display/QB14/Working+with+Issues",
      "https://wiki.pmease.com/display/QB14/Working+with+Artifacts",
      "https://wiki.pmease.com/display/QB14/category/Working+with+Reports",
      "https://wiki.pmease.com/display/QB14/Working+with+Statistics",
      "https://wiki.pmease.com/display/QB14/Manage+User+Profile",
      "https://wiki.pmease.com/display/QB14/Manage+Build+Subscriptions",
      "https://wiki.pmease.com/display/QB14/Manage+User+Agent",
      "https://wiki.pmease.com/display/QB14/Working+with+Proof+Build",
      "https://wiki.pmease.com/display/QB14/category/Working+With+Addons",
      "https://wiki.pmease.com/display/QB14/Working+with+Grid+Measurements",
      "https://wiki.pmease.com/display/QB14/Working+with+Alerts",
      "https://wiki.pmease.com/display/QB14/Working+with+Dashboard"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Working+with+Dashboard",
    "title": "Working with Dashboard",
    "breadcrumb": [
      "",
      "User's Guide"
    ],
    "full_text": "User's Guide\nWorking with Dashboard\nVersion: QB14\nOn this page\nWorking with Dashboard\nDashboard can be used to access interesting information in system quickly. If no dashboard is defined, QuickBuild will display a default dashboard displaying the configuration tree. The default dashboard will saved as your own dashboard once it is edited (change layout, edit gadget, change name, etc).\nCreate and edit dashboard\nâ\nEvery user can create multiple self-defined dashboards and can switch between them. To create a dashboard, login to QuickBuild and hit the add dashboard link from the operations menu:\nChange dashboard layout\nâ\nThe dashboard layout by default includes two columns, and you can change to use different layout from the layout menu:\nManage gadgets in dashboard\nâ\nGadgets can be added into a dashboard from the gadget menu:\nWhen a gadget is selected from the gadget menu, a gadget setting window will popup to ask for settings of the gadget. Specify proper settings and save the setting, then the gadget will be added to the dashboard. Please note that the gadget will be initially added to the left-most column, and you can drag them to desired place if necessary. For an existing gadget, the setting menu allows one to refresh, delete, or edit the gadget like below:\nShare the dashboard with other groups\nâ\nDashboard can be shared to other groups by editing the dashboard and select the groups to share with if one of your belonging groups has the permission of sharing dashboards.\nOnce a dashboard is shared, other users (of course in the shared groups) will be able to use this dashboard from the dashboard menu.\ninfo\nUseful Information\nYou may create a public dashboard (will be displayed to all anonymous users) by sharing with the anonymous group.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Working with Dashboard",
        "content": ""
      },
      {
        "header": "Create and edit dashboardâ",
        "content": "Every user can create multiple self-defined dashboards and can switch between them. To create a dashboard, login to QuickBuild and hit the add dashboard link from the operations menu:"
      },
      {
        "header": "Change dashboard layoutâ",
        "content": "The dashboard layout by default includes two columns, and you can change to use different layout from the layout menu:"
      },
      {
        "header": "Manage gadgets in dashboardâ",
        "content": "Gadgets can be added into a dashboard from the gadget menu: When a gadget is selected from the gadget menu, a gadget setting window will popup to ask for settings of the gadget. Specify proper settings and save the setting, then the gadget will be added to the dashboard. Please note that the gadget will be initially added to the left-most column, and you can drag them to desired place if necessary. For an existing gadget, the setting menu allows one to refresh, delete, or edit the gadget like below:"
      },
      {
        "header": "Share the dashboard with other groupsâ",
        "content": "Dashboard can be shared to other groups by editing the dashboard and select the groups to share with if one of your belonging groups has the permission of sharing dashboards. Once a dashboard is shared, other users (of course in the shared groups) will be able to use this dashboard from the dashboard menu. infoUseful InformationYou may create a public dashboard (will be displayed to all anonymous users) by sharing with the anonymous group."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/category/Working+with+Configurations",
      "https://wiki.pmease.com/display/QB14/category/Working+with+Builds",
      "https://wiki.pmease.com/display/QB14/Working+with+Changes",
      "https://wiki.pmease.com/display/QB14/Working+with+Build+Pipeline",
      "https://wiki.pmease.com/display/QB14/Working+with+Issues",
      "https://wiki.pmease.com/display/QB14/Working+with+Artifacts",
      "https://wiki.pmease.com/display/QB14/category/Working+with+Reports",
      "https://wiki.pmease.com/display/QB14/Working+with+Statistics",
      "https://wiki.pmease.com/display/QB14/Manage+User+Profile",
      "https://wiki.pmease.com/display/QB14/Manage+Build+Subscriptions",
      "https://wiki.pmease.com/display/QB14/Manage+User+Agent",
      "https://wiki.pmease.com/display/QB14/Working+with+Proof+Build",
      "https://wiki.pmease.com/display/QB14/category/Working+With+Addons",
      "https://wiki.pmease.com/display/QB14/Working+with+Grid+Measurements",
      "https://wiki.pmease.com/display/QB14/Working+with+Alerts",
      "https://wiki.pmease.com/display/QB14/category/Working+with+Configurations"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/category/Working+with+Configurations",
    "title": "Working with Configurations",
    "breadcrumb": [
      "",
      "User's Guide"
    ],
    "full_text": "ðï¸\nConfiguration Dashboard\nA configuration specific dashboard to display brief information of a configuration, including description, next build version, overall build success rate, average build duration, error messages, recent builds, and pending build requests.\nðï¸\nConfiguration Navigation\nThere are several ways to navigate between configurations in QuickBuild:\nðï¸\nRun Configuration\nConfiguration can be triggered manually through configuration dashboard or through the configuration toolbar.\nðï¸\nAdd configuration\nTo add child configuration, please login as administrator, select the configuration under which you want to add a child, and click the add button as demonstrated below:\nðï¸\nCopy Configurations\nNew configurations can also be added by copying an existing configuration shown as below:\nðï¸\nDelete Configurations\nConfiguration can be deleted by selecting the configuration and click the delete button as shown below:\nðï¸\nMove Configurations\nTo move configurations to be under another parent, please do the following:\nðï¸\nConfiguration Settings\nConfiguation setting menu will be available if current user is allowed to view configuration settings:\nðï¸\nWorkspace Tab\nWorkspace tab will be visible to users who have permission to access workspace of current configuration. Each node has its own workspace for each configuration as demonstrated below:\nðï¸\nStorage tab\nStorage tab displays Storage Directory of current configuration. Please note that multiple configurations may share the same storage directory.",
    "sections": [
      {
        "header": "ðï¸ Configuration Dashboard",
        "content": "A configuration specific dashboard to display brief information of a configuration, including description, next build version, overall build success rate, average build duration, error messages, recent builds, and pending build requests."
      },
      {
        "header": "ðï¸ Configuration Navigation",
        "content": "There are several ways to navigate between configurations in QuickBuild:"
      },
      {
        "header": "ðï¸ Run Configuration",
        "content": "Configuration can be triggered manually through configuration dashboard or through the configuration toolbar."
      },
      {
        "header": "ðï¸ Add configuration",
        "content": "To add child configuration, please login as administrator, select the configuration under which you want to add a child, and click the add button as demonstrated below:"
      },
      {
        "header": "ðï¸ Copy Configurations",
        "content": "New configurations can also be added by copying an existing configuration shown as below:"
      },
      {
        "header": "ðï¸ Delete Configurations",
        "content": "Configuration can be deleted by selecting the configuration and click the delete button as shown below:"
      },
      {
        "header": "ðï¸ Move Configurations",
        "content": "To move configurations to be under another parent, please do the following:"
      },
      {
        "header": "ðï¸ Configuration Settings",
        "content": "Configuation setting menu will be available if current user is allowed to view configuration settings:"
      },
      {
        "header": "ðï¸ Workspace Tab",
        "content": "Workspace tab will be visible to users who have permission to access workspace of current configuration. Each node has its own workspace for each configuration as demonstrated below:"
      },
      {
        "header": "ðï¸ Storage tab",
        "content": "Storage tab displays Storage Directory of current configuration. Please note that multiple configurations may share the same storage directory."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Configuration+Dashboard",
      "https://wiki.pmease.com/display/QB14/Configuration+Navigation",
      "https://wiki.pmease.com/display/QB14/Run+Configuration",
      "https://wiki.pmease.com/display/QB14/Add+configuration",
      "https://wiki.pmease.com/display/QB14/Copy+Configurations",
      "https://wiki.pmease.com/display/QB14/Delete+Configurations",
      "https://wiki.pmease.com/display/QB14/Move+Configurations",
      "https://wiki.pmease.com/display/QB14/Configuration+Settings",
      "https://wiki.pmease.com/display/QB14/Workspace+Tab",
      "https://wiki.pmease.com/display/QB14/Storage+tab",
      "https://wiki.pmease.com/display/QB14/category/Working+with+Builds",
      "https://wiki.pmease.com/display/QB14/Working+with+Changes",
      "https://wiki.pmease.com/display/QB14/Working+with+Build+Pipeline",
      "https://wiki.pmease.com/display/QB14/Working+with+Issues",
      "https://wiki.pmease.com/display/QB14/Working+with+Artifacts",
      "https://wiki.pmease.com/display/QB14/category/Working+with+Reports",
      "https://wiki.pmease.com/display/QB14/Working+with+Statistics",
      "https://wiki.pmease.com/display/QB14/Manage+User+Profile",
      "https://wiki.pmease.com/display/QB14/Manage+Build+Subscriptions",
      "https://wiki.pmease.com/display/QB14/Manage+User+Agent",
      "https://wiki.pmease.com/display/QB14/Working+with+Proof+Build",
      "https://wiki.pmease.com/display/QB14/category/Working+With+Addons",
      "https://wiki.pmease.com/display/QB14/Working+with+Grid+Measurements",
      "https://wiki.pmease.com/display/QB14/Working+with+Alerts",
      "https://wiki.pmease.com/display/QB14/Configuration+Dashboard",
      "https://wiki.pmease.com/display/QB14/Configuration+Navigation",
      "https://wiki.pmease.com/display/QB14/Run+Configuration",
      "https://wiki.pmease.com/display/QB14/Add+configuration",
      "https://wiki.pmease.com/display/QB14/Copy+Configurations",
      "https://wiki.pmease.com/display/QB14/Delete+Configurations",
      "https://wiki.pmease.com/display/QB14/Move+Configurations",
      "https://wiki.pmease.com/display/QB14/Configuration+Settings",
      "https://wiki.pmease.com/display/QB14/Workspace+Tab",
      "https://wiki.pmease.com/display/QB14/Storage+tab",
      "https://wiki.pmease.com/display/QB14/Configuration+Dashboard"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/category/Working+with+Builds",
    "title": "Working with Builds",
    "breadcrumb": [
      "",
      "User's Guide"
    ],
    "full_text": "ðï¸\nDisplay Custom Build Info\nCustom build info can be displayed in build summary section and build history table by defining custom fields in advanced setting of the configuration like below:\nðï¸\nBuild Navigation\n1. Navigate to latest build from dashboard\nðï¸\nBuild Dashboard\nBuild dashboard page gives an overview of current build.\nðï¸\nRun Build\nBuild can be manually triggered by running configuration. After a build is triggered, it will be put into the queue. If there are no idle threads in the queue, the build will wait until a free thread is available as demonstrated below:\nðï¸\nRecommend Build\nSuccessful builds can be recommended by clicking the recommend button. After recommendation, a star icon will appear beside the build version. This functionality can be used to suggest good build.\nðï¸\nPromote Build\nBuild promotion can be used to manage build life cycle in QuickBuild. A build can be promoted to another build if all below conditions are satisfied:\nðï¸\nStop Build Forcibly\nBuild can be forcibly stopped by clicking the stop button as below:\nðï¸\nDelete Build\nDelete builds manually\nðï¸\nRSS Feeds\nRSS link will be displayed in build history page. Clicking this link will get a RSS feed for all builds matching specified status. The filter options are ignored for RSS feeds. For example, to get RSS feed of failed builds, just select the Failed Builds from the build chooser, and then click the RSS link button in the result page as demonstrated below:\nðï¸\nDependent and Dependency Builds\nBuild dependency is handled in QuickBuild through QuickBuild repository. If build A uses artifacts of build B to accomplish its build, the following statement will hold to true:\nðï¸\nDiagnose Build Failures\n1. Access build failure message from dashboard",
    "sections": [
      {
        "header": "ðï¸ Display Custom Build Info",
        "content": "Custom build info can be displayed in build summary section and build history table by defining custom fields in advanced setting of the configuration like below:"
      },
      {
        "header": "ðï¸ Build Navigation",
        "content": "1. Navigate to latest build from dashboard"
      },
      {
        "header": "ðï¸ Build Dashboard",
        "content": "Build dashboard page gives an overview of current build."
      },
      {
        "header": "ðï¸ Run Build",
        "content": "Build can be manually triggered by running configuration. After a build is triggered, it will be put into the queue. If there are no idle threads in the queue, the build will wait until a free thread is available as demonstrated below:"
      },
      {
        "header": "ðï¸ Recommend Build",
        "content": "Successful builds can be recommended by clicking the recommend button. After recommendation, a star icon will appear beside the build version. This functionality can be used to suggest good build."
      },
      {
        "header": "ðï¸ Promote Build",
        "content": "Build promotion can be used to manage build life cycle in QuickBuild. A build can be promoted to another build if all below conditions are satisfied:"
      },
      {
        "header": "ðï¸ Stop Build Forcibly",
        "content": "Build can be forcibly stopped by clicking the stop button as below:"
      },
      {
        "header": "ðï¸ Delete Build",
        "content": "Delete builds manually"
      },
      {
        "header": "ðï¸ RSS Feeds",
        "content": "RSS link will be displayed in build history page. Clicking this link will get a RSS feed for all builds matching specified status. The filter options are ignored for RSS feeds. For example, to get RSS feed of failed builds, just select the Failed Builds from the build chooser, and then click the RSS link button in the result page as demonstrated below:"
      },
      {
        "header": "ðï¸ Dependent and Dependency Builds",
        "content": "Build dependency is handled in QuickBuild through QuickBuild repository. If build A uses artifacts of build B to accomplish its build, the following statement will hold to true:"
      },
      {
        "header": "ðï¸ Diagnose Build Failures",
        "content": "1. Access build failure message from dashboard"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Display+Custom+Build+Info",
      "https://wiki.pmease.com/display/QB14/Build+Navigation",
      "https://wiki.pmease.com/display/QB14/Build+Dashboard",
      "https://wiki.pmease.com/display/QB14/Run+Build",
      "https://wiki.pmease.com/display/QB14/Recommend+Build",
      "https://wiki.pmease.com/display/QB14/Promote+Build",
      "https://wiki.pmease.com/display/QB14/Stop+Build+Forcibly",
      "https://wiki.pmease.com/display/QB14/Delete+Build",
      "https://wiki.pmease.com/display/QB14/RSS+Feeds",
      "https://wiki.pmease.com/display/QB14/Dependent+and+Dependency+Builds",
      "https://wiki.pmease.com/display/QB14/Diagnose+Build+Failures",
      "https://wiki.pmease.com/display/QB14/Working+with+Changes",
      "https://wiki.pmease.com/display/QB14/Working+with+Build+Pipeline",
      "https://wiki.pmease.com/display/QB14/Working+with+Issues",
      "https://wiki.pmease.com/display/QB14/Working+with+Artifacts",
      "https://wiki.pmease.com/display/QB14/category/Working+with+Reports",
      "https://wiki.pmease.com/display/QB14/Working+with+Statistics",
      "https://wiki.pmease.com/display/QB14/Manage+User+Profile",
      "https://wiki.pmease.com/display/QB14/Manage+Build+Subscriptions",
      "https://wiki.pmease.com/display/QB14/Manage+User+Agent",
      "https://wiki.pmease.com/display/QB14/Working+with+Proof+Build",
      "https://wiki.pmease.com/display/QB14/category/Working+With+Addons",
      "https://wiki.pmease.com/display/QB14/Working+with+Grid+Measurements",
      "https://wiki.pmease.com/display/QB14/Working+with+Alerts",
      "https://wiki.pmease.com/display/QB14/Display+Custom+Build+Info",
      "https://wiki.pmease.com/display/QB14/Build+Navigation",
      "https://wiki.pmease.com/display/QB14/Build+Dashboard",
      "https://wiki.pmease.com/display/QB14/Run+Build",
      "https://wiki.pmease.com/display/QB14/Recommend+Build",
      "https://wiki.pmease.com/display/QB14/Promote+Build",
      "https://wiki.pmease.com/display/QB14/Stop+Build+Forcibly",
      "https://wiki.pmease.com/display/QB14/Delete+Build",
      "https://wiki.pmease.com/display/QB14/RSS+Feeds",
      "https://wiki.pmease.com/display/QB14/Dependent+and+Dependency+Builds",
      "https://wiki.pmease.com/display/QB14/Diagnose+Build+Failures",
      "https://wiki.pmease.com/display/QB14/Storage+tab",
      "https://wiki.pmease.com/display/QB14/Display+Custom+Build+Info"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Working+with+Changes",
    "title": "Working with Changes",
    "breadcrumb": [
      "",
      "User's Guide"
    ],
    "full_text": "User's Guide\nWorking with Changes\nVersion: QB14\nWorking with Changes\nWhen a build takes place, SCM changes will be calculated against previous build. Changes will not be calculated for the first build in a configuration since there is no base build to calculate changes against. If you've changed name of the repository, changes of that repository will not be calculated for the first build after the name change, since QuickBuild uses repository name as the key to look up repository revision in previous build.\nIn build overview tab, the latest\n10\ncommits and the commit statistics (include the count of commits, modifications, and the number of add/modify/delete actions) will be displayed:\nThe changes tab contains two child tabs, respectively\nBy Changeset\nand\nBy File\n.\nThe\nBy Changeset\ntab displays all changes by commits as demonstrated below:\nBy default, changes are grouped by day. If you want to show changes since a specified version(the changes of the specified build are excluded), just input or select the build version from the input box in the right, and the changes will be grouped by build as below:\nYou can hover the number block to see the modifications in the changeset like:\nWhen issue tracker is configured, the issue key will be hyperlinked and when you hover the issue key, QuickBuild will display the issue summary, see below:\nFor each modification/file, there are two links:\nView\nand\nDiff\nwhich can help you to view the source code or diff with previous editor/previous build. See a sample diff page below:\nThe\nBy File\ntab displays all modifications grouped by file so that you can easily tracking your changes for a specified file.\nTo search a specified changeset or modification, you just need input your change id, or committer, or even part of your commit message in the search box, or you can just click the committer name, change id, repository directly.\nMoreover, you can view all your changes in the\nStatistics\npage, there, you can view changes by day, by build and by committer\nYou can also add a gadget of your latest commits of a specific configuration to the dashboard:\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Working with Changes",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Working+with+Build+Pipeline",
      "https://wiki.pmease.com/display/QB14/Working+with+Issues",
      "https://wiki.pmease.com/display/QB14/Working+with+Artifacts",
      "https://wiki.pmease.com/display/QB14/category/Working+with+Reports",
      "https://wiki.pmease.com/display/QB14/Working+with+Statistics",
      "https://wiki.pmease.com/display/QB14/Manage+User+Profile",
      "https://wiki.pmease.com/display/QB14/Manage+Build+Subscriptions",
      "https://wiki.pmease.com/display/QB14/Manage+User+Agent",
      "https://wiki.pmease.com/display/QB14/Working+with+Proof+Build",
      "https://wiki.pmease.com/display/QB14/category/Working+With+Addons",
      "https://wiki.pmease.com/display/QB14/Working+with+Grid+Measurements",
      "https://wiki.pmease.com/display/QB14/Working+with+Alerts",
      "https://wiki.pmease.com/display/QB14/Diagnose+Build+Failures",
      "https://wiki.pmease.com/display/QB14/Working+with+Build+Pipeline"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Working+with+Build+Pipeline",
    "title": "Working with Build Pipeline",
    "breadcrumb": [
      "",
      "User's Guide"
    ],
    "full_text": "User's Guide\nWorking with Build Pipeline\nVersion: QB14\nWorking with Build Pipeline\nBuild pipeline\nin QuickBuild is series of builds connected via build promotions, with commits information attached. It pushes commits going through different phases of the build workflow, either automaticly or manually. The build pipeline page can be accessed from the build pipeline link in configuration tab, and can be added as a gadget to user dashboards. A typical pipeline is like below:\nHere is explanation of different areas of this screenshot:\nBlue block without right arrow\n: no further promotions are defined for the build.\nBlue block with right arrow\n: promotions are defined for the build and promote conditions of some of them are satisifed. User can hover mouse over the block to bring out the promotion menu.\nTwo blocks connected with arrow\n: right build is promoted from left build. If a build is promoted multiple times, only the latest promotion will be displayed in the pipeline.\nGray block\n: promotions are defined for this build they are not allowed to run either because the condition is not satisfied or the user does not have permission to run promotion.\nBuild link\n: this displays name of configuration together with the build version. User can follow this link to check the build details. If current user does not have permission to access the associated configuration, the link will be disabled.\nCommit information\n: this displays revision of the commits of the SCM repository used by the build. If multiple SCM repositories are used in the build, a dropdown box will be displayed to let user choose the repository to display commits. Generally commits through a single pipeline will always remain the same.\nBuild filtering toolbar\n: one can filter the left most builds by its status, version, or date.\nPage navigation area\n: this navigates the user to elder pipelines of current configuration.\nTo see the build pipeline in action, please check the tutorial\nset up build pipeline\n.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Working with Build Pipeline",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Working+with+Issues",
      "https://wiki.pmease.com/display/QB14/Working+with+Artifacts",
      "https://wiki.pmease.com/display/QB14/category/Working+with+Reports",
      "https://wiki.pmease.com/display/QB14/Working+with+Statistics",
      "https://wiki.pmease.com/display/QB14/Manage+User+Profile",
      "https://wiki.pmease.com/display/QB14/Manage+Build+Subscriptions",
      "https://wiki.pmease.com/display/QB14/Manage+User+Agent",
      "https://wiki.pmease.com/display/QB14/Working+with+Proof+Build",
      "https://wiki.pmease.com/display/QB14/category/Working+With+Addons",
      "https://wiki.pmease.com/display/QB14/Working+with+Grid+Measurements",
      "https://wiki.pmease.com/display/QB14/Working+with+Alerts",
      "https://wiki.pmease.com/display/QB14/Set+up+Build+Pipeline",
      "https://wiki.pmease.com/display/QB14/Working+with+Issues"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Working+with+Issues",
    "title": "Working with Issues",
    "breadcrumb": [
      "",
      "User's Guide"
    ],
    "full_text": "User's Guide\nWorking with Issues\nVersion: QB14\nOn this page\nWorking with Issues\nIf you\ndefined issue tracker\nin the configuration, QuickBuild can generate the issues report based on your commit comments or update issue step. Below is a sample of the issue report displayed in the\nbuild page\n:\nRelated issues in a specific build\nâ\nShow issues since a specified version\nâ\nYou can list all issues since a specified version by inputing the build version in the right top\nand the related issues will be grouped by build.\nwarning\nThe issues in comparison build are excluded.\nEdit related issues of a build\nâ\nYou may also edit the issues in a build by click the link\nLink issues to this build\nwhere you can specify a filter or specify the issues key directly, also you can remove the issues by filtering or by click the icon\nin each row.\nwarning\nYou need LINK_ISSUES permission to edit the issues\nShow related commits of an issue\nâ\nIf the issues are mentioned in the commit message, QuickBuild can also display the related changes like below:\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Working with Issues",
        "content": ""
      },
      {
        "header": "Related issues in a specific buildâ",
        "content": ""
      },
      {
        "header": "Show issues since a specified versionâ",
        "content": "You can list all issues since a specified version by inputing the build version in the right top and the related issues will be grouped by build. warningThe issues in comparison build are excluded."
      },
      {
        "header": "Edit related issues of a buildâ",
        "content": "You may also edit the issues in a build by click the linkLink issues to this buildwhere you can specify a filter or specify the issues key directly, also you can remove the issues by filtering or by click the iconin each row. warningYou need LINK_ISSUES permission to edit the issues"
      },
      {
        "header": "Show related commits of an issueâ",
        "content": "If the issues are mentioned in the commit message, QuickBuild can also display the related changes like below:"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Working+with+Artifacts",
      "https://wiki.pmease.com/display/QB14/category/Working+with+Reports",
      "https://wiki.pmease.com/display/QB14/Working+with+Statistics",
      "https://wiki.pmease.com/display/QB14/Manage+User+Profile",
      "https://wiki.pmease.com/display/QB14/Manage+Build+Subscriptions",
      "https://wiki.pmease.com/display/QB14/Manage+User+Agent",
      "https://wiki.pmease.com/display/QB14/Working+with+Proof+Build",
      "https://wiki.pmease.com/display/QB14/category/Working+With+Addons",
      "https://wiki.pmease.com/display/QB14/Working+with+Grid+Measurements",
      "https://wiki.pmease.com/display/QB14/Working+with+Alerts",
      "https://wiki.pmease.com/display/QB14/Working+with+Issue+Tracker",
      "https://wiki.pmease.com/display/QB14/Working+with+Artifacts"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Working+with+Artifacts",
    "title": "Working with Artifacts",
    "breadcrumb": [
      "",
      "User's Guide"
    ],
    "full_text": "User's Guide\nWorking with Artifacts\nVersion: QB14\nOn this page\nWorking with Artifacts\nAccess build artifacts\nâ\nIf published, build artifacts will be available for download from build overview page as below:\nBuild artifacts can also be accessed from dashboard by hovering mouse over the\nmore\nlink of a build.\nPermanent links to single artifact file\nâ\nPermanent links to a single artifact file are constructed in the form of:\nhttp\n:\n/\n/\n<\nhost\n>\n:\n<\nport\n>\n/\ndownload\n/\n<\nbuild id\n>\n/\nartifacts\n/\n<\nrelative path\nto\nartifact file\n>\nTake the above screenshot for example, assume the host and port to be\nbuild_server:8810\n, the permanent link to file\nproductA-1.0.3.jar\nwill be:\nhttp\n:\n/\n/\nbuild_server\n:\n8810\n/\ndownload\n/\n42\n/\nartifacts\n/\ndistribute\n/\nproductA\n-\n1.0\n.3\n.\njar\nThe\n<build id>\ncan also be written as below:\nBuild Id\nDescription\n<configuration id>.latest\nrefer to latest build of specified configuration\n<configuration id>.latest_successful\nrefer to latest successful build of specified configuration\n<configuration id>.latest_finished\nrefers to latest finished build of specified configuration\n<configuration id>.latest_failed\nrefers to latest failed build of specified configuration\n<configuration id>.latest_recommended\nrefers to latest recommended build of specified configuration\nBelow are some example permanent links using this form of build id:\nPermanent Links\nDescription\nhttp://build_server:8810/download/2.latest/artifacts/distribute/productA.jar\nThis url refers to artifact\ndistribute/productA.jar\nin latest build of configuration 2 (identifier).\nhttp://build_server:8810/download/5.latest_successful/artifacts/distribute/productA.jar\nThis url refers to artifact\ndistribute/productA.jar\nin latest successful build of configuration 5 (identifier).\nPermanent links to a set of artifact files\nâ\nPermanent links to a set of artifact files are constructed in the form of:\nhttp\n:\n/\n/\n<\nhost\n>\n:\n<\nport\n>\n/\nbatch_download\n?\nbuild_id\n=\n<\nbuild id\n>\n&\nsrc_path\n=\n<\nrelative path\nto\nsrc directory\n>\n&\nfile_patterns\n=\n<\nfile patterns\n>\nHere\n<file patterns>\nrefers to\nAnt file pattern\nTake the above screenshot for example, assume the host and port to be\nbuild_server:8810\n, the permanent link to all .txt files will be:\nhttp\n:\n/\n/\nbuild_server\n:\n8810\n/\nbatch_download\n?\nbuild_id\n=\n42\n&\nsrc_path\n=\nartifacts\n&\nfile_patterns\n=\n*\n.\ntxt\nJust as permanent link to single artifact file, the\n<build id>\ncan also be written as below:\nBuild Id\nDescription\n<configuration id>.latest\nrefer to latest build of specified configuration\n<configuration id>.latest_successful\nrefer to latest successful build of specified configuration\n<configuration id>.latest_finished\nrefers to latest finished build of specified configuration\n<configuration id>.latest_failed\nrefers to latest failed build of specified configuration\n<configuration id>.latest_recommended\nrefers to latest recommended build of specified configuration\nBelow are some example permanent links using this form of build id:\nPermanent Links\nDescription\nhttp://build_server:8810/batch_download?build_id=5.latest&src_path=artifacts&file_patterns=**/*.jar\nThis url refers to all jar files recursively under artifacts directory in latest build of configuration 5 (identifier).\nhttp://build_server:8810/batch_download?build_id=5.latest_successful&src_path=artifacts/libs&file_patterns=*.dll\nThis url refers to all dll files under artifacts/libs directory in latest successful build of configuration 5 (identifier).\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Working with Artifacts",
        "content": ""
      },
      {
        "header": "Access build artifactsâ",
        "content": "If published, build artifacts will be available for download from build overview page as below: Build artifacts can also be accessed from dashboard by hovering mouse over themorelink of a build."
      },
      {
        "header": "Permanent links to single artifact fileâ",
        "content": "Permanent links to a single artifact file are constructed in the form of: http://<host>:<port>/download/<build id>/artifacts/<relative pathtoartifact file> Take the above screenshot for example, assume the host and port to bebuild_server:8810, the permanent link to fileproductA-1.0.3.jarwill be: http://build_server:8810/download/42/artifacts/distribute/productA-1.0.3.jar The<build id>can also be written as below: Build IdDescription<configuration id>.latestrefer to latest build of specified configuration<configuration id>.latest_successfulrefer to latest successful build of specified configuration<configuration id>.latest_finishedrefers to latest finished build of specified configuration<configuration id>.latest_failedrefers to latest failed build of specified configuration<configuration id>.latest_recommendedrefers to latest recommended build of specified configuration Below are some example permanent links using this form of build id: Permanent LinksDescriptionhttp://build_server:8810/download/2.latest/artifacts/distribute/productA.jarThis url refers to artifactdistribute/productA.jarin latest build of configuration 2 (identifier).http://build_server:8810/download/5.latest_successful/artifacts/distribute/productA.jarThis url refers to artifactdistribute/productA.jarin latest successful build of configuration 5 (identifier)."
      },
      {
        "header": "Permanent links to a set of artifact filesâ",
        "content": "Permanent links to a set of artifact files are constructed in the form of: http://<host>:<port>/batch_download?build_id=<build id>&src_path=<relative pathtosrc directory>&file_patterns=<file patterns> Here<file patterns>refers toAnt file pattern Take the above screenshot for example, assume the host and port to bebuild_server:8810, the permanent link to all .txt files will be: http://build_server:8810/batch_download?build_id=42&src_path=artifacts&file_patterns=*.txt Just as permanent link to single artifact file, the<build id>can also be written as below: Build IdDescription<configuration id>.latestrefer to latest build of specified configuration<configuration id>.latest_successfulrefer to latest successful build of specified configuration<configuration id>.latest_finishedrefers to latest finished build of specified configuration<configuration id>.latest_failedrefers to latest failed build of specified configuration<configuration id>.latest_recommendedrefers to latest recommended build of specified configuration Below are some example permanent links using this form of build id: Permanent LinksDescriptionhttp://build_server:8810/batch_download?build_id=5.latest&src_path=artifacts&file_patterns=**/*.jarThis url refers to all jar files recursively under artifacts directory in latest build of configuration 5 (identifier).http://build_server:8810/batch_download?build_id=5.latest_successful&src_path=artifacts/libs&file_patterns=*.dllThis url refers to all dll files under artifacts/libs directory in latest successful build of configuration 5 (identifier)."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/category/Working+with+Reports",
      "https://wiki.pmease.com/display/QB14/Working+with+Statistics",
      "https://wiki.pmease.com/display/QB14/Manage+User+Profile",
      "https://wiki.pmease.com/display/QB14/Manage+Build+Subscriptions",
      "https://wiki.pmease.com/display/QB14/Manage+User+Agent",
      "https://wiki.pmease.com/display/QB14/Working+with+Proof+Build",
      "https://wiki.pmease.com/display/QB14/category/Working+With+Addons",
      "https://wiki.pmease.com/display/QB14/Working+with+Grid+Measurements",
      "https://wiki.pmease.com/display/QB14/Working+with+Alerts",
      "https://wiki.pmease.com/display/QB14/category/Working+with+Reports"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/category/Working+with+Reports",
    "title": "Working with Reports",
    "breadcrumb": [
      "",
      "User's Guide"
    ],
    "full_text": "ðï¸\nWorking with Coverage Report\nAfter publishing the coverage report, QuickBuild can display the coverage report in build page and statistics page. Below we will use Cobertura as an example. Different coverage tool may have different view, but in most cases, they have the same look-and-feel.\nðï¸\nWorking with Inspection Report\nAfter publishing the inspection report, QuickBuild can display the inspection report in build page and statistics page. Below we will use Fxcop as an example. Different inspection tool may have different view, but in most cases, they have the same look-and-feel.\nðï¸\nWorking with Test Report\nAfter publishing the test report successfully, QuickBuild will display the tests information in the build overview:",
    "sections": [
      {
        "header": "ðï¸ Working with Coverage Report",
        "content": "After publishing the coverage report, QuickBuild can display the coverage report in build page and statistics page. Below we will use Cobertura as an example. Different coverage tool may have different view, but in most cases, they have the same look-and-feel."
      },
      {
        "header": "ðï¸ Working with Inspection Report",
        "content": "After publishing the inspection report, QuickBuild can display the inspection report in build page and statistics page. Below we will use Fxcop as an example. Different inspection tool may have different view, but in most cases, they have the same look-and-feel."
      },
      {
        "header": "ðï¸ Working with Test Report",
        "content": "After publishing the test report successfully, QuickBuild will display the tests information in the build overview:"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Working+with+Coverage+Report",
      "https://wiki.pmease.com/display/QB14/Working+with+Inspection+Report",
      "https://wiki.pmease.com/display/QB14/Working+with+Test+Report",
      "https://wiki.pmease.com/display/QB14/Working+with+Statistics",
      "https://wiki.pmease.com/display/QB14/Manage+User+Profile",
      "https://wiki.pmease.com/display/QB14/Manage+Build+Subscriptions",
      "https://wiki.pmease.com/display/QB14/Manage+User+Agent",
      "https://wiki.pmease.com/display/QB14/Working+with+Proof+Build",
      "https://wiki.pmease.com/display/QB14/category/Working+With+Addons",
      "https://wiki.pmease.com/display/QB14/Working+with+Grid+Measurements",
      "https://wiki.pmease.com/display/QB14/Working+with+Alerts",
      "https://wiki.pmease.com/display/QB14/Working+with+Coverage+Report",
      "https://wiki.pmease.com/display/QB14/Working+with+Inspection+Report",
      "https://wiki.pmease.com/display/QB14/Working+with+Test+Report",
      "https://wiki.pmease.com/display/QB14/Working+with+Coverage+Report"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Working+with+Statistics",
    "title": "Working with Statistics",
    "breadcrumb": [
      "",
      "User's Guide"
    ],
    "full_text": "User's Guide\nWorking with Statistics\nVersion: QB14\nOn this page\nWorking with Statistics\nAll statistics data of a\nconfiguration\ncan be viewed in Statistics Tab.\n++Screenshot: Statistics Tab++\nThe statistics page includes:\nDate Range Viewer/Selector\nReport sets toolbar (If multiple report sets have been defined)\nGraph Mode Viewer/Selector\nStatistics Chart\nStatistics Summary\nStatistics Details\nDate Range Viewer/Selector\nâ\nBy clicking (1), the date range selector will be shown as displayed below and you can choose the date range for the statistics data of the specific indicator. By checking the 'Compare To', you can compare with a different date range of the current indicator. But when another indicator has been chosen or another configuration has been chosen to compare with, then the compared date range will have no effect. That is, the comparing date range will only has effect when One Metric is active in the Graph Mode Selector.\nGraph Mode Viewer/Selector\nâ\nBy clicking (2), the comparison graph mode selector will be shown as displayed below and you can choose a different comparison mode.\nThe graph mode includes:\nGroup By Selector\nComparison Mode Selector\n1. Group By Selector\nThe statistics can be grouped by different mode, including:\nBy Version\nBy Day\nBy Week\nBy Month\n2. Comparison Mode Selector\nIn statistics page, several comparison modes can be chosen:\nOne Metric\nIn this mode, you can select the different primary indicator to view its statistics data. Only in this mode, the compared data range can be used to compare the same indicator with different date range.\nCompare Two Metrics\nIn this mode, you can select two indicators in this report to compare.\nCompare Another Configuration\nSometimes, it is useful to compare the same report with another configuration, so you can select this mode, and you can choose a configuration by clicking the configuration tree icon or enter the path of another configuration, and then click the compare button. You can compare with the different indicator in the report of that configuration.\nExcluding Failed Builds\nBy checking excluding failed builds, the builds that failed will not be included in the statistics data. This may influence the statistics summary data.\nStatistics Chart\nâ\nThis chart displays the trends of specific indicator(s) based on the graph mode and the date range you selected.\nStatistics Summary\nâ\nThe statistics summary displays the\naverage\ndata for the indicator. The result is an average data of all builds in the date range, (with optionally excluding the failed builds).\nStatistics Details\nâ\nThe detailed statistics data will be shown in this section.\nWhen group by version, the result is the actual data for each version.\nWhen group by day, the result is the average data in a day per build.\nWhen group by week, the result is the average data in a week per build.\nWhen group by month, the result is the average data in a month per build.\nCustomizing The Statistics\nâ\nPlease see\nhow to customize the report\nfor details.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Working with Statistics",
        "content": ""
      },
      {
        "header": "Date Range Viewer/Selectorâ",
        "content": "By clicking (1), the date range selector will be shown as displayed below and you can choose the date range for the statistics data of the specific indicator. By checking the 'Compare To', you can compare with a different date range of the current indicator. But when another indicator has been chosen or another configuration has been chosen to compare with, then the compared date range will have no effect. That is, the comparing date range will only has effect when One Metric is active in the Graph Mode Selector."
      },
      {
        "header": "Graph Mode Viewer/Selectorâ",
        "content": "By clicking (2), the comparison graph mode selector will be shown as displayed below and you can choose a different comparison mode. The graph mode includes: Group By SelectorComparison Mode Selector 1. Group By Selector The statistics can be grouped by different mode, including: By VersionBy DayBy WeekBy Month 2. Comparison Mode Selector In statistics page, several comparison modes can be chosen: One MetricIn this mode, you can select the different primary indicator to view its statistics data. Only in this mode, the compared data range can be used to compare the same indicator with different date range. Compare Two MetricsIn this mode, you can select two indicators in this report to compare. Compare Another ConfigurationSometimes, it is useful to compare the same report with another configuration, so you can select this mode, and you can choose a configuration by clicking the configuration tree icon or enter the path of another configuration, and then click the compare button. You can compare with the different indicator in the report of that configuration. Excluding Failed BuildsBy checking excluding failed builds, the builds that failed will not be included in the statistics data. This may influence the statistics summary data."
      },
      {
        "header": "Statistics Chartâ",
        "content": "This chart displays the trends of specific indicator(s) based on the graph mode and the date range you selected."
      },
      {
        "header": "Statistics Summaryâ",
        "content": "The statistics summary displays theaveragedata for the indicator. The result is an average data of all builds in the date range, (with optionally excluding the failed builds)."
      },
      {
        "header": "Statistics Detailsâ",
        "content": "The detailed statistics data will be shown in this section. When group by version, the result is the actual data for each version.When group by day, the result is the average data in a day per build.When group by week, the result is the average data in a week per build.When group by month, the result is the average data in a month per build."
      },
      {
        "header": "Customizing The Statisticsâ",
        "content": "Please seehow to customize the reportfor details."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Manage+User+Profile",
      "https://wiki.pmease.com/display/QB14/Manage+Build+Subscriptions",
      "https://wiki.pmease.com/display/QB14/Manage+User+Agent",
      "https://wiki.pmease.com/display/QB14/Working+with+Proof+Build",
      "https://wiki.pmease.com/display/QB14/category/Working+With+Addons",
      "https://wiki.pmease.com/display/QB14/Working+with+Grid+Measurements",
      "https://wiki.pmease.com/display/QB14/Working+with+Alerts",
      "https://wiki.pmease.com/display/QB14/Working+with+Configurations",
      "https://wiki.pmease.com/display/QB14/Add+Custom+Statistics+Data",
      "https://wiki.pmease.com/display/QB14/Working+with+Test+Report",
      "https://wiki.pmease.com/display/QB14/Manage+User+Profile"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Manage+User+Profile",
    "title": "Manage User Profile",
    "breadcrumb": [
      "",
      "User's Guide"
    ],
    "full_text": "User's Guide\nManage User Profile\nVersion: QB14\nManage User Profile\nFor logged in user, user profile can be managed through\nMy\ntab like below:\nDo not forget to click the update button after you make changes.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Manage User Profile",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Manage+Build+Subscriptions",
      "https://wiki.pmease.com/display/QB14/Manage+User+Agent",
      "https://wiki.pmease.com/display/QB14/Working+with+Proof+Build",
      "https://wiki.pmease.com/display/QB14/category/Working+With+Addons",
      "https://wiki.pmease.com/display/QB14/Working+with+Grid+Measurements",
      "https://wiki.pmease.com/display/QB14/Working+with+Alerts",
      "https://wiki.pmease.com/display/QB14/Manage+Build+Subscriptions"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Manage+Build+Subscriptions",
    "title": "Manage Build Subscriptions",
    "breadcrumb": [
      "",
      "User's Guide"
    ],
    "full_text": "User's Guide\nManage Build Subscriptions\nVersion: QB14\nManage Build Subscriptions\nUser can subscribe to get build notifications for one or more configurations through the\nMy\ntab like below:\nPlease note that you can only subscribe to accessible configurations.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Manage Build Subscriptions",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Manage+User+Agent",
      "https://wiki.pmease.com/display/QB14/Working+with+Proof+Build",
      "https://wiki.pmease.com/display/QB14/category/Working+With+Addons",
      "https://wiki.pmease.com/display/QB14/Working+with+Grid+Measurements",
      "https://wiki.pmease.com/display/QB14/Working+with+Alerts",
      "https://wiki.pmease.com/display/QB14/Manage+User+Agent"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Manage+User+Agent",
    "title": "Manage User Agent",
    "breadcrumb": [
      "",
      "User's Guide"
    ],
    "full_text": "User's Guide\nManage User Agent\nVersion: QB14\nOn this page\nManage User Agent\nInstall user agent\nâ\nUser agent\ncan be installed following the\nuser agent installation guide\n.\nConfig user agent\nâ\nNormally user agent does not need to be configured since it has been auto-configured when you download using your own account. However, you will need to do this for below reasons:\nYou want to change port number of the user agent.\nYou want to specify IP address of the user agent and have QuickBuild server communicates with the user agent via this IP address.\nAddress of QuickBuild server has been changed.\nYou've changed your user name/password at QuickBuild server.\nYou want to configure performance factor of your user agent.\nTo configure user agent, please run the file\nbin/config.bat\non Windows, or\nbin/config.sh\non Unix.\nDefine user attributes\nâ\nUser attributes can be defined in the user agent to reflect your desktop environment, and these attributes can be referenced in the build process. To define user attributes, please make sure the user agent is connected to QuickBuild server, and then follow below screenshot to define user attributes:\nDo not forget to click the update button after you've defined user attributes.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Manage User Agent",
        "content": ""
      },
      {
        "header": "Install user agentâ",
        "content": "User agentcan be installed following theuser agent installation guide."
      },
      {
        "header": "Config user agentâ",
        "content": "Normally user agent does not need to be configured since it has been auto-configured when you download using your own account. However, you will need to do this for below reasons: You want to change port number of the user agent.You want to specify IP address of the user agent and have QuickBuild server communicates with the user agent via this IP address.Address of QuickBuild server has been changed.You've changed your user name/password at QuickBuild server.You want to configure performance factor of your user agent. To configure user agent, please run the filebin/config.baton Windows, orbin/config.shon Unix."
      },
      {
        "header": "Define user attributesâ",
        "content": "User attributes can be defined in the user agent to reflect your desktop environment, and these attributes can be referenced in the build process. To define user attributes, please make sure the user agent is connected to QuickBuild server, and then follow below screenshot to define user attributes:Do not forget to click the update button after you've defined user attributes."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Working+with+Proof+Build",
      "https://wiki.pmease.com/display/QB14/category/Working+With+Addons",
      "https://wiki.pmease.com/display/QB14/Working+with+Grid+Measurements",
      "https://wiki.pmease.com/display/QB14/Working+with+Alerts",
      "https://wiki.pmease.com/display/QB14/Working+with+Proof+Build"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Working+with+Proof+Build",
    "title": "Working with Proof Build",
    "breadcrumb": [
      "",
      "User's Guide"
    ],
    "full_text": "User's Guide\nWorking with Proof Build\nVersion: QB14\nOn this page\nWorking with Proof Build\nIntroduction\nâ\nUsually developers commit their code after they build and unit test their code successfully in their IDE. However, this has some limitations:\nDeveloper's computer may not have the same environment as the test server. The new code works well on developer's computer, but may fail on the test server.\nTests on the server might be more thoroughly, for example automated GUI tests may be executed and all dependent components might be tested as well. The developer's computer may not have such tool(s) installed.\nThe product may consists of components that need to be built and tested on different platforms.\nThe test server might be much more powerful, or it may utilize build grid feature to run tests in parallel on multiple agents.\nQuickBuild introduces the concept of proof build to remove such limitations:\nThe developer runs a proof build before committing their changes to SCM.\nQuickBuild collects uncommitted changes from developer's computer to patch code checked out from SCM, and builds/tests them on test server.\nIf the build/test is successful, QuickBuild can optionally checkin the changes on behalf of the developer automatically.\nIf the build/test fails, developer fixes the error locally and re-runs the proof build until the build is successful.\nFor distributed version control systems, the process will be:\nThe developer runs a proof build before pushing local commits to the central repository.\nQuickBuild collects local commits from developer's local repository to patch code pulled from central repository, and builds/tests them on test server.\nIf the build/test is successful, QuickBuild can optionally push the local commits on behalf of the developer automatically.\nIf the build/test fails, developer fixes the error locally and re-runs the proof build until the build is successful.\nRun proof build\nâ\nProof build support needs to be enabled at repository level before you can run a proof build. Refer\nhere\non how to set up proof build.\nLocal changes\nâ\nA local changes tab will appear after a proof build finishes. It is used to display uncommited changes collected from user's desktop. Just like in\nbuild changes\ntab, you can view and diff source files.\nLocal change tab can be a good place to do code review: you submit your uncommited changes to QuickBuild to do a proof build. If the proof build is successful, it means that your change has at least passed the build process, then you send link of the proof build to other people for review before commit your changes.\nFor distributed version control systems, the local changes tab displays local commits picked up for proof build.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Working with Proof Build",
        "content": ""
      },
      {
        "header": "Introductionâ",
        "content": "Usually developers commit their code after they build and unit test their code successfully in their IDE. However, this has some limitations: Developer's computer may not have the same environment as the test server. The new code works well on developer's computer, but may fail on the test server.Tests on the server might be more thoroughly, for example automated GUI tests may be executed and all dependent components might be tested as well. The developer's computer may not have such tool(s) installed.The product may consists of components that need to be built and tested on different platforms.The test server might be much more powerful, or it may utilize build grid feature to run tests in parallel on multiple agents. QuickBuild introduces the concept of proof build to remove such limitations: The developer runs a proof build before committing their changes to SCM.QuickBuild collects uncommitted changes from developer's computer to patch code checked out from SCM, and builds/tests them on test server.If the build/test is successful, QuickBuild can optionally checkin the changes on behalf of the developer automatically.If the build/test fails, developer fixes the error locally and re-runs the proof build until the build is successful. For distributed version control systems, the process will be: The developer runs a proof build before pushing local commits to the central repository.QuickBuild collects local commits from developer's local repository to patch code pulled from central repository, and builds/tests them on test server.If the build/test is successful, QuickBuild can optionally push the local commits on behalf of the developer automatically.If the build/test fails, developer fixes the error locally and re-runs the proof build until the build is successful."
      },
      {
        "header": "Run proof buildâ",
        "content": "Proof build support needs to be enabled at repository level before you can run a proof build. Referhereon how to set up proof build."
      },
      {
        "header": "Local changesâ",
        "content": "A local changes tab will appear after a proof build finishes. It is used to display uncommited changes collected from user's desktop. Just like inbuild changestab, you can view and diff source files. Local change tab can be a good place to do code review: you submit your uncommited changes to QuickBuild to do a proof build. If the proof build is successful, it means that your change has at least passed the build process, then you send link of the proof build to other people for review before commit your changes. For distributed version control systems, the local changes tab displays local commits picked up for proof build."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/category/Working+With+Addons",
      "https://wiki.pmease.com/display/QB14/Working+with+Grid+Measurements",
      "https://wiki.pmease.com/display/QB14/Working+with+Alerts",
      "https://wiki.pmease.com/display/QB14/Set+Up+Proof+Build",
      "https://wiki.pmease.com/display/QB14/category/Working+With+Addons"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/category/Working+With+Addons",
    "title": "Working With Addons",
    "breadcrumb": [
      "",
      "User's Guide"
    ],
    "full_text": "ðï¸\nTray Monitor\nThe tray monitor is an addon for QuickBuild (2.1 or higher) to enable user monitoring build, triggering build, and receiving build notifications from desktop without opening the web browser. It requires JRE 1.5 and currently supports below platforms:",
    "sections": [
      {
        "header": "ðï¸ Tray Monitor",
        "content": "The tray monitor is an addon for QuickBuild (2.1 or higher) to enable user monitoring build, triggering build, and receiving build notifications from desktop without opening the web browser. It requires JRE 1.5 and currently supports below platforms:"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Tray+Monitor",
      "https://wiki.pmease.com/display/QB14/Working+with+Grid+Measurements",
      "https://wiki.pmease.com/display/QB14/Working+with+Alerts",
      "https://wiki.pmease.com/display/QB14/Tray+Monitor",
      "https://wiki.pmease.com/display/QB14/Tray+Monitor"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Working+with+Grid+Measurements",
    "title": "Working with Grid Measurements",
    "breadcrumb": [
      "",
      "User's Guide"
    ],
    "full_text": "User's Guide\nWorking with Grid Measurements\nVersion: QB14\nOn this page\nWorking with Grid Measurements\nFrom QuickBuild v5, grid measurements are collected every 5 minutes from all action nodes. All measurement are separated into below group:\nVirtual Machine\nCPU\nDisk\nPhysical Memory\nBuild Request\nBuilds\nSteps\nWeb UI\nREST\nDownload\nUpload\nRPC\nNetwork\nDatabase Connection\nJetty Connection\nSWAP\nResources\nHeatmap for Active Nodes\nâ\nHeatmap is basically a table that has colors in place of numbers. Colors correspond to the level of the measurement. It's useful for finding highs and lows and sometimes, patterns. From the heatmap view for those active nodes, you may easily know which node/nodes is/are in problem.\nSo far, two metrics can be chosen to display the heatmap, one for JVM memory usage, and the other is CPU total usage.\nBuild Measurements\nâ\nBuild measurements for the system including:\nBuild Requests: processings total, waitings total and processed total\nBuilds: total builds, failed builds, successful rate, build average duration and average waiting duration\nSteps: runnings total and waitings total\nNode Measurements\nâ\nFor each node, below measurements are collected:\nVirtual Machine: memory usage\nCPU: total usage\nBuild Requests: processings on node and waitings on node\nSteps: runnings on node\nDisk: disk usage\nBy default, QuickBuild will only monitor the disk where the storage directory defined. But you can specify any disks you want to monitor from the measurement plugin setting. Please go to\nthis page\nfor more details.\nServer Measurements\nâ\nBeside the measurements for all node above, the server measurements also including:\nVirtual Machine: Heap usage, GC runs, GC time and thread counts\nNetwork: rxBytes and txBytes\nSWAP: total usage\nDatabase: total connections and busy connections\nJetty server: total connections in thread pool and used connections\nWeb UI visits\nREST visists\nRPC visits\nDownload visits\nUpload visits\nFor Web UI visits, REST visits, RPC visits, Download visits and Upload visits, QuickBuild will collect below metrics:\nOne-minute rate\nFive-minute rate\nFifteen-minute rate\nRequests number\nAverage duration for each request\nOne-minute rate, Five-minute rate and Fifteen-minute rate are requests rate in requests per minute. If you want to know more about what they are, you may refer to below page for more details:\nhttps://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average\nResource Measurements\nâ\nResource measurements including:\nUsed percentage\nUsed by name\nFrees by name\nYou may show the heatmap for all resources:\nor you can view one resource's measurements, or compare to another resource:\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Working with Grid Measurements",
        "content": ""
      },
      {
        "header": "Heatmap for Active Nodesâ",
        "content": "Heatmap is basically a table that has colors in place of numbers. Colors correspond to the level of the measurement. It's useful for finding highs and lows and sometimes, patterns. From the heatmap view for those active nodes, you may easily know which node/nodes is/are in problem. So far, two metrics can be chosen to display the heatmap, one for JVM memory usage, and the other is CPU total usage."
      },
      {
        "header": "Build Measurementsâ",
        "content": "Build measurements for the system including: Build Requests: processings total, waitings total and processed totalBuilds: total builds, failed builds, successful rate, build average duration and average waiting durationSteps: runnings total and waitings total"
      },
      {
        "header": "Node Measurementsâ",
        "content": "For each node, below measurements are collected: Virtual Machine: memory usageCPU: total usageBuild Requests: processings on node and waitings on nodeSteps: runnings on nodeDisk: disk usage By default, QuickBuild will only monitor the disk where the storage directory defined. But you can specify any disks you want to monitor from the measurement plugin setting. Please go tothis pagefor more details."
      },
      {
        "header": "Server Measurementsâ",
        "content": "Beside the measurements for all node above, the server measurements also including: Virtual Machine: Heap usage, GC runs, GC time and thread countsNetwork: rxBytes and txBytesSWAP: total usageDatabase: total connections and busy connectionsJetty server: total connections in thread pool and used connectionsWeb UI visitsREST visistsRPC visitsDownload visitsUpload visits For Web UI visits, REST visits, RPC visits, Download visits and Upload visits, QuickBuild will collect below metrics: One-minute rateFive-minute rateFifteen-minute rateRequests numberAverage duration for each request One-minute rate, Five-minute rate and Fifteen-minute rate are requests rate in requests per minute. If you want to know more about what they are, you may refer to below page for more details:https://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average"
      },
      {
        "header": "Resource Measurementsâ",
        "content": "Resource measurements including: Used percentageUsed by nameFrees by name You may show the heatmap for all resources: or you can view one resource's measurements, or compare to another resource:"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Working+with+Alerts",
      "https://wiki.pmease.com/display/QB14/Configuring+Disk+Monitoring",
      "https://wiki.pmease.com/display/QB14/Tray+Monitor",
      "https://wiki.pmease.com/display/QB14/Working+with+Alerts"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Working+with+Alerts",
    "title": "Working with Alerts",
    "breadcrumb": [
      "",
      "User's Guide"
    ],
    "full_text": "User's Guide\nWorking with Alerts\nVersion: QB14\nWorking with Alerts\nFrom QuickBuild v5, all alerts reported by the QuickBuild system can be viewed in Grid tab like below and all alerts can be subscribed by email, tray monitor, Jabber and MSN messenger.\nYou can filter the alerts by different source, priority and definition. You can define your own alerts by adding some condition set in alert plugin setting page. See\nConfiguring System Alerts\nfor more details.\nYou may also subscribe the alerts via email, tray monitor, Jabber client and MSN messenger, see\nhow to subscribe system alerts\n.\nBelow are screen shots for tray monitor alerts and email alerts\nTray Monitor:\nEmail:\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Working with Alerts",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Configuring+System+Alerts",
      "https://wiki.pmease.com/display/QB14/Configuring+System+Alerts"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Upgrade+Data+And+Agent",
    "title": "Upgrade Data And Agent",
    "breadcrumb": [
      "",
      "Upgrade Guide",
      "Procedures"
    ],
    "full_text": "Upgrade Guide\nProcedures\nUpgrade Data And Agent\nVersion: QB14\nUpgrade Data And Agent\nStop QuickBuild server of previous version.\nExtract installation package of new version to a new directory.\nOpen a command line window, and switch to the\nbin\nsub directory under the\nnew version\n's installation directory. Run the migrate command to migrate from previous QuickBuild version. On Windows platform, the command is\nmigrate.bat <install directory of previous QuickBuild version>\n, and on unix platforms, it will be\nmigrate.sh <install directory of previous QuickBuild version>\n.\nStart QuickBuild server in new installation directory.\nFollow\nthis guide\nto reinstall build and user agents if necessary.\nVerify the server and agent installation by running some builds.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Upgrade Data And Agent",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Backup+and+Restore+Data",
      "https://wiki.pmease.com/display/QB14/In-place+upgrade",
      "https://wiki.pmease.com/display/QB14/Reinstall+Agents",
      "https://wiki.pmease.com/display/QB14/Upgrade+2.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+and+Start+Agent",
      "https://wiki.pmease.com/display/QB14/Upgrade+Luntbuild",
      "https://wiki.pmease.com/display/QB14/Upgrade+QuickBuild+1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data",
      "https://wiki.pmease.com/display/QB14/Reinstall+Agents",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/CSS+Customization",
    "title": "CSS Customization",
    "breadcrumb": [
      "",
      "Administrator's Guide"
    ],
    "full_text": "Administrator's Guide\nCSS Customization\nVersion: QB14\nCSS Customization\nSince QB 13.0, dark theme is introduced. And now, it is easy to do some customization for both light mode and dark mode.\nThe CSS framework in QB 13.0 is largely based on\nTailwind CSS\n, you can use most of the utility classes as long as QuickBuild has already included, otherwise, you have to provide the css by yourself.\nCSS Variables and Color Palette\nSince QB 13, add your CSS customization from QuickBuild Administration page, where you can find a tab \"Css Customization\" like below where you can add your css customization:\nThe color scheme or font system in QuickBuild is using\nCSS variables\n. So you can override a color or font by setting the CSS variables, for example, if you want to change the background to stone in dark mode, you can add the customization like below:\n.dark\n{\n--qb-body-bg\n:\nvar\n(\n--qb-color-stone-800\n)\n;\n}\nHere,\n--qb-body-bg\nis a variable and\n--qb-color-stone-800\nis another variable which has been defined in QB system. The default color palette can be found in Tailwind site below:\nhttps://tailwindcss.com/docs/customizing-colors\nnote\nPlease note that in most cases, colors in QuickBuild is in format:\nrgb(R G B / OPACITY)\n, for example:\nrgb(255 255 255 / 0.8)\nand we define the color variable like\n--qb-color-stone-800\nonly the RGB part like below:\n--qb-color-stone-800\n:\n41 37 36\n;\nWe'll specify the opacity value according to the element context.\nIn QuickBuild, almost every component in the GUI uses CSS variables, if you want to know what kind of variables it used, it is very important to inspect the element from browser developer tools. For example, if you're using Google Chrome, you can press F12, or just right click the element and select \"Inspect\", then it will show you all CSS related stuff. See more detailed on\nChrome Developer Tools\nor developer tools document of your browser.\nBelow code list all variables (mostly are colors) we override the light theme in dark mode:\n.dark\n{\n/* GLOBAL STATE COLORS */\n--qb-color-success\n:\nvar\n(\n--qb-color-green-500\n)\n;\n--qb-color-danger\n:\nvar\n(\n--qb-color-red-500\n)\n;\n--qb-color-warning\n:\nvar\n(\n--qb-color-yellow-500\n)\n;\n--qb-color-primary-focus\n:\nvar\n(\n--qb-color-blue-400\n)\n;\n--qb-color-danger-focus\n:\nvar\n(\n--qb-color-red-400\n)\n;\n--qb-color-secondary-focus\n:\nvar\n(\n--qb-color-gray-400\n)\n;\n--qb-color-neutral-focus\n:\nvar\n(\n--qb-color-neutral-400\n)\n;\n--qb-color-accent-focus\n:\nvar\n(\n--qb-color-purple-400\n)\n;\n--qb-color-success-focus\n:\nvar\n(\n--qb-color-green-400\n)\n;\n--qb-color-info-focus\n:\nvar\n(\n--qb-color-cyan-400\n)\n;\n--qb-color-warning-focus\n:\nvar\n(\n--qb-color-yellow-400\n)\n;\n--qb-color-primary-ring\n:\nvar\n(\n--qb-color-blue-700\n)\n;\n--qb-color-danger-ring\n:\nvar\n(\n--qb-color-red-700\n)\n;\n--qb-color-secondary-ring\n:\nvar\n(\n--qb-color-gray-700\n)\n;\n--qb-color-neutral-ring\n:\nvar\n(\n--qb-color-neutral-700\n)\n;\n--qb-color-accent-ring\n:\nvar\n(\n--qb-color-purple-700\n)\n;\n--qb-color-success-ring\n:\nvar\n(\n--qb-color-green-700\n)\n;\n--qb-color-info-ring\n:\nvar\n(\n--qb-color-cyan-700\n)\n;\n--qb-color-warning-ring\n:\nvar\n(\n--qb-color-yellow-700\n)\n;\n--qb-color-primary-light\n:\nvar\n(\n--qb-color-blue-800\n)\n;\n--qb-color-accent-dark\n:\nvar\n(\n--qb-color-purple-100\n)\n;\n--qb-color-accent-muted\n:\nvar\n(\n--qb-color-purple-900\n)\n;\n--qb-color-accent-light\n:\nvar\n(\n--qb-color-purple-800\n)\n;\n/* BACKGROUND COLORS */\n--qb-color-bg-muted\n:\nvar\n(\n--qb-color-neutral-800\n)\n;\n--qb-color-bg-base\n:\nvar\n(\n--qb-color-neutral-700\n)\n;\n--qb-color-bg-dim\n:\nvar\n(\n--qb-color-neutral-600\n)\n;\n--qb-color-bg-dark\n:\nvar\n(\n--qb-color-neutral-500\n)\n;\n--qb-color-bg-default\n:\nvar\n(\n--qb-color-neutral-900\n)\n;\n--qb-color-bg-darker\n:\nvar\n(\n--qb-color-neutral-600\n)\n;\n--qb-color-bg-black\n:\nvar\n(\n--qb-color-neutral-50\n)\n;\n--qb-color-bg-dialog\n:\nvar\n(\n--qb-color-neutral-700\n)\n;\n/* TEXT COLORS */\n--qb-color-text-dark\n:\nvar\n(\n--qb-color-neutral-50\n)\n;\n--qb-color-text-emphasis\n:\nvar\n(\n--qb-color-neutral-50\n)\n;\n--qb-color-text-default\n:\nvar\n(\n--qb-color-neutral-400\n)\n;\n--qb-color-text-muted\n:\nvar\n(\n--qb-color-neutral-500\n)\n;\n--qb-color-text-focus\n:\nvar\n(\n--qb-color-neutral-50\n)\n;\n--qb-color-text-light\n:\nvar\n(\n--qb-color-neutral-500\n)\n;\n--qb-color-text-neglected\n:\nvar\n(\n--qb-color-neutral-700\n)\n;\n--qb-color-text-placeholder\n:\nvar\n(\n--qb-color-neutral-600\n)\n;\n/* BORDER COLORS */\n--qb-color-border-disabled\n:\nvar\n(\n--qb-color-neutral-800\n)\n;\n--qb-color-border-light\n:\nvar\n(\n--qb-color-neutral-800\n)\n;\n--qb-color-border-default\n:\nvar\n(\n--qb-color-neutral-700\n)\n;\n--qb-color-border-dim\n:\nvar\n(\n--qb-color-neutral-600\n)\n;\n--qb-color-border-dark\n:\nvar\n(\n--qb-color-neutral-500\n)\n;\n--qb-color-border-darker\n:\nvar\n(\n--qb-color-neutral-300\n)\n;\n--qb-color-border-black\n:\nvar\n(\n--qb-color-neutral-50\n)\n;\n--qb-body-fg\n:\nvar\n(\n--qb-color-text-default\n)\n;\n--qb-body-bg\n:\nvar\n(\n--qb-color-neutral-900\n)\n;\n/* TYPOGRAPH */\n--qb-headings-color\n:\nvar\n(\n--qb-color-neutral-100\n)\n;\n--qb-link-color\n:\nvar\n(\n--qb-color-blue-400\n)\n;\n--qb-color-link-hover\n:\nvar\n(\n--qb-color-white\n)\n;\n/* BUTTON */\n--qb-input-btn-disabled-border-color\n:\nvar\n(\n--qb-color-gray-600\n)\n;\n/* TABLE */\n--qb-table-th-bg\n:\nvar\n(\n--qb-color-stone-800\n)\n;\n--qb-table-th-fg\n:\nvar\n(\n--qb-color-stone-300\n)\n;\n--qb-table-th-hover-bg\n:\nvar\n(\n--qb-color-stone-500\n)\n;\n--qb-table-th-hover-fg\n:\nvar\n(\n--qb-color-stone-100\n)\n;\n--qb-table-th-ordered-bg\n:\nvar\n(\n--qb-color-stone-600\n)\n;\n--qb-table-th-ordered-fg\n:\nvar\n(\n--qb-color-white\n)\n;\n--qb-table-td-ordered-bg\n:\nvar\n(\n--qb-color-neutral-700\n)\n;\n--qb-table-striped-bg\n:\nvar\n(\n--qb-color-neutral-800\n)\n;\n--qb-scorecard-primary-fg\n:\nvar\n(\n--qb-color-neutral-100\n)\n;\n--qb-table-settings-td-name-bg\n:\nvar\n(\n--qb-color-stone-800\n)\n;\n/* ATTEIBUTES TABLE */\n--qb-table-attributes-name-bg\n:\nvar\n(\n--qb-color-stone-800\n)\n;\n--qb-table-attributes-border-color\n:\nvar\n(\n--qb-color-border-default\n)\n;\n--qb-table-attributes-on-left-bg\n:\nvar\n(\n--qb-color-blue\n)\n;\n--qb-table-attributes-on-right-bg\n:\nvar\n(\n--qb-color-green\n)\n;\n--qb-table-attributes-differing-bg\n:\nvar\n(\n--qb-color-yellow\n)\n;\n/* TREE */\n--qb-tree-th-bg\n:\nvar\n(\n--qb-color-black\n)\n;\n--qb-tree-tr-hover-bg\n:\nvar\n(\n--qb-color-bg-base\n)\n;\n/* BOX */\n--qb-box-head-bg\n:\nvar\n(\n--qb-color-stone-600\n)\n;\n--qb-box-head-border-color\n:\nvar\n(\n--qb-color-stone-600\n)\n;\n--qb-box-head-fg\n:\nvar\n(\n--qb-color-neutral-200\n)\n;\n/* GADGET */\n--qb-gadget-module-footer-bg\n:\nvar\n(\n--qb-color-bg\n)\n;\n--qb-gadget-placeholder-bg\n:\nvar\n(\n--qb-color-bg-muted\n)\n;\n--qb-gadget-placeholder-fg\n:\nvar\n(\n--qb-color-text-default\n)\n;\n--qb-gadget-placeholder-border-color\n:\nvar\n(\n--qb-color-border-dark\n)\n;\n/* SOURCE VIEW / DIFF */\n--qb-table-sources-line-num-fg\n:\nvar\n(\n--qb-color-red-600\n)\n;\n--qb-diff-insert-bg-color\n:\nvar\n(\n--qb-color-green-900\n)\n;\n--qb-diff-insert-fg-color\n:\nvar\n(\n--qb-color-green-50\n)\n;\n--qb-diff-delete-bg-color\n:\nvar\n(\n--qb-color-red-900\n)\n;\n--qb-diff-delete-fg-color\n:\nvar\n(\n--qb-color-red-50\n)\n;\n/* STEP GRAPH */\n--qb-step-head-fg\n:\nvar\n(\n--qb-color-gray-200\n)\n;\n--qb-step-placeholder-bg\n:\n47 27 8\n;\n--qb-step-head-muted-opacity\n:\n0.3\n;\n--qb-step-timeout-icon-color\n:\nvar\n(\n--qb-color-white\n)\n;\n--qb-step-timeout-head-bg-opacity\n:\n0.5\n;\n--qb-step-idle-icon-color\n:\nvar\n(\n--qb-color-gray-300\n)\n;\n--qb-step-hover-bg-opacity\n:\n0.12\n;\n/* COMMIT BLOCK */\n--qb-num-block-info-bg\n:\nvar\n(\n--qb-color-stone-700\n)\n;\n--qb-num-block-info-fg\n:\nvar\n(\n--qb-color-stone-100\n)\n;\n--qb-num-block-add-bg\n:\nvar\n(\n--qb-color-green-600\n)\n;\n--qb-num-block-add-fg\n:\nvar\n(\n--qb-color-green-100\n)\n;\n--qb-num-block-modify-bg\n:\nvar\n(\n--qb-color-yellow-600\n)\n;\n--qb-num-block-modify-fg\n:\nvar\n(\n--qb-color-yellow-100\n)\n;\n--qb-num-block-delete-bg\n:\nvar\n(\n--qb-color-red-600\n)\n;\n--qb-num-block-delete-fg\n:\nvar\n(\n--qb-color-red-100\n)\n;\n--qb-swagger-opblock-bg-opacity\n:\n0.2\n;\n/* POPUP */\n--qb-popup-bg\n:\nvar\n(\n--qb-color-bg-muted\n)\n;\n/* JQUERY UI */\n--qb-ui-dialog-titlebar-gradient-from\n:\nvar\n(\n--qb-color-bg-dim\n)\n;\n--qb-ui-dialog-titlebar-gradient-to\n:\nvar\n(\n--qb-color-bg-muted\n)\n;\n--qb-ui-widget-overlay-bg\n:\nvar\n(\n--qb-color-neutral-600\n)\n;\n--qb-ui-draggable-dragging-fg\n:\nvar\n(\n--qb-color-gray-800\n)\n;\n--qb-ui-draggable-dragging-border-color\n:\nvar\n(\n--qb-color-gray-600\n)\n;\n/* FORM */\n--qb-form-check-input-bg\n:\nvar\n(\n--qb-body-bg\n)\n;\n--qb-form-check-input-border-color\n:\nvar\n(\n--qb-color-neutral-500\n)\n;\n/* STATISTICS */\n--qb-stats-gradient-from\n:\nvar\n(\n--qb-color-neutral-700\n)\n;\n--qb-stats-gradient-to\n:\nvar\n(\n--qb-color-neutral-800\n)\n;\n/* MISC COLORS */\n--qb-blankslate-fg\n:\nvar\n(\n--qb-color-yellow-200\n)\n;\n--qb-color-attention-muted\n:\nvar\n(\n--qb-color-neutral-800\n)\n;\n}\nLast updated\non\nDec 4, 2024",
    "sections": [
      {
        "header": "CSS Customization",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Working+with+Steps",
      "https://wiki.pmease.com/display/QB14/category/Working+with+SCM+systems",
      "https://wiki.pmease.com/display/QB14/category/Working+with+Build+Tools",
      "https://wiki.pmease.com/display/QB14/category/Working+with+Issue+Tracker",
      "https://wiki.pmease.com/display/QB14/category/Artifact+Management",
      "https://wiki.pmease.com/display/QB14/category/Publish+Build+Reports",
      "https://wiki.pmease.com/display/QB14/Publish+HTML+Reports",
      "https://wiki.pmease.com/display/QB14/Set+Up+Build+Dependency",
      "https://wiki.pmease.com/display/QB14/Set+Up+Build+Promotion",
      "https://wiki.pmease.com/display/QB14/Build+Notifications",
      "https://wiki.pmease.com/display/QB14/Customize+Notification+Templates",
      "https://wiki.pmease.com/display/QB14/Set+Up+Proof+Build",
      "https://wiki.pmease.com/display/QB14/Working+with+Resources",
      "https://wiki.pmease.com/display/QB14/Build+Concurrency+and+Deadlock",
      "https://wiki.pmease.com/display/QB14/Working+with+Build+Grid",
      "https://wiki.pmease.com/display/QB14/category/Working+with+Cloud+Profiles",
      "https://wiki.pmease.com/display/QB14/Diagnose+Build+Issues",
      "https://wiki.pmease.com/display/QB14/Running+Behind+Apache",
      "https://wiki.pmease.com/display/QB14/Data+Management",
      "https://wiki.pmease.com/display/QB14/License+Management",
      "https://wiki.pmease.com/display/QB14/category/Security+Management",
      "https://wiki.pmease.com/display/QB14/Auditing+User+Activities",
      "https://wiki.pmease.com/display/QB14/Plugin+Management",
      "https://wiki.pmease.com/display/QB14/Configuring+System+Alerts",
      "https://wiki.pmease.com/display/QB14/Configuring+Disk+Monitoring",
      "https://wiki.pmease.com/display/QB14/Webhooks",
      "https://wiki.pmease.com/display/QB14/Working+with+Steps"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Working+with+Steps",
    "title": "Working with Steps",
    "breadcrumb": [
      "",
      "Administrator's Guide"
    ],
    "full_text": "Administrator's Guide\nWorking with Steps\nVersion: QB14\nWorking with Steps\nStep is the key concept in QuickBuild. A build process is actually the execution of sequence of steps. Steps can be defined in step setting page of a configuration like below:\nStep setting page is composed of two parts: available steps and workflow. Available steps includes all steps defined in current configuration and inherited from ancestor configurations, while workflow defines which steps will be executed in current configuration and how they will be executed. Details of this page:\nClick this icon to define a new step in current configuration. The newly defined step will not be executed in workflow unless you drag it into workflow (or edit relevant composite step in workflow to contain it).\nClick this icon to define a new step and at the same time add the newly defined step as a child of current step.\nClick these two icons to define new steps before or after current step.\nDrag this to move an available step into workflow. The step can be dropped on an existing step to replace it, or can be dropped in blank area of a composite step to add as new child.\nDrag this to another place to re-organize the workflow, or drag it into available steps to remove it from workflow.\nThis arrow indicates that the step is inherited from ancestor steps. Following this arrow will bring you to the configuration defined the step.\nClick this icon will override definition of the step.\nDashed border means inherited step, while solid border means step defined in current configuration.\nClick this icon to delete the step. This will not only remove the step from workflow, but also delete the step from available steps. If you only want to remove it from workflow, just drag it into available steps.\nHover mouse over the link to view step definition.\nIn the above screenshot, steps are organized from top to down in the workflow, and this means sequential execution. For parallel execution, steps will be organized from left to right like below:\ninfo\nSteps can only be edited by users with EDIT_SETTINGS permission.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Working with Steps",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/category/Working+with+SCM+systems",
      "https://wiki.pmease.com/display/QB14/category/Working+with+Build+Tools",
      "https://wiki.pmease.com/display/QB14/category/Working+with+Issue+Tracker",
      "https://wiki.pmease.com/display/QB14/category/Artifact+Management",
      "https://wiki.pmease.com/display/QB14/category/Publish+Build+Reports",
      "https://wiki.pmease.com/display/QB14/Publish+HTML+Reports",
      "https://wiki.pmease.com/display/QB14/Set+Up+Build+Dependency",
      "https://wiki.pmease.com/display/QB14/Set+Up+Build+Promotion",
      "https://wiki.pmease.com/display/QB14/Build+Notifications",
      "https://wiki.pmease.com/display/QB14/Customize+Notification+Templates",
      "https://wiki.pmease.com/display/QB14/Set+Up+Proof+Build",
      "https://wiki.pmease.com/display/QB14/Working+with+Resources",
      "https://wiki.pmease.com/display/QB14/Build+Concurrency+and+Deadlock",
      "https://wiki.pmease.com/display/QB14/Working+with+Build+Grid",
      "https://wiki.pmease.com/display/QB14/category/Working+with+Cloud+Profiles",
      "https://wiki.pmease.com/display/QB14/Diagnose+Build+Issues",
      "https://wiki.pmease.com/display/QB14/Running+Behind+Apache",
      "https://wiki.pmease.com/display/QB14/Data+Management",
      "https://wiki.pmease.com/display/QB14/License+Management",
      "https://wiki.pmease.com/display/QB14/category/Security+Management",
      "https://wiki.pmease.com/display/QB14/Auditing+User+Activities",
      "https://wiki.pmease.com/display/QB14/Plugin+Management",
      "https://wiki.pmease.com/display/QB14/Configuring+System+Alerts",
      "https://wiki.pmease.com/display/QB14/Configuring+Disk+Monitoring",
      "https://wiki.pmease.com/display/QB14/Webhooks",
      "https://wiki.pmease.com/display/QB14/category/Working+with+SCM+systems"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/category/Working+with+SCM+systems",
    "title": "Working with SCM systems",
    "breadcrumb": [
      "",
      "Administrator's Guide"
    ],
    "full_text": "ðï¸\nSCM Support Overview\nIntroduction\nðï¸\nWorking with Accurev\nAccurev relies heavily on accurate system clock to perform its operations. Please make sure clock of the build server and all build agents interacting with Accurev repository are synced with Accurev server.\nðï¸\nWorking with Azure Devops\nQuickBuild integrates with Azure Devops via the Azure repository. This repository has all features of a normal Git repository, but add the ability to build against pull requests, and update the status based on build result for commits or pull requests.\nðï¸\nWorking with Bazaar\nPrerequisites\nðï¸\nWorking with ClearCase\nSpecify cleartool command location\nðï¸\nWorking with CVS\nSpecify cvs command location\nðï¸\nWorking with Git\nPrerequisites\nðï¸\nWorking with GitHub\nQuickBuild integrates with GitHub via the GitHub repository. This repository has all features of a normal Git repository, but add the ability to build against pull requests, and update pull request status based on build result.\nðï¸\nWorking with GitLab\nQuickBuild integrates with GitLab via the GitLab repository. This repository has all features of a normal Git repository, but add the ability to build against merge requests, and update merge request status based on build result.\nðï¸\nWorking with Bitbucket Server\nQuickBuild integrates with Bitbucket server via the Bitbucket server repository. This repository has all features of a normal Git repository, but add the ability to build against open pull requests, and update pull request status based on build result.\nðï¸\nWorking with Bitbucket Cloud\nQuickBuild integrates with Bitbucket cloud via the Bitbucket Cloud repository. This repository has all features of a normal Git repository, but add the ability to build against open pull requests, and update pull request status based on build result.\nðï¸\nWorking with Gerrit\nQuickBuild integrates with Gerrit via the Gerrit repository to verify gerrit changes.\nðï¸\nWorking with Google git-repo\nPrerequisites\nðï¸\nWorking with Mercurial\nPrerequisites\nðï¸\nWorking with Perforce\nSpecify p4 command location\nðï¸\nWorking with StarTeam\nPlease make sure clock of the build server and all build agents interacting with StarTeam repository are synced with the StarTeam server.\nðï¸\nWorking with Subversion\nSpecify svn command location\nðï¸\nWorking with Team Foundation Server\nPrerequisites\nðï¸\nWorking with Visual SourceSafe\nSpecify sourcesafe command location\nðï¸\nAggregate SCM Changes\nAggregate SCM Changes",
    "sections": [
      {
        "header": "ðï¸ SCM Support Overview",
        "content": "Introduction"
      },
      {
        "header": "ðï¸ Working with Accurev",
        "content": "Accurev relies heavily on accurate system clock to perform its operations. Please make sure clock of the build server and all build agents interacting with Accurev repository are synced with Accurev server."
      },
      {
        "header": "ðï¸ Working with Azure Devops",
        "content": "QuickBuild integrates with Azure Devops via the Azure repository. This repository has all features of a normal Git repository, but add the ability to build against pull requests, and update the status based on build result for commits or pull requests."
      },
      {
        "header": "ðï¸ Working with Bazaar",
        "content": "Prerequisites"
      },
      {
        "header": "ðï¸ Working with ClearCase",
        "content": "Specify cleartool command location"
      },
      {
        "header": "ðï¸ Working with CVS",
        "content": "Specify cvs command location"
      },
      {
        "header": "ðï¸ Working with Git",
        "content": "Prerequisites"
      },
      {
        "header": "ðï¸ Working with GitHub",
        "content": "QuickBuild integrates with GitHub via the GitHub repository. This repository has all features of a normal Git repository, but add the ability to build against pull requests, and update pull request status based on build result."
      },
      {
        "header": "ðï¸ Working with GitLab",
        "content": "QuickBuild integrates with GitLab via the GitLab repository. This repository has all features of a normal Git repository, but add the ability to build against merge requests, and update merge request status based on build result."
      },
      {
        "header": "ðï¸ Working with Bitbucket Server",
        "content": "QuickBuild integrates with Bitbucket server via the Bitbucket server repository. This repository has all features of a normal Git repository, but add the ability to build against open pull requests, and update pull request status based on build result."
      },
      {
        "header": "ðï¸ Working with Bitbucket Cloud",
        "content": "QuickBuild integrates with Bitbucket cloud via the Bitbucket Cloud repository. This repository has all features of a normal Git repository, but add the ability to build against open pull requests, and update pull request status based on build result."
      },
      {
        "header": "ðï¸ Working with Gerrit",
        "content": "QuickBuild integrates with Gerrit via the Gerrit repository to verify gerrit changes."
      },
      {
        "header": "ðï¸ Working with Google git-repo",
        "content": "Prerequisites"
      },
      {
        "header": "ðï¸ Working with Mercurial",
        "content": "Prerequisites"
      },
      {
        "header": "ðï¸ Working with Perforce",
        "content": "Specify p4 command location"
      },
      {
        "header": "ðï¸ Working with StarTeam",
        "content": "Please make sure clock of the build server and all build agents interacting with StarTeam repository are synced with the StarTeam server."
      },
      {
        "header": "ðï¸ Working with Subversion",
        "content": "Specify svn command location"
      },
      {
        "header": "ðï¸ Working with Team Foundation Server",
        "content": "Prerequisites"
      },
      {
        "header": "ðï¸ Working with Visual SourceSafe",
        "content": "Specify sourcesafe command location"
      },
      {
        "header": "ðï¸ Aggregate SCM Changes",
        "content": "Aggregate SCM Changes"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/SCM+Support+Overview",
      "https://wiki.pmease.com/display/QB14/Working+with+Accurev",
      "https://wiki.pmease.com/display/QB14/Working+with+Azure+Devops",
      "https://wiki.pmease.com/display/QB14/Working+with+Bazaar",
      "https://wiki.pmease.com/display/QB14/Working+with+ClearCase",
      "https://wiki.pmease.com/display/QB14/Working+with+CVS",
      "https://wiki.pmease.com/display/QB14/Working+with+Git",
      "https://wiki.pmease.com/display/QB14/Working+with+GitHub",
      "https://wiki.pmease.com/display/QB14/Working+with+GitLab",
      "https://wiki.pmease.com/display/QB14/Working+with+Bitbucket+Server",
      "https://wiki.pmease.com/display/QB14/Working+with+Bitbucket+Cloud",
      "https://wiki.pmease.com/display/QB14/Working+with+Gerrit",
      "https://wiki.pmease.com/display/QB14/Working+with+Google+git-repo",
      "https://wiki.pmease.com/display/QB14/Working+with+Mercurial",
      "https://wiki.pmease.com/display/QB14/Working+with+Perforce",
      "https://wiki.pmease.com/display/QB14/Working+with+StarTeam",
      "https://wiki.pmease.com/display/QB14/Working+with+Subversion",
      "https://wiki.pmease.com/display/QB14/Working+with+Team+Foundation+Server",
      "https://wiki.pmease.com/display/QB14/Working+with+Visual+SourceSafe",
      "https://wiki.pmease.com/display/QB14/Aggregate+SCM+Changes",
      "https://wiki.pmease.com/display/QB14/category/Working+with+Build+Tools",
      "https://wiki.pmease.com/display/QB14/category/Working+with+Issue+Tracker",
      "https://wiki.pmease.com/display/QB14/category/Artifact+Management",
      "https://wiki.pmease.com/display/QB14/category/Publish+Build+Reports",
      "https://wiki.pmease.com/display/QB14/Publish+HTML+Reports",
      "https://wiki.pmease.com/display/QB14/Set+Up+Build+Dependency",
      "https://wiki.pmease.com/display/QB14/Set+Up+Build+Promotion",
      "https://wiki.pmease.com/display/QB14/Build+Notifications",
      "https://wiki.pmease.com/display/QB14/Customize+Notification+Templates",
      "https://wiki.pmease.com/display/QB14/Set+Up+Proof+Build",
      "https://wiki.pmease.com/display/QB14/Working+with+Resources",
      "https://wiki.pmease.com/display/QB14/Build+Concurrency+and+Deadlock",
      "https://wiki.pmease.com/display/QB14/Working+with+Build+Grid",
      "https://wiki.pmease.com/display/QB14/category/Working+with+Cloud+Profiles",
      "https://wiki.pmease.com/display/QB14/Diagnose+Build+Issues",
      "https://wiki.pmease.com/display/QB14/Running+Behind+Apache",
      "https://wiki.pmease.com/display/QB14/Data+Management",
      "https://wiki.pmease.com/display/QB14/License+Management",
      "https://wiki.pmease.com/display/QB14/category/Security+Management",
      "https://wiki.pmease.com/display/QB14/Auditing+User+Activities",
      "https://wiki.pmease.com/display/QB14/Plugin+Management",
      "https://wiki.pmease.com/display/QB14/Configuring+System+Alerts",
      "https://wiki.pmease.com/display/QB14/Configuring+Disk+Monitoring",
      "https://wiki.pmease.com/display/QB14/Webhooks",
      "https://wiki.pmease.com/display/QB14/SCM+Support+Overview",
      "https://wiki.pmease.com/display/QB14/Working+with+Accurev",
      "https://wiki.pmease.com/display/QB14/Working+with+Azure+Devops",
      "https://wiki.pmease.com/display/QB14/Working+with+Bazaar",
      "https://wiki.pmease.com/display/QB14/Working+with+ClearCase",
      "https://wiki.pmease.com/display/QB14/Working+with+CVS",
      "https://wiki.pmease.com/display/QB14/Working+with+Git",
      "https://wiki.pmease.com/display/QB14/Working+with+GitHub",
      "https://wiki.pmease.com/display/QB14/Working+with+GitLab",
      "https://wiki.pmease.com/display/QB14/Working+with+Bitbucket+Server",
      "https://wiki.pmease.com/display/QB14/Working+with+Bitbucket+Cloud",
      "https://wiki.pmease.com/display/QB14/Working+with+Gerrit",
      "https://wiki.pmease.com/display/QB14/Working+with+Google+git-repo",
      "https://wiki.pmease.com/display/QB14/Working+with+Mercurial",
      "https://wiki.pmease.com/display/QB14/Working+with+Perforce",
      "https://wiki.pmease.com/display/QB14/Working+with+StarTeam",
      "https://wiki.pmease.com/display/QB14/Working+with+Subversion",
      "https://wiki.pmease.com/display/QB14/Working+with+Team+Foundation+Server",
      "https://wiki.pmease.com/display/QB14/Working+with+Visual+SourceSafe",
      "https://wiki.pmease.com/display/QB14/Aggregate+SCM+Changes",
      "https://wiki.pmease.com/display/QB14/SCM+Support+Overview"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/category/Working+with+Build+Tools",
    "title": "Working with Build Tools",
    "breadcrumb": [
      "",
      "Administrator's Guide"
    ],
    "full_text": "ðï¸\nBuild with Xcode\nSince QuickBuild version 5.1.16, Xcode plugin is bundled. This plugin can help to build Xcode project by calling command xcodebuild.\nðï¸\nBuild with Ant\nQuickBuild supports Ant based build through the Ant build step. Ant build step can be added by selecting menu item Build -\\> Ant from the step menu.\nðï¸\nBuild with Maven\nQuickBuild is able to integrate with the popular build tool - Maven. A Maven build step can be added by selecting menu item Build -\\> Maven from the step menu.\nðï¸\nBuild with Devenv\nMost Visual Studio projects can be built from command line with devenv command. QuickBuild supports this method now. You just need add a devenv step in your configuration steps definition.\nðï¸\nBuild with MSBuild\nQuickBuild is able to integrate with the popular build tool - MSBuild for .NET platform. You just need simply add a MSBuild step in the configuration steps definition.\nðï¸\nBuild with NAnt\nQuickBuild supports NAnt based build through the NAnt build step. NAnt build step can be added by selecting menu item Build -\\> NAnt from the step menu.\nðï¸\nBuild with Rake\nQuickBuild supports Ruby Rake based build through the Rake build step. Rake build step can be added by selecting menu item Build -\\> Rake from the step menu.\nðï¸\nBuild with Arbitrary Command\nIf your build tool is not directly supported by QuickBuild, you may utilize the command build step to run your builds as long as your build can be performed from command line non-interactively. To add a command build step, choose Build -\\> Shell/Batch Command from the step menu.\nðï¸\nScan code with SonarQube\nSince QuickBuild 10, SonarQube, a continuous code inspection solution, can be added to your continuous integration workflow.",
    "sections": [
      {
        "header": "ðï¸ Build with Xcode",
        "content": "Since QuickBuild version 5.1.16, Xcode plugin is bundled. This plugin can help to build Xcode project by calling command xcodebuild."
      },
      {
        "header": "ðï¸ Build with Ant",
        "content": "QuickBuild supports Ant based build through the Ant build step. Ant build step can be added by selecting menu item Build -\\> Ant from the step menu."
      },
      {
        "header": "ðï¸ Build with Maven",
        "content": "QuickBuild is able to integrate with the popular build tool - Maven. A Maven build step can be added by selecting menu item Build -\\> Maven from the step menu."
      },
      {
        "header": "ðï¸ Build with Devenv",
        "content": "Most Visual Studio projects can be built from command line with devenv command. QuickBuild supports this method now. You just need add a devenv step in your configuration steps definition."
      },
      {
        "header": "ðï¸ Build with MSBuild",
        "content": "QuickBuild is able to integrate with the popular build tool - MSBuild for .NET platform. You just need simply add a MSBuild step in the configuration steps definition."
      },
      {
        "header": "ðï¸ Build with NAnt",
        "content": "QuickBuild supports NAnt based build through the NAnt build step. NAnt build step can be added by selecting menu item Build -\\> NAnt from the step menu."
      },
      {
        "header": "ðï¸ Build with Rake",
        "content": "QuickBuild supports Ruby Rake based build through the Rake build step. Rake build step can be added by selecting menu item Build -\\> Rake from the step menu."
      },
      {
        "header": "ðï¸ Build with Arbitrary Command",
        "content": "If your build tool is not directly supported by QuickBuild, you may utilize the command build step to run your builds as long as your build can be performed from command line non-interactively. To add a command build step, choose Build -\\> Shell/Batch Command from the step menu."
      },
      {
        "header": "ðï¸ Scan code with SonarQube",
        "content": "Since QuickBuild 10, SonarQube, a continuous code inspection solution, can be added to your continuous integration workflow."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Build+with+Xcode",
      "https://wiki.pmease.com/display/QB14/Build+with+Ant",
      "https://wiki.pmease.com/display/QB14/Build+with+Maven",
      "https://wiki.pmease.com/display/QB14/Build+with+Devenv",
      "https://wiki.pmease.com/display/QB14/Build+with+MSBuild",
      "https://wiki.pmease.com/display/QB14/Build+with+NAnt",
      "https://wiki.pmease.com/display/QB14/Build+with+Rake",
      "https://wiki.pmease.com/display/QB14/Build+with+Arbitrary+Command",
      "https://wiki.pmease.com/display/QB14/Scan+code+with+SonarQube",
      "https://wiki.pmease.com/display/QB14/category/Working+with+Issue+Tracker",
      "https://wiki.pmease.com/display/QB14/category/Artifact+Management",
      "https://wiki.pmease.com/display/QB14/category/Publish+Build+Reports",
      "https://wiki.pmease.com/display/QB14/Publish+HTML+Reports",
      "https://wiki.pmease.com/display/QB14/Set+Up+Build+Dependency",
      "https://wiki.pmease.com/display/QB14/Set+Up+Build+Promotion",
      "https://wiki.pmease.com/display/QB14/Build+Notifications",
      "https://wiki.pmease.com/display/QB14/Customize+Notification+Templates",
      "https://wiki.pmease.com/display/QB14/Set+Up+Proof+Build",
      "https://wiki.pmease.com/display/QB14/Working+with+Resources",
      "https://wiki.pmease.com/display/QB14/Build+Concurrency+and+Deadlock",
      "https://wiki.pmease.com/display/QB14/Working+with+Build+Grid",
      "https://wiki.pmease.com/display/QB14/category/Working+with+Cloud+Profiles",
      "https://wiki.pmease.com/display/QB14/Diagnose+Build+Issues",
      "https://wiki.pmease.com/display/QB14/Running+Behind+Apache",
      "https://wiki.pmease.com/display/QB14/Data+Management",
      "https://wiki.pmease.com/display/QB14/License+Management",
      "https://wiki.pmease.com/display/QB14/category/Security+Management",
      "https://wiki.pmease.com/display/QB14/Auditing+User+Activities",
      "https://wiki.pmease.com/display/QB14/Plugin+Management",
      "https://wiki.pmease.com/display/QB14/Configuring+System+Alerts",
      "https://wiki.pmease.com/display/QB14/Configuring+Disk+Monitoring",
      "https://wiki.pmease.com/display/QB14/Webhooks",
      "https://wiki.pmease.com/display/QB14/Build+with+Xcode",
      "https://wiki.pmease.com/display/QB14/Build+with+Ant",
      "https://wiki.pmease.com/display/QB14/Build+with+Maven",
      "https://wiki.pmease.com/display/QB14/Build+with+Devenv",
      "https://wiki.pmease.com/display/QB14/Build+with+MSBuild",
      "https://wiki.pmease.com/display/QB14/Build+with+NAnt",
      "https://wiki.pmease.com/display/QB14/Build+with+Rake",
      "https://wiki.pmease.com/display/QB14/Build+with+Arbitrary+Command",
      "https://wiki.pmease.com/display/QB14/Scan+code+with+SonarQube",
      "https://wiki.pmease.com/display/QB14/Aggregate+SCM+Changes",
      "https://wiki.pmease.com/display/QB14/Build+with+Xcode"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/category/Working+with+Issue+Tracker",
    "title": "Working with Issue Tracker",
    "breadcrumb": [
      "",
      "Administrator's Guide"
    ],
    "full_text": "ðï¸\nIntegrating QuickBuild with JIRA\nSince QuickBuild 3, a two-way solution is provided to integrate with Atlassian JIRA. The integration features:\nðï¸\nIntegrating JIRA with QuickBuild\nSince QuickBuild 3, a two-way solution is provided to integrate with Atlassian JIRA. The integration features:\nðï¸\nIntegrating QuickBuild with JIRA Cloud\nSince QuickBuild 10, a two-way solution is provided to integrate with Atlassian JIRA Cloud. The integration features:\nðï¸\nIntegrate QuickBuild with GitHub Issue\nSince QuickBuild 5.1.0, QuickBuild integrates with GitHub by featuring:\nðï¸\nIntegrating QuickBuild with TeamForge\nThe integration features:\nðï¸\nIntegrating QuickBuild with Trac\nQuickBuild now integrate with Trac natively. The integration features:\nðï¸\nIntegrating QuickBuild with Bugzilla\nSince QuickBuild 3, QuickBuild can integrate with Bugzilla, it features:\nðï¸\nIntegrating QuickBuild with Redmine\nThe integration features:\nðï¸\nIntegrating QuickBuild with Other Issue Tracker\nFor those issue trackers QuickBuild not support, you can define a search pattern and a replace pattern in Comments Transformer. For example, we want to hyperlink all issue keys mentioned in commit messages to corresponding Bugzilla issue page, we can define search pattern as:\nðï¸\nCommit Command\nCommit command is used in commit message to update or progress issues. It has below syntax:",
    "sections": [
      {
        "header": "ðï¸ Integrating QuickBuild with JIRA",
        "content": "Since QuickBuild 3, a two-way solution is provided to integrate with Atlassian JIRA. The integration features:"
      },
      {
        "header": "ðï¸ Integrating JIRA with QuickBuild",
        "content": "Since QuickBuild 3, a two-way solution is provided to integrate with Atlassian JIRA. The integration features:"
      },
      {
        "header": "ðï¸ Integrating QuickBuild with JIRA Cloud",
        "content": "Since QuickBuild 10, a two-way solution is provided to integrate with Atlassian JIRA Cloud. The integration features:"
      },
      {
        "header": "ðï¸ Integrate QuickBuild with GitHub Issue",
        "content": "Since QuickBuild 5.1.0, QuickBuild integrates with GitHub by featuring:"
      },
      {
        "header": "ðï¸ Integrating QuickBuild with TeamForge",
        "content": "The integration features:"
      },
      {
        "header": "ðï¸ Integrating QuickBuild with Trac",
        "content": "QuickBuild now integrate with Trac natively. The integration features:"
      },
      {
        "header": "ðï¸ Integrating QuickBuild with Bugzilla",
        "content": "Since QuickBuild 3, QuickBuild can integrate with Bugzilla, it features:"
      },
      {
        "header": "ðï¸ Integrating QuickBuild with Redmine",
        "content": "The integration features:"
      },
      {
        "header": "ðï¸ Integrating QuickBuild with Other Issue Tracker",
        "content": "For those issue trackers QuickBuild not support, you can define a search pattern and a replace pattern in Comments Transformer. For example, we want to hyperlink all issue keys mentioned in commit messages to corresponding Bugzilla issue page, we can define search pattern as:"
      },
      {
        "header": "ðï¸ Commit Command",
        "content": "Commit command is used in commit message to update or progress issues. It has below syntax:"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+JIRA",
      "https://wiki.pmease.com/display/QB14/Integrating+JIRA+with+QuickBuild",
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+JIRA+Cloud",
      "https://wiki.pmease.com/display/QB14/Integrate+QuickBuild+with+GitHub+Issue",
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+TeamForge",
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+Trac",
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+Bugzilla",
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+Redmine",
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+Other+Issue+Tracker",
      "https://wiki.pmease.com/display/QB14/Commit+Command",
      "https://wiki.pmease.com/display/QB14/category/Artifact+Management",
      "https://wiki.pmease.com/display/QB14/category/Publish+Build+Reports",
      "https://wiki.pmease.com/display/QB14/Publish+HTML+Reports",
      "https://wiki.pmease.com/display/QB14/Set+Up+Build+Dependency",
      "https://wiki.pmease.com/display/QB14/Set+Up+Build+Promotion",
      "https://wiki.pmease.com/display/QB14/Build+Notifications",
      "https://wiki.pmease.com/display/QB14/Customize+Notification+Templates",
      "https://wiki.pmease.com/display/QB14/Set+Up+Proof+Build",
      "https://wiki.pmease.com/display/QB14/Working+with+Resources",
      "https://wiki.pmease.com/display/QB14/Build+Concurrency+and+Deadlock",
      "https://wiki.pmease.com/display/QB14/Working+with+Build+Grid",
      "https://wiki.pmease.com/display/QB14/category/Working+with+Cloud+Profiles",
      "https://wiki.pmease.com/display/QB14/Diagnose+Build+Issues",
      "https://wiki.pmease.com/display/QB14/Running+Behind+Apache",
      "https://wiki.pmease.com/display/QB14/Data+Management",
      "https://wiki.pmease.com/display/QB14/License+Management",
      "https://wiki.pmease.com/display/QB14/category/Security+Management",
      "https://wiki.pmease.com/display/QB14/Auditing+User+Activities",
      "https://wiki.pmease.com/display/QB14/Plugin+Management",
      "https://wiki.pmease.com/display/QB14/Configuring+System+Alerts",
      "https://wiki.pmease.com/display/QB14/Configuring+Disk+Monitoring",
      "https://wiki.pmease.com/display/QB14/Webhooks",
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+JIRA",
      "https://wiki.pmease.com/display/QB14/Integrating+JIRA+with+QuickBuild",
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+JIRA+Cloud",
      "https://wiki.pmease.com/display/QB14/Integrate+QuickBuild+with+GitHub+Issue",
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+TeamForge",
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+Trac",
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+Bugzilla",
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+Redmine",
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+Other+Issue+Tracker",
      "https://wiki.pmease.com/display/QB14/Commit+Command",
      "https://wiki.pmease.com/display/QB14/Scan+code+with+SonarQube",
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+JIRA"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/category/Artifact+Management",
    "title": "Artifact Management",
    "breadcrumb": [
      "",
      "Administrator's Guide"
    ],
    "full_text": "ðï¸\nPublish Build Artifacts\nArtifacts can be published to build server during the build process. These artifacts can be manually downloaded by user from QuickBuild web interface, or can be used as dependency while building other projects. To publish artifacts, just add the step Publish -\\> Artifacts from the step menu.\nðï¸\nStore Build Artifacts on Agent\nSince QuickBuild 5.0, build artifacts can be stored on one or more agents to reduce load of publishing and serving artifacts from QuickBuild server. For instance, one can edit advanced setting of a configuration to store artifacts of all its builds on desired agent as below:\nðï¸\nArtifactory Integration\nJFrog's Artifactory is a popular artifact management server. Integration with Artifactory enables QuickBuild to publish artifacts to Artifactory server as well as using published artifacts as build dependencies.\nðï¸\nAmazon S3 Integration\nSince QuickBuild 10, artifacts can be published to Amazon S3 (Amazon Simple Storage Service), artifacts can also be checked out from Amazon S3.",
    "sections": [
      {
        "header": "ðï¸ Publish Build Artifacts",
        "content": "Artifacts can be published to build server during the build process. These artifacts can be manually downloaded by user from QuickBuild web interface, or can be used as dependency while building other projects. To publish artifacts, just add the step Publish -\\> Artifacts from the step menu."
      },
      {
        "header": "ðï¸ Store Build Artifacts on Agent",
        "content": "Since QuickBuild 5.0, build artifacts can be stored on one or more agents to reduce load of publishing and serving artifacts from QuickBuild server. For instance, one can edit advanced setting of a configuration to store artifacts of all its builds on desired agent as below:"
      },
      {
        "header": "ðï¸ Artifactory Integration",
        "content": "JFrog's Artifactory is a popular artifact management server. Integration with Artifactory enables QuickBuild to publish artifacts to Artifactory server as well as using published artifacts as build dependencies."
      },
      {
        "header": "ðï¸ Amazon S3 Integration",
        "content": "Since QuickBuild 10, artifacts can be published to Amazon S3 (Amazon Simple Storage Service), artifacts can also be checked out from Amazon S3."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Publish+Build+Artifacts",
      "https://wiki.pmease.com/display/QB14/Store+Build+Artifacts+on+Agent",
      "https://wiki.pmease.com/display/QB14/Artifactory+Integration",
      "https://wiki.pmease.com/display/QB14/Amazon+S3+Integration",
      "https://wiki.pmease.com/display/QB14/category/Publish+Build+Reports",
      "https://wiki.pmease.com/display/QB14/Publish+HTML+Reports",
      "https://wiki.pmease.com/display/QB14/Set+Up+Build+Dependency",
      "https://wiki.pmease.com/display/QB14/Set+Up+Build+Promotion",
      "https://wiki.pmease.com/display/QB14/Build+Notifications",
      "https://wiki.pmease.com/display/QB14/Customize+Notification+Templates",
      "https://wiki.pmease.com/display/QB14/Set+Up+Proof+Build",
      "https://wiki.pmease.com/display/QB14/Working+with+Resources",
      "https://wiki.pmease.com/display/QB14/Build+Concurrency+and+Deadlock",
      "https://wiki.pmease.com/display/QB14/Working+with+Build+Grid",
      "https://wiki.pmease.com/display/QB14/category/Working+with+Cloud+Profiles",
      "https://wiki.pmease.com/display/QB14/Diagnose+Build+Issues",
      "https://wiki.pmease.com/display/QB14/Running+Behind+Apache",
      "https://wiki.pmease.com/display/QB14/Data+Management",
      "https://wiki.pmease.com/display/QB14/License+Management",
      "https://wiki.pmease.com/display/QB14/category/Security+Management",
      "https://wiki.pmease.com/display/QB14/Auditing+User+Activities",
      "https://wiki.pmease.com/display/QB14/Plugin+Management",
      "https://wiki.pmease.com/display/QB14/Configuring+System+Alerts",
      "https://wiki.pmease.com/display/QB14/Configuring+Disk+Monitoring",
      "https://wiki.pmease.com/display/QB14/Webhooks",
      "https://wiki.pmease.com/display/QB14/Publish+Build+Artifacts",
      "https://wiki.pmease.com/display/QB14/Store+Build+Artifacts+on+Agent",
      "https://wiki.pmease.com/display/QB14/Artifactory+Integration",
      "https://wiki.pmease.com/display/QB14/Amazon+S3+Integration",
      "https://wiki.pmease.com/display/QB14/Commit+Command",
      "https://wiki.pmease.com/display/QB14/Publish+Build+Artifacts"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/category/Publish+Build+Reports",
    "title": "Publish Build Reports",
    "breadcrumb": [
      "",
      "Administrator's Guide"
    ],
    "full_text": "ðï¸\nPublish Boost Test Report\nTo publish Boost Test report, you only need two steps:\nðï¸\nPublish Busted Report\nBusted is a Lua unit testing framework. Since QuickBuild 6.0.9, Busted generated test reports can be published. To publish the report:\nðï¸\nPublish CheckStyle Report\nTo publish CheckStyle report, you only need two steps:\nðï¸\nPublish Clover Report\nSince QuickBuild 5.1.22, you can generate and publish Clover XML report by:\nðï¸\nPublish Cobertura Report\nTo publish Cobertura report, you only need two steps:\nðï¸\nPublish Coverity Report\nTo publish coverity report, you need:\nðï¸\nPublish CPD Report\nTo publish CPD report, you only need two steps:\nðï¸\nPublish CppCheck Report\nTo publish CppCheck report, first you need:\nðï¸\nPublish EMMA Report\nTo publish EMMA report, you only need two steps:\nðï¸\nPublish Findbugs Report\nTo publish Findbugs report, you only need two steps:\nðï¸\nPublish Fxcop Report\nTo publish Fxcop reports, you need:\nðï¸\nPublish JaCoCo Report\nTo publish JaCoCo report, you only need two steps:\nðï¸\nPublish JMeter Report\nTo publish JMeter report, you only need two steps:\nðï¸\nPublish JUnit Report\nTo publish JUnit report, you only need two steps:\nðï¸\nPublish MBUnit Report\nMbUnit is an advanced, extensible unit testing framework originally developed by Jonathon 'Peli' de Halleux and Jamie Cansdale. It is a free and open source unit testing tool for the .NET Framework. To publish the MBUnit reports to QuickBuild, first, the XML reports should be generated by nant or by msbuild which is freely available as part of the .NET 2.0 Framework.\nðï¸\nPublish MSTest Report\nTo publish MSTest report, the following two steps are required:\nðï¸\nPublish NCover Report\nTo publish NCover reports, you need:\nðï¸\nPublish NUnit Report\nTo publish NUnit report, you only need two steps:\nðï¸\nPublish PMD Report\nTo publish PMD report, you only need two steps:\nðï¸\nPublish TAP Report\nTAP, the Test Anything Protocol, is a text-based interface between testing modules in a test harness. See more details in its website below:\nðï¸\nPublish TestNG Report\nTo publish TestNG report, you only need two steps:\nðï¸\nAdd Custom Statistics Data\nQuickBuild support add your custom statistics data and will generate the statistics chart and build overview automatically. For example, we use a test framework named rubyunit and want QuickBuild to collect the following indicators\nðï¸\nReport Aggregation\nWhat is report aggregation\nðï¸\nRebuild statistics and aggregation data\nSometimes, the statistics data and aggregation data don't seem to be synced after you delete some builds. Then, you can rebuild the statistics data and/or aggregation data.",
    "sections": [
      {
        "header": "ðï¸ Publish Boost Test Report",
        "content": "To publish Boost Test report, you only need two steps:"
      },
      {
        "header": "ðï¸ Publish Busted Report",
        "content": "Busted is a Lua unit testing framework. Since QuickBuild 6.0.9, Busted generated test reports can be published. To publish the report:"
      },
      {
        "header": "ðï¸ Publish CheckStyle Report",
        "content": "To publish CheckStyle report, you only need two steps:"
      },
      {
        "header": "ðï¸ Publish Clover Report",
        "content": "Since QuickBuild 5.1.22, you can generate and publish Clover XML report by:"
      },
      {
        "header": "ðï¸ Publish Cobertura Report",
        "content": "To publish Cobertura report, you only need two steps:"
      },
      {
        "header": "ðï¸ Publish Coverity Report",
        "content": "To publish coverity report, you need:"
      },
      {
        "header": "ðï¸ Publish CPD Report",
        "content": "To publish CPD report, you only need two steps:"
      },
      {
        "header": "ðï¸ Publish CppCheck Report",
        "content": "To publish CppCheck report, first you need:"
      },
      {
        "header": "ðï¸ Publish EMMA Report",
        "content": "To publish EMMA report, you only need two steps:"
      },
      {
        "header": "ðï¸ Publish Findbugs Report",
        "content": "To publish Findbugs report, you only need two steps:"
      },
      {
        "header": "ðï¸ Publish Fxcop Report",
        "content": "To publish Fxcop reports, you need:"
      },
      {
        "header": "ðï¸ Publish JaCoCo Report",
        "content": "To publish JaCoCo report, you only need two steps:"
      },
      {
        "header": "ðï¸ Publish JMeter Report",
        "content": "To publish JMeter report, you only need two steps:"
      },
      {
        "header": "ðï¸ Publish JUnit Report",
        "content": "To publish JUnit report, you only need two steps:"
      },
      {
        "header": "ðï¸ Publish MBUnit Report",
        "content": "MbUnit is an advanced, extensible unit testing framework originally developed by Jonathon 'Peli' de Halleux and Jamie Cansdale. It is a free and open source unit testing tool for the .NET Framework. To publish the MBUnit reports to QuickBuild, first, the XML reports should be generated by nant or by msbuild which is freely available as part of the .NET 2.0 Framework."
      },
      {
        "header": "ðï¸ Publish MSTest Report",
        "content": "To publish MSTest report, the following two steps are required:"
      },
      {
        "header": "ðï¸ Publish NCover Report",
        "content": "To publish NCover reports, you need:"
      },
      {
        "header": "ðï¸ Publish NUnit Report",
        "content": "To publish NUnit report, you only need two steps:"
      },
      {
        "header": "ðï¸ Publish PMD Report",
        "content": "To publish PMD report, you only need two steps:"
      },
      {
        "header": "ðï¸ Publish TAP Report",
        "content": "TAP, the Test Anything Protocol, is a text-based interface between testing modules in a test harness. See more details in its website below:"
      },
      {
        "header": "ðï¸ Publish TestNG Report",
        "content": "To publish TestNG report, you only need two steps:"
      },
      {
        "header": "ðï¸ Add Custom Statistics Data",
        "content": "QuickBuild support add your custom statistics data and will generate the statistics chart and build overview automatically. For example, we use a test framework named rubyunit and want QuickBuild to collect the following indicators"
      },
      {
        "header": "ðï¸ Report Aggregation",
        "content": "What is report aggregation"
      },
      {
        "header": "ðï¸ Rebuild statistics and aggregation data",
        "content": "Sometimes, the statistics data and aggregation data don't seem to be synced after you delete some builds. Then, you can rebuild the statistics data and/or aggregation data."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Publish+Boost+Test+Report",
      "https://wiki.pmease.com/display/QB14/Publish+Busted+Report",
      "https://wiki.pmease.com/display/QB14/Publish+CheckStyle+Report",
      "https://wiki.pmease.com/display/QB14/Publish+Clover+Report",
      "https://wiki.pmease.com/display/QB14/Publish+Cobertura+Report",
      "https://wiki.pmease.com/display/QB14/Publish+Coverity+Report",
      "https://wiki.pmease.com/display/QB14/Publish+CPD+Report",
      "https://wiki.pmease.com/display/QB14/Publish+CppCheck+Report",
      "https://wiki.pmease.com/display/QB14/Publish+EMMA+Report",
      "https://wiki.pmease.com/display/QB14/Publish+Findbugs+Report",
      "https://wiki.pmease.com/display/QB14/Publish+Fxcop+Report",
      "https://wiki.pmease.com/display/QB14/Publish+JaCoCo+Report",
      "https://wiki.pmease.com/display/QB14/Publish+JMeter+Report",
      "https://wiki.pmease.com/display/QB14/Publish+JUnit+Report",
      "https://wiki.pmease.com/display/QB14/Publish+MBUnit+Report",
      "https://wiki.pmease.com/display/QB14/Publish+MSTest+Report",
      "https://wiki.pmease.com/display/QB14/Publish+NCover+Report",
      "https://wiki.pmease.com/display/QB14/Publish+NUnit+Report",
      "https://wiki.pmease.com/display/QB14/Publish+PMD+Report",
      "https://wiki.pmease.com/display/QB14/Publish+TAP+Report",
      "https://wiki.pmease.com/display/QB14/Publish+TestNG+Report",
      "https://wiki.pmease.com/display/QB14/Add+Custom+Statistics+Data",
      "https://wiki.pmease.com/display/QB14/Report+Aggregation",
      "https://wiki.pmease.com/display/QB14/Rebuild+statistics+and+aggregation+data",
      "https://wiki.pmease.com/display/QB14/Publish+HTML+Reports",
      "https://wiki.pmease.com/display/QB14/Set+Up+Build+Dependency",
      "https://wiki.pmease.com/display/QB14/Set+Up+Build+Promotion",
      "https://wiki.pmease.com/display/QB14/Build+Notifications",
      "https://wiki.pmease.com/display/QB14/Customize+Notification+Templates",
      "https://wiki.pmease.com/display/QB14/Set+Up+Proof+Build",
      "https://wiki.pmease.com/display/QB14/Working+with+Resources",
      "https://wiki.pmease.com/display/QB14/Build+Concurrency+and+Deadlock",
      "https://wiki.pmease.com/display/QB14/Working+with+Build+Grid",
      "https://wiki.pmease.com/display/QB14/category/Working+with+Cloud+Profiles",
      "https://wiki.pmease.com/display/QB14/Diagnose+Build+Issues",
      "https://wiki.pmease.com/display/QB14/Running+Behind+Apache",
      "https://wiki.pmease.com/display/QB14/Data+Management",
      "https://wiki.pmease.com/display/QB14/License+Management",
      "https://wiki.pmease.com/display/QB14/category/Security+Management",
      "https://wiki.pmease.com/display/QB14/Auditing+User+Activities",
      "https://wiki.pmease.com/display/QB14/Plugin+Management",
      "https://wiki.pmease.com/display/QB14/Configuring+System+Alerts",
      "https://wiki.pmease.com/display/QB14/Configuring+Disk+Monitoring",
      "https://wiki.pmease.com/display/QB14/Webhooks",
      "https://wiki.pmease.com/display/QB14/Publish+Boost+Test+Report",
      "https://wiki.pmease.com/display/QB14/Publish+Busted+Report",
      "https://wiki.pmease.com/display/QB14/Publish+CheckStyle+Report",
      "https://wiki.pmease.com/display/QB14/Publish+Clover+Report",
      "https://wiki.pmease.com/display/QB14/Publish+Cobertura+Report",
      "https://wiki.pmease.com/display/QB14/Publish+Coverity+Report",
      "https://wiki.pmease.com/display/QB14/Publish+CPD+Report",
      "https://wiki.pmease.com/display/QB14/Publish+CppCheck+Report",
      "https://wiki.pmease.com/display/QB14/Publish+EMMA+Report",
      "https://wiki.pmease.com/display/QB14/Publish+Findbugs+Report",
      "https://wiki.pmease.com/display/QB14/Publish+Fxcop+Report",
      "https://wiki.pmease.com/display/QB14/Publish+JaCoCo+Report",
      "https://wiki.pmease.com/display/QB14/Publish+JMeter+Report",
      "https://wiki.pmease.com/display/QB14/Publish+JUnit+Report",
      "https://wiki.pmease.com/display/QB14/Publish+MBUnit+Report",
      "https://wiki.pmease.com/display/QB14/Publish+MSTest+Report",
      "https://wiki.pmease.com/display/QB14/Publish+NCover+Report",
      "https://wiki.pmease.com/display/QB14/Publish+NUnit+Report",
      "https://wiki.pmease.com/display/QB14/Publish+PMD+Report",
      "https://wiki.pmease.com/display/QB14/Publish+TAP+Report",
      "https://wiki.pmease.com/display/QB14/Publish+TestNG+Report",
      "https://wiki.pmease.com/display/QB14/Add+Custom+Statistics+Data",
      "https://wiki.pmease.com/display/QB14/Report+Aggregation",
      "https://wiki.pmease.com/display/QB14/Rebuild+statistics+and+aggregation+data",
      "https://wiki.pmease.com/display/QB14/Amazon+S3+Integration",
      "https://wiki.pmease.com/display/QB14/Publish+Boost+Test+Report"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Publish+HTML+Reports",
    "title": "Publish HTML Reports",
    "breadcrumb": [
      "",
      "Administrator's Guide"
    ],
    "full_text": "Administrator's Guide\nPublish HTML Reports\nVersion: QB14\nPublish HTML Reports\nQuickBuild is able to publish and display some commonly used build reports, such as JUnit, Checkstyle, NUnit, EMMA, etc. For reports that QuickBuild does not have native support, if it generates reports in html format, you can instruct QuickBuild to create a report tab in build detail page displaying this html report. This is done by adding the step\nPublish -> Html Report\nfrom the step menu. We will demonstrate its usage through an example:\nLet's assume you have the directory\nmyreport\nin the\nworkspace\nthat contains html files of the report with the start page being index.html. You can add the html report publish step with below properties:\nName: <give a name of the step>\nReport Name: my report\nSource Path: myreport\nStart Page: index.html\nAfter build finishes, a report tab named\nmy report\nwill be available to display the html report.\nLast updated\non\nOct 24, 2024",
    "sections": [
      {
        "header": "Publish HTML Reports",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Set+Up+Build+Dependency",
      "https://wiki.pmease.com/display/QB14/Set+Up+Build+Promotion",
      "https://wiki.pmease.com/display/QB14/Build+Notifications",
      "https://wiki.pmease.com/display/QB14/Customize+Notification+Templates",
      "https://wiki.pmease.com/display/QB14/Set+Up+Proof+Build",
      "https://wiki.pmease.com/display/QB14/Working+with+Resources",
      "https://wiki.pmease.com/display/QB14/Build+Concurrency+and+Deadlock",
      "https://wiki.pmease.com/display/QB14/Working+with+Build+Grid",
      "https://wiki.pmease.com/display/QB14/category/Working+with+Cloud+Profiles",
      "https://wiki.pmease.com/display/QB14/Diagnose+Build+Issues",
      "https://wiki.pmease.com/display/QB14/Running+Behind+Apache",
      "https://wiki.pmease.com/display/QB14/Data+Management",
      "https://wiki.pmease.com/display/QB14/License+Management",
      "https://wiki.pmease.com/display/QB14/category/Security+Management",
      "https://wiki.pmease.com/display/QB14/Auditing+User+Activities",
      "https://wiki.pmease.com/display/QB14/Plugin+Management",
      "https://wiki.pmease.com/display/QB14/Configuring+System+Alerts",
      "https://wiki.pmease.com/display/QB14/Configuring+Disk+Monitoring",
      "https://wiki.pmease.com/display/QB14/Webhooks",
      "https://wiki.pmease.com/display/QB14/Rebuild+statistics+and+aggregation+data",
      "https://wiki.pmease.com/display/QB14/Set+Up+Build+Dependency"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Set+Up+Build+Dependency",
    "title": "Set Up Build Dependency",
    "breadcrumb": [
      "",
      "Administrator's Guide"
    ],
    "full_text": "Administrator's Guide\nSet Up Build Dependency\nVersion: QB14\nOn this page\nSet Up Build Dependency\nIt is quite common that a product is comprised of different components, and a component is used by different products. We suggest to set up builds for these components and products separately in this case, and utilize QuickBuild's dependency mechanism to use result of component builds in product builds.\nDependency mechanism\nâ\nQuickBuild implements build dependency through a special repository type -\nQuickBuild Repository\n. Assume we have two configurations:\nroot/product\nand\nroot/component\n. Configuration\nroot/product\nis created to build the product, and configuration\nroot/component\nis created to build component. To use component artifacts, you will need to:\nSwitch to\nrepositories\ntab of\nroot/product\n, and define a QuickBuild repository there retrieving desired files from desired build of\nroot/component\n.\nSwitch to\nsteps\ntab of\nroot/product\n, and add a checkout step into step execution graph to check out from the repository defined above.\nIf the product depends on multiple components, you will just need to define multiple QuickBuild repositories corresponding to these components, and add multiple checkout steps to check out from these repositories in the product configuration. You can even arrange these checkout steps in a parallel composition step to resolve and retrieve multiple dependencies simultaneously.\nDependency resolution and change detection\nâ\nTaking the example used in the above section, before retrieving artifacts from configuration\nroot/component\n, QuickBuild needs to determine which build in\nroot/componentA\nto be used. The process of resolving dependency build is called dependency resolution in QuickBuild, and is controlled by the property\nbuild\nwhen define the QuickBuild repository as shown below:\nCurrently this property can take one of below value:\nlatest finished build (generate new if necessary)\nIf this value is selected, QuickBuild will check if a new build is necessary in the dependency configuration (\nroot/component\nin this case) when resolve the dependency build. If the build is necessary, the newly generated build will be used as the actual dependency build; otherwise, the current latest finished build will be resolved.\nVariables can be specified to control the dependency build process in this case.\nlatest finished build\nIf this value is selected, QuickBuild will directly resolve the dependency build as the latest finished build without attempting to generate a new build in the dependency configuration even if build condition is satisfied.\nlatest recommended build\nIf this value is selected, QuickBuild will resolve the dependency build as the latest recommended build. This is very useful to make sure that the product builds always use good and approved builds from component configurations. Newly introduced features in component builds will not affect product builds unless they are approved.\nlatest successful build\nIf this value is selected, QuickBuild will resolve the dependency build as latest successful build.\nspecify a build version\nIf this option is choosed, you will need to specify a particular build version to be used as dependency build.\nThe dependency resolution process is recursive if the dependency configuration itself uses other dependencies. In this case, other dependency resolution processes will be triggered before current resolution finishes.\nLike other repository types, changes will be detected in the QuickBuild repository when configuration\nroot/product\nis triggered. When detecting changes, the dependency resolution process will run to get the actual dependency build. If the resulted dependency build is different from the dependency build used in previous build, QuickBuild will think that the dependency has changed and new build will be generated if the configuration is triggered by scheduler or by a recursive dependency resolution process.\nDependency types\nâ\nDifferent dependency types are defined based on different resolution processes introduced above:\n{#SetUpBuildDependency-activedependency}\nActive dependency\nThis dependency refers to the dependency setup with resolution process set to \"latest finished build (generate new if necessary)\". It is called active since the resolution process can trigger new build in dependency configuration. We call configuration\nproject1\nactively depends on configuration\nproject2\nif\nproject1\nhas an active dependency on\nproject2\n.\n{#SetUpBuildDependency-passivedependency}\nPassive dependency\nThis dependency refers to the dependency setup with resolution process set to \"latest finished build\", \"latest recommended build\", and \"latest successful build\". It is called passive since the resolution process itself will never trigger a build actively. However, if there is a new build generated matching the criteria, it will be used as the new dependency. We call configuration\nproject1\npassively depends on configuration\nproject2\nif\nproject1\nhas a passive dependency on\nproject2\n.\n{#SetUpBuildDependency-staticdependency}\nStatic dependency\nThis dependency refers to the dependency setup with resolution process set to \"specify a build version\". It is called static since the dependency build will remain unchanged unless another build is specified by the user.\nHaving explained dependency types, let is assume that configuration\nproject1\nactively depends on\nproject2\n, and\nproject2\nactively depends on\nproject3\n. If\nproject3\nhas new source commits since last build, triggering of\nproject1\nwill generate new build in\nproject3\n,\nproject2\nand\nproject1\nin turn.\nCheck dependent builds\nâ\nIn a continuous integration environment, when build/test a configuration, it is sometimes desirable to check if configurations depending on current build are successful or not. If dependent builds are failed, the dependency build will be marked as failed to indicate that it breaks the dependents. To achieve this, you will need to:\nMake sure the dependent configurations you want to check have an active dependency on the current configuration.\nAdd an additional step\nTrigger Other Builds\ninto step execution graph of the dependency configuration, and configure it to trigger desired dependent configurations. Dependent configurations specified here will be triggered parallely.\nFuture versions will add a dependent trigger step to find out configurations actively depending on current configuration automatically, and trigger them parallely.\nTrack build dependencies\nâ\nUsed dependencies in a particular build can be examined from the build overview page as explained\nhere\n.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Set Up Build Dependency",
        "content": ""
      },
      {
        "header": "Dependency mechanismâ",
        "content": "QuickBuild implements build dependency through a special repository type -QuickBuild Repository. Assume we have two configurations:root/productandroot/component. Configurationroot/productis created to build the product, and configurationroot/componentis created to build component. To use component artifacts, you will need to: Switch torepositoriestab ofroot/product, and define a QuickBuild repository there retrieving desired files from desired build ofroot/component.Switch tostepstab ofroot/product, and add a checkout step into step execution graph to check out from the repository defined above. If the product depends on multiple components, you will just need to define multiple QuickBuild repositories corresponding to these components, and add multiple checkout steps to check out from these repositories in the product configuration. You can even arrange these checkout steps in a parallel composition step to resolve and retrieve multiple dependencies simultaneously."
      },
      {
        "header": "Dependency resolution and change detectionâ",
        "content": "Taking the example used in the above section, before retrieving artifacts from configurationroot/component, QuickBuild needs to determine which build inroot/componentAto be used. The process of resolving dependency build is called dependency resolution in QuickBuild, and is controlled by the propertybuildwhen define the QuickBuild repository as shown below: Currently this property can take one of below value: latest finished build (generate new if necessary)If this value is selected, QuickBuild will check if a new build is necessary in the dependency configuration (root/componentin this case) when resolve the dependency build. If the build is necessary, the newly generated build will be used as the actual dependency build; otherwise, the current latest finished build will be resolved.Variables can be specified to control the dependency build process in this case.latest finished buildIf this value is selected, QuickBuild will directly resolve the dependency build as the latest finished build without attempting to generate a new build in the dependency configuration even if build condition is satisfied.latest recommended buildIf this value is selected, QuickBuild will resolve the dependency build as the latest recommended build. This is very useful to make sure that the product builds always use good and approved builds from component configurations. Newly introduced features in component builds will not affect product builds unless they are approved.latest successful buildIf this value is selected, QuickBuild will resolve the dependency build as latest successful build.specify a build versionIf this option is choosed, you will need to specify a particular build version to be used as dependency build. The dependency resolution process is recursive if the dependency configuration itself uses other dependencies. In this case, other dependency resolution processes will be triggered before current resolution finishes. Like other repository types, changes will be detected in the QuickBuild repository when configurationroot/productis triggered. When detecting changes, the dependency resolution process will run to get the actual dependency build. If the resulted dependency build is different from the dependency build used in previous build, QuickBuild will think that the dependency has changed and new build will be generated if the configuration is triggered by scheduler or by a recursive dependency resolution process."
      },
      {
        "header": "Dependency typesâ",
        "content": "Different dependency types are defined based on different resolution processes introduced above: {#SetUpBuildDependency-activedependency}Active dependencyThis dependency refers to the dependency setup with resolution process set to \"latest finished build (generate new if necessary)\". It is called active since the resolution process can trigger new build in dependency configuration. We call configurationproject1actively depends on configurationproject2ifproject1has an active dependency onproject2. {#SetUpBuildDependency-passivedependency}Passive dependencyThis dependency refers to the dependency setup with resolution process set to \"latest finished build\", \"latest recommended build\", and \"latest successful build\". It is called passive since the resolution process itself will never trigger a build actively. However, if there is a new build generated matching the criteria, it will be used as the new dependency. We call configurationproject1passively depends on configurationproject2ifproject1has a passive dependency onproject2. {#SetUpBuildDependency-staticdependency}Static dependencyThis dependency refers to the dependency setup with resolution process set to \"specify a build version\". It is called static since the dependency build will remain unchanged unless another build is specified by the user. Having explained dependency types, let is assume that configurationproject1actively depends onproject2, andproject2actively depends onproject3. Ifproject3has new source commits since last build, triggering ofproject1will generate new build inproject3,project2andproject1in turn."
      },
      {
        "header": "Check dependent buildsâ",
        "content": "In a continuous integration environment, when build/test a configuration, it is sometimes desirable to check if configurations depending on current build are successful or not. If dependent builds are failed, the dependency build will be marked as failed to indicate that it breaks the dependents. To achieve this, you will need to: Make sure the dependent configurations you want to check have an active dependency on the current configuration.Add an additional stepTrigger Other Buildsinto step execution graph of the dependency configuration, and configure it to trigger desired dependent configurations. Dependent configurations specified here will be triggered parallely. Future versions will add a dependent trigger step to find out configurations actively depending on current configuration automatically, and trigger them parallely."
      },
      {
        "header": "Track build dependenciesâ",
        "content": "Used dependencies in a particular build can be examined from the build overview page as explainedhere."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Set+Up+Build+Promotion",
      "https://wiki.pmease.com/display/QB14/Build+Notifications",
      "https://wiki.pmease.com/display/QB14/Customize+Notification+Templates",
      "https://wiki.pmease.com/display/QB14/Set+Up+Proof+Build",
      "https://wiki.pmease.com/display/QB14/Working+with+Resources",
      "https://wiki.pmease.com/display/QB14/Build+Concurrency+and+Deadlock",
      "https://wiki.pmease.com/display/QB14/Working+with+Build+Grid",
      "https://wiki.pmease.com/display/QB14/category/Working+with+Cloud+Profiles",
      "https://wiki.pmease.com/display/QB14/Diagnose+Build+Issues",
      "https://wiki.pmease.com/display/QB14/Running+Behind+Apache",
      "https://wiki.pmease.com/display/QB14/Data+Management",
      "https://wiki.pmease.com/display/QB14/License+Management",
      "https://wiki.pmease.com/display/QB14/category/Security+Management",
      "https://wiki.pmease.com/display/QB14/Auditing+User+Activities",
      "https://wiki.pmease.com/display/QB14/Plugin+Management",
      "https://wiki.pmease.com/display/QB14/Configuring+System+Alerts",
      "https://wiki.pmease.com/display/QB14/Configuring+Disk+Monitoring",
      "https://wiki.pmease.com/display/QB14/Webhooks",
      "https://wiki.pmease.com/display/QB14/Dependent+and+Dependency+Builds",
      "https://wiki.pmease.com/display/QB14/Set+Up+Build+Promotion"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Set+Up+Build+Promotion",
    "title": "Set Up Build Promotion",
    "breadcrumb": [
      "",
      "Administrator's Guide"
    ],
    "full_text": "Administrator's Guide\nSet Up Build Promotion\nVersion: QB14\nOn this page\nSet Up Build Promotion\nDefine promomotions\nâ\nBuild Promotion\ncan be defined in promotion setting page of a configuration like below:\nThe promote condition controls whether or not the promote action appears on the build page. Taking above screenshot for example:\nif a build is successful, the promote action\ndeploy\nwill be visible while promote action\nrelease\nwill not be visible like below:\nif a build is recommended, the promote action\ndeploy\nand\nrelease\nwill both be visible like below:\nif a build is failed, no promote actions will be visible.\nRevision promotion and file promotion\nâ\nDuring a promotion, QuickBuild will remember the repository revision used in source build, and use it to build destination configuration. This is called revision promotion, and it guarantees that the source build and destination build use the same set of source code. Please note that revision promotion only happens for repositories of the same name. For example, if source build is generated using source code from repository \"A\" and \"B\", and destination build is generated using source code from repository \"B\" and \"C\", only revision of repository \"B\" will be passed from source build to destination build.\nIn many cases, you may want to reuse artifacts generated in source build instead of build it from scratch when do the promotion. This is called file promotion and QuickBuild supports this via\nfile to promote\nsetting in a promotion definition:\nSpecified promote files will be retrieved from source path under\npublish directory\nof the source build, and send to destination path under\nworkspace\nof the node running master step in destination configuration. Then you can define various build steps in destination configuration to further process the artifacts, for example to deploy them to test/production servers.\nControl promotion process with variables\nâ\nVariables can be defined in promotion definition to control the promotion process. For example, you may have the destination build using the same version as source build following below steps:\nSpecify\nnext build version\nof destination configuration in general setting as\n${vars.get(\"promoteVersion\")}\n.\nDefine variable\npromoteVersion\nin promotion definition and set the value to\n${build.version}\n.\nIf you would like version of destination build being prompted in the above example, you may leave value of the variable\npromoteVersion\nempty, and specify its prompt setting as\nprompt as text input\n.\nAt last, if you want to make sure that certain variables in destination build use the same value as in source build, you may define these variables in promotion definition to use the value\n\\${build.getVarValue(\"<name of the variable>\")}\n. Assume below case:\nVariable\nbranch\nis set to prompt for user input in source build, and it is specified as\n1.0 bugfix\nwhen source build is triggered. At promotion time, you do not want this variable to prompt for input again, instead, you want the destination build to use the variable value already specified for source build. You can achieve this by defining variable\nbranch\nin promotion destination, and specify the value as\n${build.getVarValue(\"branch\")}\n.\nPermission control\nâ\nPromotion permission can be controlled by promote condition. For example, if you want that the release promote action is only visible to release managers on recommended builds, you may define the promote condition like below:\nwarning\nPlease make sure that the\nRelease Manager\ngroup is assigned with\nPROMOTE_BUILD\npermission over the configuration; otherwise, all promotion actions will not visible to the group. Refer to\nConfiguration Visibility and Permissions\nfor details.\nAuto promotion\nâ\nPromotion can be marked as \"auto promote\" as below if you want it to take place automatically when specified condition is satisfied after current build finishes.\nIf you have a big workflow taking considerable time to run, it is suggested that you divide them into smaller parts and connect them with auto-promotions to achieve below benefits:\nYou can get build feedback as soon as possible.\nIn case of a build failure, the workflow will cease at the failure point, and you may later restart the workflow from the failure point.\nChange detection during promotion\nâ\nIn a build promotion process, changes of destination build are calculated by comparing repository revision of current destination build against previous destination build, instead of previous source build. This is well explained [here](Promote Build.html#PromoteBuild-buildchanges).\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Set Up Build Promotion",
        "content": ""
      },
      {
        "header": "Define promomotionsâ",
        "content": "Build Promotioncan be defined in promotion setting page of a configuration like below: The promote condition controls whether or not the promote action appears on the build page. Taking above screenshot for example: if a build is successful, the promote actiondeploywill be visible while promote actionreleasewill not be visible like below:if a build is recommended, the promote actiondeployandreleasewill both be visible like below:if a build is failed, no promote actions will be visible."
      },
      {
        "header": "Revision promotion and file promotionâ",
        "content": "During a promotion, QuickBuild will remember the repository revision used in source build, and use it to build destination configuration. This is called revision promotion, and it guarantees that the source build and destination build use the same set of source code. Please note that revision promotion only happens for repositories of the same name. For example, if source build is generated using source code from repository \"A\" and \"B\", and destination build is generated using source code from repository \"B\" and \"C\", only revision of repository \"B\" will be passed from source build to destination build. In many cases, you may want to reuse artifacts generated in source build instead of build it from scratch when do the promotion. This is called file promotion and QuickBuild supports this viafile to promotesetting in a promotion definition: Specified promote files will be retrieved from source path underpublish directoryof the source build, and send to destination path underworkspaceof the node running master step in destination configuration. Then you can define various build steps in destination configuration to further process the artifacts, for example to deploy them to test/production servers."
      },
      {
        "header": "Control promotion process with variablesâ",
        "content": "Variables can be defined in promotion definition to control the promotion process. For example, you may have the destination build using the same version as source build following below steps: Specifynext build versionof destination configuration in general setting as${vars.get(\"promoteVersion\")}.Define variablepromoteVersionin promotion definition and set the value to${build.version}. If you would like version of destination build being prompted in the above example, you may leave value of the variablepromoteVersionempty, and specify its prompt setting asprompt as text input. At last, if you want to make sure that certain variables in destination build use the same value as in source build, you may define these variables in promotion definition to use the value\\${build.getVarValue(\"<name of the variable>\")}. Assume below case: Variablebranchis set to prompt for user input in source build, and it is specified as1.0 bugfixwhen source build is triggered. At promotion time, you do not want this variable to prompt for input again, instead, you want the destination build to use the variable value already specified for source build. You can achieve this by defining variablebranchin promotion destination, and specify the value as${build.getVarValue(\"branch\")}."
      },
      {
        "header": "Permission controlâ",
        "content": "Promotion permission can be controlled by promote condition. For example, if you want that the release promote action is only visible to release managers on recommended builds, you may define the promote condition like below: warningPlease make sure that theRelease Managergroup is assigned withPROMOTE_BUILDpermission over the configuration; otherwise, all promotion actions will not visible to the group. Refer toConfiguration Visibility and Permissionsfor details."
      },
      {
        "header": "Auto promotionâ",
        "content": "Promotion can be marked as \"auto promote\" as below if you want it to take place automatically when specified condition is satisfied after current build finishes. If you have a big workflow taking considerable time to run, it is suggested that you divide them into smaller parts and connect them with auto-promotions to achieve below benefits: You can get build feedback as soon as possible.In case of a build failure, the workflow will cease at the failure point, and you may later restart the workflow from the failure point."
      },
      {
        "header": "Change detection during promotionâ",
        "content": "In a build promotion process, changes of destination build are calculated by comparing repository revision of current destination build against previous destination build, instead of previous source build. This is well explained [here](Promote Build.html#PromoteBuild-buildchanges)."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Build+Notifications",
      "https://wiki.pmease.com/display/QB14/Customize+Notification+Templates",
      "https://wiki.pmease.com/display/QB14/Set+Up+Proof+Build",
      "https://wiki.pmease.com/display/QB14/Working+with+Resources",
      "https://wiki.pmease.com/display/QB14/Build+Concurrency+and+Deadlock",
      "https://wiki.pmease.com/display/QB14/Working+with+Build+Grid",
      "https://wiki.pmease.com/display/QB14/category/Working+with+Cloud+Profiles",
      "https://wiki.pmease.com/display/QB14/Diagnose+Build+Issues",
      "https://wiki.pmease.com/display/QB14/Running+Behind+Apache",
      "https://wiki.pmease.com/display/QB14/Data+Management",
      "https://wiki.pmease.com/display/QB14/License+Management",
      "https://wiki.pmease.com/display/QB14/category/Security+Management",
      "https://wiki.pmease.com/display/QB14/Auditing+User+Activities",
      "https://wiki.pmease.com/display/QB14/Plugin+Management",
      "https://wiki.pmease.com/display/QB14/Configuring+System+Alerts",
      "https://wiki.pmease.com/display/QB14/Configuring+Disk+Monitoring",
      "https://wiki.pmease.com/display/QB14/Webhooks",
      "https://wiki.pmease.com/display/QB14/Configuration+Visibility+and+Permissions",
      "https://wiki.pmease.com/display/QB14/Build+Notifications"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Build+Notifications",
    "title": "Build Notifications",
    "breadcrumb": [
      "",
      "Administrator's Guide"
    ],
    "full_text": "Administrator's Guide\nBuild Notifications\nVersion: QB14\nBuild Notifications\nUsers can\nsubscribe to configurations\nto get build notifications if they are willing to do so. On the other hand, you can set up the configuration to forcibly send build notifications to users under certain conditions even if they do not choose to subscribe. This can be done by editing notification setting of corresponding configuration like below:\nPlease note that only one notification will be sent if the user is eligible for both forced notification and subscribed notification.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Build Notifications",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Customize+Notification+Templates",
      "https://wiki.pmease.com/display/QB14/Set+Up+Proof+Build",
      "https://wiki.pmease.com/display/QB14/Working+with+Resources",
      "https://wiki.pmease.com/display/QB14/Build+Concurrency+and+Deadlock",
      "https://wiki.pmease.com/display/QB14/Working+with+Build+Grid",
      "https://wiki.pmease.com/display/QB14/category/Working+with+Cloud+Profiles",
      "https://wiki.pmease.com/display/QB14/Diagnose+Build+Issues",
      "https://wiki.pmease.com/display/QB14/Running+Behind+Apache",
      "https://wiki.pmease.com/display/QB14/Data+Management",
      "https://wiki.pmease.com/display/QB14/License+Management",
      "https://wiki.pmease.com/display/QB14/category/Security+Management",
      "https://wiki.pmease.com/display/QB14/Auditing+User+Activities",
      "https://wiki.pmease.com/display/QB14/Plugin+Management",
      "https://wiki.pmease.com/display/QB14/Configuring+System+Alerts",
      "https://wiki.pmease.com/display/QB14/Configuring+Disk+Monitoring",
      "https://wiki.pmease.com/display/QB14/Webhooks",
      "https://wiki.pmease.com/display/QB14/Customize+Notification+Templates"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Customize+Notification+Templates",
    "title": "Customize Notification Templates",
    "breadcrumb": [
      "",
      "Administrator's Guide"
    ],
    "full_text": "Administrator's Guide\nCustomize Notification Templates\nVersion: QB14\nCustomize Notification Templates\nBuild notification templates can be customized following below steps:\nCopy default notification template under\n<QuickBuild server install dir>/asset\nto another file, and modify the copied template.\ndefault_html_notification.vm\nis the default template for email notification, while\ndefault_plain_notification.vm\nis the default template for various instant messengers. Please note that you should not modify default templates directly, as they will be overwritten when QuickBuild is upgraded.\nEdit notification template setting of corresponding configuration to reference your customized template like below:\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Customize Notification Templates",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Set+Up+Proof+Build",
      "https://wiki.pmease.com/display/QB14/Working+with+Resources",
      "https://wiki.pmease.com/display/QB14/Build+Concurrency+and+Deadlock",
      "https://wiki.pmease.com/display/QB14/Working+with+Build+Grid",
      "https://wiki.pmease.com/display/QB14/category/Working+with+Cloud+Profiles",
      "https://wiki.pmease.com/display/QB14/Diagnose+Build+Issues",
      "https://wiki.pmease.com/display/QB14/Running+Behind+Apache",
      "https://wiki.pmease.com/display/QB14/Data+Management",
      "https://wiki.pmease.com/display/QB14/License+Management",
      "https://wiki.pmease.com/display/QB14/category/Security+Management",
      "https://wiki.pmease.com/display/QB14/Auditing+User+Activities",
      "https://wiki.pmease.com/display/QB14/Plugin+Management",
      "https://wiki.pmease.com/display/QB14/Configuring+System+Alerts",
      "https://wiki.pmease.com/display/QB14/Configuring+Disk+Monitoring",
      "https://wiki.pmease.com/display/QB14/Webhooks",
      "https://wiki.pmease.com/display/QB14/Set+Up+Proof+Build"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Set+Up+Proof+Build",
    "title": "Set Up Proof Build",
    "breadcrumb": [
      "",
      "Administrator's Guide"
    ],
    "full_text": "Administrator's Guide\nSet Up Proof Build\nVersion: QB14\nSet Up Proof Build\nProof build support is enabled per SCM. Refer to below links on how to set up proof build for different SCMs:\n[Bazaar](Working with Bazaar.html#WorkingwithBazaar-proofbuild)\n[CVS](Working with CVS.html#WorkingwithCVS-proofbuild)\n[ClearCase](Working with ClearCase.html#WorkingwithClearCase-proofbuild)\n[Git](Working with Git.html#WorkingwithGit-proofbuild)\n[Mercurial](Working with Mercurial.html#WorkingwithMercurial-proofbuild)\n[Perforce](Working with Perforce.html#WorkingwithPerforce-proofbuild)\n[StarTeam](Working with StarTeam.html#WorkingwithStarTeam-proofbuild)\n[Subversion](Working with Subversion.html#WorkingwithSubversion-proofbuild)\n[Visual SourceSafe](Working with Visual SourceSafe.html#WorkingwithVisualSourceSafe-proofbuild)\nProof build for other SCMs not listed here is currently not supported.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Set Up Proof Build",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Working+with+Resources",
      "https://wiki.pmease.com/display/QB14/Build+Concurrency+and+Deadlock",
      "https://wiki.pmease.com/display/QB14/Working+with+Build+Grid",
      "https://wiki.pmease.com/display/QB14/category/Working+with+Cloud+Profiles",
      "https://wiki.pmease.com/display/QB14/Diagnose+Build+Issues",
      "https://wiki.pmease.com/display/QB14/Running+Behind+Apache",
      "https://wiki.pmease.com/display/QB14/Data+Management",
      "https://wiki.pmease.com/display/QB14/License+Management",
      "https://wiki.pmease.com/display/QB14/category/Security+Management",
      "https://wiki.pmease.com/display/QB14/Auditing+User+Activities",
      "https://wiki.pmease.com/display/QB14/Plugin+Management",
      "https://wiki.pmease.com/display/QB14/Configuring+System+Alerts",
      "https://wiki.pmease.com/display/QB14/Configuring+Disk+Monitoring",
      "https://wiki.pmease.com/display/QB14/Webhooks",
      "https://wiki.pmease.com/display/QB14/Working+with+Resources"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Working+with+Resources",
    "title": "Working with Resources",
    "breadcrumb": [
      "",
      "Administrator's Guide"
    ],
    "full_text": "Administrator's Guide\nWorking with Resources\nVersion: QB14\nOn this page\nWorking with Resources\nWhat is Resource\nâ\nResource means any physical or virtual component of limited availability within the grid, and is provided by grid node. A build step can declare to require certain resources to run. If some nodes are found with desired resources, the step will run on the fastest node; otherwise, the step will wait until a node with free resource is available. This way, the resource contention problem between builds and steps can be solved efficiently.\nFor instance, we can define the CPU processor resource representing all CPU processors of all agents in the grid, and declare that master step of the build requires the processor resource. This guarantees that a processor will run one and only one build. If processor resource is currently used up, new build requests will wait until there is a free one. Another example is that you have a single deployment machine in your grid, and only one deployment step can deploy to that machine in the same time. In this case, you may define a deployment resource corresponding to that machine, and for each deploy step, define it to require the deployment resource.\nDefine and Examine Resources\nâ\nResource can be defined in the resource tab. When define a resource, you will need to specify which grid node will provide the resource, and how many it will provide. Below screenshot defines a CPU processor resource, and all build agents can provide this resource, with the resource count set to system property\nqb.processor.number\n:\nThe\n#available\ncolumn displays total number of resources currently available, and\n#used\ncolumn displays total number of used resources.\nResources belonging to a specific node can also be examined from the node detail page like below:\nUse Resource\nâ\nTo declare that a step requires a resource, please edit the step and choose option\non node with specified resource\nfor the\nnode selection\nfield like below:\nThis option can be combined with other node selection options. Taking the processor resource for example, you may define node selection property to use the processor resource and also on\nagent1\n, then the step will only run when a processor resource exists on\nagent1\n.\nMigrate from Queue to Resource\nâ\nThe reason that we discard the queue concept is that the queue workers are not associated with grid nodes, and therefore it is difficult to solve the node resource contention problem between builds and steps. Now with the resource utility, we can queue build requests more reasonably and efficiently. To do so, please define appropriate resources and edit the master step to use those resources. When resource requirement of a master step is not satisfied, the whole build request will be in waiting state.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Working with Resources",
        "content": ""
      },
      {
        "header": "What is Resourceâ",
        "content": "Resource means any physical or virtual component of limited availability within the grid, and is provided by grid node. A build step can declare to require certain resources to run. If some nodes are found with desired resources, the step will run on the fastest node; otherwise, the step will wait until a node with free resource is available. This way, the resource contention problem between builds and steps can be solved efficiently. For instance, we can define the CPU processor resource representing all CPU processors of all agents in the grid, and declare that master step of the build requires the processor resource. This guarantees that a processor will run one and only one build. If processor resource is currently used up, new build requests will wait until there is a free one. Another example is that you have a single deployment machine in your grid, and only one deployment step can deploy to that machine in the same time. In this case, you may define a deployment resource corresponding to that machine, and for each deploy step, define it to require the deployment resource."
      },
      {
        "header": "Define and Examine Resourcesâ",
        "content": "Resource can be defined in the resource tab. When define a resource, you will need to specify which grid node will provide the resource, and how many it will provide. Below screenshot defines a CPU processor resource, and all build agents can provide this resource, with the resource count set to system propertyqb.processor.number: The#availablecolumn displays total number of resources currently available, and#usedcolumn displays total number of used resources. Resources belonging to a specific node can also be examined from the node detail page like below:"
      },
      {
        "header": "Use Resourceâ",
        "content": "To declare that a step requires a resource, please edit the step and choose optionon node with specified resourcefor thenode selectionfield like below: This option can be combined with other node selection options. Taking the processor resource for example, you may define node selection property to use the processor resource and also onagent1, then the step will only run when a processor resource exists onagent1."
      },
      {
        "header": "Migrate from Queue to Resourceâ",
        "content": "The reason that we discard the queue concept is that the queue workers are not associated with grid nodes, and therefore it is difficult to solve the node resource contention problem between builds and steps. Now with the resource utility, we can queue build requests more reasonably and efficiently. To do so, please define appropriate resources and edit the master step to use those resources. When resource requirement of a master step is not satisfied, the whole build request will be in waiting state."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Build+Concurrency+and+Deadlock",
      "https://wiki.pmease.com/display/QB14/Working+with+Build+Grid",
      "https://wiki.pmease.com/display/QB14/category/Working+with+Cloud+Profiles",
      "https://wiki.pmease.com/display/QB14/Diagnose+Build+Issues",
      "https://wiki.pmease.com/display/QB14/Running+Behind+Apache",
      "https://wiki.pmease.com/display/QB14/Data+Management",
      "https://wiki.pmease.com/display/QB14/License+Management",
      "https://wiki.pmease.com/display/QB14/category/Security+Management",
      "https://wiki.pmease.com/display/QB14/Auditing+User+Activities",
      "https://wiki.pmease.com/display/QB14/Plugin+Management",
      "https://wiki.pmease.com/display/QB14/Configuring+System+Alerts",
      "https://wiki.pmease.com/display/QB14/Configuring+Disk+Monitoring",
      "https://wiki.pmease.com/display/QB14/Webhooks",
      "https://wiki.pmease.com/display/QB14/Build+Concurrency+and+Deadlock"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Build+Concurrency+and+Deadlock",
    "title": "Build Concurrency and Deadlock",
    "breadcrumb": [
      "",
      "Administrator's Guide"
    ],
    "full_text": "Administrator's Guide\nBuild Concurrency and Deadlock\nVersion: QB14\nOn this page\nBuild Concurrency and Deadlock\nControl Build Concurrency with Resources\nâ\nAs explained in\nWorking with Resources\nsection, one can define resources in grid page to control how many steps can run concurrently. Specifically, if resource requirement is applied to master step, the whole build will be queued when the requirement is not satisfied. You may also refer to\nthe resource management tutorial\non how to control the build concurrency.\nConcurrency of Builds of the Same Configuration\nâ\nConcurrency of builds of the same configuration is also affected by workspaces. QuickBuild guarantees that a workspace is only used by one build at a time. Assume that\nstep1\nand\nstep2\nbelongs to\nbuild1\nand\nbuild2\nrespectively. If\nstep1\nand\nstep2\nboth matches the single same node, the second step will wait until the first step finishes. Specifically if the waiting step is of master step, the whole build will be put into queue for waiting.\nPossible Deadlocks\nâ\nDeadlock is possible if a child step requires a resource which has already been acquired by parent step. Taking the\nOne Build For One Agent\nexample, if the child step\ntest\nof\nchild project1\nalso requires resource\nAgent\n, deadlock will happen if there is only one agent available. In this case:\nmaster step has already acquired resource\nAgent\n.\nmaster step will not finish unless child step\ntest\nstarts and finishes.\nchild step\ntest\nwill not start unless it can get a free\nAgent\nresource.\nresource\nAgent\nwill not be free unless master step finishes.\nThis makes the system enters into a infinite waiting loop unless there is another free\nAgent\nresource is available. Considering there might be many builds running in the system concurrently, deadlock can happen regardless how many resource you configured in the system.\nTo avoid such deadlock is simple: never try to acquire the same resource multiple times in the same build.\nAnother deadlock possibility is caused by looped waiting of different resources. Assume that:\nwe have two resources in the system:\nresource1\nand\nresource2\n.\nmaster step of\nbuild1\n(assume\nmaster1\n) requires\nresource1\nand its child step\nchild1\nrequires\nresource2\n.\nmaster step of\nbuild2\n(assume\nmaster2\n) requires\nresource2\nand its child step\nchild2\nrequires\nresource1\n.\nDeadlock may happen if there is only one\nresource1\nand\nresource2\nand if we run\nbuild1\nand\nbuild2\nat the same time:\nmaster1\nacquires\nresource1\n.\nmaster2\nacquires\nresource2\n.\nmaster1\nwill not finish unless\nchild1\nstarts and finishes.\nmaster2\nwill not finish unless\nchild2\nstarts and finishes.\nchild1\nwill not start unless\nresource2\nis released by\nmaster2\n.\nchild2\nwill not start unless\nresource1\nis released by\nmaster1\n.\nEven if there are multiple\nresource1\nand\nresource2\nconfigured in the system, deadlock can still happen if many builds of this type are running together. To avoid such deadlock, you should avoid looped waiting of different resources. If\nresource1\nwaits for\nresource2\nin a build setup, you should be careful that other build setups will never cause\nresource2\nto wait for\nresource1\n. This also holds true if three or more resources are involved.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Build Concurrency and Deadlock",
        "content": ""
      },
      {
        "header": "Control Build Concurrency with Resourcesâ",
        "content": "As explained inWorking with Resourcessection, one can define resources in grid page to control how many steps can run concurrently. Specifically, if resource requirement is applied to master step, the whole build will be queued when the requirement is not satisfied. You may also refer tothe resource management tutorialon how to control the build concurrency."
      },
      {
        "header": "Concurrency of Builds of the Same Configurationâ",
        "content": "Concurrency of builds of the same configuration is also affected by workspaces. QuickBuild guarantees that a workspace is only used by one build at a time. Assume thatstep1andstep2belongs tobuild1andbuild2respectively. Ifstep1andstep2both matches the single same node, the second step will wait until the first step finishes. Specifically if the waiting step is of master step, the whole build will be put into queue for waiting."
      },
      {
        "header": "Possible Deadlocksâ",
        "content": "Deadlock is possible if a child step requires a resource which has already been acquired by parent step. Taking theOne Build For One Agentexample, if the child steptestofchild project1also requires resourceAgent, deadlock will happen if there is only one agent available. In this case: master step has already acquired resourceAgent.master step will not finish unless child stepteststarts and finishes.child steptestwill not start unless it can get a freeAgentresource.resourceAgentwill not be free unless master step finishes. This makes the system enters into a infinite waiting loop unless there is another freeAgentresource is available. Considering there might be many builds running in the system concurrently, deadlock can happen regardless how many resource you configured in the system. To avoid such deadlock is simple: never try to acquire the same resource multiple times in the same build. Another deadlock possibility is caused by looped waiting of different resources. Assume that: we have two resources in the system:resource1andresource2.master step ofbuild1(assumemaster1) requiresresource1and its child stepchild1requiresresource2.master step ofbuild2(assumemaster2) requiresresource2and its child stepchild2requiresresource1. Deadlock may happen if there is only oneresource1andresource2and if we runbuild1andbuild2at the same time: master1acquiresresource1.master2acquiresresource2.master1will not finish unlesschild1starts and finishes.master2will not finish unlesschild2starts and finishes.child1will not start unlessresource2is released bymaster2.child2will not start unlessresource1is released bymaster1. Even if there are multipleresource1andresource2configured in the system, deadlock can still happen if many builds of this type are running together. To avoid such deadlock, you should avoid looped waiting of different resources. Ifresource1waits forresource2in a build setup, you should be careful that other build setups will never causeresource2to wait forresource1. This also holds true if three or more resources are involved."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Working+with+Build+Grid",
      "https://wiki.pmease.com/display/QB14/category/Working+with+Cloud+Profiles",
      "https://wiki.pmease.com/display/QB14/Diagnose+Build+Issues",
      "https://wiki.pmease.com/display/QB14/Running+Behind+Apache",
      "https://wiki.pmease.com/display/QB14/Data+Management",
      "https://wiki.pmease.com/display/QB14/License+Management",
      "https://wiki.pmease.com/display/QB14/category/Security+Management",
      "https://wiki.pmease.com/display/QB14/Auditing+User+Activities",
      "https://wiki.pmease.com/display/QB14/Plugin+Management",
      "https://wiki.pmease.com/display/QB14/Configuring+System+Alerts",
      "https://wiki.pmease.com/display/QB14/Configuring+Disk+Monitoring",
      "https://wiki.pmease.com/display/QB14/Webhooks",
      "https://wiki.pmease.com/display/QB14/Resource+Management",
      "https://wiki.pmease.com/display/QB14/One+Build+For+One+Agent",
      "https://wiki.pmease.com/display/QB14/Working+with+Build+Grid"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Working+with+Build+Grid",
    "title": "Working with Build Grid",
    "breadcrumb": [
      "",
      "Administrator's Guide"
    ],
    "full_text": "Administrator's Guide\nWorking with Build Grid\nVersion: QB14\nOn this page\nWorking with Build Grid\nGrid overview\nâ\nThe\nBuild Grid\ncan be managed by switching to\nGrid\ntab as shown below:\nActive nodes are connected and authorized nodes, and can be used to run build steps. When QuickBuild server is initially installed, the grid contains only one active node - the build server itself.\nUnauthorized nodes are connected nodes, but have not been authorized. To authorize nodes, select them and click the\nauthorize\nlink from action menu.\nAdditional grid nodes can be added by\ninstalling build agents\non other build machines.\nTo remove nodes from the grid, just select nodes you want to remove, and click the\nunauthorize\nlink from action menu.\nGrid node attributes\nâ\nNode attributes can be used to filter nodes for certain steps by specifying the step property\nnode match condition\n. For example, the condition\nnode.getAttribute(\"os.name\").startsWith(\"Windows\")\nmatches only agents running Windows operating system, while condition\nnode.hasAttribute(\"ant\")\nmatches agents that have the attribute\nant\ndefined.\nThere are two sets of attributes for a node: system defined attributes and user defined attributes. System defined attributes will be displayed if you select the\nSystem Attributes\ntab in node detail page.\nSystem defined attributes include all environment variables and all Java system properties.\n{#WorkingwithBuildGrid-defineuserattributes}User attributes are custom attributes that are defined by user to identify ability/environment of the node. For example, if the agent has Ant and Maven installed, you may define user attributes to reflect this installation as below:\nMonitor grid node jobs\nâ\nA single unit of work running on a grid node is called a grid job. In most cases, it is just a step. A grid node may have many jobs running concurrently (for example, steps from builds of different configurations). The number of concurrent jobs is limited by node resources (such as working threads). If the resources are exhausted, newly arriving jobs will be waiting in the queue. A typical job monitoring screen looks like this:\nPartition grid between projects\nâ\nThe whole grid can be partitioned between different projects by assigning nodes in advanced setting of a configuration like below:\nAssume the configuration in this example is\nroot/myproj\n, all builds for\nroot/myproj\nand its descendant configurations can only run on grid nodes with\nproject\nattribute set to\nMyProj\n, regardless what value the node selection setting is set to when define steps. Eligible nodes for steps under this tree must match the node selection condition AND the node assignment condition in the same time. If multiple node assignment conditions are found along the tree, all these node assignment conditions need to be satisfied.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Working with Build Grid",
        "content": ""
      },
      {
        "header": "Grid overviewâ",
        "content": "TheBuild Gridcan be managed by switching toGridtab as shown below: Active nodes are connected and authorized nodes, and can be used to run build steps. When QuickBuild server is initially installed, the grid contains only one active node - the build server itself.Unauthorized nodes are connected nodes, but have not been authorized. To authorize nodes, select them and click theauthorizelink from action menu.Additional grid nodes can be added byinstalling build agentson other build machines.To remove nodes from the grid, just select nodes you want to remove, and click theunauthorizelink from action menu."
      },
      {
        "header": "Grid node attributesâ",
        "content": "Node attributes can be used to filter nodes for certain steps by specifying the step propertynode match condition. For example, the conditionnode.getAttribute(\"os.name\").startsWith(\"Windows\")matches only agents running Windows operating system, while conditionnode.hasAttribute(\"ant\")matches agents that have the attributeantdefined. There are two sets of attributes for a node: system defined attributes and user defined attributes. System defined attributes will be displayed if you select theSystem Attributestab in node detail page. System defined attributes include all environment variables and all Java system properties. {#WorkingwithBuildGrid-defineuserattributes}User attributes are custom attributes that are defined by user to identify ability/environment of the node. For example, if the agent has Ant and Maven installed, you may define user attributes to reflect this installation as below:"
      },
      {
        "header": "Monitor grid node jobsâ",
        "content": "A single unit of work running on a grid node is called a grid job. In most cases, it is just a step. A grid node may have many jobs running concurrently (for example, steps from builds of different configurations). The number of concurrent jobs is limited by node resources (such as working threads). If the resources are exhausted, newly arriving jobs will be waiting in the queue. A typical job monitoring screen looks like this:"
      },
      {
        "header": "Partition grid between projectsâ",
        "content": "The whole grid can be partitioned between different projects by assigning nodes in advanced setting of a configuration like below: Assume the configuration in this example isroot/myproj, all builds forroot/myprojand its descendant configurations can only run on grid nodes withprojectattribute set toMyProj, regardless what value the node selection setting is set to when define steps. Eligible nodes for steps under this tree must match the node selection condition AND the node assignment condition in the same time. If multiple node assignment conditions are found along the tree, all these node assignment conditions need to be satisfied."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/category/Working+with+Cloud+Profiles",
      "https://wiki.pmease.com/display/QB14/Diagnose+Build+Issues",
      "https://wiki.pmease.com/display/QB14/Running+Behind+Apache",
      "https://wiki.pmease.com/display/QB14/Data+Management",
      "https://wiki.pmease.com/display/QB14/License+Management",
      "https://wiki.pmease.com/display/QB14/category/Security+Management",
      "https://wiki.pmease.com/display/QB14/Auditing+User+Activities",
      "https://wiki.pmease.com/display/QB14/Plugin+Management",
      "https://wiki.pmease.com/display/QB14/Configuring+System+Alerts",
      "https://wiki.pmease.com/display/QB14/Configuring+Disk+Monitoring",
      "https://wiki.pmease.com/display/QB14/Webhooks",
      "https://wiki.pmease.com/display/QB14/category/Working+with+Cloud+Profiles"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/category/Working+with+Cloud+Profiles",
    "title": "Working with Cloud Profiles",
    "breadcrumb": [
      "",
      "Administrator's Guide"
    ],
    "full_text": "ðï¸\nLaunch Node in GCP\nGCP cloud profile\nðï¸\nLaunch Node in EC2\nEC2 cloud profile\nðï¸\nLaunch Node in Azure\nAzure cloud profile\nðï¸\nLaunch Node in Kubernetes\nConfigure server to access Kubernetes cluster",
    "sections": [
      {
        "header": "ðï¸ Launch Node in GCP",
        "content": "GCP cloud profile"
      },
      {
        "header": "ðï¸ Launch Node in EC2",
        "content": "EC2 cloud profile"
      },
      {
        "header": "ðï¸ Launch Node in Azure",
        "content": "Azure cloud profile"
      },
      {
        "header": "ðï¸ Launch Node in Kubernetes",
        "content": "Configure server to access Kubernetes cluster"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Launch+Node+in+GCP",
      "https://wiki.pmease.com/display/QB14/Launch+Node+in+EC2",
      "https://wiki.pmease.com/display/QB14/Launch+Node+in+Azure",
      "https://wiki.pmease.com/display/QB14/Launch+Node+in+Kubernetes",
      "https://wiki.pmease.com/display/QB14/Diagnose+Build+Issues",
      "https://wiki.pmease.com/display/QB14/Running+Behind+Apache",
      "https://wiki.pmease.com/display/QB14/Data+Management",
      "https://wiki.pmease.com/display/QB14/License+Management",
      "https://wiki.pmease.com/display/QB14/category/Security+Management",
      "https://wiki.pmease.com/display/QB14/Auditing+User+Activities",
      "https://wiki.pmease.com/display/QB14/Plugin+Management",
      "https://wiki.pmease.com/display/QB14/Configuring+System+Alerts",
      "https://wiki.pmease.com/display/QB14/Configuring+Disk+Monitoring",
      "https://wiki.pmease.com/display/QB14/Webhooks",
      "https://wiki.pmease.com/display/QB14/Launch+Node+in+GCP",
      "https://wiki.pmease.com/display/QB14/Launch+Node+in+EC2",
      "https://wiki.pmease.com/display/QB14/Launch+Node+in+Azure",
      "https://wiki.pmease.com/display/QB14/Launch+Node+in+Kubernetes",
      "https://wiki.pmease.com/display/QB14/Launch+Node+in+GCP"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Diagnose+Build+Issues",
    "title": "Diagnose Build Issues",
    "breadcrumb": [
      "",
      "Administrator's Guide"
    ],
    "full_text": "Administrator's Guide\nDiagnose Build Issues\nVersion: QB14\nOn this page\nDiagnose Build Issues\nInvestigate build failure\nâ\nIf a build is generated but failed, you will see an error summary in the build overview page like below:\nThis gives a quick view of which steps are in error, and cause of the error. You may open the step log or build log to view details of the error.\nFurther, you may enable debug or trace logging of a configuration to have QuickBuild printing more build information into log, which might be helpful when investigate build failures.\nInvestigate configuration error\nâ\nConfiguration will be marked as in error in below cases:\nFailed to take repository snapshots.\nFailed to evaluate build condition.\nFailed to calculate build version.\nFailed to collect build metrics.\nFailed to send build notifications.\nConfiguration error messages are logged in system log instead of build log either because the build has not been generated yet or because the build is finished and build log is closed. In this case, the configuration dashboard will display the error message, and clicking the detail icon will display the error detail in system log.\nIn case of configuration error, enabling debug level for system log may help the investigation. This can be done by editing file\nconf/log4j.properties\nunder QuickBuild server's installation directory, and change the second line to be:\nlog4j\n.\nlogger\n.\ncom\n.\npmease\n.\nquickbuild\n=\nDEBUG\nor\nlog4j\n.\nlogger\n.\ncom\n.\npmease\n.\nquickbuild\n=\nTRACE\nThe modified log4j setting will take effect immediately after you've saved the file, and you do NOT need to restart the server.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Diagnose Build Issues",
        "content": ""
      },
      {
        "header": "Investigate build failureâ",
        "content": "If a build is generated but failed, you will see an error summary in the build overview page like below: This gives a quick view of which steps are in error, and cause of the error. You may open the step log or build log to view details of the error. Further, you may enable debug or trace logging of a configuration to have QuickBuild printing more build information into log, which might be helpful when investigate build failures."
      },
      {
        "header": "Investigate configuration errorâ",
        "content": "Configuration will be marked as in error in below cases: Failed to take repository snapshots.Failed to evaluate build condition.Failed to calculate build version.Failed to collect build metrics.Failed to send build notifications. Configuration error messages are logged in system log instead of build log either because the build has not been generated yet or because the build is finished and build log is closed. In this case, the configuration dashboard will display the error message, and clicking the detail icon will display the error detail in system log. In case of configuration error, enabling debug level for system log may help the investigation. This can be done by editing fileconf/log4j.propertiesunder QuickBuild server's installation directory, and change the second line to be: log4j.logger.com.pmease.quickbuild=DEBUG or log4j.logger.com.pmease.quickbuild=TRACE The modified log4j setting will take effect immediately after you've saved the file, and you do NOT need to restart the server."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Running+Behind+Apache",
      "https://wiki.pmease.com/display/QB14/Data+Management",
      "https://wiki.pmease.com/display/QB14/License+Management",
      "https://wiki.pmease.com/display/QB14/category/Security+Management",
      "https://wiki.pmease.com/display/QB14/Auditing+User+Activities",
      "https://wiki.pmease.com/display/QB14/Plugin+Management",
      "https://wiki.pmease.com/display/QB14/Configuring+System+Alerts",
      "https://wiki.pmease.com/display/QB14/Configuring+Disk+Monitoring",
      "https://wiki.pmease.com/display/QB14/Webhooks",
      "https://wiki.pmease.com/display/QB14/Launch+Node+in+Kubernetes",
      "https://wiki.pmease.com/display/QB14/Running+Behind+Apache"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Running+Behind+Apache",
    "title": "Running Behind Apache",
    "breadcrumb": [
      "",
      "Administrator's Guide"
    ],
    "full_text": "Administrator's Guide\nRunning Behind Apache\nVersion: QB14\nOn this page\nRunning Behind Apache\nIntroduction\nâ\nYou may want to run your QuickBuild instance behind Apache for some reasons. To do so, the following situations are assumed:\nThe following commands are Ubuntu specified, if you are running on other platform, please reference the apache documents on your platform.\nAn existing Apache web server has been set up already.\nmod_proxy\nhas been enabled. If you haven't, you may enable it by running command:\na2enmod proxy_http\nYou run your QuickBuild instance at\nhttp://localhost:8810\n, and you want site\nhttps://build.example.com\non the regular port (80) available after configuring the mod_proxy.\nConfigure your apache\nâ\nCreate a file named build.example.com.conf at your apache configurations directory: your_apache_home/conf/sites-available and edit it by adding below lines:\n<\nVirtualHost\n*\n:\n80\n>\n#\nif\nyou are configuring reverse proxy\nwith\nhttps\nenabled\n,\nmake sure\nto\nprepend\nthe\nServerName\n# directive\nwith\n\"https://\"\nschema\n,\nfor\nexample\n:\nhttps\n:\n/\n/\nbuild\n.\nexample\n.\ncom\n:\n443\nServerName\nbuild\n.\nexample\n.\ncom\nProxyRequests\nOff\n# turn off\nthis\noption\n.\nWe\nwill rely on\nProxyPassReverse\nto\ntranslate\n# urls in\nHttp\nresponse\nheaders\n.\nProxyPreserveHost\nOff\n<\nProxy\n*\n>\nOrder\ndeny\n,\nallow\nAllow\nfrom all\n<\n/\nProxy\n>\nProxyPass\n/\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nProxyPassReverse\n/\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\n<\nLocation\n/\n>\nOrder\nallow\n,\ndeny\nAllow\nfrom all\n<\n/\nLocation\n>\nErrorLog\n/\nvar\n/\nlog\n/\napache2\n/\nquickbuild\n-\nerror\n.\nlog\nCustomLog\n/\nvar\n/\nlog\n/\napache2\n/\nquickbuild\n-\naccess\n.\nlog combined\nLogLevel\nwarn\n<\n/\nVirtualHost\n>\nThen, we can enable this configuration and restart the apache server:\n# a2ensite build\n.\nexample\n.\ncom\n.\nconf\n#\n/\netc\n/\ninit\n.\nd\n/\napache2 reload\nThat is it.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Running Behind Apache",
        "content": ""
      },
      {
        "header": "Introductionâ",
        "content": "You may want to run your QuickBuild instance behind Apache for some reasons. To do so, the following situations are assumed: The following commands are Ubuntu specified, if you are running on other platform, please reference the apache documents on your platform.An existing Apache web server has been set up already.mod_proxyhas been enabled. If you haven't, you may enable it by running command:a2enmod proxy_httpYou run your QuickBuild instance athttp://localhost:8810, and you want sitehttps://build.example.comon the regular port (80) available after configuring the mod_proxy."
      },
      {
        "header": "Configure your apacheâ",
        "content": "Create a file named build.example.com.conf at your apache configurations directory: your_apache_home/conf/sites-available and edit it by adding below lines: <VirtualHost*:80>#ifyou are configuring reverse proxywithhttpsenabled,make suretoprependtheServerName# directivewith\"https://\"schema,forexample:https://build.example.com:443ServerNamebuild.example.comProxyRequestsOff# turn offthisoption.Wewill rely onProxyPassReversetotranslate# urls inHttpresponseheaders.ProxyPreserveHostOff<Proxy*>Orderdeny,allowAllowfrom all</Proxy>ProxyPass/http://localhost:8810/ProxyPassReverse/http://localhost:8810/<Location/>Orderallow,denyAllowfrom all</Location>ErrorLog/var/log/apache2/quickbuild-error.logCustomLog/var/log/apache2/quickbuild-access.log combinedLogLevelwarn</VirtualHost> Then, we can enable this configuration and restart the apache server: # a2ensite build.example.com.conf#/etc/init.d/apache2 reload That is it."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Data+Management",
      "https://wiki.pmease.com/display/QB14/License+Management",
      "https://wiki.pmease.com/display/QB14/category/Security+Management",
      "https://wiki.pmease.com/display/QB14/Auditing+User+Activities",
      "https://wiki.pmease.com/display/QB14/Plugin+Management",
      "https://wiki.pmease.com/display/QB14/Configuring+System+Alerts",
      "https://wiki.pmease.com/display/QB14/Configuring+Disk+Monitoring",
      "https://wiki.pmease.com/display/QB14/Webhooks",
      "https://wiki.pmease.com/display/QB14/Data+Management"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Data+Management",
    "title": "Data Management",
    "breadcrumb": [
      "",
      "Administrator's Guide"
    ],
    "full_text": "Administrator's Guide\nData Management\nVersion: QB14\nOn this page\nData Management\nData backup and restore\nâ\nThe page\nAdministration/Backup Database\nallows QuickBuild administrator to schedule auto-backups of the database, or run a backup immediately.\nPlease follow below procedure to restore database from backup:\nShutdown QuickBuild server. If an external database is used, the database server must be running.\nOpen a command prompt window, switch to\nbin\nsub directory of QuickBuild's installation directory, and run the command\nrestore /path/to/backup_file\n.\ndanger\nYou will need to manually delete and re-create the database to wipe out all QuickBuild relevant data remained in the database in case a previous restore has been failed and you want to try again after fixing the errors.\nAfter restore, start QuickBuild server.\nUse other databases other than the embedded H2 database\nâ\nBy default, QuickBuild uses the embedded H2 database for demonstration purpose. In a production environment, it is highly recommended that a serious database is used for performance and reliability reasons. Below is the procedure to switch to use other databases:\nDo a backup of current database following guide in the data backup and restore section. Of course this step is not necessary if you do not want to migrate data in current database.\nShutdown QuickBuild server.\nOpen the file\nconf/hibernate.properties\nunder QuickBuild's installation directory, and modify settings to connect to desired database following instructions in the file. Currently the following database type other than the embedded H2 are supported:\nMySQL 4.0 or higher\nMicrosoft SQL Server 2000 or higher\nOracle 8i or higher\nDB2 10 or higher\nPostgreSQL 9.0 or higher\nMariaDB 5.5 or higher\nRestore previously backed up data into the new database following instructions in the data backup and restore section. This step will not be necessary if you do not want to migrate data from previous database.\ndanger\nDo not connect multiple QuickBuild servers to the same external database.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Data Management",
        "content": ""
      },
      {
        "header": "Data backup and restoreâ",
        "content": "The pageAdministration/Backup Databaseallows QuickBuild administrator to schedule auto-backups of the database, or run a backup immediately. Please follow below procedure to restore database from backup: Shutdown QuickBuild server. If an external database is used, the database server must be running.Open a command prompt window, switch tobinsub directory of QuickBuild's installation directory, and run the commandrestore /path/to/backup_file.dangerYou will need to manually delete and re-create the database to wipe out all QuickBuild relevant data remained in the database in case a previous restore has been failed and you want to try again after fixing the errors.After restore, start QuickBuild server."
      },
      {
        "header": "Use other databases other than the embedded H2 databaseâ",
        "content": "By default, QuickBuild uses the embedded H2 database for demonstration purpose. In a production environment, it is highly recommended that a serious database is used for performance and reliability reasons. Below is the procedure to switch to use other databases: Do a backup of current database following guide in the data backup and restore section. Of course this step is not necessary if you do not want to migrate data in current database.Shutdown QuickBuild server.Open the fileconf/hibernate.propertiesunder QuickBuild's installation directory, and modify settings to connect to desired database following instructions in the file. Currently the following database type other than the embedded H2 are supported:MySQL 4.0 or higherMicrosoft SQL Server 2000 or higherOracle 8i or higherDB2 10 or higherPostgreSQL 9.0 or higherMariaDB 5.5 or higherRestore previously backed up data into the new database following instructions in the data backup and restore section. This step will not be necessary if you do not want to migrate data from previous database.dangerDo not connect multiple QuickBuild servers to the same external database."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/License+Management",
      "https://wiki.pmease.com/display/QB14/category/Security+Management",
      "https://wiki.pmease.com/display/QB14/Auditing+User+Activities",
      "https://wiki.pmease.com/display/QB14/Plugin+Management",
      "https://wiki.pmease.com/display/QB14/Configuring+System+Alerts",
      "https://wiki.pmease.com/display/QB14/Configuring+Disk+Monitoring",
      "https://wiki.pmease.com/display/QB14/Webhooks",
      "https://wiki.pmease.com/display/QB14/License+Management"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/License+Management",
    "title": "License Management",
    "breadcrumb": [
      "",
      "Administrator's Guide"
    ],
    "full_text": "Administrator's Guide\nLicense Management\nVersion: QB14\nLicense Management\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "License Management",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/category/Security+Management",
      "https://wiki.pmease.com/display/QB14/Auditing+User+Activities",
      "https://wiki.pmease.com/display/QB14/Plugin+Management",
      "https://wiki.pmease.com/display/QB14/Configuring+System+Alerts",
      "https://wiki.pmease.com/display/QB14/Configuring+Disk+Monitoring",
      "https://wiki.pmease.com/display/QB14/Webhooks",
      "https://wiki.pmease.com/display/QB14/category/Security+Management"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/category/Security+Management",
    "title": "Security Management",
    "breadcrumb": [
      "",
      "Administrator's Guide"
    ],
    "full_text": "ðï¸\nSingle Sign On\n3 items\nðï¸\nListen to specified IP address\nBy default, QuickBuild server or agent accept connections from all network interfaces. For security considerations, you may want to have them listening on specified network interface. This can be done by running \"bin/config.(sh\\|bat)\" and specify binding address.\nðï¸\nProtect QuickBuild using SSL\nEnable https access to server\nðï¸\nUser and Group Management\nPermission control in QuickBuild is implemented through group and user. The administrator creates groups and give them certain permissions. All users in the group will have the permissions defined for the group. A single user can be associated with multiple groups, and the user permission is the union of all permissions of all groups.\nðï¸\nConfiguration Visibility and Permissions\nQuickBuild organizes configurations into a hierarchy tree. You can selectively expose portions of the tree to certain group of users by adding authorizations for certain configurations when defining related groups. Let's assume a full configuration tree like below:\nðï¸\nManage Permission Sets\nOften you might find yourself in a situation where the same set of permissions need to be assigned to different groups and configurations again and again. The permission set feature comes to rescue\nðï¸\nEnable Anonymous Access and Self Registering\nEnable anonymous access\nðï¸\nAuthenticate with Active Directory and LDAP\nQuickBuild can be configured to authenticate users through Active Directory or generic LDAP servers. To do this, please navigate to menu Administration/Security Settings, and add an authenticator with the type Active Directory or LDAP.\nðï¸\nOther permissions\nBelow permissions can also be assigned to a group:",
    "sections": [
      {
        "header": "ðï¸ Single Sign On",
        "content": "3 items"
      },
      {
        "header": "ðï¸ Listen to specified IP address",
        "content": "By default, QuickBuild server or agent accept connections from all network interfaces. For security considerations, you may want to have them listening on specified network interface. This can be done by running \"bin/config.(sh\\|bat)\" and specify binding address."
      },
      {
        "header": "ðï¸ Protect QuickBuild using SSL",
        "content": "Enable https access to server"
      },
      {
        "header": "ðï¸ User and Group Management",
        "content": "Permission control in QuickBuild is implemented through group and user. The administrator creates groups and give them certain permissions. All users in the group will have the permissions defined for the group. A single user can be associated with multiple groups, and the user permission is the union of all permissions of all groups."
      },
      {
        "header": "ðï¸ Configuration Visibility and Permissions",
        "content": "QuickBuild organizes configurations into a hierarchy tree. You can selectively expose portions of the tree to certain group of users by adding authorizations for certain configurations when defining related groups. Let's assume a full configuration tree like below:"
      },
      {
        "header": "ðï¸ Manage Permission Sets",
        "content": "Often you might find yourself in a situation where the same set of permissions need to be assigned to different groups and configurations again and again. The permission set feature comes to rescue"
      },
      {
        "header": "ðï¸ Enable Anonymous Access and Self Registering",
        "content": "Enable anonymous access"
      },
      {
        "header": "ðï¸ Authenticate with Active Directory and LDAP",
        "content": "QuickBuild can be configured to authenticate users through Active Directory or generic LDAP servers. To do this, please navigate to menu Administration/Security Settings, and add an authenticator with the type Active Directory or LDAP."
      },
      {
        "header": "ðï¸ Other permissions",
        "content": "Below permissions can also be assigned to a group:"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/category/Single+Sign+On",
      "https://wiki.pmease.com/display/QB14/Listen+to+specified+IP+address",
      "https://wiki.pmease.com/display/QB14/Protect+QuickBuild+using+SSL",
      "https://wiki.pmease.com/display/QB14/User+and+Group+Management",
      "https://wiki.pmease.com/display/QB14/Configuration+Visibility+and+Permissions",
      "https://wiki.pmease.com/display/QB14/Manage+Permission+Sets",
      "https://wiki.pmease.com/display/QB14/Enable+Anonymous+Access+and+Self+Registering",
      "https://wiki.pmease.com/display/QB14/Authenticate+with+Active+Directory+and+LDAP",
      "https://wiki.pmease.com/display/QB14/Other+permissions",
      "https://wiki.pmease.com/display/QB14/Auditing+User+Activities",
      "https://wiki.pmease.com/display/QB14/Plugin+Management",
      "https://wiki.pmease.com/display/QB14/Configuring+System+Alerts",
      "https://wiki.pmease.com/display/QB14/Configuring+Disk+Monitoring",
      "https://wiki.pmease.com/display/QB14/Webhooks",
      "https://wiki.pmease.com/display/QB14/category/Single+Sign+On",
      "https://wiki.pmease.com/display/QB14/Listen+to+specified+IP+address",
      "https://wiki.pmease.com/display/QB14/Protect+QuickBuild+using+SSL",
      "https://wiki.pmease.com/display/QB14/User+and+Group+Management",
      "https://wiki.pmease.com/display/QB14/Configuration+Visibility+and+Permissions",
      "https://wiki.pmease.com/display/QB14/Manage+Permission+Sets",
      "https://wiki.pmease.com/display/QB14/Enable+Anonymous+Access+and+Self+Registering",
      "https://wiki.pmease.com/display/QB14/Authenticate+with+Active+Directory+and+LDAP",
      "https://wiki.pmease.com/display/QB14/Other+permissions",
      "https://wiki.pmease.com/display/QB14/category/Single+Sign+On"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Auditing+User+Activities",
    "title": "Auditing User Activities",
    "breadcrumb": [
      "",
      "Administrator's Guide"
    ],
    "full_text": "Administrator's Guide\nAuditing User Activities\nVersion: QB14\nAuditing User Activities\nQuickBuild audits all user activities in the system such as configuration modification, build triggering/cancelling. Authorized users may open the audit log to find out what has been changed in the system during a certain time period, and can compare the changes if necessary as demonstrated by below screenshot:\nAudit log can also be checked at configuration level for users with VIEW_AUDIT_LOG permission for current configuration:\nBy default, audit entries older than one year will be purged from system for performance considerations at system maintenance time. You may customize this in system setting as demonstrated below:\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Auditing User Activities",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Plugin+Management",
      "https://wiki.pmease.com/display/QB14/Configuring+System+Alerts",
      "https://wiki.pmease.com/display/QB14/Configuring+Disk+Monitoring",
      "https://wiki.pmease.com/display/QB14/Webhooks",
      "https://wiki.pmease.com/display/QB14/Other+permissions",
      "https://wiki.pmease.com/display/QB14/Plugin+Management"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Plugin+Management",
    "title": "Plugin Management",
    "breadcrumb": [
      "",
      "Administrator's Guide"
    ],
    "full_text": "Administrator's Guide\nPlugin Management\nVersion: QB14\nPlugin Management\nQuickBuild is designed around\nOSGi\n, a plugin framework. This enables QuickBuild to be extended easily by just installing new plugins. In fact many of its features are provided by plugins out of the box, such as steps, repositories, reports, etc. All QuickBuild plugins are kept in the\nplugins\nfolder under QuickBuild's installation directory, with each file representing a single plugin.\nNOTE:\nWhen mentioning plugin management, we are referring to QuickBuild server. You may noticed that the agent installation also has the\nplugins\ndirectory. However, you don't need to take care of agent plugins, because QuickBuild agents will sync its plugins with QuickBuild server automatically when you install/uninstall plugins on the server.\nTo get more information on installed plugins, please go to the Plugin Management screen as shown below:\nThe icon before the plugin name indicates the status of the plugin:\nThis plugin is disabled. If a plugin is disabled, its functionality will not be available to the system. For example, if the plugin\ncom.pmease.quickbuild.plugin.ant\nis disabled, the ant build step will not appear in the step menu.\nThis plugin is enabled.\nThis plugin can not be enabled as it needs to be configured first. Once it is configured, its status will change to\nenabled\n.\nFor plugins with settings, a\nConfigure\nlink will appear in the operation list. Following this link, plugin setting page will be opened to let the user view/edit settings of the plugin.\nCustom plugins can be installed by dropping the plugin file into the\nplugins/site\nfolder, followed by restart of the QuickBuild server.\nExisting custom plugins can be uninstalled by deleting the plugin file from the\nplugins/site\nfolder, followed by restart of the QuickBuild server.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Plugin Management",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Configuring+System+Alerts",
      "https://wiki.pmease.com/display/QB14/Configuring+Disk+Monitoring",
      "https://wiki.pmease.com/display/QB14/Webhooks",
      "https://wiki.pmease.com/display/QB14/Configuring+System+Alerts"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Configuring+System+Alerts",
    "title": "Configuring System Alerts",
    "breadcrumb": [
      "",
      "Administrator's Guide"
    ],
    "full_text": "Administrator's Guide\nConfiguring System Alerts\nVersion: QB14\nOn this page\nConfiguring System Alerts\nAlert Definition\nâ\nTo configure system alerts, you need be an administrator, then:\nGo to Administration page\nChoose Plugin Management\nFind Measurement & Alert section, and configure System Alert Plugin\nClick Add button to add your own alert definition\nwarning\nThe name here should be unique globally.\nYou may also enable/disable a definition by clicking the status icon like below:\nThe metric condition set is a collection of boolean expression which will be used to test with the collected measurements from a node. You can tell QuickBuild to match all conditions or any conditions defined.\nAfter a condition set is matched, QuickBuild also need know your firing strategy. The firing strategy is to tell QuickBuild when to fire an alert. For example, you may need test the condition set 5 times and if 3 times are true, then an alert can be really fired, you can choose the firing strategy to:\nIf condition set is true X times out of the last Y times it is evaluated\nCurrently, below strategies are supported:\nEach time condition set is true, firing an alert every test is true\nIf condition set is true X times consecutively\nIf condition set is true X times out of the last Y times it is evaluated\nPlease also note our measurements are collected from each node every 5 minutes. That is each condition set will be tested every 5 minutes. You can define your firing strategy based on it.\nSubscribe Alerts\nâ\nYou can subscribe the alerts by Email, Tray Monitor, Jabber client, MSN messenger. To subscribe the alerts, change to Alert Subscription tab, and just add users and notifiers and then saving your changes:\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Configuring System Alerts",
        "content": ""
      },
      {
        "header": "Alert Definitionâ",
        "content": "To configure system alerts, you need be an administrator, then: Go to Administration pageChoose Plugin ManagementFind Measurement & Alert section, and configure System Alert PluginClick Add button to add your own alert definition warningThe name here should be unique globally. You may also enable/disable a definition by clicking the status icon like below: The metric condition set is a collection of boolean expression which will be used to test with the collected measurements from a node. You can tell QuickBuild to match all conditions or any conditions defined. After a condition set is matched, QuickBuild also need know your firing strategy. The firing strategy is to tell QuickBuild when to fire an alert. For example, you may need test the condition set 5 times and if 3 times are true, then an alert can be really fired, you can choose the firing strategy to: If condition set is true X times out of the last Y times it is evaluated Currently, below strategies are supported: Each time condition set is true, firing an alert every test is trueIf condition set is true X times consecutivelyIf condition set is true X times out of the last Y times it is evaluated Please also note our measurements are collected from each node every 5 minutes. That is each condition set will be tested every 5 minutes. You can define your firing strategy based on it."
      },
      {
        "header": "Subscribe Alertsâ",
        "content": "You can subscribe the alerts by Email, Tray Monitor, Jabber client, MSN messenger. To subscribe the alerts, change to Alert Subscription tab, and just add users and notifiers and then saving your changes:"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Configuring+Disk+Monitoring",
      "https://wiki.pmease.com/display/QB14/Webhooks",
      "https://wiki.pmease.com/display/QB14/Configuring+Disk+Monitoring"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Configuring+Disk+Monitoring",
    "title": "Configuring Disk Monitoring",
    "breadcrumb": [
      "",
      "Administrator's Guide"
    ],
    "full_text": "Administrator's Guide\nConfiguring Disk Monitoring\nVersion: QB14\nConfiguring Disk Monitoring\nBy default, QuickBuild will only monitor the disk where node storage directory is on. You may want to specify the disks yourself, so you need:\nGo to Administration page\nSelect Plugin Management tab\nConfigure Grid Measurement Plugin\nIn Monitor Disk field, input something like:\n$\n{\nnode\n.\ngetAttribute\n(\n\"monitorDisks\"\n)\n}\nGo to Grid page, and select Active Nodes tab\nChoose the nodes which you want\nChoose User Attribute tab\nInput something like:\nmonitorDisks\n=\nC\n:\n/\n,\nD\n:\n/\n,\nE\n:\n/\nSince 5.0.9, you may also use match pattern to specify your monitoring disks, for example:\n*\nor\n**\nto monitor all disks/partitions on your agents/nodes, or use ant style pattern to include or exclude your disks:\n*\n*\n,\n-\n/\ndev\nThe above pattern means you want to monitor all partitions except\n/dev\n.\nPlease refer to\nFile Pattern Reference\nfor more about how to specify your path pattern.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Configuring Disk Monitoring",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Webhooks",
      "https://wiki.pmease.com/display/QB14/File+Pattern+Reference",
      "https://wiki.pmease.com/display/QB14/Webhooks"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Webhooks",
    "title": "Webhooks",
    "breadcrumb": [
      "",
      "Administrator's Guide"
    ],
    "full_text": "Administrator's Guide\nWebhooks\nVersion: QB14\nOn this page\nWebhooks\ninfo\nSince 8.0.12\nWebhooks allow you to subscribe to build events on your QuickBuild instance. When one of those events is triggered, we'll send a HTTP POST payload to the webhook's configured URL.\nYou can set up Webhooks for one configuration as many as you want. The configuration setting looks like below:\nEvent\nâ\nThe build events include:\nBUILD_STARED when build is stared\nBUILD_FINISHED when build is finished\nBUILD_RECOMMENDED when build is recommended\nBUILD_UNRECOMMENDED when build is un-recommended\nPayload\nâ\nThe payload data can be any JSON string. If it is empty, the build model will be delivered.\nBelow is an example of build model:\n{\n\"configurationId\"\n:\n123\n,\n// configuration id\n\"configurationPath\"\n:\n\"root/PMEase/Quickbuild\"\n,\n// configuration path\n\"id\"\n:\n345\n,\n// build id\n\"version\"\n:\n\"1.3.4\"\n,\n\"status\"\n:\n\"RUNNING\"\n,\n// build status, can be: SUCCESSFUL, RECOMMENDED, FAILED, CANCELLED, TIMEOUT, RUNNING\n\"requester\"\n:\n\"admin\"\n,\n\"duration\"\n:\n100\n,\n// in milliseconds\n\"beginDate\"\n:\n\"20180728T03:51:58.573+0000\"\n,\n// in ISO8601 format, yyyyMMdd'T'HH:mm:ss.SSSZ\n\"endDate\"\n:\n\"20180728T03:51:58.573+0000\"\n,\n// in ISO8601 format, yyyyMMdd'T'HH:mm:ss.SSSZ\n}\nDelivery headers\nâ\nHTTP POST payloads that are delivered to your webhook's configured URL endpoint will contain several special headers:\nHeader\nDescription\nX-QB-EventType\nName of the event type that triggered the delivery, can be: BUILD_STARTED, BUILD_FINISHED\nX-QB-Signatuer\nThe HMAC hex digest of the response body. This header will be sent if the webhook is configured with a secret. The HMAC hex digest is generated using the sha1 hash function and the secret as the HMAC key.\nHMAC signature\nâ\nBelow is an example with Java on how to create the signature:\npublic\nclass\nHmacSha1Signature\n{\nprivate\nstatic\nfinal\nString\nHMAC_SHA1_ALGORITHM\n=\n\"HmacSHA1\"\n;\nprivate\nstatic\nString\ntoHexString\n(\nbyte\n[\n]\nbytes\n)\n{\ntry\n(\nFormatter\nformatter\n=\nnew\nFormatter\n(\n)\n)\n{\nfor\n(\nbyte\nb\n:\nbytes\n)\n{\nformatter\n.\nformat\n(\n\"%02x\"\n,\nb\n)\n;\n}\nreturn\nformatter\n.\ntoString\n(\n)\n;\n}\n}\npublic\nstatic\nString\ncalculateRFC2104HMAC\n(\nString\ndata\n,\nString\nkey\n)\nthrows\nSignatureException\n,\nNoSuchAlgorithmException\n,\nInvalidKeyException\n{\nSecretKeySpec\nsigningKey\n=\nnew\nSecretKeySpec\n(\nkey\n.\ngetBytes\n(\n)\n,\nHMAC_SHA1_ALGORITHM\n)\n;\nMac\nmac\n=\nMac\n.\ngetInstance\n(\nHMAC_SHA1_ALGORITHM\n)\n;\nmac\n.\ninit\n(\nsigningKey\n)\n;\nreturn\ntoHexString\n(\nmac\n.\ndoFinal\n(\ndata\n.\ngetBytes\n(\n)\n)\n)\n;\n}\n}\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Webhooks",
        "content": ""
      },
      {
        "header": "Eventâ",
        "content": "The build events include: BUILD_STARED when build is staredBUILD_FINISHED when build is finishedBUILD_RECOMMENDED when build is recommendedBUILD_UNRECOMMENDED when build is un-recommended"
      },
      {
        "header": "Payloadâ",
        "content": "The payload data can be any JSON string. If it is empty, the build model will be delivered. Below is an example of build model: {\"configurationId\":123,// configuration id\"configurationPath\":\"root/PMEase/Quickbuild\",// configuration path\"id\":345,// build id\"version\":\"1.3.4\",\"status\":\"RUNNING\",// build status, can be: SUCCESSFUL, RECOMMENDED, FAILED, CANCELLED, TIMEOUT, RUNNING\"requester\":\"admin\",\"duration\":100,// in milliseconds\"beginDate\":\"20180728T03:51:58.573+0000\",// in ISO8601 format, yyyyMMdd'T'HH:mm:ss.SSSZ\"endDate\":\"20180728T03:51:58.573+0000\",// in ISO8601 format, yyyyMMdd'T'HH:mm:ss.SSSZ}"
      },
      {
        "header": "Delivery headersâ",
        "content": "HTTP POST payloads that are delivered to your webhook's configured URL endpoint will contain several special headers: HeaderDescriptionX-QB-EventTypeName of the event type that triggered the delivery, can be: BUILD_STARTED, BUILD_FINISHEDX-QB-SignatuerThe HMAC hex digest of the response body. This header will be sent if the webhook is configured with a secret. The HMAC hex digest is generated using the sha1 hash function and the secret as the HMAC key."
      },
      {
        "header": "HMAC signatureâ",
        "content": "Below is an example with Java on how to create the signature: publicclassHmacSha1Signature{privatestaticfinalStringHMAC_SHA1_ALGORITHM=\"HmacSHA1\";privatestaticStringtoHexString(byte[]bytes){try(Formatterformatter=newFormatter()){for(byteb:bytes){formatter.format(\"%02x\",b);}returnformatter.toString();}}publicstaticStringcalculateRFC2104HMAC(Stringdata,Stringkey)throwsSignatureException,NoSuchAlgorithmException,InvalidKeyException{SecretKeySpecsigningKey=newSecretKeySpec(key.getBytes(),HMAC_SHA1_ALGORITHM);Macmac=Mac.getInstance(HMAC_SHA1_ALGORITHM);mac.init(signingKey);returntoHexString(mac.doFinal(data.getBytes()));}}"
      }
    ],
    "links": []
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/category/Develop+Plugins",
    "title": "Develop Plugins",
    "breadcrumb": [
      "",
      "Developer's Guide"
    ],
    "full_text": "ðï¸\nPlugin Tutorials\n6 items\nðï¸\nPlugin Examples\n5 items\nðï¸\nDevelopment References\n2 items",
    "sections": [
      {
        "header": "ðï¸ Plugin Tutorials",
        "content": "6 items"
      },
      {
        "header": "ðï¸ Plugin Examples",
        "content": "5 items"
      },
      {
        "header": "ðï¸ Development References",
        "content": "2 items"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/category/Plugin+Tutorials",
      "https://wiki.pmease.com/display/QB14/category/Plugin+Examples",
      "https://wiki.pmease.com/display/QB14/category/Development+References",
      "https://wiki.pmease.com/display/QB14/category/RESTful+API",
      "https://wiki.pmease.com/display/QB14/RESTful+API++JSON+Edition+",
      "https://wiki.pmease.com/display/QB14/category/Plugin+Tutorials",
      "https://wiki.pmease.com/display/QB14/category/Plugin+Examples",
      "https://wiki.pmease.com/display/QB14/category/Development+References",
      "https://wiki.pmease.com/display/QB14/category/Plugin+Tutorials"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/category/RESTful+API",
    "title": "RESTful API",
    "breadcrumb": [
      "",
      "Developer's Guide"
    ],
    "full_text": "ðï¸\nAvailable Clients\nPython\nðï¸\nGet API Version\nVersion of the RESTful API can be retrieved by visiting below url:\nðï¸\nInteract with Audits\nThis API is added since QuickBuild 6.0.6.\nðï¸\nInteract with Configurations\nGet child configurations of specified configuration\nðï¸\nInteract with Builds\nAccess build by build id\nðï¸\nInteract with Latest Builds\nThis API is provided for the purpose of accessing latest build information of one or more configurations efficiently.\nðï¸\nInteract with Build Requests\nBuild request object can be used to request new build or cancel running build.\nðï¸\nTrigger Build via GET Request\nBuild can be triggered by posting build request as described in page Interact with Build Requests. Sometimes it is useful to trigger build via GET request, and here is how:\nðï¸\nInteract with Users\nGet all users in the system\nðï¸\nInteract with Groups\nGet all groups in the system\nðï¸\nInteract with Group Memberships\nGet all memberships in the system\nðï¸\nInteract with Dashboards\nGet all dashboards in the system\nðï¸\nInteract with Group Share\nGroup share is the object used to control dashboard sharing with groups\nðï¸\nInteract with User Share\nUser share is the object used to control dashboard sharing with users\nðï¸\nInteract with Cloud Profiles\nGet all cloud profiles in the system\nðï¸\nInteract with Configuration Authorizations\nGet all authorizations in the system\nðï¸\nInteract with Resources\nGet all resources in the system\nðï¸\nInteract with Agent Tokens\nBy operating tokens, one can authorize/unauthorize agents, or access agent details including token value and latest usage information.\nðï¸\nGet System Attributes of Grid Node\nSystem attributes of grid node can be fetched via RESTful call.\nðï¸\nGet and Set User Attributes of Grid Node\nUser attributes of grid node can be fetched/modified via RESTful API.\nðï¸\nInteract with Reports\nFor those reports supported by QuickBuild, you can retrieve the report data via RESTful APIs. The supported reports included:\nðï¸\nInteract with Changes\nSince QuickBuild 4.0, you can retrieve changes via RESTful APIs. The base URI for changes RESTful APIs is:\nðï¸\nInteract with Issues\nSince QuickBuild 4.0, you can retrieve issues via RESTful APIs. The base URI for changes RESTful APIs is:\nðï¸\nQuery Build Notifications\nSyntax\nðï¸\nQuery Grid Measurements\nGrid measurements can be fetched from REST API.\nðï¸\nAccess Information of Published Files\nSyntax\nðï¸\nInteract with Build Agents\nGet list of active build agents\nðï¸\nBackup Database\nQuickBuild database backup can be taken via RESTful call.\nðï¸\nPause System\nQuickBuild can be paused to prevent builds from running via RESTful call.\nðï¸\nResume System\nQuickBuild can be resumed to allow builds from running via RESTful call.\nðï¸\nCheck System Pause Information\nGet system pause information including pause reason.\nðï¸\nRetrieve Object Identifier\nMost of QuickBuild RESTful API relies on identifier of the object, which can be retrieved with the id service explained here.",
    "sections": [
      {
        "header": "ðï¸ Available Clients",
        "content": "Python"
      },
      {
        "header": "ðï¸ Get API Version",
        "content": "Version of the RESTful API can be retrieved by visiting below url:"
      },
      {
        "header": "ðï¸ Interact with Audits",
        "content": "This API is added since QuickBuild 6.0.6."
      },
      {
        "header": "ðï¸ Interact with Configurations",
        "content": "Get child configurations of specified configuration"
      },
      {
        "header": "ðï¸ Interact with Builds",
        "content": "Access build by build id"
      },
      {
        "header": "ðï¸ Interact with Latest Builds",
        "content": "This API is provided for the purpose of accessing latest build information of one or more configurations efficiently."
      },
      {
        "header": "ðï¸ Interact with Build Requests",
        "content": "Build request object can be used to request new build or cancel running build."
      },
      {
        "header": "ðï¸ Trigger Build via GET Request",
        "content": "Build can be triggered by posting build request as described in page Interact with Build Requests. Sometimes it is useful to trigger build via GET request, and here is how:"
      },
      {
        "header": "ðï¸ Interact with Users",
        "content": "Get all users in the system"
      },
      {
        "header": "ðï¸ Interact with Groups",
        "content": "Get all groups in the system"
      },
      {
        "header": "ðï¸ Interact with Group Memberships",
        "content": "Get all memberships in the system"
      },
      {
        "header": "ðï¸ Interact with Dashboards",
        "content": "Get all dashboards in the system"
      },
      {
        "header": "ðï¸ Interact with Group Share",
        "content": "Group share is the object used to control dashboard sharing with groups"
      },
      {
        "header": "ðï¸ Interact with User Share",
        "content": "User share is the object used to control dashboard sharing with users"
      },
      {
        "header": "ðï¸ Interact with Cloud Profiles",
        "content": "Get all cloud profiles in the system"
      },
      {
        "header": "ðï¸ Interact with Configuration Authorizations",
        "content": "Get all authorizations in the system"
      },
      {
        "header": "ðï¸ Interact with Resources",
        "content": "Get all resources in the system"
      },
      {
        "header": "ðï¸ Interact with Agent Tokens",
        "content": "By operating tokens, one can authorize/unauthorize agents, or access agent details including token value and latest usage information."
      },
      {
        "header": "ðï¸ Get System Attributes of Grid Node",
        "content": "System attributes of grid node can be fetched via RESTful call."
      },
      {
        "header": "ðï¸ Get and Set User Attributes of Grid Node",
        "content": "User attributes of grid node can be fetched/modified via RESTful API."
      },
      {
        "header": "ðï¸ Interact with Reports",
        "content": "For those reports supported by QuickBuild, you can retrieve the report data via RESTful APIs. The supported reports included:"
      },
      {
        "header": "ðï¸ Interact with Changes",
        "content": "Since QuickBuild 4.0, you can retrieve changes via RESTful APIs. The base URI for changes RESTful APIs is:"
      },
      {
        "header": "ðï¸ Interact with Issues",
        "content": "Since QuickBuild 4.0, you can retrieve issues via RESTful APIs. The base URI for changes RESTful APIs is:"
      },
      {
        "header": "ðï¸ Query Build Notifications",
        "content": "Syntax"
      },
      {
        "header": "ðï¸ Query Grid Measurements",
        "content": "Grid measurements can be fetched from REST API."
      },
      {
        "header": "ðï¸ Access Information of Published Files",
        "content": "Syntax"
      },
      {
        "header": "ðï¸ Interact with Build Agents",
        "content": "Get list of active build agents"
      },
      {
        "header": "ðï¸ Backup Database",
        "content": "QuickBuild database backup can be taken via RESTful call."
      },
      {
        "header": "ðï¸ Pause System",
        "content": "QuickBuild can be paused to prevent builds from running via RESTful call."
      },
      {
        "header": "ðï¸ Resume System",
        "content": "QuickBuild can be resumed to allow builds from running via RESTful call."
      },
      {
        "header": "ðï¸ Check System Pause Information",
        "content": "Get system pause information including pause reason."
      },
      {
        "header": "ðï¸ Retrieve Object Identifier",
        "content": "Most of QuickBuild RESTful API relies on identifier of the object, which can be retrieved with the id service explained here."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Available+Clients",
      "https://wiki.pmease.com/display/QB14/Get+API+Version",
      "https://wiki.pmease.com/display/QB14/Interact+with+Audits",
      "https://wiki.pmease.com/display/QB14/Interact+with+Configurations",
      "https://wiki.pmease.com/display/QB14/Interact+with+Builds",
      "https://wiki.pmease.com/display/QB14/Interact+with+Latest+Builds",
      "https://wiki.pmease.com/display/QB14/Interact+with+Build+Requests",
      "https://wiki.pmease.com/display/QB14/Trigger+Build+via+GET+Request",
      "https://wiki.pmease.com/display/QB14/Interact+with+Users",
      "https://wiki.pmease.com/display/QB14/Interact+with+Groups",
      "https://wiki.pmease.com/display/QB14/Interact+with+Group+Memberships",
      "https://wiki.pmease.com/display/QB14/Interact+with+Dashboards",
      "https://wiki.pmease.com/display/QB14/Interact+with+Group+Share",
      "https://wiki.pmease.com/display/QB14/Interact+with+User+Share",
      "https://wiki.pmease.com/display/QB14/Interact+with+Cloud+Profiles",
      "https://wiki.pmease.com/display/QB14/Interact+with+Configuration+Authorizations",
      "https://wiki.pmease.com/display/QB14/Interact+with+Resources",
      "https://wiki.pmease.com/display/QB14/Interact+with+Agent+Tokens",
      "https://wiki.pmease.com/display/QB14/Get+System+Attributes+of+Grid+Node",
      "https://wiki.pmease.com/display/QB14/Get+and+Set+User+Attributes+of+Grid+Node",
      "https://wiki.pmease.com/display/QB14/Interact+with+Reports",
      "https://wiki.pmease.com/display/QB14/Interact+with+Changes",
      "https://wiki.pmease.com/display/QB14/Interact+with+Issues",
      "https://wiki.pmease.com/display/QB14/Query+Build+Notifications",
      "https://wiki.pmease.com/display/QB14/Query+Grid+Measurements",
      "https://wiki.pmease.com/display/QB14/Access+Information+of+Published+Files",
      "https://wiki.pmease.com/display/QB14/Interact+with+Build+Agents",
      "https://wiki.pmease.com/display/QB14/Backup+Database",
      "https://wiki.pmease.com/display/QB14/Pause+System",
      "https://wiki.pmease.com/display/QB14/Resume+System",
      "https://wiki.pmease.com/display/QB14/Check+System+Pause+Information",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/RESTful+API++JSON+Edition+",
      "https://wiki.pmease.com/display/QB14/Available+Clients",
      "https://wiki.pmease.com/display/QB14/Get+API+Version",
      "https://wiki.pmease.com/display/QB14/Interact+with+Audits",
      "https://wiki.pmease.com/display/QB14/Interact+with+Configurations",
      "https://wiki.pmease.com/display/QB14/Interact+with+Builds",
      "https://wiki.pmease.com/display/QB14/Interact+with+Latest+Builds",
      "https://wiki.pmease.com/display/QB14/Interact+with+Build+Requests",
      "https://wiki.pmease.com/display/QB14/Trigger+Build+via+GET+Request",
      "https://wiki.pmease.com/display/QB14/Interact+with+Users",
      "https://wiki.pmease.com/display/QB14/Interact+with+Groups",
      "https://wiki.pmease.com/display/QB14/Interact+with+Group+Memberships",
      "https://wiki.pmease.com/display/QB14/Interact+with+Dashboards",
      "https://wiki.pmease.com/display/QB14/Interact+with+Group+Share",
      "https://wiki.pmease.com/display/QB14/Interact+with+User+Share",
      "https://wiki.pmease.com/display/QB14/Interact+with+Cloud+Profiles",
      "https://wiki.pmease.com/display/QB14/Interact+with+Configuration+Authorizations",
      "https://wiki.pmease.com/display/QB14/Interact+with+Resources",
      "https://wiki.pmease.com/display/QB14/Interact+with+Agent+Tokens",
      "https://wiki.pmease.com/display/QB14/Get+System+Attributes+of+Grid+Node",
      "https://wiki.pmease.com/display/QB14/Get+and+Set+User+Attributes+of+Grid+Node",
      "https://wiki.pmease.com/display/QB14/Interact+with+Reports",
      "https://wiki.pmease.com/display/QB14/Interact+with+Changes",
      "https://wiki.pmease.com/display/QB14/Interact+with+Issues",
      "https://wiki.pmease.com/display/QB14/Query+Build+Notifications",
      "https://wiki.pmease.com/display/QB14/Query+Grid+Measurements",
      "https://wiki.pmease.com/display/QB14/Access+Information+of+Published+Files",
      "https://wiki.pmease.com/display/QB14/Interact+with+Build+Agents",
      "https://wiki.pmease.com/display/QB14/Backup+Database",
      "https://wiki.pmease.com/display/QB14/Pause+System",
      "https://wiki.pmease.com/display/QB14/Resume+System",
      "https://wiki.pmease.com/display/QB14/Check+System+Pause+Information",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Bean+Editor",
      "https://wiki.pmease.com/display/QB14/Available+Clients"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/RESTful+API++JSON+Edition+",
    "title": "RESTful API (JSON Edition)",
    "breadcrumb": [
      "",
      "Developer's Guide"
    ],
    "full_text": "Developer's Guide\nRESTful API (JSON Edition)\nVersion: QB14\nRESTful API (JSON Edition)\nStarting from QuickBuild 10, A JSON based RESTful api is supported. It works exactly the same as the\ntraditional XML based api\n, except that one has to specify http header\nAccept: application/json\nwhen retrieving json content from server, and specify http header\nContent-Type: application/json\nwhen posting json content back to server.\nFor instance, to get JSON representation of a configuration, you may refer to section\nAccess configuration by id\nof page\ninteract with configurations\n, and modify the demonstration command as below:\ncurl\n-\nu admin\n:\nadmin\n-\nH\n\"Accept: application/json\"\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nconfigurations\n/\n1\nOr if you want to update a configuration, just refer to section\nUpdate configuration\nof the same page, and modify the demonstration command like below:\ncurl\n-\nX\nPOST\n-\nu admin\n:\nadmin\n-\nH\n\"Content-Type: application/json\"\n--\ndata\n-\nbinary\n\"@tempfile.json\"\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nconfigurations\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "RESTful API (JSON Edition)",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/RESTful+API",
      "https://wiki.pmease.com/display/QB14/Interact+with+Configurations",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Build+Against+Specific+Gerrit+Change",
    "title": "Build Against Specific Gerrit Change",
    "breadcrumb": [
      "",
      "Build Setup Tutorials"
    ],
    "full_text": "Build Setup Tutorials\nBuild Against Specific Gerrit Change\nVersion: QB14\nOn this page\nBuild Against Specific Gerrit Change\nSituation\nâ\nSometimes it is desirable to run build against specific Gerrit change.\nResolution (since 6.0.25)\nâ\nDefine a variable say \"change\", with prompt setting set to\nprompt as selection box\n, with below choice:\n$\n{\ngroovy\n:\n// assume your Gerrit repository defined at QuickBuild side is named \"gerrit\"\ndef repo\n=\nrepositories\n.\nget\n(\n\"gerrit\"\n)\n;\ndef choices\n=\n\"\"\n;\nfor\n(\neach in repo\n.\ngetOpenChanges\n(\n)\n)\n{\nchoices\n+=\neach\n.\ncustomData\n.\nchangeNo\n+\n\": \"\n+\neach\n.\ncustomData\n.\nsubject\n+\n\",\"\n;\n\\\n}\nreturn\nchoices\n;\n}\nThis setting will prompt user with a list of Gerrit open changes for selection.\nSet up Gerrit repository at QuickBuild side and configure field\nchange numbers\nas below:\n$\n{\ngroovy\n:\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nutil\n.\nStringUtils\n;\ndef change\n=\nvars\n.\ngetValue\n(\n\"change\"\n)\n;\nif\n(\nchange\n!=\nnull\n)\nreturn\nStringUtils\n.\nsubstringBefore\n(\nchange\n,\n\":\"\n)\n;\nelse\nreturn\n\"\"\n;\n}\nThis tells QB to build against selected change in above step.\nMake sure option \"Queue Changed Branches Only\" in advanced configuration setting is set to\nno\n, as otherwise, QB will not run build even if change number is specified if a build has already been fired for a change.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Build Against Specific Gerrit Change",
        "content": ""
      },
      {
        "header": "Situationâ",
        "content": "Sometimes it is desirable to run build against specific Gerrit change."
      },
      {
        "header": "Resolution (since 6.0.25)â",
        "content": "Define a variable say \"change\", with prompt setting set toprompt as selection box, with below choice:${groovy:// assume your Gerrit repository defined at QuickBuild side is named \"gerrit\"def repo=repositories.get(\"gerrit\");def choices=\"\";for(each in repo.getOpenChanges()){choices+=each.customData.changeNo+\": \"+each.customData.subject+\",\";\\}returnchoices;}This setting will prompt user with a list of Gerrit open changes for selection. Set up Gerrit repository at QuickBuild side and configure fieldchange numbersas below:${groovy:importcom.pmease.quickbuild.util.StringUtils;def change=vars.getValue(\"change\");if(change!=null)returnStringUtils.substringBefore(change,\":\");elsereturn\"\";}This tells QB to build against selected change in above step.Make sure option \"Queue Changed Branches Only\" in advanced configuration setting is set tono, as otherwise, QB will not run build even if change number is specified if a build has already been fired for a change."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Set+up+Your+First+Build",
      "https://wiki.pmease.com/display/QB14/category/Control+Build+Versions",
      "https://wiki.pmease.com/display/QB14/Build+Against+Specified+Tag",
      "https://wiki.pmease.com/display/QB14/Re-run+Build+Using+Same+SCM+Revision",
      "https://wiki.pmease.com/display/QB14/category/Inherit+and+Override",
      "https://wiki.pmease.com/display/QB14/Chained+Build+Options",
      "https://wiki.pmease.com/display/QB14/category/Distributed+Builds",
      "https://wiki.pmease.com/display/QB14/category/Resource+Management",
      "https://wiki.pmease.com/display/QB14/category/Build+Dependencies",
      "https://wiki.pmease.com/display/QB14/Clean+and+Incremental+Build",
      "https://wiki.pmease.com/display/QB14/Complicated+Build+Options",
      "https://wiki.pmease.com/display/QB14/Complicated+Build+Cleanup+Strategy",
      "https://wiki.pmease.com/display/QB14/category/Promote+Builds",
      "https://wiki.pmease.com/display/QB14/Set+up+Build+Pipeline",
      "https://wiki.pmease.com/display/QB14/category/LDAP+Authentication",
      "https://wiki.pmease.com/display/QB14/category/Single+Sign-On",
      "https://wiki.pmease.com/display/QB14/Trigger+Builds",
      "https://wiki.pmease.com/display/QB14/Publish+Reports",
      "https://wiki.pmease.com/display/QB14/JIRA+Integration",
      "https://wiki.pmease.com/display/QB14/Reports+Aggregation",
      "https://wiki.pmease.com/display/QB14/category/Launch+Build+Agent+On+Demand",
      "https://wiki.pmease.com/display/QB14/Set+up+Your+First+Build"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Set+up+Your+First+Build",
    "title": "Set up Your First Build",
    "breadcrumb": [
      "",
      "Build Setup Tutorials"
    ],
    "full_text": "Build Setup Tutorials\nSet up Your First Build\nVersion: QB14\nOn this page\nSet up Your First Build\nSituation\nâ\nSet up build for a project to:\nCheck out source code from SCM.\nBuild and run unit tests.\nPublish generated artifacts, and test reports.\nLabel SCM using the build version if the build is successful.\nIf failed, notify all commit users.\nDemonstration\nâ\nVisit the\ndemo project\n, and hit the run button to generate the new build. After build finishes, you will see published artifacts as well as junit test reports.\nResolution\nâ\nDefine next build version at\ngeneral setting of the demo project\n.\nSwitch to\nnotification setting of the demo project\n. A notification is defined with receivers set as\n<committers since previous build>\nand notification condition set as\nif build is failed\n.\nSwitch to\nrepository definition of the demo project\n. A repository is defined according to SCM setting of the project.\nSwitch to\nstep definition of the demo project\n. A sequential composition step is defined as the master step, and below steps are included in the sequential step:\nA checkout step to check out from the repository defined in step 3. The source code will be retrieved into workspace directory of the project as indicated by\ndestination path\nproperty of the repository.\nA Maven build step to run package goal. The\nbuild properties\nis defined like below:\ncomponent\n.\nversion\n=\n$\n{\nbuild\n.\nversion\n}\nWith this setting, Maven property\ncomponent.version\nwill be defined as version of current build, and this property is used as project version in pom.xml.\nA publish artifacts step to publish generated jars and release notes from workspace of the configuration. Reviewing the workspace tab will be helpful when define this step.\nA publish JUnit reports step to publish JUnit xml reports generated by the build. Reviewing the workspace tab will be helpful when define this step.\nA label step to tag SCM using the build version.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Set up Your First Build",
        "content": ""
      },
      {
        "header": "Situationâ",
        "content": "Set up build for a project to: Check out source code from SCM.Build and run unit tests.Publish generated artifacts, and test reports.Label SCM using the build version if the build is successful.If failed, notify all commit users."
      },
      {
        "header": "Demonstrationâ",
        "content": "Visit thedemo project, and hit the run button to generate the new build. After build finishes, you will see published artifacts as well as junit test reports."
      },
      {
        "header": "Resolutionâ",
        "content": "Define next build version atgeneral setting of the demo project.Switch tonotification setting of the demo project. A notification is defined with receivers set as<committers since previous build>and notification condition set asif build is failed.Switch torepository definition of the demo project. A repository is defined according to SCM setting of the project.Switch tostep definition of the demo project. A sequential composition step is defined as the master step, and below steps are included in the sequential step:A checkout step to check out from the repository defined in step 3. The source code will be retrieved into workspace directory of the project as indicated bydestination pathproperty of the repository.A Maven build step to run package goal. Thebuild propertiesis defined like below:component.version=${build.version}With this setting, Maven propertycomponent.versionwill be defined as version of current build, and this property is used as project version in pom.xml.A publish artifacts step to publish generated jars and release notes from workspace of the configuration. Reviewing the workspace tab will be helpful when define this step.A publish JUnit reports step to publish JUnit xml reports generated by the build. Reviewing the workspace tab will be helpful when define this step.A label step to tag SCM using the build version."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/category/Control+Build+Versions",
      "https://wiki.pmease.com/display/QB14/Build+Against+Specified+Tag",
      "https://wiki.pmease.com/display/QB14/Re-run+Build+Using+Same+SCM+Revision",
      "https://wiki.pmease.com/display/QB14/category/Inherit+and+Override",
      "https://wiki.pmease.com/display/QB14/Chained+Build+Options",
      "https://wiki.pmease.com/display/QB14/category/Distributed+Builds",
      "https://wiki.pmease.com/display/QB14/category/Resource+Management",
      "https://wiki.pmease.com/display/QB14/category/Build+Dependencies",
      "https://wiki.pmease.com/display/QB14/Clean+and+Incremental+Build",
      "https://wiki.pmease.com/display/QB14/Complicated+Build+Options",
      "https://wiki.pmease.com/display/QB14/Complicated+Build+Cleanup+Strategy",
      "https://wiki.pmease.com/display/QB14/category/Promote+Builds",
      "https://wiki.pmease.com/display/QB14/Set+up+Build+Pipeline",
      "https://wiki.pmease.com/display/QB14/category/LDAP+Authentication",
      "https://wiki.pmease.com/display/QB14/category/Single+Sign-On",
      "https://wiki.pmease.com/display/QB14/Trigger+Builds",
      "https://wiki.pmease.com/display/QB14/Publish+Reports",
      "https://wiki.pmease.com/display/QB14/JIRA+Integration",
      "https://wiki.pmease.com/display/QB14/Reports+Aggregation",
      "https://wiki.pmease.com/display/QB14/category/Launch+Build+Agent+On+Demand",
      "https://wiki.pmease.com/display/QB14/category/Control+Build+Versions"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/category/Control+Build+Versions",
    "title": "Control Build Versions",
    "breadcrumb": [
      "",
      "Build Setup Tutorials"
    ],
    "full_text": "ðï¸\nUse Version Stored in Maven POM\nSituation\nðï¸\nRead Version from File\nSituation\nðï¸\nControl Release Candidate and Release Version\nSituation\nðï¸\nInclude SCM Revision in Build Version\nSituation\nðï¸\nPrompt for Build Version when Manually Triggered\nSituation\nðï¸\nUse Same Version When Promote Builds\nSituation",
    "sections": [
      {
        "header": "ðï¸ Use Version Stored in Maven POM",
        "content": "Situation"
      },
      {
        "header": "ðï¸ Read Version from File",
        "content": "Situation"
      },
      {
        "header": "ðï¸ Control Release Candidate and Release Version",
        "content": "Situation"
      },
      {
        "header": "ðï¸ Include SCM Revision in Build Version",
        "content": "Situation"
      },
      {
        "header": "ðï¸ Prompt for Build Version when Manually Triggered",
        "content": "Situation"
      },
      {
        "header": "ðï¸ Use Same Version When Promote Builds",
        "content": "Situation"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Use+Version+Stored+in+Maven+POM",
      "https://wiki.pmease.com/display/QB14/Read+Version+from+File",
      "https://wiki.pmease.com/display/QB14/Control+Release+Candidate+and+Release+Version",
      "https://wiki.pmease.com/display/QB14/Include+SCM+Revision+in+Build+Version",
      "https://wiki.pmease.com/display/QB14/Prompt+for+Build+Version+when+Manually+Triggered",
      "https://wiki.pmease.com/display/QB14/Use+Same+Version+When+Promote+Builds",
      "https://wiki.pmease.com/display/QB14/Build+Against+Specified+Tag",
      "https://wiki.pmease.com/display/QB14/Re-run+Build+Using+Same+SCM+Revision",
      "https://wiki.pmease.com/display/QB14/category/Inherit+and+Override",
      "https://wiki.pmease.com/display/QB14/Chained+Build+Options",
      "https://wiki.pmease.com/display/QB14/category/Distributed+Builds",
      "https://wiki.pmease.com/display/QB14/category/Resource+Management",
      "https://wiki.pmease.com/display/QB14/category/Build+Dependencies",
      "https://wiki.pmease.com/display/QB14/Clean+and+Incremental+Build",
      "https://wiki.pmease.com/display/QB14/Complicated+Build+Options",
      "https://wiki.pmease.com/display/QB14/Complicated+Build+Cleanup+Strategy",
      "https://wiki.pmease.com/display/QB14/category/Promote+Builds",
      "https://wiki.pmease.com/display/QB14/Set+up+Build+Pipeline",
      "https://wiki.pmease.com/display/QB14/category/LDAP+Authentication",
      "https://wiki.pmease.com/display/QB14/category/Single+Sign-On",
      "https://wiki.pmease.com/display/QB14/Trigger+Builds",
      "https://wiki.pmease.com/display/QB14/Publish+Reports",
      "https://wiki.pmease.com/display/QB14/JIRA+Integration",
      "https://wiki.pmease.com/display/QB14/Reports+Aggregation",
      "https://wiki.pmease.com/display/QB14/category/Launch+Build+Agent+On+Demand",
      "https://wiki.pmease.com/display/QB14/Use+Version+Stored+in+Maven+POM",
      "https://wiki.pmease.com/display/QB14/Read+Version+from+File",
      "https://wiki.pmease.com/display/QB14/Control+Release+Candidate+and+Release+Version",
      "https://wiki.pmease.com/display/QB14/Include+SCM+Revision+in+Build+Version",
      "https://wiki.pmease.com/display/QB14/Prompt+for+Build+Version+when+Manually+Triggered",
      "https://wiki.pmease.com/display/QB14/Use+Same+Version+When+Promote+Builds",
      "https://wiki.pmease.com/display/QB14/Use+Version+Stored+in+Maven+POM"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Build+Against+Specified+Tag",
    "title": "Build Against Specified Tag",
    "breadcrumb": [
      "",
      "Build Setup Tutorials"
    ],
    "full_text": "Build Setup Tutorials\nBuild Against Specified Tag\nVersion: QB14\nOn this page\nBuild Against Specified Tag\nSituation\nâ\nSometimes it is desirable to run build against an existing SCM tag.\nDemonstration\nâ\nVisit the\ndemo project\n, and hit the run button. Please wait patiently and then QuickBuild will present a list of available tags in project repository for user to select from. Select an arbitrary tag, click OK to run the build, and the build will be generated against specified tag.\nResolution\nâ\nSwitch to\nrepository setting of the demo project\n. The demo Subversion repository is defined with\nCommit or Tag to Build\nspecified as\n${vars.getValue(\"tag\")}\n. The\ntag\nvariable will be defined later to use the selected tag name.\nSwitch to\nvariable setting of the demo project\n. The variable\ntag\nis set to prompt as a selection box with choices defined as execution result of a groovy script listing available tags via \"git ls-remote\" command.\nSwitch to\nstep setting of the demo project\n. Necessary steps are defined here to checkout from the Subversion repository, run Maven build script, and then publish generated artifacts.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Build Against Specified Tag",
        "content": ""
      },
      {
        "header": "Situationâ",
        "content": "Sometimes it is desirable to run build against an existing SCM tag."
      },
      {
        "header": "Demonstrationâ",
        "content": "Visit thedemo project, and hit the run button. Please wait patiently and then QuickBuild will present a list of available tags in project repository for user to select from. Select an arbitrary tag, click OK to run the build, and the build will be generated against specified tag."
      },
      {
        "header": "Resolutionâ",
        "content": "Switch torepository setting of the demo project. The demo Subversion repository is defined withCommit or Tag to Buildspecified as${vars.getValue(\"tag\")}. Thetagvariable will be defined later to use the selected tag name.Switch tovariable setting of the demo project. The variabletagis set to prompt as a selection box with choices defined as execution result of a groovy script listing available tags via \"git ls-remote\" command.Switch tostep setting of the demo project. Necessary steps are defined here to checkout from the Subversion repository, run Maven build script, and then publish generated artifacts."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Re-run+Build+Using+Same+SCM+Revision",
      "https://wiki.pmease.com/display/QB14/category/Inherit+and+Override",
      "https://wiki.pmease.com/display/QB14/Chained+Build+Options",
      "https://wiki.pmease.com/display/QB14/category/Distributed+Builds",
      "https://wiki.pmease.com/display/QB14/category/Resource+Management",
      "https://wiki.pmease.com/display/QB14/category/Build+Dependencies",
      "https://wiki.pmease.com/display/QB14/Clean+and+Incremental+Build",
      "https://wiki.pmease.com/display/QB14/Complicated+Build+Options",
      "https://wiki.pmease.com/display/QB14/Complicated+Build+Cleanup+Strategy",
      "https://wiki.pmease.com/display/QB14/category/Promote+Builds",
      "https://wiki.pmease.com/display/QB14/Set+up+Build+Pipeline",
      "https://wiki.pmease.com/display/QB14/category/LDAP+Authentication",
      "https://wiki.pmease.com/display/QB14/category/Single+Sign-On",
      "https://wiki.pmease.com/display/QB14/Trigger+Builds",
      "https://wiki.pmease.com/display/QB14/Publish+Reports",
      "https://wiki.pmease.com/display/QB14/JIRA+Integration",
      "https://wiki.pmease.com/display/QB14/Reports+Aggregation",
      "https://wiki.pmease.com/display/QB14/category/Launch+Build+Agent+On+Demand",
      "https://wiki.pmease.com/display/QB14/Use+Same+Version+When+Promote+Builds",
      "https://wiki.pmease.com/display/QB14/Re-run+Build+Using+Same+SCM+Revision"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Re-run+Build+Using+Same+SCM+Revision",
    "title": "Re-run Build Using Same SCM Revision",
    "breadcrumb": [
      "",
      "Build Setup Tutorials"
    ],
    "full_text": "Build Setup Tutorials\nRe-run Build Using Same SCM Revision\nVersion: QB14\nOn this page\nRe-run Build Using Same SCM Revision\nSituation\nâ\nIt is sometimes desirable to re-produce an already generated build using same SCM revision. This can be useful for a number of reasons for instance when build artifacts get lost, or when you want to re-generate the build with new configuration definition.\nDemonstration\nâ\nVisit\nlatest build of the demo project\n, and hit the\nRebuild\nbutton to re-run this build. QuickBuild will generate a new build using same SCM revision as old build and will also make sure that newly generated build using same build version as old build.\nResolution\nâ\nDefine a\nrebuild\npromotion at\npromotion definitions of the demo project\n, with configuration specified as the demo configuration itself, which is\nDemo/Build Setup Tutorials/Build Rerun\n. Upon this, QuickBuild will generate a rerun button at build overview page of the configuration, and hitting this button will cause current build to be promoted to a new build in the same configuration. QuickBuild promotion guarantees that the new build will use the same SCM revision as old build.\nNow we continue to see how the new build uses the same version string as old build. Check\ngeneral setting of the demo project\n, the next build version is defined as:\n$\n{\ngroovy\n:\nif\n(\nvars\n.\ngetValue\n(\n\"version\"\n)\n!=\nnull\n)\nreturn\nvars\n.\ngetValue\n(\n\"version\"\n)\n;\nelse\nreturn\nvars\n.\ngetValue\n(\n\"major\"\n)\n+\n\".\"\n+\nvars\n.\ngetValue\n(\n\"minor\"\n)\n+\n\".\"\n+\nvars\n.\nget\n(\n\"patch\"\n)\n.\nincrease\n(\n)\n;\n}\nThis tells QuickBuild that version of new build should take value of variable\nversion\nif it is available; otherwise, it should calculate version string based on major, minor and patch variables defined in the configuration.\nCheck the\npromotion definition\nrebuild\nagain, and here the promotion is defined with a variable\nversion\ntaking value\n${build.version}\n. This tells QuickBuild to pass variable\nversion\nto build process using version string of old build as its value.\nWith above definition, the new build will use version of old build if it is a result of pressing the rebuild button; otherwise, it will construct its version using the default\nmajor.minor.patch\nformat.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Re-run Build Using Same SCM Revision",
        "content": ""
      },
      {
        "header": "Situationâ",
        "content": "It is sometimes desirable to re-produce an already generated build using same SCM revision. This can be useful for a number of reasons for instance when build artifacts get lost, or when you want to re-generate the build with new configuration definition."
      },
      {
        "header": "Demonstrationâ",
        "content": "Visitlatest build of the demo project, and hit theRebuildbutton to re-run this build. QuickBuild will generate a new build using same SCM revision as old build and will also make sure that newly generated build using same build version as old build."
      },
      {
        "header": "Resolutionâ",
        "content": "Define arebuildpromotion atpromotion definitions of the demo project, with configuration specified as the demo configuration itself, which isDemo/Build Setup Tutorials/Build Rerun. Upon this, QuickBuild will generate a rerun button at build overview page of the configuration, and hitting this button will cause current build to be promoted to a new build in the same configuration. QuickBuild promotion guarantees that the new build will use the same SCM revision as old build.Now we continue to see how the new build uses the same version string as old build. Checkgeneral setting of the demo project, the next build version is defined as:${groovy:if(vars.getValue(\"version\")!=null)returnvars.getValue(\"version\");elsereturnvars.getValue(\"major\")+\".\"+vars.getValue(\"minor\")+\".\"+vars.get(\"patch\").increase();}This tells QuickBuild that version of new build should take value of variableversionif it is available; otherwise, it should calculate version string based on major, minor and patch variables defined in the configuration.Check thepromotion definitionrebuildagain, and here the promotion is defined with a variableversiontaking value${build.version}. This tells QuickBuild to pass variableversionto build process using version string of old build as its value.With above definition, the new build will use version of old build if it is a result of pressing the rebuild button; otherwise, it will construct its version using the defaultmajor.minor.patchformat."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/category/Inherit+and+Override",
      "https://wiki.pmease.com/display/QB14/Chained+Build+Options",
      "https://wiki.pmease.com/display/QB14/category/Distributed+Builds",
      "https://wiki.pmease.com/display/QB14/category/Resource+Management",
      "https://wiki.pmease.com/display/QB14/category/Build+Dependencies",
      "https://wiki.pmease.com/display/QB14/Clean+and+Incremental+Build",
      "https://wiki.pmease.com/display/QB14/Complicated+Build+Options",
      "https://wiki.pmease.com/display/QB14/Complicated+Build+Cleanup+Strategy",
      "https://wiki.pmease.com/display/QB14/category/Promote+Builds",
      "https://wiki.pmease.com/display/QB14/Set+up+Build+Pipeline",
      "https://wiki.pmease.com/display/QB14/category/LDAP+Authentication",
      "https://wiki.pmease.com/display/QB14/category/Single+Sign-On",
      "https://wiki.pmease.com/display/QB14/Trigger+Builds",
      "https://wiki.pmease.com/display/QB14/Publish+Reports",
      "https://wiki.pmease.com/display/QB14/JIRA+Integration",
      "https://wiki.pmease.com/display/QB14/Reports+Aggregation",
      "https://wiki.pmease.com/display/QB14/category/Launch+Build+Agent+On+Demand",
      "https://wiki.pmease.com/display/QB14/category/Inherit+and+Override"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/category/Inherit+and+Override",
    "title": "Inherit and Override",
    "breadcrumb": [
      "",
      "Build Setup Tutorials"
    ],
    "full_text": "ðï¸\nSet up Builds for Multiple Branches\nSituation",
    "sections": [
      {
        "header": "ðï¸ Set up Builds for Multiple Branches",
        "content": "Situation"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Set+up+Builds+for+Multiple+Branches",
      "https://wiki.pmease.com/display/QB14/Chained+Build+Options",
      "https://wiki.pmease.com/display/QB14/category/Distributed+Builds",
      "https://wiki.pmease.com/display/QB14/category/Resource+Management",
      "https://wiki.pmease.com/display/QB14/category/Build+Dependencies",
      "https://wiki.pmease.com/display/QB14/Clean+and+Incremental+Build",
      "https://wiki.pmease.com/display/QB14/Complicated+Build+Options",
      "https://wiki.pmease.com/display/QB14/Complicated+Build+Cleanup+Strategy",
      "https://wiki.pmease.com/display/QB14/category/Promote+Builds",
      "https://wiki.pmease.com/display/QB14/Set+up+Build+Pipeline",
      "https://wiki.pmease.com/display/QB14/category/LDAP+Authentication",
      "https://wiki.pmease.com/display/QB14/category/Single+Sign-On",
      "https://wiki.pmease.com/display/QB14/Trigger+Builds",
      "https://wiki.pmease.com/display/QB14/Publish+Reports",
      "https://wiki.pmease.com/display/QB14/JIRA+Integration",
      "https://wiki.pmease.com/display/QB14/Reports+Aggregation",
      "https://wiki.pmease.com/display/QB14/category/Launch+Build+Agent+On+Demand",
      "https://wiki.pmease.com/display/QB14/Set+up+Builds+for+Multiple+Branches",
      "https://wiki.pmease.com/display/QB14/Set+up+Builds+for+Multiple+Branches"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Chained+Build+Options",
    "title": "Chained Build Options",
    "breadcrumb": [
      "",
      "Build Setup Tutorials"
    ],
    "full_text": "Build Setup Tutorials\nChained Build Options\nVersion: QB14\nOn this page\nChained Build Options\nSituation\nâ\nWhen prompt build options for a manually triggered build, it is often desirable to chain two or more selection boxes together so that available choices of latter selection box are calculated based on selected value of prior selection box.\nDemonstration\nâ\nSwitch to the\ndemo configuration\n, and hit the run button.\nThe build option page prompts user to select a directory and a file inside that directory.\nSelect a directory, and available choices of the file selection box will change to reflect contained files under that directory.\nRun the build, and check the\nbuild log\n. The selected directory name and file name will be printed there as a demonstration.\nResolution\nâ\nSwitch to\nvariables definition\nof the demo configuration.\nThe variable\ndir\nis defined to prompt as a selection box, with choices field defined as a groovy script returning all sub directory names under\n/home/pmease/skyagent\n.\nThe variable\nfile\nis defined to prompt as a selection box, with choices field defined as a groovy script returning all file names under the selected sub directory.\nCheck the\nsteps definition\n, a test step is added to print selected value of the directory and file.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Chained Build Options",
        "content": ""
      },
      {
        "header": "Situationâ",
        "content": "When prompt build options for a manually triggered build, it is often desirable to chain two or more selection boxes together so that available choices of latter selection box are calculated based on selected value of prior selection box."
      },
      {
        "header": "Demonstrationâ",
        "content": "Switch to thedemo configuration, and hit the run button.The build option page prompts user to select a directory and a file inside that directory.Select a directory, and available choices of the file selection box will change to reflect contained files under that directory.Run the build, and check thebuild log. The selected directory name and file name will be printed there as a demonstration."
      },
      {
        "header": "Resolutionâ",
        "content": "Switch tovariables definitionof the demo configuration.The variablediris defined to prompt as a selection box, with choices field defined as a groovy script returning all sub directory names under/home/pmease/skyagent.The variablefileis defined to prompt as a selection box, with choices field defined as a groovy script returning all file names under the selected sub directory.Check thesteps definition, a test step is added to print selected value of the directory and file."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/category/Distributed+Builds",
      "https://wiki.pmease.com/display/QB14/category/Resource+Management",
      "https://wiki.pmease.com/display/QB14/category/Build+Dependencies",
      "https://wiki.pmease.com/display/QB14/Clean+and+Incremental+Build",
      "https://wiki.pmease.com/display/QB14/Complicated+Build+Options",
      "https://wiki.pmease.com/display/QB14/Complicated+Build+Cleanup+Strategy",
      "https://wiki.pmease.com/display/QB14/category/Promote+Builds",
      "https://wiki.pmease.com/display/QB14/Set+up+Build+Pipeline",
      "https://wiki.pmease.com/display/QB14/category/LDAP+Authentication",
      "https://wiki.pmease.com/display/QB14/category/Single+Sign-On",
      "https://wiki.pmease.com/display/QB14/Trigger+Builds",
      "https://wiki.pmease.com/display/QB14/Publish+Reports",
      "https://wiki.pmease.com/display/QB14/JIRA+Integration",
      "https://wiki.pmease.com/display/QB14/Reports+Aggregation",
      "https://wiki.pmease.com/display/QB14/category/Launch+Build+Agent+On+Demand",
      "https://wiki.pmease.com/display/QB14/Set+up+Builds+for+Multiple+Branches",
      "https://wiki.pmease.com/display/QB14/category/Distributed+Builds"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/category/Distributed+Builds",
    "title": "Distributed Builds",
    "breadcrumb": [
      "",
      "Build Setup Tutorials"
    ],
    "full_text": "ðï¸\nBuild Multi-platform Projects\nScenario\nðï¸\nReduce Server Load\nScenario\nðï¸\nSpeed up Build Process\nScenario\nðï¸\nTest on All Applicable Agents\nSituation",
    "sections": [
      {
        "header": "ðï¸ Build Multi-platform Projects",
        "content": "Scenario"
      },
      {
        "header": "ðï¸ Reduce Server Load",
        "content": "Scenario"
      },
      {
        "header": "ðï¸ Speed up Build Process",
        "content": "Scenario"
      },
      {
        "header": "ðï¸ Test on All Applicable Agents",
        "content": "Situation"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Build+Multi-platform+Projects",
      "https://wiki.pmease.com/display/QB14/Reduce+Server+Load",
      "https://wiki.pmease.com/display/QB14/Speed+up+Build+Process",
      "https://wiki.pmease.com/display/QB14/Test+on+All+Applicable+Agents",
      "https://wiki.pmease.com/display/QB14/category/Resource+Management",
      "https://wiki.pmease.com/display/QB14/category/Build+Dependencies",
      "https://wiki.pmease.com/display/QB14/Clean+and+Incremental+Build",
      "https://wiki.pmease.com/display/QB14/Complicated+Build+Options",
      "https://wiki.pmease.com/display/QB14/Complicated+Build+Cleanup+Strategy",
      "https://wiki.pmease.com/display/QB14/category/Promote+Builds",
      "https://wiki.pmease.com/display/QB14/Set+up+Build+Pipeline",
      "https://wiki.pmease.com/display/QB14/category/LDAP+Authentication",
      "https://wiki.pmease.com/display/QB14/category/Single+Sign-On",
      "https://wiki.pmease.com/display/QB14/Trigger+Builds",
      "https://wiki.pmease.com/display/QB14/Publish+Reports",
      "https://wiki.pmease.com/display/QB14/JIRA+Integration",
      "https://wiki.pmease.com/display/QB14/Reports+Aggregation",
      "https://wiki.pmease.com/display/QB14/category/Launch+Build+Agent+On+Demand",
      "https://wiki.pmease.com/display/QB14/Build+Multi-platform+Projects",
      "https://wiki.pmease.com/display/QB14/Reduce+Server+Load",
      "https://wiki.pmease.com/display/QB14/Speed+up+Build+Process",
      "https://wiki.pmease.com/display/QB14/Test+on+All+Applicable+Agents",
      "https://wiki.pmease.com/display/QB14/Build+Multi-platform+Projects"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/category/Resource+Management",
    "title": "Resource Management",
    "breadcrumb": [
      "",
      "Build Setup Tutorials"
    ],
    "full_text": "ðï¸\nOne Build For One Agent\nSituation\nðï¸\nExclusive Deployment\nSituation",
    "sections": [
      {
        "header": "ðï¸ One Build For One Agent",
        "content": "Situation"
      },
      {
        "header": "ðï¸ Exclusive Deployment",
        "content": "Situation"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/One+Build+For+One+Agent",
      "https://wiki.pmease.com/display/QB14/Exclusive+Deployment",
      "https://wiki.pmease.com/display/QB14/category/Build+Dependencies",
      "https://wiki.pmease.com/display/QB14/Clean+and+Incremental+Build",
      "https://wiki.pmease.com/display/QB14/Complicated+Build+Options",
      "https://wiki.pmease.com/display/QB14/Complicated+Build+Cleanup+Strategy",
      "https://wiki.pmease.com/display/QB14/category/Promote+Builds",
      "https://wiki.pmease.com/display/QB14/Set+up+Build+Pipeline",
      "https://wiki.pmease.com/display/QB14/category/LDAP+Authentication",
      "https://wiki.pmease.com/display/QB14/category/Single+Sign-On",
      "https://wiki.pmease.com/display/QB14/Trigger+Builds",
      "https://wiki.pmease.com/display/QB14/Publish+Reports",
      "https://wiki.pmease.com/display/QB14/JIRA+Integration",
      "https://wiki.pmease.com/display/QB14/Reports+Aggregation",
      "https://wiki.pmease.com/display/QB14/category/Launch+Build+Agent+On+Demand",
      "https://wiki.pmease.com/display/QB14/One+Build+For+One+Agent",
      "https://wiki.pmease.com/display/QB14/Exclusive+Deployment",
      "https://wiki.pmease.com/display/QB14/Test+on+All+Applicable+Agents",
      "https://wiki.pmease.com/display/QB14/One+Build+For+One+Agent"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/category/Build+Dependencies",
    "title": "Build Dependencies",
    "breadcrumb": [
      "",
      "Build Setup Tutorials"
    ],
    "full_text": "ðï¸\nSet up Static Dependency\nSituation\nðï¸\nSet up Passive Dependency\nSituation\nðï¸\nSet up Active Dependency\nSituation\nðï¸\nAuto-Trigger Dependent Maven Builds\nSituation",
    "sections": [
      {
        "header": "ðï¸ Set up Static Dependency",
        "content": "Situation"
      },
      {
        "header": "ðï¸ Set up Passive Dependency",
        "content": "Situation"
      },
      {
        "header": "ðï¸ Set up Active Dependency",
        "content": "Situation"
      },
      {
        "header": "ðï¸ Auto-Trigger Dependent Maven Builds",
        "content": "Situation"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Set+up+Static+Dependency",
      "https://wiki.pmease.com/display/QB14/Set+up+Passive+Dependency",
      "https://wiki.pmease.com/display/QB14/Set+up+Active+Dependency",
      "https://wiki.pmease.com/display/QB14/Auto-Trigger+Dependent+Maven+Builds",
      "https://wiki.pmease.com/display/QB14/Clean+and+Incremental+Build",
      "https://wiki.pmease.com/display/QB14/Complicated+Build+Options",
      "https://wiki.pmease.com/display/QB14/Complicated+Build+Cleanup+Strategy",
      "https://wiki.pmease.com/display/QB14/category/Promote+Builds",
      "https://wiki.pmease.com/display/QB14/Set+up+Build+Pipeline",
      "https://wiki.pmease.com/display/QB14/category/LDAP+Authentication",
      "https://wiki.pmease.com/display/QB14/category/Single+Sign-On",
      "https://wiki.pmease.com/display/QB14/Trigger+Builds",
      "https://wiki.pmease.com/display/QB14/Publish+Reports",
      "https://wiki.pmease.com/display/QB14/JIRA+Integration",
      "https://wiki.pmease.com/display/QB14/Reports+Aggregation",
      "https://wiki.pmease.com/display/QB14/category/Launch+Build+Agent+On+Demand",
      "https://wiki.pmease.com/display/QB14/Set+up+Static+Dependency",
      "https://wiki.pmease.com/display/QB14/Set+up+Passive+Dependency",
      "https://wiki.pmease.com/display/QB14/Set+up+Active+Dependency",
      "https://wiki.pmease.com/display/QB14/Auto-Trigger+Dependent+Maven+Builds",
      "https://wiki.pmease.com/display/QB14/Exclusive+Deployment",
      "https://wiki.pmease.com/display/QB14/Set+up+Static+Dependency"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Clean+and+Incremental+Build",
    "title": "Clean and Incremental Build",
    "breadcrumb": [
      "",
      "Build Setup Tutorials"
    ],
    "full_text": "Build Setup Tutorials\nClean and Incremental Build\nVersion: QB14\nOn this page\nClean and Incremental Build\nSituation\nâ\nFor scheduled builds, run them incrementally. However if it is manually triggered, user needs to control whether it is a clean build or an incremental build.\nDemonstration\nâ\nVisit the\ndemo project\n, click run button to trigger the build, and the build option screen will present a clean option. QuickBuild will clean up the workspace directory (and this means a clean build for this demo project) before running the build if this option is checked.\nResolution\nâ\nDefine a variable\nclean\nin\nvariable setting\nof the demo project, with prompt setting defined as a checkbox. The default value is set to\nfalse\nindicating all scheduled builds being incrementally. Note that variable name is arbitrary as long as the same name is referenced later.\nSwitch to\nstep setting\nof the demo project. The\npre-execute action\nof the master step is defined as below to clean the workspace if variable\nclean\nis set to\ntrue\n:\nif\n(\nvars\n.\nget\n(\n\"clean\"\n)\n.\nasBoolean\n(\n)\n)\nutil\n.\ncleanDir\n(\nconfiguration\n.\nworkspaceDir\n)\n;\nIf build is triggered by scheduler, default value of the variable will be used, which is\nfalse\n, and workspace directory will not cleaned. If triggered manually, the variable value will be either\ntrue\nor\nfalse\ndepending on whether or not the user has checked the\nclean\noption.\ninfo\nThis demo treats clean build as cleaning up the workspace directory before running the build. However, your clean build might have a different behavior, for example, cleaning up a sub directory under the workspace before running master step, or even deleting certain files before running certain steps. All of these logic can be customized using the\npre-execute action\nand\npost-execute action\nof various steps. You may even use multiple variables to control the clean behavior.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Clean and Incremental Build",
        "content": ""
      },
      {
        "header": "Situationâ",
        "content": "For scheduled builds, run them incrementally. However if it is manually triggered, user needs to control whether it is a clean build or an incremental build."
      },
      {
        "header": "Demonstrationâ",
        "content": "Visit thedemo project, click run button to trigger the build, and the build option screen will present a clean option. QuickBuild will clean up the workspace directory (and this means a clean build for this demo project) before running the build if this option is checked."
      },
      {
        "header": "Resolutionâ",
        "content": "Define a variablecleaninvariable settingof the demo project, with prompt setting defined as a checkbox. The default value is set tofalseindicating all scheduled builds being incrementally. Note that variable name is arbitrary as long as the same name is referenced later.Switch tostep settingof the demo project. Thepre-execute actionof the master step is defined as below to clean the workspace if variablecleanis set totrue:if(vars.get(\"clean\").asBoolean())util.cleanDir(configuration.workspaceDir);If build is triggered by scheduler, default value of the variable will be used, which isfalse, and workspace directory will not cleaned. If triggered manually, the variable value will be eithertrueorfalsedepending on whether or not the user has checked thecleanoption. infoThis demo treats clean build as cleaning up the workspace directory before running the build. However, your clean build might have a different behavior, for example, cleaning up a sub directory under the workspace before running master step, or even deleting certain files before running certain steps. All of these logic can be customized using thepre-execute actionandpost-execute actionof various steps. You may even use multiple variables to control the clean behavior."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Complicated+Build+Options",
      "https://wiki.pmease.com/display/QB14/Complicated+Build+Cleanup+Strategy",
      "https://wiki.pmease.com/display/QB14/category/Promote+Builds",
      "https://wiki.pmease.com/display/QB14/Set+up+Build+Pipeline",
      "https://wiki.pmease.com/display/QB14/category/LDAP+Authentication",
      "https://wiki.pmease.com/display/QB14/category/Single+Sign-On",
      "https://wiki.pmease.com/display/QB14/Trigger+Builds",
      "https://wiki.pmease.com/display/QB14/Publish+Reports",
      "https://wiki.pmease.com/display/QB14/JIRA+Integration",
      "https://wiki.pmease.com/display/QB14/Reports+Aggregation",
      "https://wiki.pmease.com/display/QB14/category/Launch+Build+Agent+On+Demand",
      "https://wiki.pmease.com/display/QB14/Auto-Trigger+Dependent+Maven+Builds",
      "https://wiki.pmease.com/display/QB14/Complicated+Build+Options"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Complicated+Build+Options",
    "title": "Complicated Build Options",
    "breadcrumb": [
      "",
      "Build Setup Tutorials"
    ],
    "full_text": "Build Setup Tutorials\nComplicated Build Options\nVersion: QB14\nOn this page\nComplicated Build Options\nSituation\nâ\nSet up the configuration so that it can ask user for below settings when manually triggered:\nUser can select either\nSmoke Test Mode\nor\nAcceptance Test Mode\n.\nWhen\nSmoke Test Mode\nis selected, user can select\nComponent A\nand/or\nComponent B\nto test, and can select whether or not to run integration tests.\nWhen\nAcceptance Test Mode\nis selected, user can continue to select\nComponent C\nand/or\nComponent D\nto test.\nUser can optionally select which test suite to run.\nUser can optionally select which test case to run in the selected test suite.\nDemonstration\nâ\nOpen\nthis configuration\nand hit the run button.\nA build option screen will be presented with desired settings. Make some selection and hit the OK button. Please note that when a test suite is selected, all test cases belonging to that test suite will be displayed for choice.\nWait for some time for the build to finish. Check the\nstep status\nscreen, and you will find that the test step has been executed on the nodes you specified in the build option screen.\nOpen\nbuild log\nand check output of the test step. For demonstration purpose, the specified test setting and its options are printed in the log correctly.\nResolution\nâ\nCreate a custom plugin\nimplementing the PromptBeanProvider extension point to provider your own build option bean. You may start with the sample plugin\ncom.example.promptbean\nin directory\n<QuickBuild server install dir>/dev/plugin/samples\n, and modify various bean classes as necessary. Refer to\nBean Editor\non how to annotate your beans for editing purpose. This tutorial uses the sample plugin directly.\nStop QuickBuild, deploy your plugin to QuickBuild, and then start QuickBuild. Refer to\nPlugin Tutorials\non how to do this.\nDefine a variable with prompt setting set to\nprompt for bean input\n, and choose the bean you provided in your plugin. In this tutorial, we choosed the\nExample Prompt Bean\nas demonstrated\nhere\n.\nPlease note that we also specified default value of the bean by creating the bean object with groovy, assigning default values to its fields, and convert it to a string. This default bean will be used to populate the variable when the build is not manually triggered (ie. triggered via schedule).\nDefinition of the\ntest step\nretrieves the bean via the variable and traverses the object graph to print interesting information.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Complicated Build Options",
        "content": ""
      },
      {
        "header": "Situationâ",
        "content": "Set up the configuration so that it can ask user for below settings when manually triggered: User can select eitherSmoke Test ModeorAcceptance Test Mode.WhenSmoke Test Modeis selected, user can selectComponent Aand/orComponent Bto test, and can select whether or not to run integration tests.WhenAcceptance Test Modeis selected, user can continue to selectComponent Cand/orComponent Dto test.User can optionally select which test suite to run.User can optionally select which test case to run in the selected test suite."
      },
      {
        "header": "Demonstrationâ",
        "content": "Openthis configurationand hit the run button.A build option screen will be presented with desired settings. Make some selection and hit the OK button. Please note that when a test suite is selected, all test cases belonging to that test suite will be displayed for choice.Wait for some time for the build to finish. Check thestep statusscreen, and you will find that the test step has been executed on the nodes you specified in the build option screen.Openbuild logand check output of the test step. For demonstration purpose, the specified test setting and its options are printed in the log correctly."
      },
      {
        "header": "Resolutionâ",
        "content": "Create a custom pluginimplementing the PromptBeanProvider extension point to provider your own build option bean. You may start with the sample plugincom.example.promptbeanin directory<QuickBuild server install dir>/dev/plugin/samples, and modify various bean classes as necessary. Refer toBean Editoron how to annotate your beans for editing purpose. This tutorial uses the sample plugin directly.Stop QuickBuild, deploy your plugin to QuickBuild, and then start QuickBuild. Refer toPlugin Tutorialson how to do this.Define a variable with prompt setting set toprompt for bean input, and choose the bean you provided in your plugin. In this tutorial, we choosed theExample Prompt Beanas demonstratedhere.Please note that we also specified default value of the bean by creating the bean object with groovy, assigning default values to its fields, and convert it to a string. This default bean will be used to populate the variable when the build is not manually triggered (ie. triggered via schedule).Definition of thetest stepretrieves the bean via the variable and traverses the object graph to print interesting information."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Complicated+Build+Cleanup+Strategy",
      "https://wiki.pmease.com/display/QB14/category/Promote+Builds",
      "https://wiki.pmease.com/display/QB14/Set+up+Build+Pipeline",
      "https://wiki.pmease.com/display/QB14/category/LDAP+Authentication",
      "https://wiki.pmease.com/display/QB14/category/Single+Sign-On",
      "https://wiki.pmease.com/display/QB14/Trigger+Builds",
      "https://wiki.pmease.com/display/QB14/Publish+Reports",
      "https://wiki.pmease.com/display/QB14/JIRA+Integration",
      "https://wiki.pmease.com/display/QB14/Reports+Aggregation",
      "https://wiki.pmease.com/display/QB14/category/Launch+Build+Agent+On+Demand",
      "https://wiki.pmease.com/display/QB14/Plugin+Tutorials",
      "https://wiki.pmease.com/display/QB14/Bean+Editor",
      "https://wiki.pmease.com/display/QB14/Plugin+Tutorials",
      "https://wiki.pmease.com/display/QB14/Complicated+Build+Cleanup+Strategy"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Complicated+Build+Cleanup+Strategy",
    "title": "Complicated Build Cleanup Strategy",
    "breadcrumb": [
      "",
      "Build Setup Tutorials"
    ],
    "full_text": "Build Setup Tutorials\nComplicated Build Cleanup Strategy\nVersion: QB14\nOn this page\nComplicated Build Cleanup Strategy\nSituation\nâ\nQuickBuild ships with two build auto-cleanup strategies of a configuration:\nTo reserve builds by certain number of days.\nTo reserve certain number of builds.\nHowever sometimes this is not enough. For instance, you may want that recommended builds never get deleted automatically while other builds follow the normal auto-cleanup strategy. The solution is to define maintenance configuration running at descired schedule running customized script to do the cleanup.\nDemonstration\nâ\nVisit the\ndemo configuration\n, and hit the run button several times to generate more than five builds.\nMark eldest build of the\ndemo configuration\nas recommended if it is not.\nVisit the\ndemo cleanup configuration\n, and hit the run button to perform cleanup for the demo configuration. The cleanup is intended to preserve latest three builds, with recommended builds remaining intacted.\nAfter cleanup, check the\ndemo configuration\n, and you will find that all recommended builds are still there, but only latest three builds of other statuses are preserved.\nResolution\nâ\nSwitch to\nstep setting of the demo cleanup configuration\n. The master step is defined to execute a groovy script. The script loops over all builds of the demo configuration and delete all builds matching two conditions: not a recommended build and not the most recent three builds.\nThe demo cleanup configuration is also scheduled to run every night at 1:00AM to do the job automatically.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Complicated Build Cleanup Strategy",
        "content": ""
      },
      {
        "header": "Situationâ",
        "content": "QuickBuild ships with two build auto-cleanup strategies of a configuration: To reserve builds by certain number of days.To reserve certain number of builds. However sometimes this is not enough. For instance, you may want that recommended builds never get deleted automatically while other builds follow the normal auto-cleanup strategy. The solution is to define maintenance configuration running at descired schedule running customized script to do the cleanup."
      },
      {
        "header": "Demonstrationâ",
        "content": "Visit thedemo configuration, and hit the run button several times to generate more than five builds.Mark eldest build of thedemo configurationas recommended if it is not.Visit thedemo cleanup configuration, and hit the run button to perform cleanup for the demo configuration. The cleanup is intended to preserve latest three builds, with recommended builds remaining intacted.After cleanup, check thedemo configuration, and you will find that all recommended builds are still there, but only latest three builds of other statuses are preserved."
      },
      {
        "header": "Resolutionâ",
        "content": "Switch tostep setting of the demo cleanup configuration. The master step is defined to execute a groovy script. The script loops over all builds of the demo configuration and delete all builds matching two conditions: not a recommended build and not the most recent three builds.The demo cleanup configuration is also scheduled to run every night at 1:00AM to do the job automatically."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/category/Promote+Builds",
      "https://wiki.pmease.com/display/QB14/Set+up+Build+Pipeline",
      "https://wiki.pmease.com/display/QB14/category/LDAP+Authentication",
      "https://wiki.pmease.com/display/QB14/category/Single+Sign-On",
      "https://wiki.pmease.com/display/QB14/Trigger+Builds",
      "https://wiki.pmease.com/display/QB14/Publish+Reports",
      "https://wiki.pmease.com/display/QB14/JIRA+Integration",
      "https://wiki.pmease.com/display/QB14/Reports+Aggregation",
      "https://wiki.pmease.com/display/QB14/category/Launch+Build+Agent+On+Demand",
      "https://wiki.pmease.com/display/QB14/category/Promote+Builds"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/category/Promote+Builds",
    "title": "Promote Builds",
    "breadcrumb": [
      "",
      "Build Setup Tutorials"
    ],
    "full_text": "ðï¸\nGenerate Release Build from the Source Used by QA Build\nScenario\nðï¸\nGenerate Release Build using Artifacts of QA Build\nScenario",
    "sections": [
      {
        "header": "ðï¸ Generate Release Build from the Source Used by QA Build",
        "content": "Scenario"
      },
      {
        "header": "ðï¸ Generate Release Build using Artifacts of QA Build",
        "content": "Scenario"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Generate+Release+Build+from+the+Source+Used+by+QA+Build",
      "https://wiki.pmease.com/display/QB14/Generate+Release+Build+using+Artifacts+of+QA+Build",
      "https://wiki.pmease.com/display/QB14/Set+up+Build+Pipeline",
      "https://wiki.pmease.com/display/QB14/category/LDAP+Authentication",
      "https://wiki.pmease.com/display/QB14/category/Single+Sign-On",
      "https://wiki.pmease.com/display/QB14/Trigger+Builds",
      "https://wiki.pmease.com/display/QB14/Publish+Reports",
      "https://wiki.pmease.com/display/QB14/JIRA+Integration",
      "https://wiki.pmease.com/display/QB14/Reports+Aggregation",
      "https://wiki.pmease.com/display/QB14/category/Launch+Build+Agent+On+Demand",
      "https://wiki.pmease.com/display/QB14/Generate+Release+Build+from+the+Source+Used+by+QA+Build",
      "https://wiki.pmease.com/display/QB14/Generate+Release+Build+using+Artifacts+of+QA+Build",
      "https://wiki.pmease.com/display/QB14/Generate+Release+Build+from+the+Source+Used+by+QA+Build"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Set+up+Build+Pipeline",
    "title": "Set up Build Pipeline",
    "breadcrumb": [
      "",
      "Build Setup Tutorials"
    ],
    "full_text": "Build Setup Tutorials\nSet up Build Pipeline\nVersion: QB14\nOn this page\nSet up Build Pipeline\nSituation\nâ\nSet up the build pipeline to handle multiple connected phases as described below:\nNew commit into the SCM triggers the commit verification phase to build the package and run unit tests.\nThe same commit automatically transit to next phase for running smoke tests if commit verification phase succeeds.\nThe same commit automatically transit to next phase for deploying into development environment if smoke test phase succeeds.\nQA engineers may run some manual tests against the commit deployed to development environment, and if passed, they can recommend the commit.\nSome one in the team can manually transit the recommended commit to next phase for deploying into UAT environment.\nMark the commit as recommended if user accepts the new commit.\nAgain some one in the team manually transits the UAT passed commit to next phase for deploying into the production environment.\nDemonstration\nâ\nSwitch to pipeline view of the\ndemo project\n. The\nCommit Verification\nconfiguration is set up to poll SCM periodically to trigger a build whenever there are new commit. Since you can not commit into the demo SCM repository, for demonstration purpose, you may manually run the configuration to verify latest commit.\nAfter triggering the build, you will be brought to the\noverview\npage. When the build finishes, you may switch back to the pipelines page. You will see three big arrows connected together with each arrow representing a phase. You will also see that current SCM revision is pulled from\nCommit Verification\nphase and stops at\nDeploy to Dev Servers\nphase.\nNow assume you are QA engineers, and have tested the commit deployed in development environment. You decided to recommend the commit by following the link of\nDeploy to Dev Servers\nin the pipeline and recommending the build.\nNow go back to the\npipeline page\nand the\nDeploy to Dev Servers\nphase can now be transited into next phase. Hover mouse over that phase, and hit the displayed\nPromote\nbutton, and you will see that next phase\nDeploy to UAT Servers\nis triggered.\nWait for a short period of time for the phase to be completed. Assume your users are satisfied with the new feature and again you play the role of some other one in your team to recommend the commit by following the link of\nDeploy to UAT Servers\nin the pipeline and recommending the build.\nNow go back to the\npipeline page\nand the\nDeploy to UAT Servers\nphase can now be transited into next phase. Hover mouse over that phase, and hit the displayed\nPromote\nbutton, and you will see that next phase\nDeploy to Prod Servers\nis triggered.\nAt this time, the new commit has finished its life cycle from verification to production.\nResolution\nâ\nIn QuickBuild build pipeline is based on the build promotion feature. Each phase we described is represented by a separate configuration, and transitions between different phases are accomplished with defined promotions. Check promotions definition of below configurations and there is a promotion named \"Promote\" defined for each of them with the target configuration set to next phase configuration.\nCommit Verification\nRun Smoke Tests\nDeploy to Dev Servers\nDeploy to UAT Servers\nPlease note that:\nPromotion definition for the first two configurations are marked as\nAuto Promotion\nwhen the build is successful. This enables the commit transits to next phase without human intervention. However if the build fails, the commit will cease to transit to next phase.\nPromotion definition for the last two configurations are NOT marked as\nAuto Promotion\n, and the promote condition is set to met only if build is recommended. This means that transition to important environments can only be enabled upon manual approved.\nAll promotion definitions passes the generated artifacts to next phase so that next phase works on the verified artifacts of previous phase instead of rebuilding the artifacts from scratch.\nAll promotion definitions passes the variable\nversion\nto next phase so that next phase uses the same build version as previous phase for same commit. To support this, next build versions of all phases except the\ncommit verification\nare set to inherit from parent configuration, which is set to\n${vars.getValue(\"version\")}\n.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Set up Build Pipeline",
        "content": ""
      },
      {
        "header": "Situationâ",
        "content": "Set up the build pipeline to handle multiple connected phases as described below: New commit into the SCM triggers the commit verification phase to build the package and run unit tests.The same commit automatically transit to next phase for running smoke tests if commit verification phase succeeds.The same commit automatically transit to next phase for deploying into development environment if smoke test phase succeeds.QA engineers may run some manual tests against the commit deployed to development environment, and if passed, they can recommend the commit.Some one in the team can manually transit the recommended commit to next phase for deploying into UAT environment.Mark the commit as recommended if user accepts the new commit.Again some one in the team manually transits the UAT passed commit to next phase for deploying into the production environment."
      },
      {
        "header": "Demonstrationâ",
        "content": "Switch to pipeline view of thedemo project. TheCommit Verificationconfiguration is set up to poll SCM periodically to trigger a build whenever there are new commit. Since you can not commit into the demo SCM repository, for demonstration purpose, you may manually run the configuration to verify latest commit.After triggering the build, you will be brought to theoverviewpage. When the build finishes, you may switch back to the pipelines page. You will see three big arrows connected together with each arrow representing a phase. You will also see that current SCM revision is pulled fromCommit Verificationphase and stops atDeploy to Dev Serversphase.Now assume you are QA engineers, and have tested the commit deployed in development environment. You decided to recommend the commit by following the link ofDeploy to Dev Serversin the pipeline and recommending the build.Now go back to thepipeline pageand theDeploy to Dev Serversphase can now be transited into next phase. Hover mouse over that phase, and hit the displayedPromotebutton, and you will see that next phaseDeploy to UAT Serversis triggered.Wait for a short period of time for the phase to be completed. Assume your users are satisfied with the new feature and again you play the role of some other one in your team to recommend the commit by following the link ofDeploy to UAT Serversin the pipeline and recommending the build.Now go back to thepipeline pageand theDeploy to UAT Serversphase can now be transited into next phase. Hover mouse over that phase, and hit the displayedPromotebutton, and you will see that next phaseDeploy to Prod Serversis triggered.At this time, the new commit has finished its life cycle from verification to production."
      },
      {
        "header": "Resolutionâ",
        "content": "In QuickBuild build pipeline is based on the build promotion feature. Each phase we described is represented by a separate configuration, and transitions between different phases are accomplished with defined promotions. Check promotions definition of below configurations and there is a promotion named \"Promote\" defined for each of them with the target configuration set to next phase configuration. Commit VerificationRun Smoke TestsDeploy to Dev ServersDeploy to UAT Servers Please note that: Promotion definition for the first two configurations are marked asAuto Promotionwhen the build is successful. This enables the commit transits to next phase without human intervention. However if the build fails, the commit will cease to transit to next phase.Promotion definition for the last two configurations are NOT marked asAuto Promotion, and the promote condition is set to met only if build is recommended. This means that transition to important environments can only be enabled upon manual approved.All promotion definitions passes the generated artifacts to next phase so that next phase works on the verified artifacts of previous phase instead of rebuilding the artifacts from scratch.All promotion definitions passes the variableversionto next phase so that next phase uses the same build version as previous phase for same commit. To support this, next build versions of all phases except thecommit verificationare set to inherit from parent configuration, which is set to${vars.getValue(\"version\")}."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/category/LDAP+Authentication",
      "https://wiki.pmease.com/display/QB14/category/Single+Sign-On",
      "https://wiki.pmease.com/display/QB14/Trigger+Builds",
      "https://wiki.pmease.com/display/QB14/Publish+Reports",
      "https://wiki.pmease.com/display/QB14/JIRA+Integration",
      "https://wiki.pmease.com/display/QB14/Reports+Aggregation",
      "https://wiki.pmease.com/display/QB14/category/Launch+Build+Agent+On+Demand",
      "https://wiki.pmease.com/display/QB14/Generate+Release+Build+using+Artifacts+of+QA+Build",
      "https://wiki.pmease.com/display/QB14/category/LDAP+Authentication"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/category/LDAP+Authentication",
    "title": "LDAP Authentication",
    "breadcrumb": [
      "",
      "Build Setup Tutorials"
    ],
    "full_text": "ðï¸\nAuthenticate through Active Directory\nScenario\nðï¸\nAuthenticate through Fedora Directory Server\nScenario",
    "sections": [
      {
        "header": "ðï¸ Authenticate through Active Directory",
        "content": "Scenario"
      },
      {
        "header": "ðï¸ Authenticate through Fedora Directory Server",
        "content": "Scenario"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Authenticate+through+Active+Directory",
      "https://wiki.pmease.com/display/QB14/Authenticate+through+Fedora+Directory+Server",
      "https://wiki.pmease.com/display/QB14/category/Single+Sign-On",
      "https://wiki.pmease.com/display/QB14/Trigger+Builds",
      "https://wiki.pmease.com/display/QB14/Publish+Reports",
      "https://wiki.pmease.com/display/QB14/JIRA+Integration",
      "https://wiki.pmease.com/display/QB14/Reports+Aggregation",
      "https://wiki.pmease.com/display/QB14/category/Launch+Build+Agent+On+Demand",
      "https://wiki.pmease.com/display/QB14/Authenticate+through+Active+Directory",
      "https://wiki.pmease.com/display/QB14/Authenticate+through+Fedora+Directory+Server",
      "https://wiki.pmease.com/display/QB14/Authenticate+through+Active+Directory"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/category/Single+Sign-On",
    "title": "Single Sign-On",
    "breadcrumb": [
      "",
      "Build Setup Tutorials"
    ],
    "full_text": "ðï¸\nSingle Sign-On with Azure AD (SAML)\nPurpose\nðï¸\nSingle Sign-On with Okta (SAML)\nPurpose\nðï¸\nSingle Sign-On with Okta (OpenID)\nPurpose\nðï¸\nSingle Sign-On with Windows Domain Account (Trusted Http Header)\nPurpose",
    "sections": [
      {
        "header": "ðï¸ Single Sign-On with Azure AD (SAML)",
        "content": "Purpose"
      },
      {
        "header": "ðï¸ Single Sign-On with Okta (SAML)",
        "content": "Purpose"
      },
      {
        "header": "ðï¸ Single Sign-On with Okta (OpenID)",
        "content": "Purpose"
      },
      {
        "header": "ðï¸ Single Sign-On with Windows Domain Account (Trusted Http Header)",
        "content": "Purpose"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Single+Sign-On+with+Azure+AD++SAML+",
      "https://wiki.pmease.com/display/QB14/Single+Sign-On+with+Okta++SAML+",
      "https://wiki.pmease.com/display/QB14/Single+Sign-On+with+Okta++OpenID+",
      "https://wiki.pmease.com/display/QB14/Single+Sign-On+with+Windows+Domain+Account++Trusted+Http+Header+",
      "https://wiki.pmease.com/display/QB14/Trigger+Builds",
      "https://wiki.pmease.com/display/QB14/Publish+Reports",
      "https://wiki.pmease.com/display/QB14/JIRA+Integration",
      "https://wiki.pmease.com/display/QB14/Reports+Aggregation",
      "https://wiki.pmease.com/display/QB14/category/Launch+Build+Agent+On+Demand",
      "https://wiki.pmease.com/display/QB14/Single+Sign-On+with+Azure+AD++SAML+",
      "https://wiki.pmease.com/display/QB14/Single+Sign-On+with+Okta++SAML+",
      "https://wiki.pmease.com/display/QB14/Single+Sign-On+with+Okta++OpenID+",
      "https://wiki.pmease.com/display/QB14/Single+Sign-On+with+Windows+Domain+Account++Trusted+Http+Header+",
      "https://wiki.pmease.com/display/QB14/Authenticate+through+Fedora+Directory+Server",
      "https://wiki.pmease.com/display/QB14/Single+Sign-On+with+Azure+AD++SAML+"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Trigger+Builds",
    "title": "Trigger Builds",
    "breadcrumb": [
      "",
      "Build Setup Tutorials"
    ],
    "full_text": "Build Setup Tutorials\nTrigger Builds\nVersion: QB14\nOn this page\nTrigger Builds\nSituation\nâ\nProject2 uses project1 through Maven or Ivy dependency outside of QuickBuild. When project1 finishes building, trigger project2 just to verify if project1 breaks project2.\nDemonstration\nâ\nSwitch to\nproject1\n, and hit the run button to build project1.\nA new build of project1 will be generated, and a new build of\nproject2\nwill also be generated when build of project1 finishes.\nResolution\nâ\nSwitch to\nstep setting of project1\n, a step is defined to trigger project2 after build step of project1 is finished. You may add as many trigger build steps here as you want, or you can arrange the step executin order to trigger other builds in any order.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Trigger Builds",
        "content": ""
      },
      {
        "header": "Situationâ",
        "content": "Project2 uses project1 through Maven or Ivy dependency outside of QuickBuild. When project1 finishes building, trigger project2 just to verify if project1 breaks project2."
      },
      {
        "header": "Demonstrationâ",
        "content": "Switch toproject1, and hit the run button to build project1.A new build of project1 will be generated, and a new build ofproject2will also be generated when build of project1 finishes."
      },
      {
        "header": "Resolutionâ",
        "content": "Switch tostep setting of project1, a step is defined to trigger project2 after build step of project1 is finished. You may add as many trigger build steps here as you want, or you can arrange the step executin order to trigger other builds in any order."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Publish+Reports",
      "https://wiki.pmease.com/display/QB14/JIRA+Integration",
      "https://wiki.pmease.com/display/QB14/Reports+Aggregation",
      "https://wiki.pmease.com/display/QB14/category/Launch+Build+Agent+On+Demand",
      "https://wiki.pmease.com/display/QB14/Single+Sign-On+with+Windows+Domain+Account++Trusted+Http+Header+",
      "https://wiki.pmease.com/display/QB14/Publish+Reports"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Publish+Reports",
    "title": "Publish Reports",
    "breadcrumb": [
      "",
      "Build Setup Tutorials"
    ],
    "full_text": "Build Setup Tutorials\nPublish Reports\nVersion: QB14\nOn this page\nPublish Reports\nIn Quickbuild (from Version 2.0), if we want to publish reports, we need add a publish step. Below gives an example for publishing JUnit reports, for other reports supported by Quickbuild, they are almost the same.\nJUnit Tests with Ant\nâ\nQuickbuild will not generate the original reports. Most of the reports should be generated by your build tools, such as Ant, Maven, NAnt, etc. In our example, we will generate JUnit by Ant, we will add a target in our build.xml:\n<\ntarget name\n=\n\"junit\"\ndepends\n=\n\"compile\"\n>\n<\nproperty name\n=\n\"junit.report.dir\"\nvalue\n=\n\"target/reports/test-reports\"\n/\n>\n<\nmkdir dir\n=\n\"${junit.report.dir}\"\n/\n>\n<\nmkdir dir\n=\n\"${junit.report.dir}/test-out\"\n/\n>\n<\nrecord\nname\n=\n\"${junit.report.dir}/test-output.txt\"\nappend\n=\n\"no\"\naction\n=\n\"start\"\n/\n>\n<\n!\n--\nNOTE\n:\nhaltonfailure set\nto\nNO\nor\nelse\nthe\nAnt\nwill failed\n--\n>\n<\njunit printsummary\n=\n\"yes\"\nhaltonfailure\n=\n\"no\"\nfork\n=\n\"yes\"\n>\n<\nclasspath refid\n=\n\"test.classpath\"\n/\n>\n<\nformatter type\n=\n\"xml\"\n/\n>\n<\nbatchtest fork\n=\n\"yes\"\ntodir\n=\n\"${junit.report.dir}/test-out\"\n>\n<\nfileset dir\n=\n\"${test.home}\"\n>\n<\ninclude name\n=\n\"**/*Test.java\"\n/\n>\n<\nexclude name\n=\n\"**/*AbstractTest.java\"\n/\n>\n<\n/\nfileset\n>\n<\n/\nbatchtest\n>\n<\n/\njunit\n>\n<\n!\n--\njunitreport is not required here\n,\nbut we recommend\nto\nadd\nthis\nto\nspeed\nup the later publish step\n--\n>\n<\njunitreport todir\n=\n\"${junit.report.dir}\"\n>\n<\nfileset dir\n=\n\"${junit.report.dir}/test-out\"\n>\n<\ninclude name\n=\n\"TEST-*.xml\"\n/\n>\n<\n/\nfileset\n>\n<\n/\njunitreport\n>\n<\nrecord\nname\n=\n\"${junit.report.dir}/test-output.txt\"\naction\n=\n\"stop\"\n/\n>\n<\n/\ntarget\n>\nHere, we need notice that for most of the reports generation task, the 'haltonfailure' or something like this property should be set to\nno\n, or else the target for Ant or other build tools will stop. If we want to publish the full reports, it is recommended to set this kind of property to 'no'.\nNow, we can test our build script from command line, and make sure the script can generate the test reports to directory ${junit.report.dir} correctly.\nPublish JUnit Report\nâ\nIn Quickbuild, now we will add a configuration for our project. After add the configuration, we will add some steps to build and test our project. The steps we added in Quickbuild may look like:\nFirst, we will use all default settings and fill in the required fields for those steps. The Publish JUnit Step may looks like:\nHere, we only tell Quickbuild where to find the original reports by filling in field Report Files/Patterns. The directory we write here is the same as we specified in build.xml.\nOk, we can run the configuration now to see the results now. In my example, after running the configuration, we will find an overview section for JUnit will be displayed and a JUnit Report tab is also added on the left side:\nBy clicking the 'JUnit Report' tab on the left side, four child tabs will be displayed:\nDistribute JUnit Tests\nâ\nSometimes, we will run our tests on different platform to make sure our product can support all of them. In this case, Quickbuild supports to publish those reports separately and display the reports via different report sets.\nBelow screen shot shows after we add the steps supported for such case:\nHere, we defined below steps:\nmaster, this step is a serial composition step which contains all other steps and this step will run on server.\ncheckout step, this step will check out the source code from the repository we defined and this step will run on server.\nDistribute Tests step, this step is defined as a parall composition step which contains our test step and this step will run on server.\nWindows Composition step, this step is a serial composition step which will run on a Windows node, this step need transfer the resources from parent node(because all the source files are checked out on server node) and this step contains:\nBuild and Run Tests on Windows step, this step is an Ant step which will build the source code and run junit task for testing on windows.\nPublish JUnit Reports on Windows step, this step will publish the JUnit reports generated from previous step.\nLinux Composition step, this step is same as Windows Composition step except that the step will run on a Linux node and this step also contains two child steps:\nBuild and Run Tests on Linux step\nPublish JUnit Reports on Linux step\nThe below screen shots shows how we define these steps:\nWindows Composition Step\nPublish JUnit Reports On Windows Step\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Publish Reports",
        "content": ""
      },
      {
        "header": "JUnit Tests with Antâ",
        "content": "Quickbuild will not generate the original reports. Most of the reports should be generated by your build tools, such as Ant, Maven, NAnt, etc. In our example, we will generate JUnit by Ant, we will add a target in our build.xml: <target name=\"junit\"depends=\"compile\"><property name=\"junit.report.dir\"value=\"target/reports/test-reports\"/><mkdir dir=\"${junit.report.dir}\"/><mkdir dir=\"${junit.report.dir}/test-out\"/><recordname=\"${junit.report.dir}/test-output.txt\"append=\"no\"action=\"start\"/><!--NOTE:haltonfailure settoNOorelsetheAntwill failed--><junit printsummary=\"yes\"haltonfailure=\"no\"fork=\"yes\"><classpath refid=\"test.classpath\"/><formatter type=\"xml\"/><batchtest fork=\"yes\"todir=\"${junit.report.dir}/test-out\"><fileset dir=\"${test.home}\"><include name=\"**/*Test.java\"/><exclude name=\"**/*AbstractTest.java\"/></fileset></batchtest></junit><!--junitreport is not required here,but we recommendtoaddthistospeedup the later publish step--><junitreport todir=\"${junit.report.dir}\"><fileset dir=\"${junit.report.dir}/test-out\"><include name=\"TEST-*.xml\"/></fileset></junitreport><recordname=\"${junit.report.dir}/test-output.txt\"action=\"stop\"/></target> Here, we need notice that for most of the reports generation task, the 'haltonfailure' or something like this property should be set tono, or else the target for Ant or other build tools will stop. If we want to publish the full reports, it is recommended to set this kind of property to 'no'. Now, we can test our build script from command line, and make sure the script can generate the test reports to directory ${junit.report.dir} correctly."
      },
      {
        "header": "Publish JUnit Reportâ",
        "content": "In Quickbuild, now we will add a configuration for our project. After add the configuration, we will add some steps to build and test our project. The steps we added in Quickbuild may look like: First, we will use all default settings and fill in the required fields for those steps. The Publish JUnit Step may looks like: Here, we only tell Quickbuild where to find the original reports by filling in field Report Files/Patterns. The directory we write here is the same as we specified in build.xml. Ok, we can run the configuration now to see the results now. In my example, after running the configuration, we will find an overview section for JUnit will be displayed and a JUnit Report tab is also added on the left side: By clicking the 'JUnit Report' tab on the left side, four child tabs will be displayed:"
      },
      {
        "header": "Distribute JUnit Testsâ",
        "content": "Sometimes, we will run our tests on different platform to make sure our product can support all of them. In this case, Quickbuild supports to publish those reports separately and display the reports via different report sets. Below screen shot shows after we add the steps supported for such case: Here, we defined below steps: master, this step is a serial composition step which contains all other steps and this step will run on server.checkout step, this step will check out the source code from the repository we defined and this step will run on server.Distribute Tests step, this step is defined as a parall composition step which contains our test step and this step will run on server.Windows Composition step, this step is a serial composition step which will run on a Windows node, this step need transfer the resources from parent node(because all the source files are checked out on server node) and this step contains:Build and Run Tests on Windows step, this step is an Ant step which will build the source code and run junit task for testing on windows.Publish JUnit Reports on Windows step, this step will publish the JUnit reports generated from previous step.Linux Composition step, this step is same as Windows Composition step except that the step will run on a Linux node and this step also contains two child steps:Build and Run Tests on Linux stepPublish JUnit Reports on Linux step The below screen shots shows how we define these steps:Windows Composition Step Publish JUnit Reports On Windows Step"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/JIRA+Integration",
      "https://wiki.pmease.com/display/QB14/Reports+Aggregation",
      "https://wiki.pmease.com/display/QB14/category/Launch+Build+Agent+On+Demand",
      "https://wiki.pmease.com/display/QB14/JIRA+Integration"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/JIRA+Integration",
    "title": "JIRA Integration",
    "breadcrumb": [
      "",
      "Build Setup Tutorials"
    ],
    "full_text": "Build Setup Tutorials\nJIRA Integration\nVersion: QB14\nOn this page\nJIRA Integration\nSituation\nâ\nSet up a configuration to generate builds of a project and achieve below purposes:\nQuickBuild should use next unreleased version of that project in JIRA as version of the new build.\nFor JIRA issues marked as fixed in SCM commit comments, QuickBuild should update status of these issues in JIRA to be\nresolved\nunder the developer's JIRA account.\nQuickBuild should mark corresponding versions of the project in JIRA as\nreleased\n.\nFor all above resolved issues, QuickBuild should update the\nfix version/s\nfield to include the build version.\nWhen navigate to build detail, issue keys in the commit comments should be rendered as issue links.\nUser should be able to view all resolved/related issues in a particular build.\nUser should be able to view all builds and SCM changes relating to a particular issue at JIRA side.\nDemonstration\nâ\nSwitch to\nversions screen\nof the demo JIRA instance. The next unreleased version is the same as next build version displayed at\nQuickBuild side\n. You will also find that all built versions at QuickBuild side are marked as released here.\nSwitch to\nscm changes page of latest build of the demo project\n. All issue keys in the commit message are hyper-linked to JIRA.\nSwitch to\nissues page of latest build of the demo project\n. All issues corresponding to current build are listed there, and QuickBuild has resolved all issues under the name of \"robin\" at JIRA side based on \"fix\" keywords found in robin's commit message.\nClick any issue key in the issues page to get navigated to issue detail page in JIRA, and you will find that the issue's\nfix version/s\nfield is updated to include current build version.\nIn the issue detail page opened above, you will find two additional tabs, respectively\nQB Builds\n, and\nQB Changes\n. The\nQB Builds\ntab displays all builds relating to this issue, while\nQB Changes\ntab displays all SCM changes relating to the issue. You may also be able to view/diff changed files in\nQB Changes\ntab.\nResolution\nâ\nTo get QuickBuild displaying JIRA issues:\nConfigure JIRA to accept remote API calls. Remote API call option can be turned on/off by logging in as JIRA administrator, switching to\nAdministration\ntab, clicking\nGeneral Configuration\nlink at left side of the screen, and clicking the\nedit configuration\nlink.\nSet up JIRA server information at QuickBuild side by switching to the\nJIRA server setting page\n.\nTo configure QuickBuild to pick up next unreleased JIRA version as next build version, switch to\ngeneral setting page\nand specify next build version as\nUse first unreleased version of associated JIRA project\n.\nTo configure QuickBuild to auto-update status of JIRA issues based on issue actions in SCM commit messages, you will need to add the\nUpdate JIRA Issues\nstep as shown in\nsteps page of the demo project\n. QuickBuild tries to update issues using developer's own JIRA account, and this required that:\nThe user name in SCM system can be mapped to a QuickBuild user. Taking the demo project for example, the user \"robin\" is mapped to QuickBuild user \"robinshine\" in\nrepository definition\n. This requirement will be automatically met if your SCM system and QuickBuild have been configured to authenticate against the same LDAP system. Refer to the\nLDAP Authentication\nfor details.\nIf user name/password of the mapped QuickBuild user is not the same as in JIRA, you will need to specify JIRA account by editing my setting page of the QuickBuild user. This requirement will be automatically met if QuickBuild and JIRA have been configured to authenticate against the same LDAP system. Refer to the\nLDAP Authentication\nfor details.\nTo configure QuickBuild to auto-release corresponding JIRA versions and update\nfix version/s\nfield of relevant issues, you will need to add the\nRelease JIRA Version\nstep as shown in\nsteps page of the demo project\n. Also please make sure that the JIRA account specified at\nJIRA server setting page\nhas below permissions:\nBe able to release existing versions and create new versions in relevant projects in JIRA.\nBe able to update issues of corresponding projects.\nTo configure JIRA to display\nQB Builds\ntab and\nQB Changes\ntab, do the following:\nInstall the QuickBuild plugin for JIRA following instructions in\nthis page\n.\nStart up JIRA, login as JIRA administrator, switch to Administration tab, and click the\nQuickBuild Server\nlink at left side of the screen. In the QuickBuild servers page, we've specified below setting for this demo:\nServer Name: Demo QuickBuild Server\nHost URL:\nhttps://demo.pmease.com\nUser name/password: specify the QuickBuild account with permission to access build changes\nAssociated Projects: TST=Demo/Build Setup Tutorials/JIRA Integration\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "JIRA Integration",
        "content": ""
      },
      {
        "header": "Situationâ",
        "content": "Set up a configuration to generate builds of a project and achieve below purposes: QuickBuild should use next unreleased version of that project in JIRA as version of the new build.For JIRA issues marked as fixed in SCM commit comments, QuickBuild should update status of these issues in JIRA to beresolvedunder the developer's JIRA account.QuickBuild should mark corresponding versions of the project in JIRA asreleased.For all above resolved issues, QuickBuild should update thefix version/sfield to include the build version.When navigate to build detail, issue keys in the commit comments should be rendered as issue links.User should be able to view all resolved/related issues in a particular build.User should be able to view all builds and SCM changes relating to a particular issue at JIRA side."
      },
      {
        "header": "Demonstrationâ",
        "content": "Switch toversions screenof the demo JIRA instance. The next unreleased version is the same as next build version displayed atQuickBuild side. You will also find that all built versions at QuickBuild side are marked as released here.Switch toscm changes page of latest build of the demo project. All issue keys in the commit message are hyper-linked to JIRA.Switch toissues page of latest build of the demo project. All issues corresponding to current build are listed there, and QuickBuild has resolved all issues under the name of \"robin\" at JIRA side based on \"fix\" keywords found in robin's commit message.Click any issue key in the issues page to get navigated to issue detail page in JIRA, and you will find that the issue'sfix version/sfield is updated to include current build version.In the issue detail page opened above, you will find two additional tabs, respectivelyQB Builds, andQB Changes. TheQB Buildstab displays all builds relating to this issue, whileQB Changestab displays all SCM changes relating to the issue. You may also be able to view/diff changed files inQB Changestab."
      },
      {
        "header": "Resolutionâ",
        "content": "To get QuickBuild displaying JIRA issues: Configure JIRA to accept remote API calls. Remote API call option can be turned on/off by logging in as JIRA administrator, switching toAdministrationtab, clickingGeneral Configurationlink at left side of the screen, and clicking theedit configurationlink.Set up JIRA server information at QuickBuild side by switching to theJIRA server setting page. To configure QuickBuild to pick up next unreleased JIRA version as next build version, switch togeneral setting pageand specify next build version asUse first unreleased version of associated JIRA project. To configure QuickBuild to auto-update status of JIRA issues based on issue actions in SCM commit messages, you will need to add theUpdate JIRA Issuesstep as shown insteps page of the demo project. QuickBuild tries to update issues using developer's own JIRA account, and this required that: The user name in SCM system can be mapped to a QuickBuild user. Taking the demo project for example, the user \"robin\" is mapped to QuickBuild user \"robinshine\" inrepository definition. This requirement will be automatically met if your SCM system and QuickBuild have been configured to authenticate against the same LDAP system. Refer to theLDAP Authenticationfor details.If user name/password of the mapped QuickBuild user is not the same as in JIRA, you will need to specify JIRA account by editing my setting page of the QuickBuild user. This requirement will be automatically met if QuickBuild and JIRA have been configured to authenticate against the same LDAP system. Refer to theLDAP Authenticationfor details. To configure QuickBuild to auto-release corresponding JIRA versions and updatefix version/sfield of relevant issues, you will need to add theRelease JIRA Versionstep as shown insteps page of the demo project. Also please make sure that the JIRA account specified atJIRA server setting pagehas below permissions: Be able to release existing versions and create new versions in relevant projects in JIRA.Be able to update issues of corresponding projects. To configure JIRA to displayQB Buildstab andQB Changestab, do the following: Install the QuickBuild plugin for JIRA following instructions inthis page.Start up JIRA, login as JIRA administrator, switch to Administration tab, and click theQuickBuild Serverlink at left side of the screen. In the QuickBuild servers page, we've specified below setting for this demo:Server Name: Demo QuickBuild ServerHost URL:https://demo.pmease.comUser name/password: specify the QuickBuild account with permission to access build changesAssociated Projects: TST=Demo/Build Setup Tutorials/JIRA Integration"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Reports+Aggregation",
      "https://wiki.pmease.com/display/QB14/category/Launch+Build+Agent+On+Demand",
      "https://wiki.pmease.com/display/QB14/LDAP+Authentication",
      "https://wiki.pmease.com/display/QB14/LDAP+Authentication",
      "https://wiki.pmease.com/display/QB14/Integrating+JIRA+with+QuickBuild",
      "https://wiki.pmease.com/display/QB14/Reports+Aggregation"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Reports+Aggregation",
    "title": "Reports Aggregation",
    "breadcrumb": [
      "",
      "Build Setup Tutorials"
    ],
    "full_text": "Build Setup Tutorials\nReports Aggregation\nVersion: QB14\nOn this page\nReports Aggregation\nScenario\nâ\nSetup a configuration to act as dashboard of other configurations: it should reflect status of latest build of selected configurations, as well as aggregate various reports from those configurations.\nDemonstration\nâ\nPlease visit\nthe demo aggregate configuration\n. It acts as dashboard of its child configurations:\nStatus of this configuration is successful only if all its child configurations built successfully; otherwise, the failed configurations will be displayed.\nFor demonstration purpose, it is configured to only aggregate JUnit reports generated by child configurations. Various indicators such as success rate, test duration is the merge result of child test reports, and\nthe package view\ndisplays packages coming from the child configurations, respectively\norg.apache.commons.collections\n, and\norg.apache.commons.configuration\n. Report statistics will reflect this aggregation as well.\nResolution\nâ\nFor each configuration need to be aggregated, add steps to publish report XML files as artifacts. Taking the\ncommons-collection\nfor example, the step\npublish junit xml reports\nis created to publish JUnit report xml files as artifacts.\nIn the aggregation configuration,\nset up QuickBuild repositories\nto checkout desired report xml files from desired configurations. When define these repositories, please make sure the\nbuild\nproperty is defined as\nlatest build\n.\nIn the aggregation configuration,\nset up steps\nto:\nCheckout from QuickBuild repositories defined above.\nCheckout step will fail if corresponding configuration fails to build.\nPublish desired reports using all retrieved report xml files.\nEdit\ngeneral setting\nof the aggregation configuration to set a periodical build schedule. With this setting, the aggregation configuration will build automatically to aggregate build status and reports if there are new builds generated in corresponding configurations.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Reports Aggregation",
        "content": ""
      },
      {
        "header": "Scenarioâ",
        "content": "Setup a configuration to act as dashboard of other configurations: it should reflect status of latest build of selected configurations, as well as aggregate various reports from those configurations."
      },
      {
        "header": "Demonstrationâ",
        "content": "Please visitthe demo aggregate configuration. It acts as dashboard of its child configurations: Status of this configuration is successful only if all its child configurations built successfully; otherwise, the failed configurations will be displayed.For demonstration purpose, it is configured to only aggregate JUnit reports generated by child configurations. Various indicators such as success rate, test duration is the merge result of child test reports, andthe package viewdisplays packages coming from the child configurations, respectivelyorg.apache.commons.collections, andorg.apache.commons.configuration. Report statistics will reflect this aggregation as well."
      },
      {
        "header": "Resolutionâ",
        "content": "For each configuration need to be aggregated, add steps to publish report XML files as artifacts. Taking thecommons-collectionfor example, the steppublish junit xml reportsis created to publish JUnit report xml files as artifacts.In the aggregation configuration,set up QuickBuild repositoriesto checkout desired report xml files from desired configurations. When define these repositories, please make sure thebuildproperty is defined aslatest build.In the aggregation configuration,set up stepsto:Checkout from QuickBuild repositories defined above.Checkout step will fail if corresponding configuration fails to build.Publish desired reports using all retrieved report xml files.Editgeneral settingof the aggregation configuration to set a periodical build schedule. With this setting, the aggregation configuration will build automatically to aggregate build status and reports if there are new builds generated in corresponding configurations."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/category/Launch+Build+Agent+On+Demand",
      "https://wiki.pmease.com/display/QB14/category/Launch+Build+Agent+On+Demand"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/category/Launch+Build+Agent+On+Demand",
    "title": "Launch Build Agent On Demand",
    "breadcrumb": [
      "",
      "Build Setup Tutorials"
    ],
    "full_text": "ðï¸\nGCP Integration\nSituation\nðï¸\nRetry Step On Spot VM\nSituation\nðï¸\nAmazon EC2 Integration\nSituation\nðï¸\nMicrosoft Azure Integration\nSituation\nðï¸\nKubernetes Integration\nSituation",
    "sections": [
      {
        "header": "ðï¸ GCP Integration",
        "content": "Situation"
      },
      {
        "header": "ðï¸ Retry Step On Spot VM",
        "content": "Situation"
      },
      {
        "header": "ðï¸ Amazon EC2 Integration",
        "content": "Situation"
      },
      {
        "header": "ðï¸ Microsoft Azure Integration",
        "content": "Situation"
      },
      {
        "header": "ðï¸ Kubernetes Integration",
        "content": "Situation"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/GCP+Integration",
      "https://wiki.pmease.com/display/QB14/Retry+Step+On+Spot+VM",
      "https://wiki.pmease.com/display/QB14/Amazon+EC2+Integration",
      "https://wiki.pmease.com/display/QB14/Microsoft+Azure+Integration",
      "https://wiki.pmease.com/display/QB14/Kubernetes+Integration",
      "https://wiki.pmease.com/display/QB14/GCP+Integration",
      "https://wiki.pmease.com/display/QB14/Retry+Step+On+Spot+VM",
      "https://wiki.pmease.com/display/QB14/Amazon+EC2+Integration",
      "https://wiki.pmease.com/display/QB14/Microsoft+Azure+Integration",
      "https://wiki.pmease.com/display/QB14/Kubernetes+Integration",
      "https://wiki.pmease.com/display/QB14/GCP+Integration"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Repository+Path",
    "title": "Repository Path",
    "breadcrumb": [
      "",
      "References"
    ],
    "full_text": "References\nRepository Path\nVersion: QB14\nRepository Path\nRepository path is used to refer to file in SCM systems. Example repository urls for different SCM systems:\nSubversion\n: the path is relative to Subversion root, WITH a leading \"/\".\n/\nmy\n-\napp\n/\ntrunk\n/\npom\n.\nxml\nSince the path is relative to Subversion root, above value will remain unchanged whether the checkout url defined in a Subversion repository is\nsvn://localhost/my-app\nor\nsvn://localhost/my-app/trunk\n.\nCVS\n: the path is relative to the CVS root, WITHOUT the leading \"/\"\nmy\n-\napp\n/\ntrunk\n/\npom\n.\nxml\nSince the path is relative to the CVS root, above value will remain unchanged whether the checkout module defined in a CVS repository is\nmy-app\nor\nmy-app/trunk\nPerforce\n: the path should be an absolute path in the Perforce server, including the depot part\n//depot1/my-app/trunk/pom.xml\nVisual SourceSafe\n: the path is an absolute path in sourcesafe database, starting with \"$/\"\n$\n/\nmy\n-\napp\n/\ntrunk\n/\npom\n.\nxml\nSince the path is relative to the sourcesafe root, above value will remain unchanged whether the checkout project defined in a VSS repository is\n/\nm\ny\nâ\na\np\np\nâ\no\nr\nâ\n/my-app* or *\n/\nm\ny\nâ\na\npp\nâ\nor\nâ\n/my-app/trunk\n.\nAccurev\n: the path is relative to the depot root, WITHOUT the leading \"/\"\nmy\n-\napp\n/\ntrunk\n/\npom\n.\nxml\nClearCase\n: the path is an absolute path in ClearCase, including the vob part:\n/\nvob1\n/\nmy\n-\napp\n/\ntrunk\n/\npom\n.\nxml\nStarTeam\n: the path is relative to the view root, WITHOUT the leading \"/\"\nmy\n-\napp\n/\ntrunk\n/\npom\n.\nxml\nSince the path is relative to the view root, above value will remain unchanged whether the source path defined in a StarTeam repository is\nmy-app\nor\nmy-app/trunk\nGit\n: the path is relative to git repository root, WITHOUT the leading \"/\"\nmy\n-\napp\n/\ntrunk\n/\npom\n.\nxml\nMercurial\n: the path is relative to repository root, WITHOUT the leading \"/\"\nmy\n-\napp\n/\ntrunk\n/\npom\n.\nxml\nBazaar\n: the path is relative to repository root, WITHOUT the leading \"/\"\nmy\n-\napp\n/\ntrunk\n/\npom\n.\nxml\nTeam Foundation Server\n: this path is relative to the repository root, starting with \"$/\"\n$\n/\nmy\n-\napp\n/\ntrunk\n/\npom\n.\nxml\nSince the path is relative to the repository root, above value will remain unchanged whether the source control folder defined in TFS repository is\n/\nm\ny\nâ\na\np\np\nâ\no\nr\nâ\n/my-app* or *\n/\nm\ny\nâ\na\npp\nâ\nor\nâ\n/my-app/trunk\n.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Repository Path",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/File+Pattern+Reference",
      "https://wiki.pmease.com/display/QB14/File+Pattern+Reference"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/File+Pattern+Reference",
    "title": "File Pattern Reference",
    "breadcrumb": [
      "",
      "References"
    ],
    "full_text": "References\nFile Pattern Reference\nVersion: QB14\nOn this page\nFile Pattern Reference\nDefinition\nâ\nFile patterns are widely used in QuickBuild to specify a set of directories or files. For example, the artifact publishing step has a property\nFile Patterns\nwhich is used to specify files and directories to be published as artifacts.\nFile patterns are described using\nEBNF\n:\nfile patterns\n::\n=\nfile pattern\n,\n{\n\",\"\n,\nfile pattern\n}\nfile pattern\n::\n=\n[\n+\n|\n-\n]\nAnt\npattern\nwhere:\nAnt pattern\nrefers to\nAnt based path patterns\nFile pattern can be constructed by prefixing\"+\" or \"-\" character before an Ant pattern:\nif prefixed with \"+\", the file pattern will include files or directories specified in the Ant pattern (default)\nif prefixed with \"-\", the file pattern will exclude files or directories specified in the Ant pattern\nif not prefixed, the file pattern will include files or directories specified in the Ant pattern (it has the same effect as prefixing a \"+\" character)\nFile patterns are a series of file pattern connected with the comma character\nExamples\nâ\nWe will use the artifact publishing step to give examples of the file patterns in QuickBuild. Let's suppose that:\nThe configuration workspace is located in\n/opt/quickbuild2/configurations/1/workspace\n, and it contains the following directories and files:\nfile0\n.\nzip\nfile0\n.\ndoc\ndir1\n/\nfile1\n.\nzip\nfile1\n.\ndoc\ndir2\n/\nfile2\n.\nzip\nfile2\n.\ndoc\ndir3\n/\nfile3\n.\nzip\nfile3\n.\ndoc\nThe build artifacts directory is located in\n/opt/quickbuild2/builds/1/artifacts\nThe property\nFrom Directory\nof the artifact publishing step is left empty, which means that the workspace directory will be used as the base directory of the file pattern matching.\nThe property\nDestination Directory\nof the artifact publishing step is left empty, which means matched files and directories will be copied over to the artifacts directory.\nLet's examine several file patterns to see what the artifacts directory will look like after the publishing step:\n**\nAll files and directories will be published from the workspace directory to the artifacts directory recursively. The artifacts directory will look just the same as the workspace directory:\nfile0\n.\nzip\nfile0\n.\ndoc\ndir1\n/\nfile1\n.\nzip\nfile1\n.\ndoc\ndir2\n/\nfile2\n.\nzip\nfile2\n.\ndoc\ndir3\n/\nfile3\n.\nzip\nfile3\n.\ndoc\n**/*.zip\nAll zip files will be published recursively. The artifacts direcory will look like:\nfile0\n.\nzip\ndir1\n/\nfile1\n.\nzip\ndir2\n/\nfile2\n.\nzip\ndir3\n/\nfile3\n.\nzip\n*.zip\nAll zip files that are directly in the workspace directory will be published. The artifacts directory will look like:\nfile0\n.\nzip\n**/*.zip,-dir2/**\nPublishes all zip files recursively, but excludes all the files under the dir2 directory recursively. The artifacts\ndirectory will look like:\nfile0\n.\nzip\ndir1\n/\nfile1\n.\nzip\n**/*.zip,-dir2/*\nPublishes all zip files recursively, but excludes all the files that are directly in the dir2 directory. The artifacts\ndirectory will look like:\nfile0\n.\nzip\ndir1\n/\nfile1\n.\nzip\ndir2\n/\ndir3\n/\nfile3\n.\nzip\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "File Pattern Reference",
        "content": ""
      },
      {
        "header": "Definitionâ",
        "content": "File patterns are widely used in QuickBuild to specify a set of directories or files. For example, the artifact publishing step has a propertyFile Patternswhich is used to specify files and directories to be published as artifacts. File patterns are described usingEBNF: file patterns::=file pattern,{\",\",file pattern}file pattern::=[+|-]Antpattern where: Ant patternrefers toAnt based path patternsFile pattern can be constructed by prefixing\"+\" or \"-\" character before an Ant pattern:if prefixed with \"+\", the file pattern will include files or directories specified in the Ant pattern (default)if prefixed with \"-\", the file pattern will exclude files or directories specified in the Ant patternif not prefixed, the file pattern will include files or directories specified in the Ant pattern (it has the same effect as prefixing a \"+\" character)File patterns are a series of file pattern connected with the comma character"
      },
      {
        "header": "Examplesâ",
        "content": "We will use the artifact publishing step to give examples of the file patterns in QuickBuild. Let's suppose that: The configuration workspace is located in/opt/quickbuild2/configurations/1/workspace, and it contains the following directories and files:file0.zipfile0.docdir1/file1.zipfile1.docdir2/file2.zipfile2.docdir3/file3.zipfile3.docThe build artifacts directory is located in/opt/quickbuild2/builds/1/artifactsThe propertyFrom Directoryof the artifact publishing step is left empty, which means that the workspace directory will be used as the base directory of the file pattern matching.The propertyDestination Directoryof the artifact publishing step is left empty, which means matched files and directories will be copied over to the artifacts directory. Let's examine several file patterns to see what the artifacts directory will look like after the publishing step: **All files and directories will be published from the workspace directory to the artifacts directory recursively. The artifacts directory will look just the same as the workspace directory:file0.zipfile0.docdir1/file1.zipfile1.docdir2/file2.zipfile2.docdir3/file3.zipfile3.doc**/*.zipAll zip files will be published recursively. The artifacts direcory will look like:file0.zipdir1/file1.zipdir2/file2.zipdir3/file3.zip*.zipAll zip files that are directly in the workspace directory will be published. The artifacts directory will look like:file0.zip**/*.zip,-dir2/**Publishes all zip files recursively, but excludes all the files under the dir2 directory recursively. The artifactsdirectory will look like:file0.zipdir1/file1.zip**/*.zip,-dir2/*Publishes all zip files recursively, but excludes all the files that are directly in the dir2 directory. The artifactsdirectory will look like:file0.zipdir1/file1.zipdir2/dir3/file3.zip"
      }
    ],
    "links": []
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Kubernetes+Integration",
    "title": "Kubernetes Integration",
    "breadcrumb": [
      "",
      "Build Setup Tutorials",
      "Launch Build Agent On Demand"
    ],
    "full_text": "Build Setup Tutorials\nLaunch Build Agent On Demand\nKubernetes Integration\nVersion: QB14\nOn this page\nKubernetes Integration\nSituation\nâ\nSet up QuickBuild the same as tutorial\nOne Build For One Agent\n, except that build agents should be started in Kubernetes cluster as necessary. Launched build agents should be able to be closed if they are idle for specified amount of time to save resource.\nResolution\nâ\nSet up QuickBuild according to resolution section of tutorial\nOne Build For One Agent\n.\nLogin to QuickBuild as administrator and switch to administration menu, then follow the\nplugin management\nlink, and edit plugin setting of\nKubernetes Plugin\nto provide a config file for QuickBuild to access Kubernetes.\nCreate appropriate build agent docker image following [this guide](Launch Node in Kubernetes.html#LaunchNodeinKubernetes-createbuildagentimage) if necessary.\nSwitch to grid page and follow the\nCloud Profiles\nlink to bring out the cloud profiles page. Add a cloud profile with\nnode launch setting\nspecified as\nLaunch Node into Kubernetes\nand fill relevant Kubernetes node launch options. Specifically the\ndocker image\nshould be filled with the the build agent image you created previously.\nQuickBuild will proceed to do a test launch of your defined cloud profile to grab system/user attribute of node launched by your profile. Grabbed system/user attributes will be used afterwards to match against node matcher setting of build steps to determine which profile has to be used to launch node if no active agents satisfy the criteria. Only after test launch the profile can be used by builds to launch node on demand. Normally the test launch should be done in two or three minutes, if it takes too long, please check instance status as well as agent log at Kubernetes pod side.\nNow run the build. If configured correctly, QuickBuild will launch build agent using your defined cloud profile to run the build. By default the launched build agent will stay active for 30 minutes before terminating. If more builds are set to run in the same time, more agents will be launched to accommodate the concurrency. You may check all launched instances by examining the\nactive launched nodes\ntab of certain cloud profile, and may manually terminate them there.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Kubernetes Integration",
        "content": ""
      },
      {
        "header": "Situationâ",
        "content": "Set up QuickBuild the same as tutorialOne Build For One Agent, except that build agents should be started in Kubernetes cluster as necessary. Launched build agents should be able to be closed if they are idle for specified amount of time to save resource."
      },
      {
        "header": "Resolutionâ",
        "content": "Set up QuickBuild according to resolution section of tutorialOne Build For One Agent.Login to QuickBuild as administrator and switch to administration menu, then follow theplugin managementlink, and edit plugin setting ofKubernetes Pluginto provide a config file for QuickBuild to access Kubernetes.Create appropriate build agent docker image following [this guide](Launch Node in Kubernetes.html#LaunchNodeinKubernetes-createbuildagentimage) if necessary.Switch to grid page and follow theCloud Profileslink to bring out the cloud profiles page. Add a cloud profile withnode launch settingspecified asLaunch Node into Kubernetesand fill relevant Kubernetes node launch options. Specifically thedocker imageshould be filled with the the build agent image you created previously.QuickBuild will proceed to do a test launch of your defined cloud profile to grab system/user attribute of node launched by your profile. Grabbed system/user attributes will be used afterwards to match against node matcher setting of build steps to determine which profile has to be used to launch node if no active agents satisfy the criteria. Only after test launch the profile can be used by builds to launch node on demand. Normally the test launch should be done in two or three minutes, if it takes too long, please check instance status as well as agent log at Kubernetes pod side.Now run the build. If configured correctly, QuickBuild will launch build agent using your defined cloud profile to run the build. By default the launched build agent will stay active for 30 minutes before terminating. If more builds are set to run in the same time, more agents will be launched to accommodate the concurrency. You may check all launched instances by examining theactive launched nodestab of certain cloud profile, and may manually terminate them there."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/GCP+Integration",
      "https://wiki.pmease.com/display/QB14/Retry+Step+On+Spot+VM",
      "https://wiki.pmease.com/display/QB14/Amazon+EC2+Integration",
      "https://wiki.pmease.com/display/QB14/Microsoft+Azure+Integration",
      "https://wiki.pmease.com/display/QB14/One+Build+For+One+Agent",
      "https://wiki.pmease.com/display/QB14/One+Build+For+One+Agent",
      "https://wiki.pmease.com/display/QB14/Microsoft+Azure+Integration"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/In-place+upgrade",
    "title": "In-place upgrade",
    "breadcrumb": [
      "",
      "Upgrade Guide",
      "Procedures"
    ],
    "full_text": "Upgrade Guide\nProcedures\nIn-place upgrade\nVersion: QB14\nIn-place upgrade\nStop your QuickBuild server. You do not need to stop agents since they will be auto-upgraded after server is upgraded.\nExtract installation package of new version to a temp directory.\nOpen a command line window, and switch to\nbin\nsub directory under extracted directory above. Run command\nupgrade.(bat|sh) <install directory of current QuickBuild>\nto upgrade QuickBuild in-place. The upgrade script will update target directory to new version so that QuickBuild installation directory remains unchanged.\nAfter the upgrade, start your current QuickBuild instance. Agents will be auto-updated after server startup. It will take a while for them to appear in the build grid.\nVerify server and agent installation by running some builds.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "In-place upgrade",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Backup+and+Restore+Data",
      "https://wiki.pmease.com/display/QB14/Reinstall+Agents",
      "https://wiki.pmease.com/display/QB14/Upgrade+2.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data+and+Start+Agent",
      "https://wiki.pmease.com/display/QB14/Upgrade+Luntbuild",
      "https://wiki.pmease.com/display/QB14/Upgrade+QuickBuild+1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data",
      "https://wiki.pmease.com/display/QB14/Backup+and+Restore+Data",
      "https://wiki.pmease.com/display/QB14/Reinstall+Agents"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Upgrade+Data+and+Start+Agent",
    "title": "Upgrade Data and Start Agent",
    "breadcrumb": [
      "",
      "Upgrade Guide",
      "Procedures"
    ],
    "full_text": "Upgrade Guide\nProcedures\nUpgrade Data and Start Agent\nVersion: QB14\nUpgrade Data and Start Agent\nStop QuickBuild server of previous version, you do not need to stop agents since they will be auto-upgraded after server is upgraded.\nExtract installation package of new version to a new directory.\nOpen a command line window, and switch to the\nbin\nsub directory under the\nnew version\n's installation directory. Run command\nmigrate.(bat|sh) <install directory of previous QuickBuild version>\nto migrate from previous QuickBuild version.\nFor windows platform, NT service will be installed automatically for the new QuickBuild server if old QuickBuild server is configured to run as NT service. However the new service runs with local system account initially and the \"interact with desktop\" option is disabled. You will need to change this manually after migration if necessary.\nStart QuickBuild server in new installation directory and agents will be auto-updated.\nSome build and user agents may not get started automatically after upgrade. You may check inactive node list from grid page and start them manually by logging to the machine with appropriate users and running command\n<agent install dir>/agent.(sh|bat) start\n. This only happens when upgrading QB4 to QB5 as 5.0 introduces the bootstrap upgrading mechanism but unfortunately cause the agent to stop for the first upgrade. After this start, the agent will be able to update and start automatically when upgrade to new versions even if the bootstrap libraries are changed.\nVerify server and agent installation by running some builds.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Upgrade Data and Start Agent",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Backup+and+Restore+Data",
      "https://wiki.pmease.com/display/QB14/Reinstall+Agents",
      "https://wiki.pmease.com/display/QB14/Upgrade+2.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+Luntbuild",
      "https://wiki.pmease.com/display/QB14/Upgrade+QuickBuild+1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data",
      "https://wiki.pmease.com/display/QB14/Upgrade+2.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+Luntbuild"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Backup+and+Restore+Data",
    "title": "Backup and Restore Data",
    "breadcrumb": [
      "",
      "Upgrade Guide",
      "Procedures"
    ],
    "full_text": "Upgrade Guide\nProcedures\nBackup and Restore Data\nVersion: QB14\nBackup and Restore Data\nIn this procedure, we assume that installation directory of 4.0.61 or 4.0.61 server is\n/quickbuild-old\n, and new version of QuickBuild is extracted to directory\n/quickbuild-new\n.\nLogin to old QuickBuild web UI as administrator, switch to menu\nAdministration/Database Backup\n, and backup the database to file\nbackup.zip\n. After the backup, you should be able to find the file\n/quickbuild-old/backup.zip\n.\nStop old QuickBuild server process. On Windows platform, please also run\n/quickbuild-old/bin/server.bat remove\nto unregister the QuickBuild NT service if it is installed previously. On Windows Vista and Windows 7 system with UAC enabled, you will need to run this command as administrator.\nCopy all files under\n/quickbuild-old/conf\nto\n/quickbuild-new/conf\nexcept for\nwrapper.conf\nand\nwrapper_license.conf\n.\nEdit file\n/quickbuild_new/conf/hibernate.properties\nto remove below line:\nhibernate\n.\nhbm2ddl\n.\nauto\n=\nupdate\nIf you've adjusted memory setting (property\nwrapper.java.maxmemory\n), and java command (property\nwrapper.java.command\n) in\n/quickbuild-old/conf/wrapper.conf\n, make the same adjustment in\n/quickbuild-new/conf/wrapper.conf\n.\nIf you run QuickBuild with Sun JDK or\nOpenJDK\n, make sure to edit file\n<QuickBuild install dir>/conf/wrapper.conf\nand add below entry to avoid using up permgen space:\nwrapper\n.\njava\n.\nadditional\n.\n4\n=\n-\nXX\n:\nMaxPermSize\n=\n256\nm\nCopy all files under the\n/quickbuild-old/asset\nto\n/quickbuild-new/resource\nexcept for\ndefault_html_notification.vm\n,\ndefault_plain_notification.vm\n, and\nvelocity.properties\n.\nIf you are connecting to external database in old QuickBuild (please check file\n/quickbuild-old/conf/hibernate.properties\nfor sure), manually delete the database using your database tool, and create a new one with the same name.\nOpen a command line window, switch to directory\n/quickbuild-new/bin\n, and run command\nrestore.(bat|sh)\n/quickbuild-old/backup.zip_ to migrate and restore data of old QuickBuild.\nRun command\n/quickbuild-new/bin/server.bat install\nto install QuickBuild NT service if necessary. On Windows Vista and Windows 7 system with UAC enabled, you will need to\nopen the command prompt window as Administrator\nbefore running command\n/quickbuild-new/bin/server.bat install\n.\nStartup new QuickBuild server by running\n/quickbuild-new/bin/server.bat console\nand check if data has been restored successfully.\nBuild and user agents may not get started automatically after upgrade. You may check inactive node list from grid page and start them manually by logging to the machine with appropriate users and running command\n<agent install dir>/agent.(sh|bat) start\n. This only happens when upgrading QB4 to QB5 as 5.0 introduces the bootstrap upgrading mechanism but unfortunately cause the agent to stop for the first upgrade. After this start, the agent will be able to update and start automatically when upgrade to new versions even if the bootstrap libraries are changed.\nVerify server and agent installation by running some builds.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Backup and Restore Data",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Reinstall+Agents",
      "https://wiki.pmease.com/display/QB14/Upgrade+2.0.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+Luntbuild",
      "https://wiki.pmease.com/display/QB14/Upgrade+QuickBuild+1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Upgrade+2.0.x",
    "title": "Upgrade 2.0.x",
    "breadcrumb": [
      "",
      "Upgrade Guide",
      "Procedures"
    ],
    "full_text": "Upgrade Guide\nProcedures\nUpgrade 2.0.x\nVersion: QB14\nUpgrade 2.0.x\nIn this procedure, we assume that installation directory of 2.0.x server is\n/quickbuild-old\n, and new version of QuickBuild is extracted to directory\n/quickbuild-new\n.\nLogin to 2.0.x as administrator, switch to menu\nAdministration/Database Backup\n, and backup the database to file\nbackup.zip\n. After the backup, you should be able to find the file\n/quickbuild-old/backup.zip\n.\nStop QuickBuild 2.0.x server process. On Windows platform, please also run\n/quickbuild-old/bin/service-uninstall.bat\nto unregister the QuickBuild NT service if it is installed previously. On Windows Vista and Windows 7 system with UAC enabled, you will need to run this command as administrator.\nCopy all files under\n/quickbuild-old/conf\nto\n/quickbuild-new/conf\nexcept for\nwrapper.conf\nand\nwrapper_license.conf\n.\nCopy all files under\n/quickbuild-old/lib\nto\n/quickbuild-new/plugins/com.pmease.quickbuild.libs\n.\nCopy all files under the\n/quickbuild-old/resource\nto\n/quickbuild-new/resource\nexcept for\ndefault_html_notification.vm\n,\ndefault_plain_notification.vm\n, and\nvelocity.properties\n.\nEdit file\n/quickbuild-new/conf/hibernate.properties\nto add below entry if it does not exist already:\nhibernate\n.\nvalidator\n.\napply_to_ddl\n=\nfalse\nIf you've adjusted memory setting (property\nwrapper.java.maxmemory\n), and java command (property\nwrapper.java.command\n) in\n/quickbuild-old/conf/wrapper.conf\n, make the same adjustment in\n/quickbuild-new/conf/wrapper.conf\n.\nIf you are connecting to external database in old QuickBuild (please check file\n/quickbuild-old/conf/hibernate.properties\nfor sure), manually delete the database using your database tool, and create a new one with the same name.\nOpen a command line window, switch to directory\n/quickbuild-new/bin\n, and run command\nrestore.(bat|sh)\n/quickbuild-old/backup.zip_ to migrate and restore data of old QuickBuild.\nRun command\n/quickbuild-new/bin/server.bat install\nto install QuickBuild NT service if necessary. On Windows Vista and Windows 7 system with UAC enabled, you will need to\nopen the command prompt window as Administrator\nbefore running command\n/quickbuild-new/bin/server.bat install\n.\nStartup new QuickBuild server by running\n/quickbuild-new/bin/server.bat console\nand check if data has been restored successfully.\nIf you've configured build agents,\nre-install build agents\nfollowing below steps:\nBackup the file\nconf/attributes.properties\nunder build agent's installation directory.\nDelete build agent's installation directory.\nInstall build agents following\nthis guide\n.\nOverwrite file\nconf/attributes.properties\nunder build agent's installation directory with the file backed up previously.\nIf user agents are used in your team, tell your developer to\nre-install user agents\nfollowing below steps:\nBackup the file\nconf/attributes.properties\nunder user agent's installation directory.\nDelete user agent's installation directory.\nInstall user agents following\nthis guide\n.\nOverwrite file\nconf/attributes.properties\nunder user agent's installation directory with the file backed up previously.\nVerify the server and agent installation by running some builds.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Upgrade 2.0.x",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Reinstall+Agents",
      "https://wiki.pmease.com/display/QB14/Upgrade+Luntbuild",
      "https://wiki.pmease.com/display/QB14/Upgrade+QuickBuild+1.x",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data",
      "https://wiki.pmease.com/display/QB14/Reinstall+Agents"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Upgrade+QuickBuild+1.x",
    "title": "Upgrade QuickBuild 1.x",
    "breadcrumb": [
      "",
      "Upgrade Guide",
      "Procedures"
    ],
    "full_text": "Upgrade Guide\nProcedures\nUpgrade QuickBuild 1.x\nVersion: QB14\nOn this page\nUpgrade QuickBuild 1.x\nUpgrade procedure\nâ\nLogin to QuickBuild 1.x as administrator, switch to page\nAdministration/Backup Database\n, and backup the database as\nbackup.xml\nunder QuickBuild 1.x's installation directory.\nInstall new QuickBuild version following the\ninstallation guide\n.\nOpen a command prompt window, switch to sub directory\nbin\nunder QuickBuild's installation directory, and run command\nmigrate.sh\n(or\nmigrate.bat\non Windows platform) with a param pointing to QuickBuild 1.x's installation directory.\nAfter migration, please check the file\nmigrate/migrate-log.html\nunder QuickBuild's installation directory for all settings that can not be migrated and needs to be re-configured.\nImportant changes that affect 1.x users\nâ\nQuickBuild is no longer able to deploy as a WAR into other application servers. Instead, it always run as a standalone application, either in foreground mode, or in service mode.\nConfigurations can now be added/removed/copied/moved directly at dashboard page if login as administrator.\nFull name of configuration is now separated by character '/', instead of '.'. For example, to refer to configuration\nproject1\ndefined under\nroot\n, the name\nroot/project1\nshould be used instead of\nroot.project1\n.\nEverything defined in the configuration is now inheritable except for\nname\nand\ndescription\n.\nOnly QuickBuild administrators (can define more than one admin account) can now edit settings/repositories/steps of configurations for security reasons.\nConfiguration settings such as build necessary condition, variables definitions, promote settings, build clean up strategies are placed into advanced settings tab.\nExpressions have been changed a lot. Due to complexity of expressions, we can only migrate default expressions that have not been changed by users. For customized expressions, please rewrite them based on the scripting help, which can be accessed by poining mouse to the help icon when edit related properties.\nBy default only one promote destination can be defined now. However multiple promote destinations can be enabled by using variables and scripts as explained in help of property\nconfiguration\nwhen defined the promotion setting.\nPromotion mechanism is simplified and a QuickBuild repository is no longer necessary in order to fetch files from promotion source. Instead, promotion files are specified when define the promotion settings of related configurations.\nThe step type\nSend Notification\nis now removed. To specify receivers and conditions of build notifications, please edit advanced settings of related configurations, and enable proper notifications.\nBy default, configuration workspaces (previously named\nconfiguration checkout\ndirectory) are created under the workspace sub directory under the configuration directory. However workspace directories of different configurations can be organized to match the configuration hierarchy with the help of scripting. To demonstrate this, assume we have below configuration hierarchy:\nroot\nprojectA\ncomponentA1\ncomponentA2\nprojectB\ncomponentB1\ncomponentB2\nNow we need to place workspaces of all configuration under the directory\n/workspace\nhierarchically. To do this, just define workspace property of the root configuration as below:\n/\nworkspace\n/\n$\n{\ncurrent\n.\npathName\n}\nThe\nbuild cleanly\noption of configuration is removed since it is not flexible. Instead, each step can be configured to clean up the workspace conditionally (through the property\nworkspace cleanup condition\n), and this gives user the flexibility of defining custom behavior of clean build. For example, if you have a checkout step checking out code at agent1, and deliver code to agent2 to build with a build step. You may want to define two build type:\nclean build\n: workspace of agent running the build step needs to be cleaned up before running the step, while workspace of the agent running checkout step should remain untouched.\nincrement build\n: workspaces of both agents should remain untouched.\nFor scheduled builds, the increment build type should be used; for manual builds, a dialog should be presented to give user a chance to decide whether or not perform a clean build.\nTo accomplish this, define a configuration variable named\nbuildCleanly\nwith the value being\nfalse\n, and set the\nprompt setting\nof the variable as\ncheckbox\n. Then define property\nworkspace cleanup condition\nof checkout step as\nfalse\n, and define the same property of build step as\nvars.get(\"buildCleanly\").booleanValue\n.\nIn this way, you've defined your own notion of clean/increment build. You can even define three or more build types by using the\nselection box\nprompt setting.\nBy default QuickBuild does not prompt for build version when manually triggering a build. To get build version prompted, define a variable with prompt setting being\ntext input\n, and reference value of this variable in\nnext build version\nproperty of the configuration like below:\nvars\n.\nget\n(\n\"buildVersion\"\n)\nHere\nbuildVersion\nrefers to name of the variable defined above. Further more, value of the variable can be specified as:\nversion\n-\nprefix\n-\n$\n{\nvars\n.\nget\n(\n\"nameOfBuildNumberVariable\"\n)\n.\nincrease\n(\n)\n}\nThen version of the build will be auto-increasing if user has not specified value of the variable or if the build is triggered by a scheduler.\nBy default QuickBuild does not prompt for build version when promoting a build. However, version of resulting build can be controlled using almost the same techinque as specifying build version when manually triggers a build mentioned above, with the exception that the variable should be defined as a promotion variable in promotion setting section of the configuration. Specifically if you want to have the resulting build always has the same version as the promoted build, just set the variable as not prompted and specify value of the promote variable as:\n$\n{\nbuild\n.\nversion\n}\nFor Accurev users:\nBy default QuickBuild does not sync replica when detecting changes. To enable the sync, please edit Accurev plugin setting by navigating to page\nAdministration/Plugin Management\n, and set proper value for property\nreplica sync condition\n. For example, this condition can be defined as\ntrue\nso that all defined Accurev repository should sync replica before detecting changes, or can be defined as\nvars.get(\"syncReplica\").booleanValue\n, so that the configuration variable\nsyncReplica\ncan be used to control whether or not sync replica when the configuration is triggered.\nReference tree will always be created now for build purpose.\nFor CVS users: Multiple modules with different labels/branches can not be defined to checkout inside a single CVS repository for simplicity reasons. If you want to check out from different modules of different labels or branches, please define multiple CVS repositories and check out from them respectively.\nFor StarTeam users: Modules concept is removed and multiple views can not be defined to checkout inside a single StarTeam repository for simplicity reasons. If you want to check out from different views, please define multiple StarTeam repositories and check out from them respectively.\nFor Subversion users: Modules concept is removed and only one checkout url can be defined in a single Subversion repository for simplicity reasons. If you want to check out from different urls, please define multiple Subversion repositories and check out from them respectively.\nFor Visual SourceSafe users: Modules concept is removed and only one project can be defined in a single Subversion repository for simplicity reasons. If you want to check out from different projects, please define multiple VSS repositories and check out from them respectively.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Upgrade QuickBuild 1.x",
        "content": ""
      },
      {
        "header": "Upgrade procedureâ",
        "content": "Login to QuickBuild 1.x as administrator, switch to pageAdministration/Backup Database, and backup the database asbackup.xmlunder QuickBuild 1.x's installation directory.Install new QuickBuild version following theinstallation guide.Open a command prompt window, switch to sub directorybinunder QuickBuild's installation directory, and run commandmigrate.sh(ormigrate.baton Windows platform) with a param pointing to QuickBuild 1.x's installation directory.After migration, please check the filemigrate/migrate-log.htmlunder QuickBuild's installation directory for all settings that can not be migrated and needs to be re-configured."
      },
      {
        "header": "Important changes that affect 1.x usersâ",
        "content": "QuickBuild is no longer able to deploy as a WAR into other application servers. Instead, it always run as a standalone application, either in foreground mode, or in service mode.Configurations can now be added/removed/copied/moved directly at dashboard page if login as administrator.Full name of configuration is now separated by character '/', instead of '.'. For example, to refer to configurationproject1defined underroot, the nameroot/project1should be used instead ofroot.project1.Everything defined in the configuration is now inheritable except fornameanddescription.Only QuickBuild administrators (can define more than one admin account) can now edit settings/repositories/steps of configurations for security reasons.Configuration settings such as build necessary condition, variables definitions, promote settings, build clean up strategies are placed into advanced settings tab.Expressions have been changed a lot. Due to complexity of expressions, we can only migrate default expressions that have not been changed by users. For customized expressions, please rewrite them based on the scripting help, which can be accessed by poining mouse to the help icon when edit related properties.By default only one promote destination can be defined now. However multiple promote destinations can be enabled by using variables and scripts as explained in help of propertyconfigurationwhen defined the promotion setting.Promotion mechanism is simplified and a QuickBuild repository is no longer necessary in order to fetch files from promotion source. Instead, promotion files are specified when define the promotion settings of related configurations.The step typeSend Notificationis now removed. To specify receivers and conditions of build notifications, please edit advanced settings of related configurations, and enable proper notifications.By default, configuration workspaces (previously namedconfiguration checkoutdirectory) are created under the workspace sub directory under the configuration directory. However workspace directories of different configurations can be organized to match the configuration hierarchy with the help of scripting. To demonstrate this, assume we have below configuration hierarchy:rootprojectAcomponentA1componentA2projectBcomponentB1componentB2Now we need to place workspaces of all configuration under the directory/workspacehierarchically. To do this, just define workspace property of the root configuration as below:/workspace/${current.pathName}Thebuild cleanlyoption of configuration is removed since it is not flexible. Instead, each step can be configured to clean up the workspace conditionally (through the propertyworkspace cleanup condition), and this gives user the flexibility of defining custom behavior of clean build. For example, if you have a checkout step checking out code at agent1, and deliver code to agent2 to build with a build step. You may want to define two build type:clean build: workspace of agent running the build step needs to be cleaned up before running the step, while workspace of the agent running checkout step should remain untouched.increment build: workspaces of both agents should remain untouched.For scheduled builds, the increment build type should be used; for manual builds, a dialog should be presented to give user a chance to decide whether or not perform a clean build.To accomplish this, define a configuration variable namedbuildCleanlywith the value beingfalse, and set theprompt settingof the variable ascheckbox. Then define propertyworkspace cleanup conditionof checkout step asfalse, and define the same property of build step asvars.get(\"buildCleanly\").booleanValue.In this way, you've defined your own notion of clean/increment build. You can even define three or more build types by using theselection boxprompt setting.By default QuickBuild does not prompt for build version when manually triggering a build. To get build version prompted, define a variable with prompt setting beingtext input, and reference value of this variable innext build versionproperty of the configuration like below:vars.get(\"buildVersion\")HerebuildVersionrefers to name of the variable defined above. Further more, value of the variable can be specified as:version-prefix-${vars.get(\"nameOfBuildNumberVariable\").increase()}Then version of the build will be auto-increasing if user has not specified value of the variable or if the build is triggered by a scheduler.By default QuickBuild does not prompt for build version when promoting a build. However, version of resulting build can be controlled using almost the same techinque as specifying build version when manually triggers a build mentioned above, with the exception that the variable should be defined as a promotion variable in promotion setting section of the configuration. Specifically if you want to have the resulting build always has the same version as the promoted build, just set the variable as not prompted and specify value of the promote variable as:${build.version}For Accurev users:By default QuickBuild does not sync replica when detecting changes. To enable the sync, please edit Accurev plugin setting by navigating to pageAdministration/Plugin Management, and set proper value for propertyreplica sync condition. For example, this condition can be defined astrueso that all defined Accurev repository should sync replica before detecting changes, or can be defined asvars.get(\"syncReplica\").booleanValue, so that the configuration variablesyncReplicacan be used to control whether or not sync replica when the configuration is triggered.Reference tree will always be created now for build purpose.For CVS users: Multiple modules with different labels/branches can not be defined to checkout inside a single CVS repository for simplicity reasons. If you want to check out from different modules of different labels or branches, please define multiple CVS repositories and check out from them respectively.For StarTeam users: Modules concept is removed and multiple views can not be defined to checkout inside a single StarTeam repository for simplicity reasons. If you want to check out from different views, please define multiple StarTeam repositories and check out from them respectively.For Subversion users: Modules concept is removed and only one checkout url can be defined in a single Subversion repository for simplicity reasons. If you want to check out from different urls, please define multiple Subversion repositories and check out from them respectively.For Visual SourceSafe users: Modules concept is removed and only one project can be defined in a single Subversion repository for simplicity reasons. If you want to check out from different projects, please define multiple VSS repositories and check out from them respectively."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Reinstall+Agents",
      "https://wiki.pmease.com/display/QB14/Upgrade+Luntbuild",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data",
      "https://wiki.pmease.com/display/QB14/Installation+Guide",
      "https://wiki.pmease.com/display/QB14/Upgrade+Luntbuild",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Upgrade+Luntbuild",
    "title": "Upgrade Luntbuild",
    "breadcrumb": [
      "",
      "Upgrade Guide",
      "Procedures"
    ],
    "full_text": "Upgrade Guide\nProcedures\nUpgrade Luntbuild\nVersion: QB14\nUpgrade Luntbuild\nPlease follow below procedure to migrate from Luntbuild:\nMigrate Luntbuild data to QuickBuild 1.x format. To do this, please visit\nhttps://build.pmease.com/build/28.latest\n, download QuickBuild 1.x, and follow instructions in the readme file to install QuickBuild 1.x and migrate data from Luntbuild.\nAfter migrating Luntbuild to QuickBuild 1.x,\nfollow this guide\nto migrate QuickBuild 1.x data to current version.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Upgrade Luntbuild",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Reinstall+Agents",
      "https://wiki.pmease.com/display/QB14/Upgrade+Data"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Upgrade+Data",
    "title": "Upgrade Data",
    "breadcrumb": [
      "",
      "Upgrade Guide",
      "Procedures"
    ],
    "full_text": "Upgrade Guide\nProcedures\nUpgrade Data\nVersion: QB14\nUpgrade Data\nStop QuickBuild server of previous version, you do not need to stop agents since they will be auto-upgraded after server is upgraded.\nExtract installation package of new version to a new directory.\nOpen a command line window, and switch to the\nbin\nsub directory under the\nnew version\n's installation directory. Run command\nmigrate.(bat|sh) <install directory of previous QuickBuild version>\nto migrate from previous QuickBuild version.\nFor windows platform, NT service will be installed automatically for the new QuickBuild server if old QuickBuild server is configured to run as NT service. However the new service runs with local system account initially and the \"interact with desktop\" option is disabled. You will need to change this manually after migration if necessary.\nStart QuickBuild server in new installation directory and agents will be auto-updated. It will take a while for them to appear in the build grid.\nVerify server and agent installation by running some builds.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Upgrade Data",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Reinstall+Agents"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Resource+Management",
    "title": "Resource Management",
    "breadcrumb": [],
    "full_text": "Version: QB14\nResource Management\nTable Of Contents\nOne Build For One Agent\nExclusive Deployment\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Resource Management",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/One+Build+For+One+Agent",
      "https://wiki.pmease.com/display/QB14/Exclusive+Deployment"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/RESTful+API",
    "title": "RESTful API",
    "breadcrumb": [],
    "full_text": "Version: QB14\nRESTful API\nWith the\nRESTful API\nintroduced in QuickBuild 2.1, external system can interact with QuickBuild through standard http methods such as get, put, post and delete, in regardless of the programming language the external system is using.\nThis chapter explains how to work with this RESTful API. To facilitate the explanation, we assume that the QuickBuild server url is\nhttp://localhost:8810\n, and the administrator account is\nadmin\n, and its password is\nadmin\n. We also use\ncurl\nto demonstrate the interaction with QuickBuild RESTful API.\nTable Of Contents\nAvailable Clients\nGet API Version\nInteract with Audits\nInteract with Configurations\nInteract with Builds\nInteract with Latest Builds\nInteract with Build Requests\nTrigger Build via GET Request\nInteract with Users\nInteract with Groups\nInteract with Group Memberships\nInteract with Dashboards\nInteract with Group Share\nInteract with User Share\nInteract with Cloud Profiles\nInteract with Configuration Authorizations\nInteract with Resources\nInteract with Agent Tokens\nGet System Attributes of Grid Node\nGet and Set User Attributes of Grid Node\nInteract with Reports\nInteract with Changes\nInteract with Issues\nQuery Build Notifications\nQuery Grid Measurements\nAccess Information of Published Files\nInteract with Build Agents\nBackup Database\nPause System\nResume System\nCheck System Pause Information\nRetrieve Object Identifier\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "RESTful API",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Available+Clients",
      "https://wiki.pmease.com/display/QB14/Get+API+Version",
      "https://wiki.pmease.com/display/QB14/Interact+with+Audits",
      "https://wiki.pmease.com/display/QB14/Interact+with+Configurations",
      "https://wiki.pmease.com/display/QB14/Interact+with+Builds",
      "https://wiki.pmease.com/display/QB14/Interact+with+Latest+Builds",
      "https://wiki.pmease.com/display/QB14/Interact+with+Build+Requests",
      "https://wiki.pmease.com/display/QB14/Trigger+Build+via+GET+Request",
      "https://wiki.pmease.com/display/QB14/Interact+with+Users",
      "https://wiki.pmease.com/display/QB14/Interact+with+Groups",
      "https://wiki.pmease.com/display/QB14/Interact+with+Group+Memberships",
      "https://wiki.pmease.com/display/QB14/Interact+with+Dashboards",
      "https://wiki.pmease.com/display/QB14/Interact+with+Group+Share",
      "https://wiki.pmease.com/display/QB14/Interact+with+User+Share",
      "https://wiki.pmease.com/display/QB14/Interact+with+Cloud+Profiles",
      "https://wiki.pmease.com/display/QB14/Interact+with+Configuration+Authorizations",
      "https://wiki.pmease.com/display/QB14/Interact+with+Resources",
      "https://wiki.pmease.com/display/QB14/Interact+with+Agent+Tokens",
      "https://wiki.pmease.com/display/QB14/Get+System+Attributes+of+Grid+Node",
      "https://wiki.pmease.com/display/QB14/Get+and+Set+User+Attributes+of+Grid+Node",
      "https://wiki.pmease.com/display/QB14/Interact+with+Reports",
      "https://wiki.pmease.com/display/QB14/Interact+with+Changes",
      "https://wiki.pmease.com/display/QB14/Interact+with+Issues",
      "https://wiki.pmease.com/display/QB14/Query+Build+Notifications",
      "https://wiki.pmease.com/display/QB14/Query+Grid+Measurements",
      "https://wiki.pmease.com/display/QB14/Access+Information+of+Published+Files",
      "https://wiki.pmease.com/display/QB14/Interact+with+Build+Agents",
      "https://wiki.pmease.com/display/QB14/Backup+Database",
      "https://wiki.pmease.com/display/QB14/Pause+System",
      "https://wiki.pmease.com/display/QB14/Resume+System",
      "https://wiki.pmease.com/display/QB14/Check+System+Pause+Information",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Reinstall+Agents",
    "title": "Reinstall Agents",
    "breadcrumb": [
      "",
      "Upgrade Guide",
      "Procedures"
    ],
    "full_text": "Upgrade Guide\nProcedures\nReinstall Agents\nVersion: QB14\nOn this page\nReinstall Agents\nReinstall build agents\nâ\nBackup the file\nconf/attributes.properties\nunder build agent's installation directory.\nDelete build agent's installation directory.\nInstall build agents following\nthis guide\n.\nOverwrite file\nconf/attributes.properties\nunder build agent's installation directory with the file backed up previously.\nReinstall user agents\nâ\nBackup the file\nconf/attributes.properties\nunder user agent's installation directory.\nDelete user agent's installation directory.\nInstall user agents following\nthis guide\n.\nOverwrite file\nconf/attributes.properties\nunder user agent's installation directory with the file backed up previously.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Reinstall Agents",
        "content": ""
      },
      {
        "header": "Reinstall build agentsâ",
        "content": "Backup the fileconf/attributes.propertiesunder build agent's installation directory.Delete build agent's installation directory.Install build agents followingthis guide.Overwrite fileconf/attributes.propertiesunder build agent's installation directory with the file backed up previously."
      },
      {
        "header": "Reinstall user agentsâ",
        "content": "Backup the fileconf/attributes.propertiesunder user agent's installation directory.Delete user agent's installation directory.Install user agents followingthis guide.Overwrite fileconf/attributes.propertiesunder user agent's installation directory with the file backed up previously."
      }
    ],
    "links": []
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Configuration+Dashboard",
    "title": "Configuration Dashboard",
    "breadcrumb": [
      "",
      "User's Guide",
      "Working with Configurations"
    ],
    "full_text": "User's Guide\nWorking with Configurations\nConfiguration Dashboard\nVersion: QB14\nConfiguration Dashboard\nA configuration specific dashboard to display brief information of a configuration, including description, next build version, overall build success rate, average build duration, error messages, recent builds, and pending build requests.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Configuration Dashboard",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Configuration+Navigation",
      "https://wiki.pmease.com/display/QB14/Run+Configuration",
      "https://wiki.pmease.com/display/QB14/Add+configuration",
      "https://wiki.pmease.com/display/QB14/Copy+Configurations",
      "https://wiki.pmease.com/display/QB14/Delete+Configurations",
      "https://wiki.pmease.com/display/QB14/Move+Configurations",
      "https://wiki.pmease.com/display/QB14/Configuration+Settings",
      "https://wiki.pmease.com/display/QB14/Workspace+Tab",
      "https://wiki.pmease.com/display/QB14/Storage+tab",
      "https://wiki.pmease.com/display/QB14/Configuration+Navigation"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Configuration+Navigation",
    "title": "Configuration Navigation",
    "breadcrumb": [
      "",
      "User's Guide",
      "Working with Configurations"
    ],
    "full_text": "User's Guide\nWorking with Configurations\nConfiguration Navigation\nVersion: QB14\nConfiguration Navigation\nThere are several ways to navigate between configurations in QuickBuild:\nNavigate to configuration from dashboard\nNavigate to configuration through configuration chooser or breadcrumb\nNavigate to configuration from children tab\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Configuration Navigation",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Run+Configuration",
      "https://wiki.pmease.com/display/QB14/Add+configuration",
      "https://wiki.pmease.com/display/QB14/Copy+Configurations",
      "https://wiki.pmease.com/display/QB14/Delete+Configurations",
      "https://wiki.pmease.com/display/QB14/Move+Configurations",
      "https://wiki.pmease.com/display/QB14/Configuration+Settings",
      "https://wiki.pmease.com/display/QB14/Workspace+Tab",
      "https://wiki.pmease.com/display/QB14/Storage+tab",
      "https://wiki.pmease.com/display/QB14/Run+Configuration"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Run+Configuration",
    "title": "Run Configuration",
    "breadcrumb": [
      "",
      "User's Guide",
      "Working with Configurations"
    ],
    "full_text": "User's Guide\nWorking with Configurations\nRun Configuration\nVersion: QB14\nRun Configuration\nConfiguration can be triggered manually through configuration dashboard or through the configuration toolbar.\nRun configuration through configuration dashboard\nRun configuration through configuration toolbar\nAfter a configuration is triggered, QuickBuild will switch to display latest build of the configuration. If the configuration is running without any error, you will see the newly generated build after several seconds.\nConfiguration can also be triggered by the scheduler. Refer to the administrator's guide on how to do this.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Run Configuration",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Add+configuration",
      "https://wiki.pmease.com/display/QB14/Copy+Configurations",
      "https://wiki.pmease.com/display/QB14/Delete+Configurations",
      "https://wiki.pmease.com/display/QB14/Move+Configurations",
      "https://wiki.pmease.com/display/QB14/Configuration+Settings",
      "https://wiki.pmease.com/display/QB14/Workspace+Tab",
      "https://wiki.pmease.com/display/QB14/Storage+tab",
      "https://wiki.pmease.com/display/QB14/Add+configuration"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Add+configuration",
    "title": "Add configuration",
    "breadcrumb": [
      "",
      "User's Guide",
      "Working with Configurations"
    ],
    "full_text": "User's Guide\nWorking with Configurations\nAdd configuration\nVersion: QB14\nAdd configuration\nTo add child configuration, please login as administrator, select the configuration under which you want to add a child, and click the add button as demonstrated below:\nThe newly added configuration will inherit settings from parent configuration until you've override them.\ninfo\nThis operation is only available to administrators.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Add configuration",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Copy+Configurations",
      "https://wiki.pmease.com/display/QB14/Delete+Configurations",
      "https://wiki.pmease.com/display/QB14/Move+Configurations",
      "https://wiki.pmease.com/display/QB14/Configuration+Settings",
      "https://wiki.pmease.com/display/QB14/Workspace+Tab",
      "https://wiki.pmease.com/display/QB14/Storage+tab",
      "https://wiki.pmease.com/display/QB14/Copy+Configurations"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Copy+Configurations",
    "title": "Copy Configurations",
    "breadcrumb": [
      "",
      "User's Guide",
      "Working with Configurations"
    ],
    "full_text": "User's Guide\nWorking with Configurations\nCopy Configurations\nVersion: QB14\nCopy Configurations\nNew configurations can also be added by copying an existing configuration shown as below:\ninfo\nThis operation is only available to administrators.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Copy Configurations",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Delete+Configurations",
      "https://wiki.pmease.com/display/QB14/Move+Configurations",
      "https://wiki.pmease.com/display/QB14/Configuration+Settings",
      "https://wiki.pmease.com/display/QB14/Workspace+Tab",
      "https://wiki.pmease.com/display/QB14/Storage+tab",
      "https://wiki.pmease.com/display/QB14/Delete+Configurations"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Delete+Configurations",
    "title": "Delete Configurations",
    "breadcrumb": [
      "",
      "User's Guide",
      "Working with Configurations"
    ],
    "full_text": "User's Guide\nWorking with Configurations\nDelete Configurations\nVersion: QB14\nDelete Configurations\nConfiguration can be deleted by selecting the configuration and click the delete button as shown below:\nTo delete multiple child configurations at the same time, please switch to children page, select child configurations you want to delete, and hit the delete button, as shown below:\ndanger\nWarn\nWhen a configuration is selected to be deleted, all its descendent configurations and all builds contained in these configurations will also be deleted.\ninfo\nThis operation is only available to administrators.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Delete Configurations",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Move+Configurations",
      "https://wiki.pmease.com/display/QB14/Configuration+Settings",
      "https://wiki.pmease.com/display/QB14/Workspace+Tab",
      "https://wiki.pmease.com/display/QB14/Storage+tab",
      "https://wiki.pmease.com/display/QB14/Move+Configurations"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Move+Configurations",
    "title": "Move Configurations",
    "breadcrumb": [
      "",
      "User's Guide",
      "Working with Configurations"
    ],
    "full_text": "User's Guide\nWorking with Configurations\nMove Configurations\nVersion: QB14\nMove Configurations\nTo move configurations to be under another parent, please do the following:\nLogin as administrator and switch to children page of current parent of the configuration you want to move.\nSelect one or more child configurations from there, and click the move button\nSelect new parent of these configurations.\nThis process is demonstrated with below screenshot:\ninfo\nThis feature can also be used to manually archive inactive configurations by parenting them to some un-used configurations.\ninfo\nThis operation is only available to administrators.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Move Configurations",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Configuration+Settings",
      "https://wiki.pmease.com/display/QB14/Workspace+Tab",
      "https://wiki.pmease.com/display/QB14/Storage+tab",
      "https://wiki.pmease.com/display/QB14/Configuration+Settings"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Configuration+Settings",
    "title": "Configuration Settings",
    "breadcrumb": [
      "",
      "User's Guide",
      "Working with Configurations"
    ],
    "full_text": "User's Guide\nWorking with Configurations\nConfiguration Settings\nVersion: QB14\nConfiguration Settings\nConfiguation setting menu will be available if current user is allowed to view configuration settings:\nMost of the configuration settings are inheritable. Taking configuration schedule for example, assume below configuration hierarchy:\nroot\nproject1\nqa\nIf configuration\nroot/project1\nand\nroot/project1/qa\ndo not define their own schedules, while configuration\nroot\ndefines a schedule which triggers every 5 minutes, the configuration\nroot/project1/qa\nwill inherit schedule defined in configuration\nroot\nand consequently be triggered every 5 minutes. If a schedule is defined in\nroot/project1\n, that schedule will be used for\nroot/project1/qa\ninstead.\ninfo\nConfiguration settings can only be edited by users with permission to edit configuration settings.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Configuration Settings",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Workspace+Tab",
      "https://wiki.pmease.com/display/QB14/Storage+tab",
      "https://wiki.pmease.com/display/QB14/Workspace+Tab"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Workspace+Tab",
    "title": "Workspace Tab",
    "breadcrumb": [
      "",
      "User's Guide",
      "Working with Configurations"
    ],
    "full_text": "User's Guide\nWorking with Configurations\nWorkspace Tab\nVersion: QB14\nWorkspace Tab\nWorkspace\ntab will be visible to users who have permission to access workspace of current configuration. Each node has its own workspace for each configuration as demonstrated below:\nWorkspace relative path\nWhen mentioning a file (or directory)'s workspace relative path, we mean the file path relative to the workspace. Workspace relative path can be determined easily from workspace tab as shown in the above screenshot.\nClean workspace\nWorkspace cleanup will be necessary if you want to do a clean build or if workspace files are out of sync with SCM. Workspace files may got out of sync if:\nSwitch to use a different SCM, or different address of the same SCM.\nThe SCM server is restored to previous status which does not contain revision in current workspace.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Workspace Tab",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Storage+tab",
      "https://wiki.pmease.com/display/QB14/Storage+tab"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Storage+tab",
    "title": "Storage tab",
    "breadcrumb": [
      "",
      "User's Guide",
      "Working with Configurations"
    ],
    "full_text": "User's Guide\nWorking with Configurations\nStorage tab\nVersion: QB14\nStorage tab\nStorage tab displays\nStorage Directory\nof current configuration. Please note that multiple configurations may share the same storage directory.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Storage tab",
        "content": ""
      }
    ],
    "links": []
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Display+Custom+Build+Info",
    "title": "Display Custom Build Info",
    "breadcrumb": [
      "",
      "User's Guide",
      "Working with Builds"
    ],
    "full_text": "User's Guide\nWorking with Builds\nDisplay Custom Build Info\nVersion: QB14\nDisplay Custom Build Info\nCustom build info can be displayed in build summary section and build history table by defining custom fields in advanced setting of the configuration like below:\nIn this screenshot, we define a custom column to display Subversion revision used by the build via repository\nmyrepo\n, then QuickBuild will display build summary info as below:\nAnd build history page as below:\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Display Custom Build Info",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Build+Navigation",
      "https://wiki.pmease.com/display/QB14/Build+Dashboard",
      "https://wiki.pmease.com/display/QB14/Run+Build",
      "https://wiki.pmease.com/display/QB14/Recommend+Build",
      "https://wiki.pmease.com/display/QB14/Promote+Build",
      "https://wiki.pmease.com/display/QB14/Stop+Build+Forcibly",
      "https://wiki.pmease.com/display/QB14/Delete+Build",
      "https://wiki.pmease.com/display/QB14/RSS+Feeds",
      "https://wiki.pmease.com/display/QB14/Dependent+and+Dependency+Builds",
      "https://wiki.pmease.com/display/QB14/Diagnose+Build+Failures",
      "https://wiki.pmease.com/display/QB14/Build+Navigation"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Build+Navigation",
    "title": "Build Navigation",
    "breadcrumb": [
      "",
      "User's Guide",
      "Working with Builds"
    ],
    "full_text": "User's Guide\nWorking with Builds\nBuild Navigation\nVersion: QB14\nBuild Navigation\nNavigate to latest build from dashboard\nNavigate between builds using build navigator\nNavigate to latest build using build chooser\n{#BuildNavigation-buildhistory}Navigate to build history\n{#BuildNavigation-findbuilds}Find desired builds\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Build Navigation",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Build+Dashboard",
      "https://wiki.pmease.com/display/QB14/Run+Build",
      "https://wiki.pmease.com/display/QB14/Recommend+Build",
      "https://wiki.pmease.com/display/QB14/Promote+Build",
      "https://wiki.pmease.com/display/QB14/Stop+Build+Forcibly",
      "https://wiki.pmease.com/display/QB14/Delete+Build",
      "https://wiki.pmease.com/display/QB14/RSS+Feeds",
      "https://wiki.pmease.com/display/QB14/Dependent+and+Dependency+Builds",
      "https://wiki.pmease.com/display/QB14/Diagnose+Build+Failures",
      "https://wiki.pmease.com/display/QB14/Build+Dashboard"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Build+Dashboard",
    "title": "Build Dashboard",
    "breadcrumb": [
      "",
      "User's Guide",
      "Working with Builds"
    ],
    "full_text": "User's Guide\nWorking with Builds\nBuild Dashboard\nVersion: QB14\nBuild Dashboard\nBuild dashboard page gives an overview of current build.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Build Dashboard",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Run+Build",
      "https://wiki.pmease.com/display/QB14/Recommend+Build",
      "https://wiki.pmease.com/display/QB14/Promote+Build",
      "https://wiki.pmease.com/display/QB14/Stop+Build+Forcibly",
      "https://wiki.pmease.com/display/QB14/Delete+Build",
      "https://wiki.pmease.com/display/QB14/RSS+Feeds",
      "https://wiki.pmease.com/display/QB14/Dependent+and+Dependency+Builds",
      "https://wiki.pmease.com/display/QB14/Diagnose+Build+Failures",
      "https://wiki.pmease.com/display/QB14/Run+Build"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Run+Build",
    "title": "Run Build",
    "breadcrumb": [
      "",
      "User's Guide",
      "Working with Builds"
    ],
    "full_text": "User's Guide\nWorking with Builds\nRun Build\nVersion: QB14\nRun Build\nBuild can be manually triggered by\nrunning configuration\n. After a build is triggered, it will be put into the queue. If there are no idle threads in the queue, the build will wait until a free thread is available as demonstrated below:\nThe build will then be put into running status if it is picked up by a free thread in the queue. Build log tab will display latest 500 log entries and will be auto-refreshed while the build is running.\ndanger\nThe step status graph and build log tab is only visible to users who are allowed to access build logs.\nAfter the build finished, the step status graph will disappear from the build overview page. However, it can be brought out by clicking the\nsteps\ntab like below:\nThe build log tab will display the full build log after build finishes.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Run Build",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Recommend+Build",
      "https://wiki.pmease.com/display/QB14/Promote+Build",
      "https://wiki.pmease.com/display/QB14/Stop+Build+Forcibly",
      "https://wiki.pmease.com/display/QB14/Delete+Build",
      "https://wiki.pmease.com/display/QB14/RSS+Feeds",
      "https://wiki.pmease.com/display/QB14/Dependent+and+Dependency+Builds",
      "https://wiki.pmease.com/display/QB14/Diagnose+Build+Failures",
      "https://wiki.pmease.com/display/QB14/Recommend+Build"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Recommend+Build",
    "title": "Recommend Build",
    "breadcrumb": [
      "",
      "User's Guide",
      "Working with Builds"
    ],
    "full_text": "User's Guide\nWorking with Builds\nRecommend Build\nVersion: QB14\nRecommend Build\nSuccessful builds can be recommended by clicking the recommend button. After recommendation, a star icon will appear beside the build version. This functionality can be used to suggest good build.\nA recommended build can be un-recommended later on.\ndanger\nPlease note that the recommend and un-recommend button is only visible to users who are allowed to recommend builds.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Recommend Build",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Promote+Build",
      "https://wiki.pmease.com/display/QB14/Stop+Build+Forcibly",
      "https://wiki.pmease.com/display/QB14/Delete+Build",
      "https://wiki.pmease.com/display/QB14/RSS+Feeds",
      "https://wiki.pmease.com/display/QB14/Dependent+and+Dependency+Builds",
      "https://wiki.pmease.com/display/QB14/Diagnose+Build+Failures",
      "https://wiki.pmease.com/display/QB14/Promote+Build"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Promote+Build",
    "title": "Promote Build",
    "breadcrumb": [
      "",
      "User's Guide",
      "Working with Builds"
    ],
    "full_text": "User's Guide\nWorking with Builds\nPromote Build\nVersion: QB14\nPromote Build\nBuild promotion\ncan be used to manage build life cycle in QuickBuild. A build can be promoted to another build if all below conditions are satisfied:\nCurrent configuration is enabled for build promotion.\nCurrent user is authorized with the permission to promote build in this configuration.\nThe build is recommended, or if the build is successful and the \"recommended build only\" option is not enabled for build promotion setting.\nIn a build promotion process, the source build refers to the build being promoted. Below is a screenshot of build being promoted:\nThe destination build in a promotion process represents the build being promoted to. The destination build will link back to the source build after the promotion. The source link can only be displayed if the source build resides on the same server as the destination build.\n{#PromoteBuild-buildchanges}In a promotion process, changes will be calculated against previous build of the destination build, instead of source build. Assume below scenario:\nBuild\nQA1\ncontains change1, and is promoted to\nRelease1\n.\nBuild\nQA2\ncontains change2. It is not promoted.\nBuild\nQA3\ncontains change3, and is promoted to\nRelease2\n.\nWhen calculate changes for\nRelease2\n, the base build will be\nRelease1\n. Hence the calculated changes of\nRelease2\nwill be change2 and change3.\nRefer to\nWorking with Changes\nfor details of build changes.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Promote Build",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Stop+Build+Forcibly",
      "https://wiki.pmease.com/display/QB14/Delete+Build",
      "https://wiki.pmease.com/display/QB14/RSS+Feeds",
      "https://wiki.pmease.com/display/QB14/Dependent+and+Dependency+Builds",
      "https://wiki.pmease.com/display/QB14/Diagnose+Build+Failures",
      "https://wiki.pmease.com/display/QB14/Stop+Build+Forcibly"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Stop+Build+Forcibly",
    "title": "Stop Build Forcibly",
    "breadcrumb": [
      "",
      "User's Guide",
      "Working with Builds"
    ],
    "full_text": "User's Guide\nWorking with Builds\nStop Build Forcibly\nVersion: QB14\nStop Build Forcibly\nBuild can be forcibly stopped by clicking the stop button as below:\nTo stop multiple builds, please login as administrator and switch to\nqueues\ntab\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Stop Build Forcibly",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Delete+Build",
      "https://wiki.pmease.com/display/QB14/RSS+Feeds",
      "https://wiki.pmease.com/display/QB14/Dependent+and+Dependency+Builds",
      "https://wiki.pmease.com/display/QB14/Diagnose+Build+Failures",
      "https://wiki.pmease.com/display/QB14/Delete+Build"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Delete+Build",
    "title": "Delete Build",
    "breadcrumb": [
      "",
      "User's Guide",
      "Working with Builds"
    ],
    "full_text": "User's Guide\nWorking with Builds\nDelete Build\nVersion: QB14\nOn this page\nDelete Build\nDelete builds manually\nâ\nBuild can only be deleted if current user has permission to delete builds in current configuration. After a build is deleted from the build page, the latest build in the configuration will be displayed. To delete multiple builds in the same time, one has to [navigate to build history page](Build Navigation.html#BuildNavigation-buildhistory) first. As an\nadministrator\n, one can also [search desired builds](Build Navigation.html#BuildNavigation-findbuilds) and delete them batchly from the find result page.\nDelete builds automatically\nâ\nIn a busy system, number of builds increase rapidly. This may consume a lot of disk spaces, and the system may respond slowly for certain operations if there are large number of builds. In such case, it is convenient to delete unwanted builds automatically if certain condition is satisfied. This can be done by specifying build cleanup strategy in advanced settings of related configurations. Currently two cleanup strategies are supported: reserve by days, and reserve by count. Once a cleanup strategy is defined for a configuration, all ocnfigurations in the subtree will use the same strategy unless a descendent configuration overrides this strategy.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Delete Build",
        "content": ""
      },
      {
        "header": "Delete builds manuallyâ",
        "content": "Build can only be deleted if current user has permission to delete builds in current configuration. After a build is deleted from the build page, the latest build in the configuration will be displayed. To delete multiple builds in the same time, one has to [navigate to build history page](Build Navigation.html#BuildNavigation-buildhistory) first. As anadministrator, one can also [search desired builds](Build Navigation.html#BuildNavigation-findbuilds) and delete them batchly from the find result page."
      },
      {
        "header": "Delete builds automaticallyâ",
        "content": "In a busy system, number of builds increase rapidly. This may consume a lot of disk spaces, and the system may respond slowly for certain operations if there are large number of builds. In such case, it is convenient to delete unwanted builds automatically if certain condition is satisfied. This can be done by specifying build cleanup strategy in advanced settings of related configurations. Currently two cleanup strategies are supported: reserve by days, and reserve by count. Once a cleanup strategy is defined for a configuration, all ocnfigurations in the subtree will use the same strategy unless a descendent configuration overrides this strategy."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/RSS+Feeds",
      "https://wiki.pmease.com/display/QB14/Dependent+and+Dependency+Builds",
      "https://wiki.pmease.com/display/QB14/Diagnose+Build+Failures",
      "https://wiki.pmease.com/display/QB14/RSS+Feeds"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/RSS+Feeds",
    "title": "RSS Feeds",
    "breadcrumb": [
      "",
      "User's Guide",
      "Working with Builds"
    ],
    "full_text": "User's Guide\nWorking with Builds\nRSS Feeds\nVersion: QB14\nRSS Feeds\nRSS link will be displayed in [build history page](Build Navigation.html#BuildNavigation-buildhistory). Clicking this link will get a RSS feed for all builds matching specified status. The filter options are ignored for RSS feeds. For example, to get RSS feed of failed builds, just select the\nFailed Builds\nfrom the build chooser, and then click the RSS link button in the result page as demonstrated below:\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "RSS Feeds",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Dependent+and+Dependency+Builds",
      "https://wiki.pmease.com/display/QB14/Diagnose+Build+Failures",
      "https://wiki.pmease.com/display/QB14/Dependent+and+Dependency+Builds"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Dependent+and+Dependency+Builds",
    "title": "Dependent and Dependency Builds",
    "breadcrumb": [
      "",
      "User's Guide",
      "Working with Builds"
    ],
    "full_text": "User's Guide\nWorking with Builds\nDependent and Dependency Builds\nVersion: QB14\nDependent and Dependency Builds\nBuild dependency is handled in QuickBuild through\nQuickBuild repository\n. If build A uses artifacts of build B to accomplish its build, the following statement will hold to true:\nBuild A depends on build B\nB is a dependency build of A\nA is a dependent build of B\nFor a particular build, its dependency and dependent builds can be accessed as below:\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Dependent and Dependency Builds",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Diagnose+Build+Failures",
      "https://wiki.pmease.com/display/QB14/Diagnose+Build+Failures"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Diagnose+Build+Failures",
    "title": "Diagnose Build Failures",
    "breadcrumb": [
      "",
      "User's Guide",
      "Working with Builds"
    ],
    "full_text": "User's Guide\nWorking with Builds\nDiagnose Build Failures\nVersion: QB14\nDiagnose Build Failures\nAccess build failure message from dashboard\nAccess build failure message from overview screen\nYou may also open the build log directly to investigate the error. Note that the build log tab is only visible to users who are allowed to access build log.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Diagnose Build Failures",
        "content": ""
      }
    ],
    "links": []
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Working+with+Issue+Tracker",
    "title": "Working with Issue Tracker",
    "breadcrumb": [],
    "full_text": "Version: QB14\nOn this page\nWorking with Issue Tracker\nQuickBuild works with issue tracker tightly:\nHyperlink the issues in SCM commit messages to issue tracker\nGenerate an issues report which will show you all the issues related with a build and also you can list all issues from a specified build.\nList all changed files against an issue\nUpdate issue status via SCM commit messages\nRelease a version/milestone to issue tracker\nAdd the fixed version/milestone for issues mentioned in SCM commit messages\nCreate an issue via a step which is useful if you want to track the build status in your issue tracker\nDevelopers can now update their issues via\ncommit commands\nand need not update their issues manually from Issue Tracker GUI. Moreover, QuickBuild can manage or release a version to issue tracker and also update fixed version field or something equivalent of the issues which can help you generate the release notes easily.\nSupported Issue Tracker\nâ\nBelow table lists the supported issue tracker:\nIssue Tracker\nVersion\nAtlassian Jira\n3.13.3 or higher\nBugzilla\n3.4 or higher\nTrac\n0.11 or higher\nCollabNet TeamForge\n5.4 or higher\nRedmine\n1.1 or higher\nIf you use a different issue tracker QuickBuild not supported yet, read\nthis document\nand it will also help you to hyperlink the issue keys mentioned in the commit messages. Or you may consider write a plugin to support, it is very easy.\nBasic Features Overview\nâ\nIssues In Build Overview\nâ\nAll issues will be hyperlinked and when mouse is hover on the issue key, the summary will be displayed:\nIssues Report\nâ\nAll issues mentioned in commit message will be collected and you will get a report in build Issues tab, the issues will be updated automatically from your tracker server so that the report can always keep accurate:\nYou can also select a build to generate the issues report:\nand to know what files were changed against an issue:\nAdvanced Features\nâ\nFor most of the issue trackers, QuickBuild supply more advanced features:\nUpdate issues/tickets via SCM commit messages\nRelease a version/milestone to issue tracker\nAdd the fixed version/milestone for issues mentioned in SCM commit messages\nRead below documents to know more:\nIntegrating QuickBuild with JIRA\nIntegrating QuickBuild with TeamForge\nIntegrating QuickBuild with Trac\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Working with Issue Tracker",
        "content": ""
      },
      {
        "header": "Supported Issue Trackerâ",
        "content": "Below table lists the supported issue tracker: Issue TrackerVersionAtlassian Jira3.13.3 or higherBugzilla3.4 or higherTrac0.11 or higherCollabNet TeamForge5.4 or higherRedmine1.1 or higher If you use a different issue tracker QuickBuild not supported yet, readthis documentand it will also help you to hyperlink the issue keys mentioned in the commit messages. Or you may consider write a plugin to support, it is very easy."
      },
      {
        "header": "Basic Features Overviewâ",
        "content": ""
      },
      {
        "header": "Issues In Build Overviewâ",
        "content": "All issues will be hyperlinked and when mouse is hover on the issue key, the summary will be displayed:"
      },
      {
        "header": "Issues Reportâ",
        "content": "All issues mentioned in commit message will be collected and you will get a report in build Issues tab, the issues will be updated automatically from your tracker server so that the report can always keep accurate: You can also select a build to generate the issues report: and to know what files were changed against an issue:"
      },
      {
        "header": "Advanced Featuresâ",
        "content": "For most of the issue trackers, QuickBuild supply more advanced features: Update issues/tickets via SCM commit messagesRelease a version/milestone to issue trackerAdd the fixed version/milestone for issues mentioned in SCM commit messages Read below documents to know more: Integrating QuickBuild with JIRAIntegrating QuickBuild with TeamForgeIntegrating QuickBuild with Trac"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Commit+Command",
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+Other+Issue+Tracker",
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+JIRA",
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+TeamForge",
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+Trac"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Working+with+Coverage+Report",
    "title": "Working with Coverage Report",
    "breadcrumb": [
      "",
      "User's Guide",
      "Working with Reports"
    ],
    "full_text": "User's Guide\nWorking with Reports\nWorking with Coverage Report\nVersion: QB14\nOn this page\nWorking with Coverage Report\nAfter publishing the coverage report, QuickBuild can display the coverage report in build page and statistics page. Below we will use Cobertura as an example. Different coverage tool may have different view, but in most cases, they have the same look-and-feel.\nBuild Overview\nâ\nBy Package\nâ\nBy Class\nâ\nBy Method\nâ\nView Source code\nâ\nView Coverage Trends\nâ\nView Aggregated Coverage Data\nâ\nIf you have defined aggregation, a panel in the configuration overview will list the recent coverage data in the child configurations\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Working with Coverage Report",
        "content": ""
      },
      {
        "header": "Build Overviewâ",
        "content": ""
      },
      {
        "header": "By Packageâ",
        "content": ""
      },
      {
        "header": "By Classâ",
        "content": ""
      },
      {
        "header": "By Methodâ",
        "content": ""
      },
      {
        "header": "View Source codeâ",
        "content": ""
      },
      {
        "header": "View Coverage Trendsâ",
        "content": ""
      },
      {
        "header": "View Aggregated Coverage Dataâ",
        "content": "If you have defined aggregation, a panel in the configuration overview will list the recent coverage data in the child configurations"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Working+with+Inspection+Report",
      "https://wiki.pmease.com/display/QB14/Working+with+Test+Report",
      "https://wiki.pmease.com/display/QB14/Working+with+Inspection+Report"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Working+with+Inspection+Report",
    "title": "Working with Inspection Report",
    "breadcrumb": [
      "",
      "User's Guide",
      "Working with Reports"
    ],
    "full_text": "User's Guide\nWorking with Reports\nWorking with Inspection Report\nVersion: QB14\nOn this page\nWorking with Inspection Report\nAfter publishing the inspection report, QuickBuild can display the inspection report in build page and statistics page. Below we will use Fxcop as an example. Different inspection tool may have different view, but in most cases, they have the same look-and-feel.\nBuild Overview\nâ\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Working with Inspection Report",
        "content": ""
      },
      {
        "header": "Build Overviewâ",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Working+with+Test+Report",
      "https://wiki.pmease.com/display/QB14/Working+with+Test+Report"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Working+with+Test+Report",
    "title": "Working with Test Report",
    "breadcrumb": [
      "",
      "User's Guide",
      "Working with Reports"
    ],
    "full_text": "User's Guide\nWorking with Reports\nWorking with Test Report\nVersion: QB14\nOn this page\nWorking with Test Report\nAfter publishing the test report successfully, QuickBuild will display the tests information in the build overview:\nand also a report tab is displayed in the build page, for example, you will find a JUnit Report tab in the build page after JUnit report is published, and you can navigate the tabs to get the detailed information.\nwarning\nThe sub tabs may be a little different for the different kind of test report. QuickBuild always tries to display as more information as possible based on the original report.\nBelow we will use JUnit report as an example.\nFailed Tests\nâ\nThe tab display all failed tests:\nBy Package\nâ\nThe tab displays the test info by package:\nBy Testsuite\nâ\nThe tab displays the test info by testsuite:\nBy Test\nâ\nThe tab displays all tests information:\nand when you click the icon\n, the detailed information is displayed in a popeup dialog like below:\nTest Trends\nâ\nIn\nstatistics page\n, the test trends can display the top error-proned tests, top longest tests and all run the tests in the history:\nView aggregated tests information\nâ\nIf a configuration defines the aggregations, a panel in the configuration overview will summarize the tests information and list all recent test information in its child configurations:\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Working with Test Report",
        "content": ""
      },
      {
        "header": "Failed Testsâ",
        "content": "The tab display all failed tests:"
      },
      {
        "header": "By Packageâ",
        "content": "The tab displays the test info by package:"
      },
      {
        "header": "By Testsuiteâ",
        "content": "The tab displays the test info by testsuite:"
      },
      {
        "header": "By Testâ",
        "content": "The tab displays all tests information: and when you click the icon, the detailed information is displayed in a popeup dialog like below:"
      },
      {
        "header": "Test Trendsâ",
        "content": "Instatistics page, the test trends can display the top error-proned tests, top longest tests and all run the tests in the history:"
      },
      {
        "header": "View aggregated tests informationâ",
        "content": "If a configuration defines the aggregations, a panel in the configuration overview will summarize the tests information and list all recent test information in its child configurations:"
      }
    ],
    "links": []
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Working+with+Configurations",
    "title": "Working with Configurations",
    "breadcrumb": [],
    "full_text": "Version: QB14\nWorking with Configurations\nWorking with Configurations\nConfiguration Dashboard\nConfiguration Navigation\nRun Configuration\nAdd configuration\nCopy Configurations\nDelete Configurations\nMove Configurations\nConfiguration Settings\nWorkspace Tab\nStorage tab\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Working with Configurations",
        "content": ""
      }
    ],
    "links": []
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Add+Custom+Statistics+Data",
    "title": "Add Custom Statistics Data",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Publish Build Reports"
    ],
    "full_text": "Administrator's Guide\nPublish Build Reports\nAdd Custom Statistics Data\nVersion: QB14\nOn this page\nAdd Custom Statistics Data\nQuickBuild support add your custom statistics data and will generate the statistics chart and build overview automatically. For example, we use a test framework named rubyunit and want QuickBuild to collect the following indicators: total test count, failed test count, passed test count and total duration, then we will:\nAdd a custom statistics category\nâ\nFirst, we will define the statistics data structure in QuickBuild. To define the data structure:\nLog in to the QuickBuild server as Administrator\nClick the 'Administration' tab in main navigation\nClick the 'Plugin Management' tab\nClick the 'Configure' link of 'Custom Statistics Report' plugin\nClick 'Add New' button to add a new custom statistics category\nDefine the information of rubyunit like below\nField Name\nDescription\nRequired\nCategory Name\nThe name of the category. It will be used as tab name in statistics page and also will be used as an overview section in build overview page.\nThe category name should be unique in the whole QuickBuild.\nYES\nOrdinal\nThe order of the category. The QuickBuild will use this value to determine the position of this category when displayed in statistics page and build overview page.\nYES\nDescription\nThe description of the category.\nNO\nIndicators\nIndicators are what you want QuickBuild to collect from your original reports.\nYES\nClick 'Save' button.\nwarning\nIndicator id should be started with an alphabetic character (a-z or A-Z). For example:\nIndicator123 is a good id, while 123Indicator is not.\nPublish JSON report\nâ\nThe custom statistics data can also be in JSON format. QuickBuild uses\nJSON-Path\nto parse the JSON file.\nBelow operators are supported:\nOperator\nDescription\n`$`\nThe root element to query. This starts all path expressions.\n`@`\nThe current node being processed by a filter predicate.\n`*`\nWildcard. Available anywhere a name or numeric are required.\n`..`\nDeep scan. Available anywhere a name is required.\n`.<name>`\nDot-notated child\n`['<name>' (, '<name>')]`\nBracket-notated child or children\n`[<number> (, <number>)]`\nArray index or indexes\n`[start:end]`\nArray slice operator\n`[?(<expression>)]`\nFilter expression. Expression must evaluate to a boolean value.\nBelow functions are supported\nFunctions can be invoked at the tail end of a path - the input to a function is the output of the path expression.\nThe function output is dictated by the function itself.\nFunction\nDescription\nOutput type\nmin()\nProvides the min value of an array of numbers\nDouble\nmax()\nProvides the max value of an array of numbers\nDouble\navg()\nProvides the average value of an array of numbers\nDouble\nstddev()\nProvides the standard deviation value of an array of numbers\nDouble\nlength()\nProvides the length of an array\nInteger\nsum()\nProvides the sum value of an array of numbers\nDouble\nkeys()\nProvides the property keys (An alternative for terminal tilde `~`)\n`Set<E>`\nconcat(X)\nProvides a concatinated version of the path output with a new item\nlike input\nappend(X)\nadd an item to the json path output array\nlike input\nfirst()\nProvides the first item of an array\nDepends on the array\nlast()\nProvides the last item of an array\nDepends on the array\nindex(X)\nProvides the item of an array of index: X, if the X is negative, take from backwards\nDepends on the array\nPlease see\nJSON-Path\npage for more detailed information.\nCollect the statistics data\nâ\nAfter defining the custom statistics category, you can now add a publish 'Custom Statistics Report' step:\nIn this step, you can select a category which you defined before and then publish the XML reports where you want QuickBuild to collect the statistics data from. Just like all other publish report step, here you can specify the file patterns, step failure condition and failure message.\nNow, you can run your configuration. After running finished, QuickBuild will show the indicators value in Build Dashboard like below:\nand display the statistics chart in Statistics tab like below:\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Add Custom Statistics Data",
        "content": ""
      },
      {
        "header": "Add a custom statistics categoryâ",
        "content": "First, we will define the statistics data structure in QuickBuild. To define the data structure: Log in to the QuickBuild server as AdministratorClick the 'Administration' tab in main navigationClick the 'Plugin Management' tabClick the 'Configure' link of 'Custom Statistics Report' pluginClick 'Add New' button to add a new custom statistics categoryDefine the information of rubyunit like below Field NameDescriptionRequiredCategory NameThe name of the category. It will be used as tab name in statistics page and also will be used as an overview section in build overview page.The category name should be unique in the whole QuickBuild.YESOrdinalThe order of the category. The QuickBuild will use this value to determine the position of this category when displayed in statistics page and build overview page.YESDescriptionThe description of the category.NOIndicatorsIndicators are what you want QuickBuild to collect from your original reports.YES Click 'Save' button. warningIndicator id should be started with an alphabetic character (a-z or A-Z). For example:Indicator123 is a good id, while 123Indicator is not."
      },
      {
        "header": "Publish JSON reportâ",
        "content": "The custom statistics data can also be in JSON format. QuickBuild usesJSON-Pathto parse the JSON file. Below operators are supported: OperatorDescription`$`The root element to query. This starts all path expressions.`@`The current node being processed by a filter predicate.`*`Wildcard. Available anywhere a name or numeric are required.`..`Deep scan. Available anywhere a name is required.`.<name>`Dot-notated child`['<name>' (, '<name>')]`Bracket-notated child or children`[<number> (, <number>)]`Array index or indexes`[start:end]`Array slice operator`[?(<expression>)]`Filter expression. Expression must evaluate to a boolean value. Below functions are supported Functions can be invoked at the tail end of a path - the input to a function is the output of the path expression. The function output is dictated by the function itself. FunctionDescriptionOutput typemin()Provides the min value of an array of numbersDoublemax()Provides the max value of an array of numbersDoubleavg()Provides the average value of an array of numbersDoublestddev()Provides the standard deviation value of an array of numbersDoublelength()Provides the length of an arrayIntegersum()Provides the sum value of an array of numbersDoublekeys()Provides the property keys (An alternative for terminal tilde `~`)`Set<E>`concat(X)Provides a concatinated version of the path output with a new itemlike inputappend(X)add an item to the json path output arraylike inputfirst()Provides the first item of an arrayDepends on the arraylast()Provides the last item of an arrayDepends on the arrayindex(X)Provides the item of an array of index: X, if the X is negative, take from backwardsDepends on the array Please seeJSON-Pathpage for more detailed information."
      },
      {
        "header": "Collect the statistics dataâ",
        "content": "After defining the custom statistics category, you can now add a publish 'Custom Statistics Report' step: In this step, you can select a category which you defined before and then publish the XML reports where you want QuickBuild to collect the statistics data from. Just like all other publish report step, here you can specify the file patterns, step failure condition and failure message. Now, you can run your configuration. After running finished, QuickBuild will show the indicators value in Build Dashboard like below: and display the statistics chart in Statistics tab like below:"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Publish+Boost+Test+Report",
      "https://wiki.pmease.com/display/QB14/Publish+Busted+Report",
      "https://wiki.pmease.com/display/QB14/Publish+CheckStyle+Report",
      "https://wiki.pmease.com/display/QB14/Publish+Clover+Report",
      "https://wiki.pmease.com/display/QB14/Publish+Cobertura+Report",
      "https://wiki.pmease.com/display/QB14/Publish+Coverity+Report",
      "https://wiki.pmease.com/display/QB14/Publish+CPD+Report",
      "https://wiki.pmease.com/display/QB14/Publish+CppCheck+Report",
      "https://wiki.pmease.com/display/QB14/Publish+EMMA+Report",
      "https://wiki.pmease.com/display/QB14/Publish+Findbugs+Report",
      "https://wiki.pmease.com/display/QB14/Publish+Fxcop+Report",
      "https://wiki.pmease.com/display/QB14/Publish+JaCoCo+Report",
      "https://wiki.pmease.com/display/QB14/Publish+JMeter+Report",
      "https://wiki.pmease.com/display/QB14/Publish+JUnit+Report",
      "https://wiki.pmease.com/display/QB14/Publish+MBUnit+Report",
      "https://wiki.pmease.com/display/QB14/Publish+MSTest+Report",
      "https://wiki.pmease.com/display/QB14/Publish+NCover+Report",
      "https://wiki.pmease.com/display/QB14/Publish+NUnit+Report",
      "https://wiki.pmease.com/display/QB14/Publish+PMD+Report",
      "https://wiki.pmease.com/display/QB14/Publish+TAP+Report",
      "https://wiki.pmease.com/display/QB14/Publish+TestNG+Report",
      "https://wiki.pmease.com/display/QB14/Report+Aggregation",
      "https://wiki.pmease.com/display/QB14/Rebuild+statistics+and+aggregation+data",
      "https://wiki.pmease.com/display/QB14/Publish+TestNG+Report",
      "https://wiki.pmease.com/display/QB14/Report+Aggregation"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Tray+Monitor",
    "title": "Tray Monitor",
    "breadcrumb": [
      "",
      "User's Guide",
      "Working With Addons"
    ],
    "full_text": "User's Guide\nWorking With Addons\nTray Monitor\nVersion: QB14\nOn this page\nTray Monitor\nThe tray monitor is an addon for QuickBuild (2.1 or higher) to enable user monitoring build, triggering build, and receiving build notifications from desktop without opening the web browser. It requires\nJRE 1.5\nand currently supports below platforms:\nWindows XP or higher\nLinux with Gtk support\nMac OS X (Leopard or higher)\nDownload and run tray monitor\nâ\nTray monitor can be downloaded at\nMy\npage after you logged into QuickBuild. After download, you may launch it by:\nOn Windows: extract downloaded zip file and run traymonitor.exe.\nOn Mac OS X: extract downloaded zip file and run TrayMonitor.app.\nOn Linux: run command \"java -jar traymonitor.jar\" against downloaded jar file.\nIf the tray monitor is running successfully, you will see a tray icon is displayed in your system tray. Below is an example screen shot in Mac:\nwarning\nTrouble shooting on Linux\nIf you cannot find the tray icon for the tray monitor, you may encounter the known issue on linux - 'Lost tray icon'. You can google it and there are lots of the posts about it and how to resolve it. A possible solution is to install gnome-session-fallback, please see this post for details:\nhttps://askubuntu.com/questions/136733/some-system-tray-icons-invisible-in-gnome-classic-12-04\nUse the tray monitor\nâ\nTo tell tray monitor which build events you are interested, please open\nMy Setting\npage in QuickBuild and add subscriptions with\nNotify Through\nfield defined as\nTray Monitor & IDE Plugins\n. Below screen tells tray monitor to receive all build events for all configurations in the system:\nEverytime a build finishes, you will see a popup message from tray monitor like below:\nThere will be a latency between build finishing and message poping up. The latency depends on how frequent tray monitor is set to check build events, and can be controlled by parameter\nrefresh interval\nin its preference setting.\nIf you also subscribed the system alerts, then when there are alerts occurred, a notification window will also popup like below:\nThe menu item\nView/Run Build...\nbrings out an auto-refreshing lite dashboard of QuickBuild. Auto-refresh frequency is controlled by parameter\nrefresh interval\nin the preference setting.\nThe menu item\nPreference Setting\nincludes settings such as QuickBuild server url, login user and password, refresh interval, and message display time.\nAlso, if you subscribed the system alerts, you can view those latest alert history:\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Tray Monitor",
        "content": ""
      },
      {
        "header": "Download and run tray monitorâ",
        "content": "Tray monitor can be downloaded atMypage after you logged into QuickBuild. After download, you may launch it by: On Windows: extract downloaded zip file and run traymonitor.exe.On Mac OS X: extract downloaded zip file and run TrayMonitor.app.On Linux: run command \"java -jar traymonitor.jar\" against downloaded jar file. If the tray monitor is running successfully, you will see a tray icon is displayed in your system tray. Below is an example screen shot in Mac: warningTrouble shooting on LinuxIf you cannot find the tray icon for the tray monitor, you may encounter the known issue on linux - 'Lost tray icon'. You can google it and there are lots of the posts about it and how to resolve it. A possible solution is to install gnome-session-fallback, please see this post for details:https://askubuntu.com/questions/136733/some-system-tray-icons-invisible-in-gnome-classic-12-04"
      },
      {
        "header": "Use the tray monitorâ",
        "content": "To tell tray monitor which build events you are interested, please openMy Settingpage in QuickBuild and add subscriptions withNotify Throughfield defined asTray Monitor & IDE Plugins. Below screen tells tray monitor to receive all build events for all configurations in the system: Everytime a build finishes, you will see a popup message from tray monitor like below: There will be a latency between build finishing and message poping up. The latency depends on how frequent tray monitor is set to check build events, and can be controlled by parameterrefresh intervalin its preference setting. If you also subscribed the system alerts, then when there are alerts occurred, a notification window will also popup like below: The menu itemView/Run Build...brings out an auto-refreshing lite dashboard of QuickBuild. Auto-refresh frequency is controlled by parameterrefresh intervalin the preference setting. The menu itemPreference Settingincludes settings such as QuickBuild server url, login user and password, refresh interval, and message display time. Also, if you subscribed the system alerts, you can view those latest alert history:"
      }
    ],
    "links": []
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/SCM+Support+Overview",
    "title": "SCM Support Overview",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Working with SCM systems"
    ],
    "full_text": "Administrator's Guide\nWorking with SCM systems\nSCM Support Overview\nVersion: QB14\nOn this page\nSCM Support Overview\nIntroduction\nâ\nSCM systems are modeled as repositories in QuickBuild. To define repository for a configuration, please select the configuration and switch to repository setting page. The repository menu will be displayed to let you choose the repository type if you click the add button from there, as demonstrated below:\nAfter a repository is defined, you can add repository related steps from\nRepository\ncategory of step menu. Before going further, let's define below concepts:\nrepository snapshot\nRepository snapshot represents a fixed set of source code in the repository, that is not affected by new checkins\nrepository revision\nRepository revision is used by QuickBuild to identify repository snapshot. It has different meaning for different SCM:\nfor Subversion: it is the revision number of the repository\nfor Perforce: it is the changelist number of the repository\nfor Accurev: it is transaction number of the repository\nfor other repositories: it is timestamp of the repository\nCurrently below steps can be used to interact with a repository, respectively:\ncheckout step\nThis step can be added by selecting\nRepository -> Checkout\nfrom step menu, and it lets you choose a repository to checkout. This is the only way to checkout files from SCM in QuickBuild. When this step runs, QuickBuild automatically takes a snapshot of the repository so that later steps (for example, the label step) operate on the same set of source code used for checkout.\nlabel step\nThis step can be added by selecting\nRepository -> Label\nfrom step menu, and it lets you choose a repository to create label on. This step is useful if you want to label the SCM for the set of source code used for the build. This step will also take a snapshot of the repository.\ntake snapshot step\nThis step can be added by selecting\nRepository -> Take Snapshot\nfrom step menu, and it allows you choose a repository and take a snapshot against that repository. The revision number of the repository object defined in QuickBuild will be set to a fixed value after a snapshot is taken.\nrecord changes step\nThis step can be used to record changes of a repository without actually checking it out.\nExamples\nâ\nWith these steps, you can design very flexible workflow when interacting with SCM. You can even define multiple repositories, and checkout/label all of them in a single build.\nHere are some examples:\nCheckout source code for build, and label it if build and test is successful\nâ\nDefine your repository.\nDefine a checkout step to checkout from your repository.\nDefine necessary steps to build and test your code.\nDefine a label step to label the repository that is used for checkout.\nDefine the master step as a sequential step to include steps defined above.\nCreate a label on SCM trunk, and checkout against that label for build\nâ\nDefine your repository.\nDefine a label step to label the repository.\nDefine a checkout step to checkout from the labeled repository.\nDefine necessary steps to build and test your code.\nDefine the master step as a sequential step to include steps defined above.\nCheckout different part of the project from different machines in parallel, but use the same repository revision\nâ\nLet's assume that in your SCM, the project is represented by\nproject1\n, and it has two modules\nproject1/componentA\nand\nproject1/componentB\nDefine a repository representing\nproject1.\nDefine two repositories representing\nproject1/componentA\nand\nproject1/componentB\nrespectively. Revision of both repositories should be set as:\n$\n{\nrepositories\n.\nget\n(\n\"project1\"\n)\n.\nrevision\n}\nAdd a step to take snapshot of repository\nproject1.\nAdd two steps to checkout from repository\ncomponentA\nand\ncomponentB\n. You may arrange these two steps running on different machines using\nnode match condition\n(refer to\nbuild grid\ndocumentation).\nAdd a parallel composition step to run the checkout steps in parallel.\nDefine the master step as a sequential step to include the take snapshot step and the parallel composition step defined above.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "SCM Support Overview",
        "content": ""
      },
      {
        "header": "Introductionâ",
        "content": "SCM systems are modeled as repositories in QuickBuild. To define repository for a configuration, please select the configuration and switch to repository setting page. The repository menu will be displayed to let you choose the repository type if you click the add button from there, as demonstrated below: After a repository is defined, you can add repository related steps fromRepositorycategory of step menu. Before going further, let's define below concepts: repository snapshotRepository snapshot represents a fixed set of source code in the repository, that is not affected by new checkinsrepository revisionRepository revision is used by QuickBuild to identify repository snapshot. It has different meaning for different SCM:for Subversion: it is the revision number of the repositoryfor Perforce: it is the changelist number of the repositoryfor Accurev: it is transaction number of the repositoryfor other repositories: it is timestamp of the repository Currently below steps can be used to interact with a repository, respectively: checkout stepThis step can be added by selectingRepository -> Checkoutfrom step menu, and it lets you choose a repository to checkout. This is the only way to checkout files from SCM in QuickBuild. When this step runs, QuickBuild automatically takes a snapshot of the repository so that later steps (for example, the label step) operate on the same set of source code used for checkout.label stepThis step can be added by selectingRepository -> Labelfrom step menu, and it lets you choose a repository to create label on. This step is useful if you want to label the SCM for the set of source code used for the build. This step will also take a snapshot of the repository.take snapshot stepThis step can be added by selectingRepository -> Take Snapshotfrom step menu, and it allows you choose a repository and take a snapshot against that repository. The revision number of the repository object defined in QuickBuild will be set to a fixed value after a snapshot is taken.record changes stepThis step can be used to record changes of a repository without actually checking it out."
      },
      {
        "header": "Examplesâ",
        "content": "With these steps, you can design very flexible workflow when interacting with SCM. You can even define multiple repositories, and checkout/label all of them in a single build. Here are some examples:"
      },
      {
        "header": "Checkout source code for build, and label it if build and test is successfulâ",
        "content": "Define your repository.Define a checkout step to checkout from your repository.Define necessary steps to build and test your code.Define a label step to label the repository that is used for checkout.Define the master step as a sequential step to include steps defined above."
      },
      {
        "header": "Create a label on SCM trunk, and checkout against that label for buildâ",
        "content": "Define your repository.Define a label step to label the repository.Define a checkout step to checkout from the labeled repository.Define necessary steps to build and test your code.Define the master step as a sequential step to include steps defined above."
      },
      {
        "header": "Checkout different part of the project from different machines in parallel, but use the same repository revisionâ",
        "content": "Let's assume that in your SCM, the project is represented byproject1, and it has two modulesproject1/componentAandproject1/componentB Define a repository representingproject1.Define two repositories representingproject1/componentAandproject1/componentBrespectively. Revision of both repositories should be set as:${repositories.get(\"project1\").revision}Add a step to take snapshot of repositoryproject1.Add two steps to checkout from repositorycomponentAandcomponentB. You may arrange these two steps running on different machines usingnode match condition(refer tobuild griddocumentation).Add a parallel composition step to run the checkout steps in parallel.Define the master step as a sequential step to include the take snapshot step and the parallel composition step defined above."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Working+with+Accurev",
      "https://wiki.pmease.com/display/QB14/Working+with+Azure+Devops",
      "https://wiki.pmease.com/display/QB14/Working+with+Bazaar",
      "https://wiki.pmease.com/display/QB14/Working+with+ClearCase",
      "https://wiki.pmease.com/display/QB14/Working+with+CVS",
      "https://wiki.pmease.com/display/QB14/Working+with+Git",
      "https://wiki.pmease.com/display/QB14/Working+with+GitHub",
      "https://wiki.pmease.com/display/QB14/Working+with+GitLab",
      "https://wiki.pmease.com/display/QB14/Working+with+Bitbucket+Server",
      "https://wiki.pmease.com/display/QB14/Working+with+Bitbucket+Cloud",
      "https://wiki.pmease.com/display/QB14/Working+with+Gerrit",
      "https://wiki.pmease.com/display/QB14/Working+with+Google+git-repo",
      "https://wiki.pmease.com/display/QB14/Working+with+Mercurial",
      "https://wiki.pmease.com/display/QB14/Working+with+Perforce",
      "https://wiki.pmease.com/display/QB14/Working+with+StarTeam",
      "https://wiki.pmease.com/display/QB14/Working+with+Subversion",
      "https://wiki.pmease.com/display/QB14/Working+with+Team+Foundation+Server",
      "https://wiki.pmease.com/display/QB14/Working+with+Visual+SourceSafe",
      "https://wiki.pmease.com/display/QB14/Aggregate+SCM+Changes",
      "https://wiki.pmease.com/display/QB14/Distributed+Builds",
      "https://wiki.pmease.com/display/QB14/Working+with+Accurev"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Working+with+Accurev",
    "title": "Working with Accurev",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Working with SCM systems"
    ],
    "full_text": "Administrator's Guide\nWorking with SCM systems\nWorking with Accurev\nVersion: QB14\nOn this page\nWorking with Accurev\nwarning\nAccurev relies heavily on accurate system clock to perform its operations. Please make sure clock of the build server and all build agents interacting with Accurev repository are synced with Accurev server.\nSpecify Accurev command location\nâ\nQuickBuild utilizes the accurev command to interact with Accurev SCM. If this command is not in system path, you will need to specify location of the command by configuring Accurev plugin as below:\nFurther more, accurev command location can be specified on a per-node basis by following below steps:\nOpen Accurev plugin setting page and define the accurev path property as:\n$\n{\nnode\n.\ngetAttribute\n(\n\"accurevPath\"\n)\n}\nFor each node that does not have accurev on system path, define the user attribute\naccurevPath\nto point to the actual accurev path like below:\nPlease note that in above example, the\naccurevPath\nuser attribute is just for demonstration purpose. You can use any other user attribute name.\nChange detection\nâ\nIf the build process involves checking out from a Accurev repository, the changes will be detected for the build stream and all parent streams until a snapshot or time-locked parent is found.\nLabel a Accurev repository\nâ\nThe label step will create a snapshot stream backed by the build stream, with the snapshot name set to label name.\nProof build support\nâ\nProof build support can be enabled to send active changes from developer's local workspace to QuickBuild for build verification. For general concept of proof build, refer to\nproof build\n. Here we explain how to set up Accurev repository to support proof build.\nTest proof build as administrator\nâ\nSince proof build set up is a bit tricky, we first set up proof build for the administrator account and make sure it works before we proceed to enable it for all developers. To set up proof build for administrator, please follow below steps:\nLogin as administrator and download user agent by switching to\nMy\ntab.\nInstall and start user agent on your own desktop. For testing purpose, please start the agent as a foreground process. On windows, this can be done by running\nagent.bat\n; on Unix platforms, this can be done by running\nagent.sh console\nSet up a test configuration on QuickBuild server, define a Accurev repository, and enable the proof build option in advanced section like below:\nMake sure the Accurev command exists in the system path of both server machine and your desktop. If not, please follow the section\nSpecify Accurev command location\nto tell QuickBuild location of Accurev command.\nAdd a\nrepository/checkout\nstep into step execution graph and have it checkout from the repository defined above.\nNow proof build has been enabled for your account, please try to edit some file and keep them in the local Accurev workspac specified above, and then run the test configuration. If set up correctly, your local active change will be picked up and reflected in the build result. A local change tab will also appear to display your active changes after build finishes. Your active changes will be promoted automatically if build is successful.\n{#WorkingwithAccurev-proofbuildforalldevelopers}\nEnable proof build for all developers\nâ\nNow that we have a concept of how proof build works. In order to get proof build works for all developers, we need to parameterize various proof build properties, so that different properties can be used for different developers. To do this, you will need to:\nDefine configuration variables like below:\nScript various properties in proof build section to make use of above variables like below:\nProperty Name\nProperty Value\nLocal Workspace\n${vars.getValue(\"localWorkspace\")}\nUser Name\n${vars.getValue(\"userName\")}\nPassword\n${vars.get(\"password\")}\nPromote Condition\nbuild.successful && vars.get(\"promoteIfSuccessful\").asBoolean()\nPromote Comment\n${vars.get(\"promoteComment\")}\nIn this way, various proof build properties will be prompted when your developer run the build. Once they've been input by your developer for the first time, the values will be remembered for subsequent triggers for that user.\nAt last we suggest to set up the configuration to\nenable concurrent builds\nso that multiple builds in the same configuration can run concurrently. This is vital to get fast feedback in case multiple developers are requesting proof builds in the same time.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Working with Accurev",
        "content": ""
      },
      {
        "header": "Specify Accurev command locationâ",
        "content": "QuickBuild utilizes the accurev command to interact with Accurev SCM. If this command is not in system path, you will need to specify location of the command by configuring Accurev plugin as below: Further more, accurev command location can be specified on a per-node basis by following below steps: Open Accurev plugin setting page and define the accurev path property as:${node.getAttribute(\"accurevPath\")}For each node that does not have accurev on system path, define the user attributeaccurevPathto point to the actual accurev path like below: Please note that in above example, theaccurevPathuser attribute is just for demonstration purpose. You can use any other user attribute name."
      },
      {
        "header": "Change detectionâ",
        "content": "If the build process involves checking out from a Accurev repository, the changes will be detected for the build stream and all parent streams until a snapshot or time-locked parent is found."
      },
      {
        "header": "Label a Accurev repositoryâ",
        "content": "The label step will create a snapshot stream backed by the build stream, with the snapshot name set to label name."
      },
      {
        "header": "Proof build supportâ",
        "content": "Proof build support can be enabled to send active changes from developer's local workspace to QuickBuild for build verification. For general concept of proof build, refer toproof build. Here we explain how to set up Accurev repository to support proof build."
      },
      {
        "header": "Test proof build as administratorâ",
        "content": "Since proof build set up is a bit tricky, we first set up proof build for the administrator account and make sure it works before we proceed to enable it for all developers. To set up proof build for administrator, please follow below steps: Login as administrator and download user agent by switching toMytab.Install and start user agent on your own desktop. For testing purpose, please start the agent as a foreground process. On windows, this can be done by runningagent.bat; on Unix platforms, this can be done by runningagent.sh consoleSet up a test configuration on QuickBuild server, define a Accurev repository, and enable the proof build option in advanced section like below:Make sure the Accurev command exists in the system path of both server machine and your desktop. If not, please follow the sectionSpecify Accurev command locationto tell QuickBuild location of Accurev command.Add arepository/checkoutstep into step execution graph and have it checkout from the repository defined above. Now proof build has been enabled for your account, please try to edit some file and keep them in the local Accurev workspac specified above, and then run the test configuration. If set up correctly, your local active change will be picked up and reflected in the build result. A local change tab will also appear to display your active changes after build finishes. Your active changes will be promoted automatically if build is successful. {#WorkingwithAccurev-proofbuildforalldevelopers}"
      },
      {
        "header": "Enable proof build for all developersâ",
        "content": "Now that we have a concept of how proof build works. In order to get proof build works for all developers, we need to parameterize various proof build properties, so that different properties can be used for different developers. To do this, you will need to: Define configuration variables like below:Script various properties in proof build section to make use of above variables like below:Property NameProperty ValueLocal Workspace${vars.getValue(\"localWorkspace\")}User Name${vars.getValue(\"userName\")}Password${vars.get(\"password\")}Promote Conditionbuild.successful && vars.get(\"promoteIfSuccessful\").asBoolean()Promote Comment${vars.get(\"promoteComment\")} In this way, various proof build properties will be prompted when your developer run the build. Once they've been input by your developer for the first time, the values will be remembered for subsequent triggers for that user. At last we suggest to set up the configuration toenable concurrent buildsso that multiple builds in the same configuration can run concurrently. This is vital to get fast feedback in case multiple developers are requesting proof builds in the same time."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Working+with+Azure+Devops",
      "https://wiki.pmease.com/display/QB14/Working+with+Bazaar",
      "https://wiki.pmease.com/display/QB14/Working+with+ClearCase",
      "https://wiki.pmease.com/display/QB14/Working+with+CVS",
      "https://wiki.pmease.com/display/QB14/Working+with+Git",
      "https://wiki.pmease.com/display/QB14/Working+with+GitHub",
      "https://wiki.pmease.com/display/QB14/Working+with+GitLab",
      "https://wiki.pmease.com/display/QB14/Working+with+Bitbucket+Server",
      "https://wiki.pmease.com/display/QB14/Working+with+Bitbucket+Cloud",
      "https://wiki.pmease.com/display/QB14/Working+with+Gerrit",
      "https://wiki.pmease.com/display/QB14/Working+with+Google+git-repo",
      "https://wiki.pmease.com/display/QB14/Working+with+Mercurial",
      "https://wiki.pmease.com/display/QB14/Working+with+Perforce",
      "https://wiki.pmease.com/display/QB14/Working+with+StarTeam",
      "https://wiki.pmease.com/display/QB14/Working+with+Subversion",
      "https://wiki.pmease.com/display/QB14/Working+with+Team+Foundation+Server",
      "https://wiki.pmease.com/display/QB14/Working+with+Visual+SourceSafe",
      "https://wiki.pmease.com/display/QB14/Aggregate+SCM+Changes",
      "https://wiki.pmease.com/display/QB14/Working+with+Azure+Devops"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Working+with+Azure+Devops",
    "title": "Working with Azure Devops",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Working with SCM systems"
    ],
    "full_text": "Administrator's Guide\nWorking with SCM systems\nWorking with Azure Devops\nVersion: QB14\nOn this page\nWorking with Azure Devops\nQuickBuild integrates with Azure Devops via the Azure repository. This repository has all features of a normal Git repository, but add the ability to build against pull requests, and update the status based on build result for commits or pull requests.\nBuild against Pull Requests\nâ\nIf you want to build against pull request, username field and password field are required. The password can also use a personal access token instead. To generate personal access token, please see\nthis page\n.\nIf the personal access token is used, the token should at least include code read scope.\nYou can filter the pull requests by adding the parameters you want:\nNow, QuickBuild can build against the pull request branch refs/pull/*/merge.\nAzure Devops Webhook\nâ\nQuickBuild can trigger build via Azure Devops web hooks.\nConfigure QuickBuild Side\nâ\nAdd anonymous group\nâ\nAs the webhook is triggered without authentication, anonymous group should be added and it should have the permission to use RESTful API.\nAdd webhook settings\nâ\nTo add integration at QuickBuild side, please go to configuration settings page and then choose Webhook -> Azure Devops from right side menu:\nThen, you can add the settings:\nTrigger User\nthe user to trigger the build\nWebhook Secret\nthe secret should be the same as what you defined in Azure authorization header\nTrigger Condition\nthe trigger condition in Groovy scripts, when the result is true, build will be triggered, otherwise, the build will not be triggered. You can use variable\ndelivery\nto access the data from GitHub like\ndelivery.ref\n,\ndelivery.pusher.name\n. See more details on\nhttps://docs.microsoft.com/en-us/azure/devops/service-hooks/events?view=azure-devops\n. You can also use the parameter specified in webhook URL as below section.\nTrigger Build Variables\ndefine the variables to trigger the builds so you can use those variables in the steps later.\nConfigure Azure Side\nâ\nTo enable the webhook, first you need go to Azure Devops web hook settings page to configure the QuickBuild side related information:\nImportant\nyou need add Authorization header if you specify the secret at QuickBuild side. The header looks like below (replace the\nmy-scret-code\nto your actual secret token):\nAuthorization\n:\nBasic\nmy\n-\nsecret\n-\ncode\nIf you want to use some custom parameters, you can add them to your webhook url like below:\nhttps://your.quickbuild.com/rest/webhook/webhook/14?target=android\nThen, later you can use target parameter in your trigger condition.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Working with Azure Devops",
        "content": ""
      },
      {
        "header": "Build against Pull Requestsâ",
        "content": "If you want to build against pull request, username field and password field are required. The password can also use a personal access token instead. To generate personal access token, please seethis page. If the personal access token is used, the token should at least include code read scope. You can filter the pull requests by adding the parameters you want: Now, QuickBuild can build against the pull request branch refs/pull/*/merge."
      },
      {
        "header": "Azure Devops Webhookâ",
        "content": "QuickBuild can trigger build via Azure Devops web hooks."
      },
      {
        "header": "Configure QuickBuild Sideâ",
        "content": ""
      },
      {
        "header": "Add anonymous groupâ",
        "content": "As the webhook is triggered without authentication, anonymous group should be added and it should have the permission to use RESTful API."
      },
      {
        "header": "Add webhook settingsâ",
        "content": "To add integration at QuickBuild side, please go to configuration settings page and then choose Webhook -> Azure Devops from right side menu: Then, you can add the settings: Trigger Userthe user to trigger the buildWebhook Secretthe secret should be the same as what you defined in Azure authorization headerTrigger Conditionthe trigger condition in Groovy scripts, when the result is true, build will be triggered, otherwise, the build will not be triggered. You can use variabledeliveryto access the data from GitHub likedelivery.ref,delivery.pusher.name. See more details onhttps://docs.microsoft.com/en-us/azure/devops/service-hooks/events?view=azure-devops. You can also use the parameter specified in webhook URL as below section.Trigger Build Variablesdefine the variables to trigger the builds so you can use those variables in the steps later."
      },
      {
        "header": "Configure Azure Sideâ",
        "content": "To enable the webhook, first you need go to Azure Devops web hook settings page to configure the QuickBuild side related information: Importantyou need add Authorization header if you specify the secret at QuickBuild side. The header looks like below (replace themy-scret-codeto your actual secret token): Authorization:Basicmy-secret-code If you want to use some custom parameters, you can add them to your webhook url like below: https://your.quickbuild.com/rest/webhook/webhook/14?target=android Then, later you can use target parameter in your trigger condition."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Working+with+Bazaar",
      "https://wiki.pmease.com/display/QB14/Working+with+ClearCase",
      "https://wiki.pmease.com/display/QB14/Working+with+CVS",
      "https://wiki.pmease.com/display/QB14/Working+with+Git",
      "https://wiki.pmease.com/display/QB14/Working+with+GitHub",
      "https://wiki.pmease.com/display/QB14/Working+with+GitLab",
      "https://wiki.pmease.com/display/QB14/Working+with+Bitbucket+Server",
      "https://wiki.pmease.com/display/QB14/Working+with+Bitbucket+Cloud",
      "https://wiki.pmease.com/display/QB14/Working+with+Gerrit",
      "https://wiki.pmease.com/display/QB14/Working+with+Google+git-repo",
      "https://wiki.pmease.com/display/QB14/Working+with+Mercurial",
      "https://wiki.pmease.com/display/QB14/Working+with+Perforce",
      "https://wiki.pmease.com/display/QB14/Working+with+StarTeam",
      "https://wiki.pmease.com/display/QB14/Working+with+Subversion",
      "https://wiki.pmease.com/display/QB14/Working+with+Team+Foundation+Server",
      "https://wiki.pmease.com/display/QB14/Working+with+Visual+SourceSafe",
      "https://wiki.pmease.com/display/QB14/Aggregate+SCM+Changes",
      "https://wiki.pmease.com/display/QB14/Working+with+Bazaar"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Working+with+Bazaar",
    "title": "Working with Bazaar",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Working with SCM systems"
    ],
    "full_text": "Administrator's Guide\nWorking with SCM systems\nWorking with Bazaar\nVersion: QB14\nOn this page\nWorking with Bazaar\nPrerequisites\nâ\nQuickBuild utilizes the Bazaar command (bzr) to interact with remote Bazaar repository. If this command is not in system path, you will need to specify location of the command by configuring Bazaar plugin as below:\nwarning\nPlease also install bazaar plugin bzr-xmloutput:\nhttps://launchpad.net/bzr-xmloutput\nFurther more, Bazaar command (bzr) location can be specified on a per-node basis by following below steps:\nOpen Bazaar plugin setting page and define the Bazaar path property as:\n$\n{\nnode\n.\ngetAttribute\n(\n\"bzrPath\"\n)\n}\nFor each node that does not have Bazaar on system path, define the user attribute\nbzrPath\nto point to the actual Bazaar path like below:\nNOTE:\nexample above is just for demonstration, you can use any other user attribute name instead of\nbzrPath\n.\nCreating a Bazaar Repository\nâ\nYou may refer to\nthis page\non how to add a repository.\nSupported URL prefixes\nâ\nCurrently, below URL prefixes are supported:\naftp://\nAccess using active FTP.\nbzr://\nFast access using the Bazaar smart server.\nbzr+ssh://\nFast access using the Bazaar smart server over SSH.\nfile://\nAccess using the standard filesystem (default)\nftp://\nAccess using passive FTP.\nhttp://\nRead-only access of branches exported on the web.\nhttps://\nRead-only access of branches exported on the web using SSL.\nsftp://\nAccess using SFTP (most SSH servers provide SFTP).\nsvn://\nAccess using the Subversion smart server.\nsvn+ssh://\nAccess using the Subversion smart server tunneled over SSH.\nIf\nhttps\nis used, and your credential need password, you need first add the credential manually to the nodes which you want check out code to.\nIf\nbzr+ssh\nis used, please use public key without password for authorization and you need not specify the password when you create the repository. You can reference your SSH manual on how to create public key without password.\nProof build support\nâ\nYour developers might need to push their local commits in local branches to a central official Bazaar repository occasionally. In this case, QuickBuild can validate these commits by running proof build before pushing them.\nTest proof build as administrator\nâ\nSince proof build set up is a bit tricky, we first set up proof build for the administrator account and make sure it works before we proceed to enable it for all developers. To set up proof build for administrator, please follow below steps:\nLogin as administrator and download user agent by switching to\nMy\ntab.\nInstall and start user agent on your own desktop. For testing purpose, please start the agent as a foreground process. On windows, this can be done by running\nagent.bat\n; on Unix platforms, this can be done by running\nagent.sh console\nSet up a test configuration on QuickBuild server, define a Bazaar repository, enable the proof build option in advanced section like below:\nMake sure the bazaar command exists in the system path of both server machine and your desktop. If not, please follow the prerequisites section to tell QuickBuild location of bazaar command.\nAdd a\nrepository/checkout\nstep into step execution graph and have it checkout from the repository defined above.\nNow proof build has been enabled for your account, please make some local commits into your local repository specified above, and then run the test configuration. If set up correctly, your local commits will be picked up and reflected in the build result. A local change tab will also appear to display local commits after build finishes. Your local commits will be pushed automatically if build is successful.\nEnable proof build for all developers\nâ\nNow that we have a concept of how proof build works. In order to get proof build works for all developers, we need to parameterize various proof build properties, so that different properties can be used for different developers. To do this, you will need to:\nDefine configuration variables like below:\nScript various properties in proof build section to make use of above variables like below:\nProperty Name\nProperty Value\nLocal Repository Path\n${vars.get(\"localRepositoryPath\")}\nRevision Spec to Verify\n${vars.get(\"revisionSpecToVerify\")}\nMerge Condition\nvars.get(\"merge\").asBoolean()\nPush Condition\nbuild.successful && vars.get(\"push\").asBoolean()\nIn this way, various proof build properties will be prompted when your developer runs the build. Once they've been specified by your developer for the first time, the values will be remembered for subsequent triggers for that user.\nAt last we suggest to set up the configuration to\nenable concurrent builds\nso that multiple builds in the same configuration can run concurrently. This is vital to get fast feedback in case multiple developers are requesting proof builds in the same time.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Working with Bazaar",
        "content": ""
      },
      {
        "header": "Prerequisitesâ",
        "content": "QuickBuild utilizes the Bazaar command (bzr) to interact with remote Bazaar repository. If this command is not in system path, you will need to specify location of the command by configuring Bazaar plugin as below: warningPlease also install bazaar plugin bzr-xmloutput:https://launchpad.net/bzr-xmloutput Further more, Bazaar command (bzr) location can be specified on a per-node basis by following below steps: Open Bazaar plugin setting page and define the Bazaar path property as:${node.getAttribute(\"bzrPath\")}For each node that does not have Bazaar on system path, define the user attributebzrPathto point to the actual Bazaar path like below: NOTE:example above is just for demonstration, you can use any other user attribute name instead ofbzrPath."
      },
      {
        "header": "Creating a Bazaar Repositoryâ",
        "content": "You may refer tothis pageon how to add a repository."
      },
      {
        "header": "Supported URL prefixesâ",
        "content": "Currently, below URL prefixes are supported: aftp://Access using active FTP.bzr://Fast access using the Bazaar smart server.bzr+ssh://Fast access using the Bazaar smart server over SSH.file://Access using the standard filesystem (default)ftp://Access using passive FTP.http://Read-only access of branches exported on the web.https://Read-only access of branches exported on the web using SSL.sftp://Access using SFTP (most SSH servers provide SFTP).svn://Access using the Subversion smart server.svn+ssh://Access using the Subversion smart server tunneled over SSH. Ifhttpsis used, and your credential need password, you need first add the credential manually to the nodes which you want check out code to. Ifbzr+sshis used, please use public key without password for authorization and you need not specify the password when you create the repository. You can reference your SSH manual on how to create public key without password."
      },
      {
        "header": "Proof build supportâ",
        "content": "Your developers might need to push their local commits in local branches to a central official Bazaar repository occasionally. In this case, QuickBuild can validate these commits by running proof build before pushing them."
      },
      {
        "header": "Test proof build as administratorâ",
        "content": "Since proof build set up is a bit tricky, we first set up proof build for the administrator account and make sure it works before we proceed to enable it for all developers. To set up proof build for administrator, please follow below steps: Login as administrator and download user agent by switching toMytab.Install and start user agent on your own desktop. For testing purpose, please start the agent as a foreground process. On windows, this can be done by runningagent.bat; on Unix platforms, this can be done by runningagent.sh consoleSet up a test configuration on QuickBuild server, define a Bazaar repository, enable the proof build option in advanced section like below:Make sure the bazaar command exists in the system path of both server machine and your desktop. If not, please follow the prerequisites section to tell QuickBuild location of bazaar command.Add arepository/checkoutstep into step execution graph and have it checkout from the repository defined above. Now proof build has been enabled for your account, please make some local commits into your local repository specified above, and then run the test configuration. If set up correctly, your local commits will be picked up and reflected in the build result. A local change tab will also appear to display local commits after build finishes. Your local commits will be pushed automatically if build is successful."
      },
      {
        "header": "Enable proof build for all developersâ",
        "content": "Now that we have a concept of how proof build works. In order to get proof build works for all developers, we need to parameterize various proof build properties, so that different properties can be used for different developers. To do this, you will need to: Define configuration variables like below:Script various properties in proof build section to make use of above variables like below:Property NameProperty ValueLocal Repository Path${vars.get(\"localRepositoryPath\")}Revision Spec to Verify${vars.get(\"revisionSpecToVerify\")}Merge Conditionvars.get(\"merge\").asBoolean()Push Conditionbuild.successful && vars.get(\"push\").asBoolean() In this way, various proof build properties will be prompted when your developer runs the build. Once they've been specified by your developer for the first time, the values will be remembered for subsequent triggers for that user. At last we suggest to set up the configuration toenable concurrent buildsso that multiple builds in the same configuration can run concurrently. This is vital to get fast feedback in case multiple developers are requesting proof builds in the same time."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Working+with+ClearCase",
      "https://wiki.pmease.com/display/QB14/Working+with+CVS",
      "https://wiki.pmease.com/display/QB14/Working+with+Git",
      "https://wiki.pmease.com/display/QB14/Working+with+GitHub",
      "https://wiki.pmease.com/display/QB14/Working+with+GitLab",
      "https://wiki.pmease.com/display/QB14/Working+with+Bitbucket+Server",
      "https://wiki.pmease.com/display/QB14/Working+with+Bitbucket+Cloud",
      "https://wiki.pmease.com/display/QB14/Working+with+Gerrit",
      "https://wiki.pmease.com/display/QB14/Working+with+Google+git-repo",
      "https://wiki.pmease.com/display/QB14/Working+with+Mercurial",
      "https://wiki.pmease.com/display/QB14/Working+with+Perforce",
      "https://wiki.pmease.com/display/QB14/Working+with+StarTeam",
      "https://wiki.pmease.com/display/QB14/Working+with+Subversion",
      "https://wiki.pmease.com/display/QB14/Working+with+Team+Foundation+Server",
      "https://wiki.pmease.com/display/QB14/Working+with+Visual+SourceSafe",
      "https://wiki.pmease.com/display/QB14/Aggregate+SCM+Changes",
      "https://wiki.pmease.com/display/QB14/Working+with+ClearCase"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Working+with+ClearCase",
    "title": "Working with ClearCase",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Working with SCM systems"
    ],
    "full_text": "Administrator's Guide\nWorking with SCM systems\nWorking with ClearCase\nVersion: QB14\nOn this page\nWorking with ClearCase\nSpecify cleartool command location\nâ\nQuickBuild utilizes the cleartool command to interact with ClearCase. If this command is not in system path, you will need to specify location of the command by configuring ClearCase plugin as below:\nFurther more, Cleartool location can be specified on a per-node basis by following below steps:\nOpen ClearCase plugin setting page and define the cleartool path property as:\n$\n{\nnode\n.\ngetAttribute\n(\n\"cleartoolPath\"\n)\n}\nFor each node that does not have cleartool on system path, define the user attribute\ncleartoolPath\nto point to the actual cleartool path like below:\nPlease note that in above example, the\ncleartoolPath\nuser attribute is just for demonstration purpose. You can use any other user attribute name.\nProof build support\nâ\nFor general concept of proof build, refer to\nproof build\n. Here we explain how to set up ClearCase repository to support proof build.\nTest proof build as administrator\nâ\nSince proof build set up is a bit tricky, we first set up proof build for the administrator account and make sure it works before we proceed to enable it for all developers. To set up proof build for administrator, please follow below steps:\nLogin as administrator and download user agent by switching to\nMy\ntab.\nInstall and start user agent on your own desktop. For testing purpose, please start the agent as a foreground process. On windows, this can be done by running\nagent.bat\n; on Unix platforms, this can be done by running\nagent.sh console\nSet up a test configuration on QuickBuild server, define a ClearCase repository, and enable the proof build option in advanced section like below:\nMake sure the cleartool command exist in the system path of both server machine and your desktop. If not, please follow the section\nSpecify cleartool command location\nto tell QuickBuild location of cleartool command.\nAdd a\nrepository/checkout\nstep into step execution graph and have it checkout from the repository defined above.\nNow proof build has been enabled for your account, please try to checkout and edit some file inside the local view path specified above, and then run the test configuration. If set up correctly, your local change will be picked up and reflected in the build result. A local change tab will also appear to display your uncommitted changes after build finishes. Your uncommitted changes will be committed automatically if build is successful.\nEnable proof build for all developers\nâ\nNow that we have a concept of how proof build works. In order to get proof build works for all developers, we need to parameterize various proof build properties, so that different properties can be used for different developers. To do this, you will need to:\nDefine configuration variables like below:\nScript various properties in proof build section to make use of above variables like below:\nProperty Name\nProperty Value\nLocal View Path\n${vars.get(\"localViewPath\")}\nUpdate Condition\nvars.get(\"update\").asBoolean()\nCheckin Condition\nbuild.successful && vars.get(\"commit\").asBoolean()\nCheckin Comment\n${vars.get(\"comment\")}\nIn this way, various proof build properties will be prompted when your developer run the build. Once they've been input by your developer for the first time, the values will be remembered for subsequent triggers for that user.\nAt last we suggest to set up the configuration to\nenable concurrent builds\nso that multiple builds in the same configuration can run concurrently. This is vital to get fast feedback in case multiple developers are requesting proof builds in the same time.\nLimitations\nâ\nPlease be aware of below limitations when use this repository:\nDirectory operations, file deletions and file renamging in ClearCase are not detected as changes due to limitation of the cleartool command.\nNewly branched files are detected as added files.\nChanges are only detected on current branch. For example, if file1 goes through version\nmain/2\n,\nmain/3\n,\nmain/branch1/1\n,\nmain/branch1/2\nbetween two builds, only changes for\nmain/branch1/1\nand\nmain/branch1/2\nare detected.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Working with ClearCase",
        "content": ""
      },
      {
        "header": "Specify cleartool command locationâ",
        "content": "QuickBuild utilizes the cleartool command to interact with ClearCase. If this command is not in system path, you will need to specify location of the command by configuring ClearCase plugin as below: Further more, Cleartool location can be specified on a per-node basis by following below steps: Open ClearCase plugin setting page and define the cleartool path property as:${node.getAttribute(\"cleartoolPath\")}For each node that does not have cleartool on system path, define the user attributecleartoolPathto point to the actual cleartool path like below: Please note that in above example, thecleartoolPathuser attribute is just for demonstration purpose. You can use any other user attribute name."
      },
      {
        "header": "Proof build supportâ",
        "content": "For general concept of proof build, refer toproof build. Here we explain how to set up ClearCase repository to support proof build."
      },
      {
        "header": "Test proof build as administratorâ",
        "content": "Since proof build set up is a bit tricky, we first set up proof build for the administrator account and make sure it works before we proceed to enable it for all developers. To set up proof build for administrator, please follow below steps: Login as administrator and download user agent by switching toMytab.Install and start user agent on your own desktop. For testing purpose, please start the agent as a foreground process. On windows, this can be done by runningagent.bat; on Unix platforms, this can be done by runningagent.sh consoleSet up a test configuration on QuickBuild server, define a ClearCase repository, and enable the proof build option in advanced section like below:Make sure the cleartool command exist in the system path of both server machine and your desktop. If not, please follow the sectionSpecify cleartool command locationto tell QuickBuild location of cleartool command.Add arepository/checkoutstep into step execution graph and have it checkout from the repository defined above. Now proof build has been enabled for your account, please try to checkout and edit some file inside the local view path specified above, and then run the test configuration. If set up correctly, your local change will be picked up and reflected in the build result. A local change tab will also appear to display your uncommitted changes after build finishes. Your uncommitted changes will be committed automatically if build is successful."
      },
      {
        "header": "Enable proof build for all developersâ",
        "content": "Now that we have a concept of how proof build works. In order to get proof build works for all developers, we need to parameterize various proof build properties, so that different properties can be used for different developers. To do this, you will need to: Define configuration variables like below:Script various properties in proof build section to make use of above variables like below:Property NameProperty ValueLocal View Path${vars.get(\"localViewPath\")}Update Conditionvars.get(\"update\").asBoolean()Checkin Conditionbuild.successful && vars.get(\"commit\").asBoolean()Checkin Comment${vars.get(\"comment\")} In this way, various proof build properties will be prompted when your developer run the build. Once they've been input by your developer for the first time, the values will be remembered for subsequent triggers for that user. At last we suggest to set up the configuration toenable concurrent buildsso that multiple builds in the same configuration can run concurrently. This is vital to get fast feedback in case multiple developers are requesting proof builds in the same time."
      },
      {
        "header": "Limitationsâ",
        "content": "Please be aware of below limitations when use this repository: Directory operations, file deletions and file renamging in ClearCase are not detected as changes due to limitation of the cleartool command.Newly branched files are detected as added files.Changes are only detected on current branch. For example, if file1 goes through versionmain/2,main/3,main/branch1/1,main/branch1/2between two builds, only changes formain/branch1/1andmain/branch1/2are detected."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Working+with+CVS",
      "https://wiki.pmease.com/display/QB14/Working+with+Git",
      "https://wiki.pmease.com/display/QB14/Working+with+GitHub",
      "https://wiki.pmease.com/display/QB14/Working+with+GitLab",
      "https://wiki.pmease.com/display/QB14/Working+with+Bitbucket+Server",
      "https://wiki.pmease.com/display/QB14/Working+with+Bitbucket+Cloud",
      "https://wiki.pmease.com/display/QB14/Working+with+Gerrit",
      "https://wiki.pmease.com/display/QB14/Working+with+Google+git-repo",
      "https://wiki.pmease.com/display/QB14/Working+with+Mercurial",
      "https://wiki.pmease.com/display/QB14/Working+with+Perforce",
      "https://wiki.pmease.com/display/QB14/Working+with+StarTeam",
      "https://wiki.pmease.com/display/QB14/Working+with+Subversion",
      "https://wiki.pmease.com/display/QB14/Working+with+Team+Foundation+Server",
      "https://wiki.pmease.com/display/QB14/Working+with+Visual+SourceSafe",
      "https://wiki.pmease.com/display/QB14/Aggregate+SCM+Changes",
      "https://wiki.pmease.com/display/QB14/Working+with+CVS"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Working+with+CVS",
    "title": "Working with CVS",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Working with SCM systems"
    ],
    "full_text": "Administrator's Guide\nWorking with SCM systems\nWorking with CVS\nVersion: QB14\nOn this page\nWorking with CVS\nSpecify cvs command location\nâ\nQuickBuild utilizes the cvs command to interact with CVS repository. If this command is not in system path, you will need to specify location of the command by configuring CVS plugin as below:\nFurther more, cvs command location can be specified on a per-node basis by following below steps:\nOpen CVS plugin setting page and define the cvs path property as:\n$\n{\nnode\n.\ngetAttribute\n(\n\"cvsPath\"\n)\n}\nFor each node that does not have cvs command on system path, define the user attribute\ncvsPath\nto point to the actual cvs command location like below:\nFor user agent node, this user attribute can be defined [follow this guide](Manage User Agent.html#ManageUserAgent-defineuserattributes).\nPlease note that in above example, the\ncvsPath\nuser attribute is just for demonstration purpose. You can use any other user attribute name.\nProof build support\nâ\nFor general concept of proof build, refer to\nproof build\n. Here we explain how to set up Subversion repository to support proof build.\nTest proof build as administrator\nâ\nSince proof build set up is a bit tricky, we first set up proof build for the administrator account and make sure it works before we proceed to enable it for all developers. To set up proof build for administrator, please follow below steps:\nLogin as administrator and download user agent by switching to\nMy\ntab.\nInstall and start user agent on your own desktop. For testing purpose, please start the agent as a foreground process. On windows, this can be done by running\nagent.bat\n; on Unix platforms, this can be done by running\nagent.sh console\nSet up a test configuration on QuickBuild server, define a CVS repository, and enable the proof build option in advanced section like below:\nMake sure the cvs command exist in the system path of both server machine and your desktop. If not, please follow the section\nSpecify cvs command location\nto tell QuickBuild location of cvs command.\nAdd a\nrepository/checkout\nstep into step execution graph and have it checkout from the repository defined above.\nNow proof build has been enabled for your account, please try to checkout and edit some files in working copies specified above, and then run the test configuration. If set up correctly, your local change will be picked up and reflected in the build result. A local change tab will also appear to display your uncommitted changes after build finishes. Your uncommitted changes will be committed automatically if build is successful.\nEnable proof build for all developers\nâ\nNow that we have a concept of how proof build works. In order to get proof build works for all developers, we need to parameterize various proof build properties, so that different properties can be used for different developers. To do this, you will need to:\nDefine configuration variables like below:\nScript various properties in proof build section to make use of above variables like below:\nProperty Name\nProperty Value\nCVS Root\n${vars.get(\"cvsRoot\")}\nCVS Password\n${vars.get(\"cvsPassword\")}\nWorking Copies\n${vars.get(\"workingCopies\")}\nUpdate Condition\nvars.get(\"update\").asBoolean()\nCommit Condition\nbuild.successful && vars.get(\"commit\").asBoolean()\nCommit Comment\n${vars.get(\"comment\")}\nIn this way, various proof build properties will be prompted when your developer run the build. Once they've been input by your developer for the first time, the values will be remembered for subsequent triggers for that user.\nAt last we suggest to set up the configuration to\nenable concurrent builds\nso that multiple builds in the same configuration can run concurrently. This is vital to get fast feedback in case multiple developers are requesting proof builds in the same time.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Working with CVS",
        "content": ""
      },
      {
        "header": "Specify cvs command locationâ",
        "content": "QuickBuild utilizes the cvs command to interact with CVS repository. If this command is not in system path, you will need to specify location of the command by configuring CVS plugin as below: Further more, cvs command location can be specified on a per-node basis by following below steps: Open CVS plugin setting page and define the cvs path property as:${node.getAttribute(\"cvsPath\")}For each node that does not have cvs command on system path, define the user attributecvsPathto point to the actual cvs command location like below:For user agent node, this user attribute can be defined [follow this guide](Manage User Agent.html#ManageUserAgent-defineuserattributes). Please note that in above example, thecvsPathuser attribute is just for demonstration purpose. You can use any other user attribute name."
      },
      {
        "header": "Proof build supportâ",
        "content": "For general concept of proof build, refer toproof build. Here we explain how to set up Subversion repository to support proof build."
      },
      {
        "header": "Test proof build as administratorâ",
        "content": "Since proof build set up is a bit tricky, we first set up proof build for the administrator account and make sure it works before we proceed to enable it for all developers. To set up proof build for administrator, please follow below steps: Login as administrator and download user agent by switching toMytab.Install and start user agent on your own desktop. For testing purpose, please start the agent as a foreground process. On windows, this can be done by runningagent.bat; on Unix platforms, this can be done by runningagent.sh consoleSet up a test configuration on QuickBuild server, define a CVS repository, and enable the proof build option in advanced section like below:Make sure the cvs command exist in the system path of both server machine and your desktop. If not, please follow the sectionSpecify cvs command locationto tell QuickBuild location of cvs command.Add arepository/checkoutstep into step execution graph and have it checkout from the repository defined above. Now proof build has been enabled for your account, please try to checkout and edit some files in working copies specified above, and then run the test configuration. If set up correctly, your local change will be picked up and reflected in the build result. A local change tab will also appear to display your uncommitted changes after build finishes. Your uncommitted changes will be committed automatically if build is successful."
      },
      {
        "header": "Enable proof build for all developersâ",
        "content": "Now that we have a concept of how proof build works. In order to get proof build works for all developers, we need to parameterize various proof build properties, so that different properties can be used for different developers. To do this, you will need to: Define configuration variables like below:Script various properties in proof build section to make use of above variables like below:Property NameProperty ValueCVS Root${vars.get(\"cvsRoot\")}CVS Password${vars.get(\"cvsPassword\")}Working Copies${vars.get(\"workingCopies\")}Update Conditionvars.get(\"update\").asBoolean()Commit Conditionbuild.successful && vars.get(\"commit\").asBoolean()Commit Comment${vars.get(\"comment\")} In this way, various proof build properties will be prompted when your developer run the build. Once they've been input by your developer for the first time, the values will be remembered for subsequent triggers for that user. At last we suggest to set up the configuration toenable concurrent buildsso that multiple builds in the same configuration can run concurrently. This is vital to get fast feedback in case multiple developers are requesting proof builds in the same time."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Working+with+Git",
      "https://wiki.pmease.com/display/QB14/Working+with+GitHub",
      "https://wiki.pmease.com/display/QB14/Working+with+GitLab",
      "https://wiki.pmease.com/display/QB14/Working+with+Bitbucket+Server",
      "https://wiki.pmease.com/display/QB14/Working+with+Bitbucket+Cloud",
      "https://wiki.pmease.com/display/QB14/Working+with+Gerrit",
      "https://wiki.pmease.com/display/QB14/Working+with+Google+git-repo",
      "https://wiki.pmease.com/display/QB14/Working+with+Mercurial",
      "https://wiki.pmease.com/display/QB14/Working+with+Perforce",
      "https://wiki.pmease.com/display/QB14/Working+with+StarTeam",
      "https://wiki.pmease.com/display/QB14/Working+with+Subversion",
      "https://wiki.pmease.com/display/QB14/Working+with+Team+Foundation+Server",
      "https://wiki.pmease.com/display/QB14/Working+with+Visual+SourceSafe",
      "https://wiki.pmease.com/display/QB14/Aggregate+SCM+Changes",
      "https://wiki.pmease.com/display/QB14/Working+with+Git"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Working+with+Git",
    "title": "Working with Git",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Working with SCM systems"
    ],
    "full_text": "Administrator's Guide\nWorking with SCM systems\nWorking with Git\nVersion: QB14\nOn this page\nWorking with Git\nPrerequisites\nâ\nQuickBuild utilizes the Git command (git) to interact with remote Git repository. If this command is not in system path, you will need to specify location of the command by configuring Git plugin as below:\nFurther more, Git command (git) location can be specified on a per-node basis by following below steps:\nOpen Git plugin setting page and define the Git path property as:\n$\n{\nnode\n.\ngetAttribute\n(\n\"gitPath\"\n)\n}\nFor each node that does not have Git on system path, define the user attribute\ngitPath\nto point to the actual Git path like below:\nNOTE:\nexample above is just for demonstration, you can use any other user attribute name instead of\ngitPath\n.\nCreating a Git Repository\nâ\nYou may refer to\nthis page\non how to add a repository.\nSupported URL prefixes\nâ\nCurrently, below URL prefixes are supported:\nssh://host.[:port]/path/to/repo.git/\ngit://host.xz[:port]/path/to/repo.git/\nhttp[s]://host.xz[:port]/path/to/repo.git/\nftp[s]://host.xz[:port]/path/to/repo.git/\nrsync://host.xz/path/to/repo.git/\nIf\nhttps\nis used, and your credential need password, you need first add the credential manually to the nodes which you want check out code to.\nIf\nssh based\nURL is used, please use public key without password for authorization and you need not specify the password when you create the repository. You can reference your SSH manual on how to create public key without password.\nProof build support\nâ\nYour developers might need to push their local commits in local repository to a central official Git repository occasionally. In this case, QuickBuild can validate these commits by running proof build before pushing them.\nTest proof build as administrator\nâ\nSince proof build set up is a bit tricky, we first set up proof build for the administrator account and make sure it works before we proceed to enable it for all developers. To set up proof build for administrator, please follow below steps:\nLogin as administrator and download user agent by switching to\nMy\ntab.\nInstall and start user agent on your own desktop. For testing purpose, please start the agent as a foreground process. On windows, this can be done by running\nagent.bat\n; on Unix platforms, this can be done by running\nagent.sh console\nSet up a test configuration on QuickBuild server, define a Git repository, enable the proof build option in advanced section like below:\nMake sure the git command exists in the system path of both server machine and your desktop. If not, please follow the prerequisites section to tell QuickBuild location of git command.\nAdd a\nrepository/checkout\nstep into step execution graph and have it checkout from the repository defined above.\nNow proof build has been enabled for your account, please make some local commits into your local repository specified above, and then run the test configuration. If set up correctly, your local commits will be picked up and reflected in the build result. A local change tab will also appear to display local commits after build finishes. Your local commits will be pushed automatically if build is successful.\nEnable proof build for all developers\nâ\nNow that we have a concept of how proof build works. In order to get proof build works for all developers, we need to parameterize various proof build properties, so that different properties can be used for different developers. To do this, you will need to:\nDefine configuration variables like below:\nScript various properties in proof build section to make use of above variables like below:\nProperty Name\nProperty Value\nLocal Repository Path\n${vars.get(\"localRepositoryPath\")}\nChange Set to Verify\n${vars.get(\"changesetToVerify\")}\nMerge Condition\nvars.get(\"merge\").asBoolean()\nPush Condition\nbuild.successful && vars.get(\"push\").asBoolean()\nIn this way, various proof build properties will be prompted when your developer runs the build. Once they've been specified by your developer for the first time, the values will be remembered for subsequent triggers for that user.\nAt last we suggest to set up the configuration to\nenable concurrent builds\nso that multiple builds in the same configuration can run concurrently. This is vital to get fast feedback in case multiple developers are requesting proof builds in the same time.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Working with Git",
        "content": ""
      },
      {
        "header": "Prerequisitesâ",
        "content": "QuickBuild utilizes the Git command (git) to interact with remote Git repository. If this command is not in system path, you will need to specify location of the command by configuring Git plugin as below: Further more, Git command (git) location can be specified on a per-node basis by following below steps: Open Git plugin setting page and define the Git path property as:${node.getAttribute(\"gitPath\")}For each node that does not have Git on system path, define the user attributegitPathto point to the actual Git path like below: NOTE:example above is just for demonstration, you can use any other user attribute name instead ofgitPath."
      },
      {
        "header": "Creating a Git Repositoryâ",
        "content": "You may refer tothis pageon how to add a repository."
      },
      {
        "header": "Supported URL prefixesâ",
        "content": "Currently, below URL prefixes are supported: ssh://host.[:port]/path/to/repo.git/git://host.xz[:port]/path/to/repo.git/http[s]://host.xz[:port]/path/to/repo.git/ftp[s]://host.xz[:port]/path/to/repo.git/rsync://host.xz/path/to/repo.git/ Ifhttpsis used, and your credential need password, you need first add the credential manually to the nodes which you want check out code to. Ifssh basedURL is used, please use public key without password for authorization and you need not specify the password when you create the repository. You can reference your SSH manual on how to create public key without password."
      },
      {
        "header": "Proof build supportâ",
        "content": "Your developers might need to push their local commits in local repository to a central official Git repository occasionally. In this case, QuickBuild can validate these commits by running proof build before pushing them."
      },
      {
        "header": "Test proof build as administratorâ",
        "content": "Since proof build set up is a bit tricky, we first set up proof build for the administrator account and make sure it works before we proceed to enable it for all developers. To set up proof build for administrator, please follow below steps: Login as administrator and download user agent by switching toMytab.Install and start user agent on your own desktop. For testing purpose, please start the agent as a foreground process. On windows, this can be done by runningagent.bat; on Unix platforms, this can be done by runningagent.sh consoleSet up a test configuration on QuickBuild server, define a Git repository, enable the proof build option in advanced section like below:Make sure the git command exists in the system path of both server machine and your desktop. If not, please follow the prerequisites section to tell QuickBuild location of git command.Add arepository/checkoutstep into step execution graph and have it checkout from the repository defined above. Now proof build has been enabled for your account, please make some local commits into your local repository specified above, and then run the test configuration. If set up correctly, your local commits will be picked up and reflected in the build result. A local change tab will also appear to display local commits after build finishes. Your local commits will be pushed automatically if build is successful."
      },
      {
        "header": "Enable proof build for all developersâ",
        "content": "Now that we have a concept of how proof build works. In order to get proof build works for all developers, we need to parameterize various proof build properties, so that different properties can be used for different developers. To do this, you will need to: Define configuration variables like below:Script various properties in proof build section to make use of above variables like below:Property NameProperty ValueLocal Repository Path${vars.get(\"localRepositoryPath\")}Change Set to Verify${vars.get(\"changesetToVerify\")}Merge Conditionvars.get(\"merge\").asBoolean()Push Conditionbuild.successful && vars.get(\"push\").asBoolean() In this way, various proof build properties will be prompted when your developer runs the build. Once they've been specified by your developer for the first time, the values will be remembered for subsequent triggers for that user. At last we suggest to set up the configuration toenable concurrent buildsso that multiple builds in the same configuration can run concurrently. This is vital to get fast feedback in case multiple developers are requesting proof builds in the same time."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Working+with+GitHub",
      "https://wiki.pmease.com/display/QB14/Working+with+GitLab",
      "https://wiki.pmease.com/display/QB14/Working+with+Bitbucket+Server",
      "https://wiki.pmease.com/display/QB14/Working+with+Bitbucket+Cloud",
      "https://wiki.pmease.com/display/QB14/Working+with+Gerrit",
      "https://wiki.pmease.com/display/QB14/Working+with+Google+git-repo",
      "https://wiki.pmease.com/display/QB14/Working+with+Mercurial",
      "https://wiki.pmease.com/display/QB14/Working+with+Perforce",
      "https://wiki.pmease.com/display/QB14/Working+with+StarTeam",
      "https://wiki.pmease.com/display/QB14/Working+with+Subversion",
      "https://wiki.pmease.com/display/QB14/Working+with+Team+Foundation+Server",
      "https://wiki.pmease.com/display/QB14/Working+with+Visual+SourceSafe",
      "https://wiki.pmease.com/display/QB14/Aggregate+SCM+Changes",
      "https://wiki.pmease.com/display/QB14/Working+with+GitHub"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Working+with+GitHub",
    "title": "Working with GitHub",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Working with SCM systems"
    ],
    "full_text": "Administrator's Guide\nWorking with SCM systems\nWorking with GitHub\nVersion: QB14\nOn this page\nWorking with GitHub\nQuickBuild integrates with GitHub via the GitHub repository. This repository has all features of a normal\nGit repository\n, but add the ability to build against pull requests, and update pull request status based on build result.\nBuild against pull requests\nâ\nTo build against GitHub pull requests, define a GitHub repository like below:\nIn repository definition, you may select to build against open, closed, or specified pull requests, and choose to build head, merge, or both of selected build requests like below:\nHere\nhead\nbranch of pull request points to tip commit of the pull request, while\nmerge\npoints to merged commit of head commit and tip commit of target branch of the pull request. After defining the Git repository, you should add a checkout step to check it out into the workspace, and add necessary build steps to build against checked out contents.\nUpon triggering of configuration using such repository, QuickBuild will first find all matched pull requests at GitHub side and then fire separate build request(s) for each pull request to check changes against that pull request, and build that pull request if necessary. So if there are many matched pull requests, many build requests will be fired. So it is best practice to enable\nconcurrent build\nto speed up verification of multiple pull requests.\nAs demonstrated below, each finished build will display associated pull request as branch information and changes of the build will be calculated against previous build with the same pull request branch.\nUpon manual triggering of such configuration, all matched pull requests will be built even if they've not being updated, just like what QuickBuild behaves when trigger configurations using normal repositories. However if you schedule the configuration and set build condition to\nIf changes found in referenced repositories\n(or something similar), QuickBuild will only build against new/updated pull requests.\nUpdate pull request status at GitHub side based on build status\nâ\nWhen build against\nhead branch\nof GitHub pull requests, QuickBuild will update pull request status automatically to reflect build status when build is started/finished, as demonstrated below:\nwarning\nTo make this working, make sure head branch of relevant pull requests are getting built as pull request status reflects head commit status.\nGitHub Webhook Integration\nâ\nQuickBuild can trigger builds via GitHub webhooks since 9.0.\nConfig GitHub\nâ\nTo enable the webhook, first you need go to GitHub repository webhook settings page to configure the QuickBuild side related information:\nIf you want to use some custom parameters, you can add them to your webhook url like below:\nhttps://your.quickbuild.com/rest/webhook/github/14?target=android\nThen, later you can use\ntarget\nparameter in your trigger condition.\nConfig QuickBuild\nâ\nAdd anonymous group\nâ\nAs the webhook is triggered without authentication, anonymous group should be added and it should have the permission to use RESTful API.\nAdd webhook settings\nâ\nQuickBuild only allow push event to trigger the builds, other events will be ignored. To add integration at QuickBuild side, please go to configuration settings page and then choose Webhook -> GitHub from right side menu:\nThen, you can add the settings:\nTrigger User\nthe QuickBuild user to trigger the build who should at least have permission\nRUN_BUILD\nfor that configuration.\nWebhook Secret\nthe secret should be the same as what you defined in GitHub\nTrigger Condition\nthe trigger condition in Groovy scripts, when the result is true, build will be triggered, otherwise, the build will not be triggered. You can use variable\ndelivery\nto access the data from GitHub like\ndelivery.ref\n,\ndelivery.pusher.name\n. See more details on\nGitHub Events and Payloads page\n. You can also use the parameter specified in webhook URL as aforementioned.\nTrigger Build Variables\ndefine the variables to trigger the builds so you can use those variables in the steps later.\nGitHub Organization Webhook\nâ\nIf you want to use GitHub organization webhook, you don't need specify the configuration id at the webhook URL:\nhttps\n:\n/\n/\nyour\n.\nquickbuild\n.\nurl\n/\nrest\n/\nwebhook\n/\ngithub\nand then you need specify the repo and configuration mappings at QuickBuild side. Go to Administration page, and choose Plugin Management, then search for GitHub Webhook plugin:\nand then click the \"Gear\" icon to config the plugin, specify the repo and configuration id mappings here:\nYou also need to add\nGitHub Webhook\nsettings at QuickBuild side and decide whether or not to trigger builds according to the GitHub webhook payload like\naforementioned\n.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Working with GitHub",
        "content": ""
      },
      {
        "header": "Build against pull requestsâ",
        "content": "To build against GitHub pull requests, define a GitHub repository like below: In repository definition, you may select to build against open, closed, or specified pull requests, and choose to build head, merge, or both of selected build requests like below: Hereheadbranch of pull request points to tip commit of the pull request, whilemergepoints to merged commit of head commit and tip commit of target branch of the pull request. After defining the Git repository, you should add a checkout step to check it out into the workspace, and add necessary build steps to build against checked out contents. Upon triggering of configuration using such repository, QuickBuild will first find all matched pull requests at GitHub side and then fire separate build request(s) for each pull request to check changes against that pull request, and build that pull request if necessary. So if there are many matched pull requests, many build requests will be fired. So it is best practice to enableconcurrent buildto speed up verification of multiple pull requests. As demonstrated below, each finished build will display associated pull request as branch information and changes of the build will be calculated against previous build with the same pull request branch. Upon manual triggering of such configuration, all matched pull requests will be built even if they've not being updated, just like what QuickBuild behaves when trigger configurations using normal repositories. However if you schedule the configuration and set build condition toIf changes found in referenced repositories(or something similar), QuickBuild will only build against new/updated pull requests."
      },
      {
        "header": "Update pull request status at GitHub side based on build statusâ",
        "content": "When build againsthead branchof GitHub pull requests, QuickBuild will update pull request status automatically to reflect build status when build is started/finished, as demonstrated below: warningTo make this working, make sure head branch of relevant pull requests are getting built as pull request status reflects head commit status."
      },
      {
        "header": "GitHub Webhook Integrationâ",
        "content": "QuickBuild can trigger builds via GitHub webhooks since 9.0."
      },
      {
        "header": "Config GitHubâ",
        "content": "To enable the webhook, first you need go to GitHub repository webhook settings page to configure the QuickBuild side related information: If you want to use some custom parameters, you can add them to your webhook url like below: https://your.quickbuild.com/rest/webhook/github/14?target=android Then, later you can usetargetparameter in your trigger condition."
      },
      {
        "header": "Config QuickBuildâ",
        "content": ""
      },
      {
        "header": "Add anonymous groupâ",
        "content": "As the webhook is triggered without authentication, anonymous group should be added and it should have the permission to use RESTful API."
      },
      {
        "header": "Add webhook settingsâ",
        "content": "QuickBuild only allow push event to trigger the builds, other events will be ignored. To add integration at QuickBuild side, please go to configuration settings page and then choose Webhook -> GitHub from right side menu: Then, you can add the settings: Trigger Userthe QuickBuild user to trigger the build who should at least have permissionRUN_BUILDfor that configuration.Webhook Secretthe secret should be the same as what you defined in GitHubTrigger Conditionthe trigger condition in Groovy scripts, when the result is true, build will be triggered, otherwise, the build will not be triggered. You can use variabledeliveryto access the data from GitHub likedelivery.ref,delivery.pusher.name. See more details onGitHub Events and Payloads page. You can also use the parameter specified in webhook URL as aforementioned.Trigger Build Variablesdefine the variables to trigger the builds so you can use those variables in the steps later."
      },
      {
        "header": "GitHub Organization Webhookâ",
        "content": "If you want to use GitHub organization webhook, you don't need specify the configuration id at the webhook URL: https://your.quickbuild.url/rest/webhook/github and then you need specify the repo and configuration mappings at QuickBuild side. Go to Administration page, and choose Plugin Management, then search for GitHub Webhook plugin: and then click the \"Gear\" icon to config the plugin, specify the repo and configuration id mappings here: You also need to addGitHub Webhooksettings at QuickBuild side and decide whether or not to trigger builds according to the GitHub webhook payload likeaforementioned."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Working+with+GitLab",
      "https://wiki.pmease.com/display/QB14/Working+with+Bitbucket+Server",
      "https://wiki.pmease.com/display/QB14/Working+with+Bitbucket+Cloud",
      "https://wiki.pmease.com/display/QB14/Working+with+Gerrit",
      "https://wiki.pmease.com/display/QB14/Working+with+Google+git-repo",
      "https://wiki.pmease.com/display/QB14/Working+with+Mercurial",
      "https://wiki.pmease.com/display/QB14/Working+with+Perforce",
      "https://wiki.pmease.com/display/QB14/Working+with+StarTeam",
      "https://wiki.pmease.com/display/QB14/Working+with+Subversion",
      "https://wiki.pmease.com/display/QB14/Working+with+Team+Foundation+Server",
      "https://wiki.pmease.com/display/QB14/Working+with+Visual+SourceSafe",
      "https://wiki.pmease.com/display/QB14/Aggregate+SCM+Changes",
      "https://wiki.pmease.com/display/QB14/Working+with+GitLab"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Working+with+GitLab",
    "title": "Working with GitLab",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Working with SCM systems"
    ],
    "full_text": "Administrator's Guide\nWorking with SCM systems\nWorking with GitLab\nVersion: QB14\nOn this page\nWorking with GitLab\nQuickBuild integrates with GitLab via the GitLab repository. This repository has all features of a normal\nGit repository\n, but add the ability to build against merge requests, and update merge request status based on build result.\nBuild against merge requests\nâ\nTo build against GitLab merge requests, define a GitLab repository like below:\nIn repository definition, you may select to build against merge requests with filter, and then you can add your criteria in format: a=value1&b=value2\nYou need also specify the private access token in order to build against merge requests. The private access token should have permission to access to APIs and the repo.\nSee more detailed information on below page:\nhttps://docs.gitlab.com/ee/user/profile/personal_access_tokens.html\nGitLab Webhook Integration\nâ\nQuickBuild can trigger builds via GitLab webhooks since 9.0.\nConfig GitLab\nâ\nTo enable the webhook, first you need go to GitLab repository webhook settings page to configure the QuickBuild side related information:\nsee more detailed information on webhooks below:\nhttps://docs.gitlab.com/ee/user/project/integrations/webhooks.html\nConfig QuickBuild\nâ\nAdd anonymous group\nâ\nAs the webhook is triggered without authentication, anonymous group should be added and it should have the permission to use RESTful API.\nAdd webhook settings\nâ\nQuickBuild only allow push event to trigger the builds, other events will be ignored. To add integration at QuickBuild side, please go to configuration settings page and then choose Webhook -> GitLab from right side menu:\nThen, you can add the settings:\nTrigger User\nthe user to trigger the build\nWebhook Secret\nthe secret should be the same as what you defined in GitLab\nTrigger Condition\nthe trigger condition in Groovy scripts, when the result is true, build will be triggered, otherwise, the build will not be triggered.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Working with GitLab",
        "content": ""
      },
      {
        "header": "Build against merge requestsâ",
        "content": "To build against GitLab merge requests, define a GitLab repository like below: In repository definition, you may select to build against merge requests with filter, and then you can add your criteria in format: a=value1&b=value2 You need also specify the private access token in order to build against merge requests. The private access token should have permission to access to APIs and the repo. See more detailed information on below page: https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html"
      },
      {
        "header": "GitLab Webhook Integrationâ",
        "content": "QuickBuild can trigger builds via GitLab webhooks since 9.0."
      },
      {
        "header": "Config GitLabâ",
        "content": "To enable the webhook, first you need go to GitLab repository webhook settings page to configure the QuickBuild side related information: see more detailed information on webhooks below: https://docs.gitlab.com/ee/user/project/integrations/webhooks.html"
      },
      {
        "header": "Config QuickBuildâ",
        "content": ""
      },
      {
        "header": "Add anonymous groupâ",
        "content": "As the webhook is triggered without authentication, anonymous group should be added and it should have the permission to use RESTful API."
      },
      {
        "header": "Add webhook settingsâ",
        "content": "QuickBuild only allow push event to trigger the builds, other events will be ignored. To add integration at QuickBuild side, please go to configuration settings page and then choose Webhook -> GitLab from right side menu: Then, you can add the settings: Trigger Userthe user to trigger the buildWebhook Secretthe secret should be the same as what you defined in GitLabTrigger Conditionthe trigger condition in Groovy scripts, when the result is true, build will be triggered, otherwise, the build will not be triggered."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Working+with+Bitbucket+Server",
      "https://wiki.pmease.com/display/QB14/Working+with+Bitbucket+Cloud",
      "https://wiki.pmease.com/display/QB14/Working+with+Gerrit",
      "https://wiki.pmease.com/display/QB14/Working+with+Google+git-repo",
      "https://wiki.pmease.com/display/QB14/Working+with+Mercurial",
      "https://wiki.pmease.com/display/QB14/Working+with+Perforce",
      "https://wiki.pmease.com/display/QB14/Working+with+StarTeam",
      "https://wiki.pmease.com/display/QB14/Working+with+Subversion",
      "https://wiki.pmease.com/display/QB14/Working+with+Team+Foundation+Server",
      "https://wiki.pmease.com/display/QB14/Working+with+Visual+SourceSafe",
      "https://wiki.pmease.com/display/QB14/Aggregate+SCM+Changes",
      "https://wiki.pmease.com/display/QB14/Working+with+Bitbucket+Server"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Working+with+Bitbucket+Server",
    "title": "Working with Bitbucket Server",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Working with SCM systems"
    ],
    "full_text": "Administrator's Guide\nWorking with SCM systems\nWorking with Bitbucket Server\nVersion: QB14\nOn this page\nWorking with Bitbucket Server\nQuickBuild integrates with Bitbucket server via the Bitbucket server repository. This repository has all features of a normal\nGit repository\n, but add the ability to build against open pull requests, and update pull request status based on build result.\nBuild against pull requests\nâ\nTo build against pull requests, define a Bitbucket server repository like below:\nIn repository definition, tick the\nbuild open pull requests\noption like below:\nUpon triggering of configuration using such repository, QuickBuild will first find all open pull requests at Bitbucket server side and then fire separate build request(s) for each open pull request to check changes against that pull request, and build that pull request if necessary. So if there are many open pull requests, many build requests will be fired. So it is best practice to enable\nconcurrent build\nto speed up verification of multiple pull requests.\nAs demonstrated below, each finished build will display associated pull request as branch information and changes of the build will be calculated against previous build with the same pull request branch.\nUpon manual triggering of such configuration, all matched pull requests will be built even if they've not being updated, just like what QuickBuild behaves when trigger configurations using normal repositories. However if you schedule the configuration and set build condition to\nIf changes found in referenced repositories\n(or something similar), QuickBuild will only build against new/updated pull requests.\nUpdate pull request status at Bitbucket server side based on build status\nâ\nQuickBuild will update pull request status automatically to reflect build status when build is started/finished, as demonstrated below:\nBitBucket Webhook Integration\nâ\nQuickBuild can trigger builds via BitBucket webhooks since 9.0.\nConfig BitBucket\nâ\nTo enable the webhook, first you need go to BitBucket server webhook settings page to configure the QuickBuild side related information:\nHere, the URL for QuickBuild is in below format:\nhttp\n:\n/\n/\nyour\n-\nqb\n-\nserver\n:\n8810\n/\nrest\n/\nwebhook\n/\nbitbucket\n/\n{\nconfigurationId\n}\nConfig QuickBuild\nâ\nAdd anonymous group\nâ\nAs the webhook is triggered without authentication, anonymous group should be added and it should have the permission to use RESTful API.\nAdd webhook settings\nâ\nTo add integration at QuickBuild side, please go to configuration settings page and then choose Webhook -> BitBucket from right side menu:\nThen, you can add the settings:\nTrigger User\nthe user to trigger the build\nWebhook Secret\nthe secret should be the same as what you defined in BitBucket\nTrigger Condition\nthe trigger condition in Groovy scripts, when the result is true, build will be triggered, otherwise, the build will not be triggered.\nTrigger Events\nthe events which are allowed to trigger the build, by default, only push event (\nrepo:refs_changed\n) can trigger the build.\nEvent Payload\nâ\nFor detailed event payload please refer to below page:\nhttps://confluence.atlassian.com/bitbucketserver/event-payload-938025882.html\nYou can use the payload data in the script. For example, in \"Trigger Condition\", you can use payload data via\ndelivery\nobject, for example:\nif\n(\n\"pr:merged\"\n.\nequals\n(\nevent\n)\n)\n{\nreturn\ndelivery\n.\nactor\n.\nname\n==\n\"robin\"\n;\n}\nelse\n{\nreturn\nfalse\n;\n}\nYou can define\nTrigger Build Variables\nin the webhook settings, and then use those variables in configuration settings just like other variables. When define the variables, script is also supported, so the payload data can also be used via\ndelivery\nobject, for example:\nif\n(\nevent\n.\nstartsWith\n(\n\"pr:\"\n)\n)\n{\nreturn\ndelivery\n.\npullRequest\n.\nfromRef\n.\nid\n;\n}\nelse\n{\nreturn\n\"master\"\n;\n}\nConfigure QuickBuild repository\nâ\nYou can specify the ref or commit like below so QuickBuild can build the pull request or specified commit:\nadd a variable in BitBucket webhook definition:\nuse the variable in BitBucket repository definition:\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Working with Bitbucket Server",
        "content": ""
      },
      {
        "header": "Build against pull requestsâ",
        "content": "To build against pull requests, define a Bitbucket server repository like below: In repository definition, tick thebuild open pull requestsoption like below: Upon triggering of configuration using such repository, QuickBuild will first find all open pull requests at Bitbucket server side and then fire separate build request(s) for each open pull request to check changes against that pull request, and build that pull request if necessary. So if there are many open pull requests, many build requests will be fired. So it is best practice to enableconcurrent buildto speed up verification of multiple pull requests. As demonstrated below, each finished build will display associated pull request as branch information and changes of the build will be calculated against previous build with the same pull request branch. Upon manual triggering of such configuration, all matched pull requests will be built even if they've not being updated, just like what QuickBuild behaves when trigger configurations using normal repositories. However if you schedule the configuration and set build condition toIf changes found in referenced repositories(or something similar), QuickBuild will only build against new/updated pull requests."
      },
      {
        "header": "Update pull request status at Bitbucket server side based on build statusâ",
        "content": "QuickBuild will update pull request status automatically to reflect build status when build is started/finished, as demonstrated below:"
      },
      {
        "header": "BitBucket Webhook Integrationâ",
        "content": "QuickBuild can trigger builds via BitBucket webhooks since 9.0."
      },
      {
        "header": "Config BitBucketâ",
        "content": "To enable the webhook, first you need go to BitBucket server webhook settings page to configure the QuickBuild side related information: Here, the URL for QuickBuild is in below format: http://your-qb-server:8810/rest/webhook/bitbucket/{configurationId}"
      },
      {
        "header": "Config QuickBuildâ",
        "content": ""
      },
      {
        "header": "Add anonymous groupâ",
        "content": "As the webhook is triggered without authentication, anonymous group should be added and it should have the permission to use RESTful API."
      },
      {
        "header": "Add webhook settingsâ",
        "content": "To add integration at QuickBuild side, please go to configuration settings page and then choose Webhook -> BitBucket from right side menu: Then, you can add the settings: Trigger Userthe user to trigger the buildWebhook Secretthe secret should be the same as what you defined in BitBucketTrigger Conditionthe trigger condition in Groovy scripts, when the result is true, build will be triggered, otherwise, the build will not be triggered.Trigger Eventsthe events which are allowed to trigger the build, by default, only push event (repo:refs_changed) can trigger the build."
      },
      {
        "header": "Event Payloadâ",
        "content": "For detailed event payload please refer to below page: https://confluence.atlassian.com/bitbucketserver/event-payload-938025882.html You can use the payload data in the script. For example, in \"Trigger Condition\", you can use payload data viadeliveryobject, for example: if(\"pr:merged\".equals(event)){returndelivery.actor.name==\"robin\";}else{returnfalse;} You can defineTrigger Build Variablesin the webhook settings, and then use those variables in configuration settings just like other variables. When define the variables, script is also supported, so the payload data can also be used viadeliveryobject, for example: if(event.startsWith(\"pr:\")){returndelivery.pullRequest.fromRef.id;}else{return\"master\";}"
      },
      {
        "header": "Configure QuickBuild repositoryâ",
        "content": "You can specify the ref or commit like below so QuickBuild can build the pull request or specified commit: add a variable in BitBucket webhook definition:use the variable in BitBucket repository definition:"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Working+with+Bitbucket+Cloud",
      "https://wiki.pmease.com/display/QB14/Working+with+Gerrit",
      "https://wiki.pmease.com/display/QB14/Working+with+Google+git-repo",
      "https://wiki.pmease.com/display/QB14/Working+with+Mercurial",
      "https://wiki.pmease.com/display/QB14/Working+with+Perforce",
      "https://wiki.pmease.com/display/QB14/Working+with+StarTeam",
      "https://wiki.pmease.com/display/QB14/Working+with+Subversion",
      "https://wiki.pmease.com/display/QB14/Working+with+Team+Foundation+Server",
      "https://wiki.pmease.com/display/QB14/Working+with+Visual+SourceSafe",
      "https://wiki.pmease.com/display/QB14/Aggregate+SCM+Changes",
      "https://wiki.pmease.com/display/QB14/Working+with+Bitbucket+Cloud"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Working+with+Bitbucket+Cloud",
    "title": "Working with Bitbucket Cloud",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Working with SCM systems"
    ],
    "full_text": "Administrator's Guide\nWorking with SCM systems\nWorking with Bitbucket Cloud\nVersion: QB14\nOn this page\nWorking with Bitbucket Cloud\nQuickBuild integrates with Bitbucket cloud via the Bitbucket Cloud repository. This repository has all features of a normal\nGit repository\n, but add the ability to build against open pull requests, and update pull request status based on build result.\nBuild against pull requests\nâ\nTo build against pull requests, define a Bitbucket Cloud repository like below:\nIn repository definition, tick the\nbuild open pull requests\noption like below:\nUpon triggering of configuration using such repository, QuickBuild will first find all open pull requests at Bitbucket side and then fire separate build request(s) for each open pull request to check changes against that pull request, and build that pull request if necessary. So if there are many open pull requests, many build requests will be fired. So it is best practice to enable\nconcurrent build\nto speed up verification of multiple pull requests.\nAs demonstrated below, each finished build will display associated pull request as branch information and changes of the build will be calculated against previous build with the same pull request branch.\nUpon manual triggering of such configuration, all matched pull requests will be built even if they've not being updated, just like what QuickBuild behaves when trigger configurations using normal repositories. However if you schedule the configuration and set build condition to\nIf changes found in referenced repositories\n(or something similar), QuickBuild will only build against new/updated pull requests.\nUpdate pull request status at Bitbucket side based on build status\nâ\nQuickBuild will update pull request status automatically to reflect build status when build is started/finished, as demonstrated below:\nBitBucket Cloud Webhook Integration\nâ\nTo use BitBucket Cloud webhook, first, you need ensure you have anonymous group added with REST API access permission.\nConfig Webhook on bitbucket.org\nâ\nGo to your repository settings page on bitbucket.org, then config webhook settings:\nHere, the URL for QuickBuild is in below format:\nhttp\n:\n/\n/\nyour\n-\nqb\n-\nserver\n:\n8810\n/\nrest\n/\nwebhook\n/\nbitbucket\n.\norg\n/\n{\nconfigurationId\n}\n?\nsecret\n=\n{\nmy_webhook_secret\n}\nConfig Webhook on QuickBuild\nâ\nAdd anonymous group\nâ\nAs the webhook is triggered without authentication, anonymous group should be added and it should have the permission to use RESTful API.\nAdd webhook settings\nâ\nTo add integration at QuickBuild side, please go to configuration settings page and then choose Webhook -> bitbucket.org from right side menu:\nThen, you can add the settings:\nTrigger User\nthe user to trigger the build\nWebhook Secret\nthe secret should be the same as what you defined in BitBucket webhook URL in secret query param.\nTrigger Condition\nthe trigger condition in Groovy scripts, when the result is true, build will be triggered, otherwise, the build will not be triggered.\nTrigger Events\nthe events which are allowed to trigger the build.\nEvent Payload\nâ\nFor detailed event payload please refer to below page:\nhttps://support.atlassian.com/bitbucket-cloud/docs/event-payloads/\nYou can use the payload data in the script. For example, in \"Trigger Condition\", you can use payload data via\ndelivery\nobject:\nif\n(\n\"repo:push\"\n.\nequals\n(\nevent\n)\n)\n{\nreturn\ndelivery\n.\nactor\n.\naccount_id\n==\n\"5555555:77771777-2222-4ta6-bbbb-da3f0b740476\"\n;\n}\nelse\n{\nreturn\nfalse\n;\n}\nYou can define\nTrigger Build Variables\nin the webhook settings, and then use those variables in configuration settings just like other variables. When define the variables, script is also supported, so the payload data can also be used via\ndelivery\nobject, for example:\nif\n(\nevent\n.\nstartsWith\n(\n\"pr:\"\n)\n)\n{\nreturn\ndelivery\n.\npullRequest\n.\nfromRef\n.\nid\n;\n}\nelse\n{\nreturn\n\"main\"\n;\n}\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Working with Bitbucket Cloud",
        "content": ""
      },
      {
        "header": "Build against pull requestsâ",
        "content": "To build against pull requests, define a Bitbucket Cloud repository like below: In repository definition, tick thebuild open pull requestsoption like below: Upon triggering of configuration using such repository, QuickBuild will first find all open pull requests at Bitbucket side and then fire separate build request(s) for each open pull request to check changes against that pull request, and build that pull request if necessary. So if there are many open pull requests, many build requests will be fired. So it is best practice to enableconcurrent buildto speed up verification of multiple pull requests. As demonstrated below, each finished build will display associated pull request as branch information and changes of the build will be calculated against previous build with the same pull request branch. Upon manual triggering of such configuration, all matched pull requests will be built even if they've not being updated, just like what QuickBuild behaves when trigger configurations using normal repositories. However if you schedule the configuration and set build condition toIf changes found in referenced repositories(or something similar), QuickBuild will only build against new/updated pull requests."
      },
      {
        "header": "Update pull request status at Bitbucket side based on build statusâ",
        "content": "QuickBuild will update pull request status automatically to reflect build status when build is started/finished, as demonstrated below:"
      },
      {
        "header": "BitBucket Cloud Webhook Integrationâ",
        "content": "To use BitBucket Cloud webhook, first, you need ensure you have anonymous group added with REST API access permission."
      },
      {
        "header": "Config Webhook on bitbucket.orgâ",
        "content": "Go to your repository settings page on bitbucket.org, then config webhook settings: Here, the URL for QuickBuild is in below format: http://your-qb-server:8810/rest/webhook/bitbucket.org/{configurationId}?secret={my_webhook_secret}"
      },
      {
        "header": "Config Webhook on QuickBuildâ",
        "content": ""
      },
      {
        "header": "Add anonymous groupâ",
        "content": "As the webhook is triggered without authentication, anonymous group should be added and it should have the permission to use RESTful API."
      },
      {
        "header": "Add webhook settingsâ",
        "content": "To add integration at QuickBuild side, please go to configuration settings page and then choose Webhook -> bitbucket.org from right side menu: Then, you can add the settings: Trigger Userthe user to trigger the buildWebhook Secretthe secret should be the same as what you defined in BitBucket webhook URL in secret query param.Trigger Conditionthe trigger condition in Groovy scripts, when the result is true, build will be triggered, otherwise, the build will not be triggered.Trigger Eventsthe events which are allowed to trigger the build."
      },
      {
        "header": "Event Payloadâ",
        "content": "For detailed event payload please refer to below page: https://support.atlassian.com/bitbucket-cloud/docs/event-payloads/ You can use the payload data in the script. For example, in \"Trigger Condition\", you can use payload data viadeliveryobject: if(\"repo:push\".equals(event)){returndelivery.actor.account_id==\"5555555:77771777-2222-4ta6-bbbb-da3f0b740476\";}else{returnfalse;} You can defineTrigger Build Variablesin the webhook settings, and then use those variables in configuration settings just like other variables. When define the variables, script is also supported, so the payload data can also be used viadeliveryobject, for example: if(event.startsWith(\"pr:\")){returndelivery.pullRequest.fromRef.id;}else{return\"main\";}"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Working+with+Gerrit",
      "https://wiki.pmease.com/display/QB14/Working+with+Google+git-repo",
      "https://wiki.pmease.com/display/QB14/Working+with+Mercurial",
      "https://wiki.pmease.com/display/QB14/Working+with+Perforce",
      "https://wiki.pmease.com/display/QB14/Working+with+StarTeam",
      "https://wiki.pmease.com/display/QB14/Working+with+Subversion",
      "https://wiki.pmease.com/display/QB14/Working+with+Team+Foundation+Server",
      "https://wiki.pmease.com/display/QB14/Working+with+Visual+SourceSafe",
      "https://wiki.pmease.com/display/QB14/Aggregate+SCM+Changes",
      "https://wiki.pmease.com/display/QB14/Working+with+Gerrit"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Working+with+Gerrit",
    "title": "Working with Gerrit",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Working with SCM systems"
    ],
    "full_text": "Administrator's Guide\nWorking with SCM systems\nWorking with Gerrit\nVersion: QB14\nOn this page\nWorking with Gerrit\nQuickBuild integrates with Gerrit via the Gerrit repository to verify gerrit changes.\nHow to integrate\nâ\nTo build against Gerrit changes, define a Gerrit repository like below:\nAnd then add a checkout step in your step workflow to check out that repository, followed by appropriate build/test steps to verify checked out code. Upon initial triggering of the configuration containing this checkout step, QuickBuild will call Gerrit RESTful API to spawn a build request for each open change (or open change of specified branch if branch is specified in gerrit repository). Subsequent triggering of the configuration will only spawn build request for new change and change with new patch sets. In order to provide fast feedback of the changes, please make sure the configuration can run concurrently by enable concurrent mode in general setting of the configuration, and then configure node selection of the master step so that different build requests can run on different build agents.\nAfter build finishes, QuickBuild will update relevant changes Gerrit server with the build information including build url. Further, if label scoring is enabled when define Gerrit repository, QuickBuild will score specified Gerrit label based on build status like below:\nTrouble shooting\nâ\nTrouble\nPossible Causes\nNo any build requests are spawned upon triggering the configuration\n* The user specified in Gerrit repository definition does not have read permission against reference\nrefs/*\n* There are no new changes or updated changes (changes with new patch sets). If you want to build against open changes even if they have been built before, please turn off option\nQueue Changed Branches Only\nin advanced setting of the configuration\nQuickBuild can not score specified Gerrit label\n* The label is not defined at Gerrit side. Refer to\nGerrit documentation\non how to do this * The user specifid in Gerrit repository definition does not have permission to score the label\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Working with Gerrit",
        "content": ""
      },
      {
        "header": "How to integrateâ",
        "content": "To build against Gerrit changes, define a Gerrit repository like below: And then add a checkout step in your step workflow to check out that repository, followed by appropriate build/test steps to verify checked out code. Upon initial triggering of the configuration containing this checkout step, QuickBuild will call Gerrit RESTful API to spawn a build request for each open change (or open change of specified branch if branch is specified in gerrit repository). Subsequent triggering of the configuration will only spawn build request for new change and change with new patch sets. In order to provide fast feedback of the changes, please make sure the configuration can run concurrently by enable concurrent mode in general setting of the configuration, and then configure node selection of the master step so that different build requests can run on different build agents. After build finishes, QuickBuild will update relevant changes Gerrit server with the build information including build url. Further, if label scoring is enabled when define Gerrit repository, QuickBuild will score specified Gerrit label based on build status like below:"
      },
      {
        "header": "Trouble shootingâ",
        "content": "TroublePossible CausesNo any build requests are spawned upon triggering the configuration* The user specified in Gerrit repository definition does not have read permission against referencerefs/** There are no new changes or updated changes (changes with new patch sets). If you want to build against open changes even if they have been built before, please turn off optionQueue Changed Branches Onlyin advanced setting of the configurationQuickBuild can not score specified Gerrit label* The label is not defined at Gerrit side. Refer toGerrit documentationon how to do this * The user specifid in Gerrit repository definition does not have permission to score the label"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Working+with+Google+git-repo",
      "https://wiki.pmease.com/display/QB14/Working+with+Mercurial",
      "https://wiki.pmease.com/display/QB14/Working+with+Perforce",
      "https://wiki.pmease.com/display/QB14/Working+with+StarTeam",
      "https://wiki.pmease.com/display/QB14/Working+with+Subversion",
      "https://wiki.pmease.com/display/QB14/Working+with+Team+Foundation+Server",
      "https://wiki.pmease.com/display/QB14/Working+with+Visual+SourceSafe",
      "https://wiki.pmease.com/display/QB14/Aggregate+SCM+Changes",
      "https://wiki.pmease.com/display/QB14/Working+with+Google+git-repo"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Working+with+Google+git-repo",
    "title": "Working with Google git-repo",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Working with SCM systems"
    ],
    "full_text": "Administrator's Guide\nWorking with SCM systems\nWorking with Google git-repo\nVersion: QB14\nOn this page\nWorking with Google git-repo\nPrerequisites\nâ\nRepo\nis a tool which is built on top of Git. QuickBuild utilizes the\nrepo\ncommand to interact with remote git-repo repository. If this command is not in system path, you will need to specify location of the command by configuring Repo plugin as below:\nFurther more, git-repo command (repo) location can be specified on a per-node basis by following below steps:\nOpen Repo plugin setting page and define the repo path property as:\n$\n{\nnode\n.\ngetAttribute\n(\n\"repoPath\"\n)\n}\nFor each node that does not have git-repo on system path, define the user attribute\nrepoPath\nto point to the actual repo command path like below:\nNOTE:\nexample above is just for demonstration, you can use any other user attribute name instead of\nrepoPath\n.\nwarning\nAs git-repo is built on top of git, the Git plugin and git command should be also configured properly. Please refer to\nWorking with Git\npage for details.\nCreating a Repo Repository\nâ\nYou may refer to\nthis page\non how to add a repository.\nSupported URL prefixes\nâ\nBelow URL prefixes are supported:\nssh://host.[:port]/path/to/repo.git/\ngit://host.xz[:port]/path/to/repo.git/\nhttp[s]://host.xz[:port]/path/to/repo.git/\nftp[s]://host.xz[:port]/path/to/repo.git/\nrsync://host.xz/path/to/repo.git/.\nIf\nhttps\nis used, and your credential need password, you need first add the credential manually to the nodes which you want check out code to.\nIf\nssh\nis used, please use public key without password for authorization and you need not specify the password when you create the repository. You can reference your SSH manual on how to create public key without password.\nProof build support\nâ\nwarning\nThe proof build does not support, please use git proof build instead.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Working with Google git-repo",
        "content": ""
      },
      {
        "header": "Prerequisitesâ",
        "content": "Repois a tool which is built on top of Git. QuickBuild utilizes therepocommand to interact with remote git-repo repository. If this command is not in system path, you will need to specify location of the command by configuring Repo plugin as below: Further more, git-repo command (repo) location can be specified on a per-node basis by following below steps: Open Repo plugin setting page and define the repo path property as:${node.getAttribute(\"repoPath\")}For each node that does not have git-repo on system path, define the user attributerepoPathto point to the actual repo command path like below: NOTE:example above is just for demonstration, you can use any other user attribute name instead ofrepoPath. warningAs git-repo is built on top of git, the Git plugin and git command should be also configured properly. Please refer toWorking with Gitpage for details."
      },
      {
        "header": "Creating a Repo Repositoryâ",
        "content": "You may refer tothis pageon how to add a repository."
      },
      {
        "header": "Supported URL prefixesâ",
        "content": "Below URL prefixes are supported: ssh://host.[:port]/path/to/repo.git/git://host.xz[:port]/path/to/repo.git/http[s]://host.xz[:port]/path/to/repo.git/ftp[s]://host.xz[:port]/path/to/repo.git/rsync://host.xz/path/to/repo.git/. Ifhttpsis used, and your credential need password, you need first add the credential manually to the nodes which you want check out code to. Ifsshis used, please use public key without password for authorization and you need not specify the password when you create the repository. You can reference your SSH manual on how to create public key without password."
      },
      {
        "header": "Proof build supportâ",
        "content": "warningThe proof build does not support, please use git proof build instead."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Working+with+Mercurial",
      "https://wiki.pmease.com/display/QB14/Working+with+Perforce",
      "https://wiki.pmease.com/display/QB14/Working+with+StarTeam",
      "https://wiki.pmease.com/display/QB14/Working+with+Subversion",
      "https://wiki.pmease.com/display/QB14/Working+with+Team+Foundation+Server",
      "https://wiki.pmease.com/display/QB14/Working+with+Visual+SourceSafe",
      "https://wiki.pmease.com/display/QB14/Aggregate+SCM+Changes",
      "https://wiki.pmease.com/display/QB14/Working+with+Mercurial"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Working+with+Mercurial",
    "title": "Working with Mercurial",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Working with SCM systems"
    ],
    "full_text": "Administrator's Guide\nWorking with SCM systems\nWorking with Mercurial\nVersion: QB14\nOn this page\nWorking with Mercurial\nPrerequisites\nâ\nQuickBuild utilizes the Mercurial command (hg) to interact with remote Mercurial repository. If this command is not in system path, you will need to specify location of the command by configuring Mercurial plugin as below:\nFurther more, Mercurial command (hg) location can be specified on a per-node basis by following below steps:\nOpen Mercurial plugin setting page and define the\nhg\npath property as:\n$\n{\nnode\n.\ngetAttribute\n(\n\"hgPath\"\n)\n}\nFor each node that does not have\nhg\non system path, define the user attribute\nhgPath\nto point to the actual Mercurial path like below:\nNOTE:\nexample above is just for demonstration, you can use any other user attribute name instead of\nhgPath\n.\nCreating a Mercurial Repository\nâ\nYou may refer to\nthis page\non how to add a repository.\nSupported URL prefixes\nâ\nCurrently, below URL prefixes are supported:\n[local/filesystem/path]\n[file://local/filesystem/path]\n[\nhttp://host\\[:port\\]/path\\\n]\n[\nhttps://host\\[:port\\]/path\\\n]\n[ssh://host[:port]/path]\nIf\nhttps\nis used, and your credential need password, you need first add the credential manually to the nodes which you want check out code to.\nIf\nssh based\nURL is used, please use public key without password for authorization and you need not specify the password when you create the repository. You can reference your SSH manual on how to create public key without password.\nProof build support\nâ\nYour developers might need to push their local commits in local branches to a central official Mercurial repository occasionally. In this case, QuickBuild can validate these outgoing changes by running proof build before pushing them.\nTest proof build as administrator\nâ\nSince proof build set up is a bit tricky, we first set up proof build for the administrator account and make sure it works before we proceed to enable it for all developers. To set up proof build for administrator, please follow below steps:\nLogin as administrator and download user agent by switching to\nMy\ntab.\nInstall and start user agent on your own desktop. For testing purpose, please start the agent as a foreground process. On windows, this can be done by running\nagent.bat\n; on Unix platforms, this can be done by running\nagent.sh console\nSet up a test configuration on QuickBuild server, define a Mercurial repository, enable the proof build option in advanced section like below:\nMake sure the hg command exists in the system path of both server machine and your desktop. If not, please follow the prerequisites section to tell QuickBuild location of hg command.\nAdd a\nrepository/checkout\nstep into step execution graph and have it checkout from the repository defined above.\nNow proof build has been enabled for your account, please make some local commits into your local repository specified above, and then run the test configuration. If set up correctly, your local commits will be picked up and reflected in the build result. A local change tab will also appear to display local commits after build finishes. Your local commits will be pushed automatically if build is successful.\nEnable proof build for all developers\nâ\nNow that we have a concept of how proof build works. In order to get proof build works for all developers, we need to parameterize various proof build properties, so that different properties can be used for different developers. To do this, you will need to:\nDefine configuration variables like below:\nScript various properties in proof build section to make use of above variables like below:\nProperty Name\nProperty Value\nLocal Repository Path\n${vars.get(\"localRepositoryPath\")}\nChange Set to Verify\n${vars.get(\"changesetToVerify\")}\nMerge Condition\nvars.get(\"merge\").asBoolean()\nPush Condition\nbuild.successful && vars.get(\"push\").asBoolean()\nIn this way, various proof build properties will be prompted when your developer runs the build. Once they've been specified by your developer for the first time, the values will be remembered for subsequent triggers for that user.\nAt last we suggest to set up the configuration to\nenable concurrent builds\nso that multiple builds in the same configuration can run concurrently. This is vital to get fast feedback in case multiple developers are requesting proof builds in the same time.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Working with Mercurial",
        "content": ""
      },
      {
        "header": "Prerequisitesâ",
        "content": "QuickBuild utilizes the Mercurial command (hg) to interact with remote Mercurial repository. If this command is not in system path, you will need to specify location of the command by configuring Mercurial plugin as below: Further more, Mercurial command (hg) location can be specified on a per-node basis by following below steps: Open Mercurial plugin setting page and define thehgpath property as:${node.getAttribute(\"hgPath\")}For each node that does not havehgon system path, define the user attributehgPathto point to the actual Mercurial path like below: NOTE:example above is just for demonstration, you can use any other user attribute name instead ofhgPath."
      },
      {
        "header": "Creating a Mercurial Repositoryâ",
        "content": "You may refer tothis pageon how to add a repository."
      },
      {
        "header": "Supported URL prefixesâ",
        "content": "Currently, below URL prefixes are supported: [local/filesystem/path][file://local/filesystem/path][http://host\\[:port\\]/path\\][https://host\\[:port\\]/path\\][ssh://host[:port]/path] Ifhttpsis used, and your credential need password, you need first add the credential manually to the nodes which you want check out code to. Ifssh basedURL is used, please use public key without password for authorization and you need not specify the password when you create the repository. You can reference your SSH manual on how to create public key without password."
      },
      {
        "header": "Proof build supportâ",
        "content": "Your developers might need to push their local commits in local branches to a central official Mercurial repository occasionally. In this case, QuickBuild can validate these outgoing changes by running proof build before pushing them."
      },
      {
        "header": "Test proof build as administratorâ",
        "content": "Since proof build set up is a bit tricky, we first set up proof build for the administrator account and make sure it works before we proceed to enable it for all developers. To set up proof build for administrator, please follow below steps: Login as administrator and download user agent by switching toMytab.Install and start user agent on your own desktop. For testing purpose, please start the agent as a foreground process. On windows, this can be done by runningagent.bat; on Unix platforms, this can be done by runningagent.sh consoleSet up a test configuration on QuickBuild server, define a Mercurial repository, enable the proof build option in advanced section like below:Make sure the hg command exists in the system path of both server machine and your desktop. If not, please follow the prerequisites section to tell QuickBuild location of hg command.Add arepository/checkoutstep into step execution graph and have it checkout from the repository defined above. Now proof build has been enabled for your account, please make some local commits into your local repository specified above, and then run the test configuration. If set up correctly, your local commits will be picked up and reflected in the build result. A local change tab will also appear to display local commits after build finishes. Your local commits will be pushed automatically if build is successful."
      },
      {
        "header": "Enable proof build for all developersâ",
        "content": "Now that we have a concept of how proof build works. In order to get proof build works for all developers, we need to parameterize various proof build properties, so that different properties can be used for different developers. To do this, you will need to: Define configuration variables like below:Script various properties in proof build section to make use of above variables like below:Property NameProperty ValueLocal Repository Path${vars.get(\"localRepositoryPath\")}Change Set to Verify${vars.get(\"changesetToVerify\")}Merge Conditionvars.get(\"merge\").asBoolean()Push Conditionbuild.successful && vars.get(\"push\").asBoolean()In this way, various proof build properties will be prompted when your developer runs the build. Once they've been specified by your developer for the first time, the values will be remembered for subsequent triggers for that user. At last we suggest to set up the configuration toenable concurrent buildsso that multiple builds in the same configuration can run concurrently. This is vital to get fast feedback in case multiple developers are requesting proof builds in the same time."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Working+with+Perforce",
      "https://wiki.pmease.com/display/QB14/Working+with+StarTeam",
      "https://wiki.pmease.com/display/QB14/Working+with+Subversion",
      "https://wiki.pmease.com/display/QB14/Working+with+Team+Foundation+Server",
      "https://wiki.pmease.com/display/QB14/Working+with+Visual+SourceSafe",
      "https://wiki.pmease.com/display/QB14/Aggregate+SCM+Changes",
      "https://wiki.pmease.com/display/QB14/Working+with+Perforce"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Working+with+Perforce",
    "title": "Working with Perforce",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Working with SCM systems"
    ],
    "full_text": "Administrator's Guide\nWorking with SCM systems\nWorking with Perforce\nVersion: QB14\nOn this page\nWorking with Perforce\nSpecify p4 command location\nâ\nQuickBuild utilizes the p4 command to interact with Perforce depot. If this command is not in system path, you will need to specify location of the command by configuring Perfoce plugin as below:\nFurther more, p4 location can be specified on a per-node basis by following below steps:\nOpen Perforce plugin setting page and define the p4 path property as:\n$\n{\nnode\n.\ngetAttribute\n(\n\"p4Path\"\n)\n}\nFor each node that does not have p4 command on system path, define the user attribute\np4Path\nto point to the actual p4 command path like below:\nIn case of user agent node, the user attribute need to be defined [in this way](Manage User Agent.html#ManageUserAgent-defineuserattributes).\nPlease note that in above example, the\np4Path\nuser attribute is just for demonstration purpose. You can use any other user attribute name.\nProof build support\nâ\nFor general concept of proof build, refer to\nproof build\n. Here we explain how to set up Perforce repository to support proof build.\nTest proof build as administrator\nâ\nSince proof build set up is a bit tricky, we first set up proof build for the administrator account and make sure it works before we proceed to enable it for all developers. To set up proof build for administrator, please follow below steps:\nLogin as administrator and download user agent by switching to\nMy\ntab.\nInstall and start user agent on your own desktop. For testing purpose, please start the agent as a foreground process. On windows, this can be done by running\nagent.bat\n; on Unix platforms, this can be done by running\nagent.sh console\nSet up a test configuration on QuickBuild server, define a Perforce repository, and enable the proof build option in advanced section like below:\nMake sure the p4 command exist in the system path of both server machine and your desktop. If not, please follow the section\nSpecify p4 command location\nto tell QuickBuild location of p4 command.\nAdd a\nrepository/checkout\nstep into step execution graph and have it checkout from the repository defined above.\nNow proof build has been enabled for your account, please try to checkout and edit some file in the local perforce client specified above, and then run the test configuration. If set up correctly, your local change will be picked up and reflected in the build result. A local change tab will also appear to display your uncommitted changes after build finishes. Your uncommitted changes will be committed automatically if build is successful.\n{#WorkingwithPerforce-proofbuildforalldevelopers}\nEnable proof build for all developers\nâ\nNow that we have a concept of how proof build works. In order to get proof build works for all developers, we need to parameterize various proof build properties, so that different properties can be used for different developers. To do this, you will need to:\nDefine configuration variables like below:\nScript various properties in proof build section to make use of above variables like below:\nProperty Name\nProperty Value\nLocal Client\n${vars.get(\"localClient\")}\nUser Name\n${vars.get(\"userName\")}\nPassword\n${vars.get(\"password\")}\nSync Condition\nvars.get(\"sync\").asBoolean()\nChange Numbers to Verify\n${vars.get(\"changeLists\")}\nSubmit Condition\nbuild.successful && vars.get(\"submit\").asBoolean()\nSubmit Comment\n${vars.get(\"comment\")}\nIn this way, various proof build properties will be prompted when your developer run the build. Once they've been input by your developer for the first time, the values will be remembered for subsequent triggers for that user.\nAt last we suggest to set up the configuration to\nenable concurrent builds\nso that multiple builds in the same configuration can run concurrently. This is vital to get fast feedback in case multiple developers are requesting proof builds in the same time.\nShelve support\nâ\nThe proof build mechanism serves the purpose of verifying unsubmitted changes, but it requires developers to install user agent on their development machine. Also it requires that the user agent is online when proof build is finished, which is not ideal as it is impossible for developer to submit proof build and then shutdown computer to go home. The perforce shelve support in QuickBuild 5.1 comes to rescue. It serves the same purpose of verifying unsubmitted changes, without aforementioned limitations. What it does is to merge shelved changes with latest version in defined repository, run build, and optionally submit shelved changes if build is successful.\nTo enable perforce shelve support, tick the option\nMerge with Shelved Changes\nin advanced setting of perforce repository like below:\nJust like what we've done when enable proof build for all developers, we can enable shelve support for all develoers with help of variables:\nDefine variables as below to prompt developer for perforce account and shelved change lists when the configuration is triggered:\nScript various properties in shelve support definition to make use of above variables:\nWith this, you no longer need to hard code shelve account/change list information at the time defining shelve support. Developer will be prompted with below screen at the time triggering the configuration:\nLastly, if you select to submit the changes in shelve support, QuickBuild will submit the shelved changes and the shelved changes will be removed from developer's local client.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Working with Perforce",
        "content": ""
      },
      {
        "header": "Specify p4 command locationâ",
        "content": "QuickBuild utilizes the p4 command to interact with Perforce depot. If this command is not in system path, you will need to specify location of the command by configuring Perfoce plugin as below: Further more, p4 location can be specified on a per-node basis by following below steps: Open Perforce plugin setting page and define the p4 path property as:${node.getAttribute(\"p4Path\")}For each node that does not have p4 command on system path, define the user attributep4Pathto point to the actual p4 command path like below:In case of user agent node, the user attribute need to be defined [in this way](Manage User Agent.html#ManageUserAgent-defineuserattributes). Please note that in above example, thep4Pathuser attribute is just for demonstration purpose. You can use any other user attribute name."
      },
      {
        "header": "Proof build supportâ",
        "content": "For general concept of proof build, refer toproof build. Here we explain how to set up Perforce repository to support proof build."
      },
      {
        "header": "Test proof build as administratorâ",
        "content": "Since proof build set up is a bit tricky, we first set up proof build for the administrator account and make sure it works before we proceed to enable it for all developers. To set up proof build for administrator, please follow below steps: Login as administrator and download user agent by switching toMytab.Install and start user agent on your own desktop. For testing purpose, please start the agent as a foreground process. On windows, this can be done by runningagent.bat; on Unix platforms, this can be done by runningagent.sh consoleSet up a test configuration on QuickBuild server, define a Perforce repository, and enable the proof build option in advanced section like below:Make sure the p4 command exist in the system path of both server machine and your desktop. If not, please follow the sectionSpecify p4 command locationto tell QuickBuild location of p4 command.Add arepository/checkoutstep into step execution graph and have it checkout from the repository defined above. Now proof build has been enabled for your account, please try to checkout and edit some file in the local perforce client specified above, and then run the test configuration. If set up correctly, your local change will be picked up and reflected in the build result. A local change tab will also appear to display your uncommitted changes after build finishes. Your uncommitted changes will be committed automatically if build is successful. {#WorkingwithPerforce-proofbuildforalldevelopers}"
      },
      {
        "header": "Enable proof build for all developersâ",
        "content": "Now that we have a concept of how proof build works. In order to get proof build works for all developers, we need to parameterize various proof build properties, so that different properties can be used for different developers. To do this, you will need to: Define configuration variables like below:Script various properties in proof build section to make use of above variables like below:Property NameProperty ValueLocal Client${vars.get(\"localClient\")}User Name${vars.get(\"userName\")}Password${vars.get(\"password\")}Sync Conditionvars.get(\"sync\").asBoolean()Change Numbers to Verify${vars.get(\"changeLists\")}Submit Conditionbuild.successful && vars.get(\"submit\").asBoolean()Submit Comment${vars.get(\"comment\")} In this way, various proof build properties will be prompted when your developer run the build. Once they've been input by your developer for the first time, the values will be remembered for subsequent triggers for that user. At last we suggest to set up the configuration toenable concurrent buildsso that multiple builds in the same configuration can run concurrently. This is vital to get fast feedback in case multiple developers are requesting proof builds in the same time."
      },
      {
        "header": "Shelve supportâ",
        "content": "The proof build mechanism serves the purpose of verifying unsubmitted changes, but it requires developers to install user agent on their development machine. Also it requires that the user agent is online when proof build is finished, which is not ideal as it is impossible for developer to submit proof build and then shutdown computer to go home. The perforce shelve support in QuickBuild 5.1 comes to rescue. It serves the same purpose of verifying unsubmitted changes, without aforementioned limitations. What it does is to merge shelved changes with latest version in defined repository, run build, and optionally submit shelved changes if build is successful. To enable perforce shelve support, tick the optionMerge with Shelved Changesin advanced setting of perforce repository like below: Just like what we've done when enable proof build for all developers, we can enable shelve support for all develoers with help of variables: Define variables as below to prompt developer for perforce account and shelved change lists when the configuration is triggered:Script various properties in shelve support definition to make use of above variables:With this, you no longer need to hard code shelve account/change list information at the time defining shelve support. Developer will be prompted with below screen at the time triggering the configuration: Lastly, if you select to submit the changes in shelve support, QuickBuild will submit the shelved changes and the shelved changes will be removed from developer's local client."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Working+with+StarTeam",
      "https://wiki.pmease.com/display/QB14/Working+with+Subversion",
      "https://wiki.pmease.com/display/QB14/Working+with+Team+Foundation+Server",
      "https://wiki.pmease.com/display/QB14/Working+with+Visual+SourceSafe",
      "https://wiki.pmease.com/display/QB14/Aggregate+SCM+Changes",
      "https://wiki.pmease.com/display/QB14/Working+with+StarTeam"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Working+with+StarTeam",
    "title": "Working with StarTeam",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Working with SCM systems"
    ],
    "full_text": "Administrator's Guide\nWorking with SCM systems\nWorking with StarTeam\nVersion: QB14\nOn this page\nWorking with StarTeam\nwarning\nPlease make sure clock of the build server and all build agents interacting with StarTeam repository are synced with the StarTeam server.\nInstall StarTeam client on build machine\nâ\nIn order to use StarTeam repository, you will need to install StarTeam client on QuickBuild server and all build agents interacting with StarTeam repository. After installation, please copy the StarTeam API library file (normally starteamXX.jar, where XX stands for StarTeam API version) to the\nplugins/com.pmease.quickbuild.libs\nsub folder under QuickBuild server's installation directory.\nProof build support\nâ\nFor general concept of proof build, refer to\nproof build\n. Here we explain how to set up StarTeam repository to support proof build.\nTest proof build as administrator\nâ\nSince proof build set up is a bit tricky, we first set up proof build for the administrator account and make sure it works before we proceed to enable it for all developers. To set up proof build for administrator, please follow below steps:\nLogin as administrator and download user agent by switching to\nMy\ntab.\nInstall and start user agent on your own desktop. For testing purpose, please start the agent as a foreground process. On windows, this can be done by running\nagent.bat\n; on Unix platforms, this can be done by running\nagent.sh console\nSet up a test configuration on QuickBuild server, define a StarTeam repository, and enable the proof build option in advanced section like below:\nAdd a\nrepository/checkout\nstep into step execution graph and have it checkout from the repository defined above.\nNow proof build has been enabled for your account, please try to checkout and edit some files in working view specified above, and then run the test configuration. If set up correctly, your local change will be picked up and reflected in the build result. A local change tab will also appear to display your uncommitted changes after build finishes. Your uncommitted changes will be committed automatically if build is successful.\nEnable proof build for all developers\nâ\nNow that we have a concept of how proof build works. In order to get proof build works for all developers, we need to parameterize various proof build properties, so that different properties can be used for different developers. To do this, you will need to:\nDefine configuration variables like below:\nScript various properties in proof build section to make use of above variables like below:\nProperty Name\nProperty Value\nWorking View\n${vars.get(\"workingView\")}\nUser Name\n${vars.get(\"userName\")}\nPassword\n${vars.get(\"password\")}\nCheckin Condition\nbuild.successful && vars.get(\"checkin\").asBoolean()\nCheckin Comment\n${vars.get(\"comment\")}\nIn this way, various proof build properties will be prompted when your developer run the build. Once they've been input by your developer for the first time, the values will be remembered for subsequent triggers for that user.\nAt last we suggest to set up the configuration to\nenable concurrent builds\nso that multiple builds in the same configuration can run concurrently. This is vital to get fast feedback in case multiple developers are requesting proof builds in the same time.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Working with StarTeam",
        "content": ""
      },
      {
        "header": "Install StarTeam client on build machineâ",
        "content": "In order to use StarTeam repository, you will need to install StarTeam client on QuickBuild server and all build agents interacting with StarTeam repository. After installation, please copy the StarTeam API library file (normally starteamXX.jar, where XX stands for StarTeam API version) to theplugins/com.pmease.quickbuild.libssub folder under QuickBuild server's installation directory."
      },
      {
        "header": "Proof build supportâ",
        "content": "For general concept of proof build, refer toproof build. Here we explain how to set up StarTeam repository to support proof build."
      },
      {
        "header": "Test proof build as administratorâ",
        "content": "Since proof build set up is a bit tricky, we first set up proof build for the administrator account and make sure it works before we proceed to enable it for all developers. To set up proof build for administrator, please follow below steps: Login as administrator and download user agent by switching toMytab.Install and start user agent on your own desktop. For testing purpose, please start the agent as a foreground process. On windows, this can be done by runningagent.bat; on Unix platforms, this can be done by runningagent.sh consoleSet up a test configuration on QuickBuild server, define a StarTeam repository, and enable the proof build option in advanced section like below:Add arepository/checkoutstep into step execution graph and have it checkout from the repository defined above. Now proof build has been enabled for your account, please try to checkout and edit some files in working view specified above, and then run the test configuration. If set up correctly, your local change will be picked up and reflected in the build result. A local change tab will also appear to display your uncommitted changes after build finishes. Your uncommitted changes will be committed automatically if build is successful."
      },
      {
        "header": "Enable proof build for all developersâ",
        "content": "Now that we have a concept of how proof build works. In order to get proof build works for all developers, we need to parameterize various proof build properties, so that different properties can be used for different developers. To do this, you will need to: Define configuration variables like below:Script various properties in proof build section to make use of above variables like below:Property NameProperty ValueWorking View${vars.get(\"workingView\")}User Name${vars.get(\"userName\")}Password${vars.get(\"password\")}Checkin Conditionbuild.successful && vars.get(\"checkin\").asBoolean()Checkin Comment${vars.get(\"comment\")} In this way, various proof build properties will be prompted when your developer run the build. Once they've been input by your developer for the first time, the values will be remembered for subsequent triggers for that user. At last we suggest to set up the configuration toenable concurrent buildsso that multiple builds in the same configuration can run concurrently. This is vital to get fast feedback in case multiple developers are requesting proof builds in the same time."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Working+with+Subversion",
      "https://wiki.pmease.com/display/QB14/Working+with+Team+Foundation+Server",
      "https://wiki.pmease.com/display/QB14/Working+with+Visual+SourceSafe",
      "https://wiki.pmease.com/display/QB14/Aggregate+SCM+Changes",
      "https://wiki.pmease.com/display/QB14/Working+with+Subversion"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Working+with+Subversion",
    "title": "Working with Subversion",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Working with SCM systems"
    ],
    "full_text": "Administrator's Guide\nWorking with SCM systems\nWorking with Subversion\nVersion: QB14\nOn this page\nWorking with Subversion\nSpecify svn command location\nâ\nQuickBuild utilizes the svn command to interact with Subversion. If this command is not in system path, you will need to specify location of the command by configuring Subversion plugin as below:\nFurther more, svn command location can be specified on a per-node basis by following below steps:\nOpen Subversion plugin setting page and define the svn path property as:\n$\n{\nnode\n.\ngetAttribute\n(\n\"svnPath\"\n)\n}\nFor each node that does not have svn command on system path, define the user attribute\nsvnPath\nto point to the actual svn command location like below:\nFor user agent node, this user attribute can be defined [follow this guide](Manage User Agent.html#ManageUserAgent-defineuserattributes).\nPlease note that in above example, the\nsvnPath\nuser attribute is just for demonstration purpose. You can use any other user attribute name.\nHandling https and svn+ssh schema\nâ\nTo connect to Subversion repository with\nhttps\nand\nsvn+ssh\nschema, you'll need to permanently accept the Subversion server's certificate from the command line before running QuickBuild. The detailed step is:\nLogin to the build machine as the user that will be used to launch QuickBuild process.\nConnect to your Subversion repository using Subversion command line, and if the server asks for whether or not to save credentials for subsequent usage, choose \"yes\".\nMake sure that subsequent Subversion command does not prompt for username and password.\nStart QuickBuild process.\nCheckout from multiple urls\nâ\nQuickBuild 2.0 removes module definition for Subversion repository to\nkeep simple things simple, complex things possible\n. In most cases, checking out from a single url is sufficient. However, checking out from multiple urls is still possible, you just need to define multiple Subversion repositories pointing to desired url and to add corresponding checkout steps to check them out.\nThings get a bit complex if these urls are pointing to the same Subversion SCM repository, and you want to make sure that these checkouts are performed against the same repository revision. To do this:\nDefine a top level Subversion repository covering all urls you want to checkout. Let's assume the name of repository is\ntop\n, the\ndestination path\nproperty of this repository is not important as it will not be used for actual checkout.\nDefine the property\nsnapshot taking script\n(can be found in advanced settings of a configuration) as below:\nvar\ntopRepos\n=\nrepositories\n.\nget\n(\n\"top\"\n)\n;\ntopRepos\n.\ntakeSnapshot\n(\n)\n;\nrepositories\n.\nget\n(\n\"repository1\"\n)\n.\nsetRevision\n(\ntopRepos\n.\ngetRevision\n(\n)\n)\n;\nrepositories\n.\nget\n(\n\"repository2\"\n)\n.\nsetRevision\n(\ntopRepos\n.\ngetRevision\n(\n)\n)\n;\nHere\nrepository1\nand\nrepository2\nrepresents the repositories responsible for checking out codes.\nExternal support\nâ\nIf\nignore externals\noption is not checked, QuickBuild will checkout specified url together with any external definitions. However, it does not detect changes for external urls, that is, the\nisChanged()\nmethod for the repository does not return true even if there are new checkins made into the externals. There are two approaches to get around this:\nIf you only want to detect changes from externals, and trigger the build if externals are changed.\nKeep\nignore externals\nunchecked\nfor the subversion repository.\nFor each external url, define a corresponding Subversion repository in QuickBuild, the\ndestination path\nproperty is not important as these repositories will only be used for changing detection. No checkout will be done for these repositories.\nModify the\nbuild necessary condition\nto detect changes from these repositories. For example, if the main Subversion repository is defined as\nrepository1\n, and it has two externals, defined as\nexternal1\nand\nexternal2\n, the\nbuild condition\ncan be defined as:\nrepositories\n.\nget\n(\n\"repository1\"\n)\n.\nisChanged\n(\n)\n||\nrepositories\n.\nget\n(\n\"external1\"\n)\n.\nisChanged\n(\n)\n||\nrepositories\n.\nget\n(\n\"external2\"\n)\n.\nisChanged\n(\n)\nThis approach has a limitation: although it can detect changes from externals and trigger the build, the external changeset does not appear in the\nbuild changes\ntab. The next approach addresses this.\nIf you want to detect changes from externals, and trigger the build if externals has changed. Besides this, you also want changeset of externals appear in the\nbuild changes\ntab together with the main repository\nCheck the option\nignore externals\nof the main Subversion repository. That is, the main Subversion repository will no longer be responsible for external checkouts.\nFor each external url, define a corresponding Subversion repository, and add steps to checkout these repositories together with the main repository. The\ndestination path\nproperty for these external repositories should be well defined, so that the final checkout directory structure looks the same as the directory structure when externals are enabled to checkout.\nModify the\nbuild necessary condition\nto detect changes from these repositories. For example, if the main Subversion repository is defined as\nrepository1\n, and it has two externals, defined as\nexternal1\nand\nexternal2\n, the\nbuild necessary condition\ncan be defined as:\nrepositories\n.\nget\n(\n\"repository1\"\n)\n.\nisChanged\n(\n)\n||\nrepositories\n.\nget\n(\n\"external1\"\n)\n.\nisChanged\n(\n)\n||\nrepositories\n.\nget\n(\n\"external2\"\n)\n.\nisChanged\n(\n)\nProof build support\nâ\nFor general concept of proof build, refer to\nproof build\n. Here we explain how to set up Subversion repository to support proof build.\nTest proof build as administrator\nâ\nSince proof build set up is a bit tricky, we first set up proof build for the administrator account and make sure it works before we proceed to enable it for all developers. To set up proof build for administrator, please follow below steps:\nLogin as administrator and download user agent by switching to\nMy\ntab.\nInstall and start user agent on your own desktop. For testing purpose, please start the agent as a foreground process. On windows, this can be done by running\nagent.bat\n; on Unix platforms, this can be done by running\nagent.sh console\nSet up a test configuration on QuickBuild server, define a Subversion repository, and enable the proof build option in advanced section like below:\nMake sure the svn command exist in the system path of both server machine and your desktop. If not, please follow the section\nSpecify svn command location\nto tell QuickBuild location of svn command.\nAdd a\nrepository/checkout\nstep into step execution graph and have it checkout from the repository defined above.\nNow proof build has been enabled for your account, please try to checkout and edit some files in working copies specified above, and then run the test configuration. If set up correctly, your local change will be picked up and reflected in the build result. A local change tab will also appear to display your uncommitted changes after build finishes. Your uncommitted changes will be committed automatically if build is successful.\nEnable proof build for all developers\nâ\nNow that we have a concept of how proof build works. In order to get proof build works for all developers, we need to parameterize various proof build properties, so that different properties can be used for different developers. To do this, you will need to:\nDefine configuration variables like below:\nScript various properties in proof build section to make use of above variables like below:\nProperty Name\nProperty Value\nWorking Copies\n${vars.get(\"workingCopies\")}\nUser Name\n${vars.get(\"userName\")}\nPassword\n${vars.get(\"password\")}\nUpdate Condition\nvars.get(\"update\").asBoolean()\nCommit Condition\nbuild.successful && vars.get(\"commit\").asBoolean()\nCommit Comment\n${vars.get(\"comment\")}\nIn this way, various proof build properties will be prompted when your developer run the build. Once they've been input by your developer for the first time, the values will be remembered for subsequent triggers for that user.\nAt last we suggest to set up the configuration to\nenable concurrent builds\nso that multiple builds in the same configuration can run concurrently. This is vital to get fast feedback in case multiple developers are requesting proof builds in the same time.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Working with Subversion",
        "content": ""
      },
      {
        "header": "Specify svn command locationâ",
        "content": "QuickBuild utilizes the svn command to interact with Subversion. If this command is not in system path, you will need to specify location of the command by configuring Subversion plugin as below: Further more, svn command location can be specified on a per-node basis by following below steps: Open Subversion plugin setting page and define the svn path property as:${node.getAttribute(\"svnPath\")}For each node that does not have svn command on system path, define the user attributesvnPathto point to the actual svn command location like below:For user agent node, this user attribute can be defined [follow this guide](Manage User Agent.html#ManageUserAgent-defineuserattributes). Please note that in above example, thesvnPathuser attribute is just for demonstration purpose. You can use any other user attribute name."
      },
      {
        "header": "Handling https and svn+ssh schemaâ",
        "content": "To connect to Subversion repository withhttpsandsvn+sshschema, you'll need to permanently accept the Subversion server's certificate from the command line before running QuickBuild. The detailed step is: Login to the build machine as the user that will be used to launch QuickBuild process.Connect to your Subversion repository using Subversion command line, and if the server asks for whether or not to save credentials for subsequent usage, choose \"yes\".Make sure that subsequent Subversion command does not prompt for username and password.Start QuickBuild process."
      },
      {
        "header": "Checkout from multiple urlsâ",
        "content": "QuickBuild 2.0 removes module definition for Subversion repository tokeep simple things simple, complex things possible. In most cases, checking out from a single url is sufficient. However, checking out from multiple urls is still possible, you just need to define multiple Subversion repositories pointing to desired url and to add corresponding checkout steps to check them out. Things get a bit complex if these urls are pointing to the same Subversion SCM repository, and you want to make sure that these checkouts are performed against the same repository revision. To do this: Define a top level Subversion repository covering all urls you want to checkout. Let's assume the name of repository istop, thedestination pathproperty of this repository is not important as it will not be used for actual checkout.Define the propertysnapshot taking script(can be found in advanced settings of a configuration) as below:vartopRepos=repositories.get(\"top\");topRepos.takeSnapshot();repositories.get(\"repository1\").setRevision(topRepos.getRevision());repositories.get(\"repository2\").setRevision(topRepos.getRevision());Hererepository1andrepository2represents the repositories responsible for checking out codes."
      },
      {
        "header": "External supportâ",
        "content": "Ifignore externalsoption is not checked, QuickBuild will checkout specified url together with any external definitions. However, it does not detect changes for external urls, that is, theisChanged()method for the repository does not return true even if there are new checkins made into the externals. There are two approaches to get around this: If you only want to detect changes from externals, and trigger the build if externals are changed.Keepignore externalsuncheckedfor the subversion repository.For each external url, define a corresponding Subversion repository in QuickBuild, thedestination pathproperty is not important as these repositories will only be used for changing detection. No checkout will be done for these repositories.Modify thebuild necessary conditionto detect changes from these repositories. For example, if the main Subversion repository is defined asrepository1, and it has two externals, defined asexternal1andexternal2, thebuild conditioncan be defined as:repositories.get(\"repository1\").isChanged()||repositories.get(\"external1\").isChanged()||repositories.get(\"external2\").isChanged()This approach has a limitation: although it can detect changes from externals and trigger the build, the external changeset does not appear in thebuild changestab. The next approach addresses this.If you want to detect changes from externals, and trigger the build if externals has changed. Besides this, you also want changeset of externals appear in thebuild changestab together with the main repositoryCheck the optionignore externalsof the main Subversion repository. That is, the main Subversion repository will no longer be responsible for external checkouts.For each external url, define a corresponding Subversion repository, and add steps to checkout these repositories together with the main repository. Thedestination pathproperty for these external repositories should be well defined, so that the final checkout directory structure looks the same as the directory structure when externals are enabled to checkout.Modify thebuild necessary conditionto detect changes from these repositories. For example, if the main Subversion repository is defined asrepository1, and it has two externals, defined asexternal1andexternal2, thebuild necessary conditioncan be defined as:repositories.get(\"repository1\").isChanged()||repositories.get(\"external1\").isChanged()||repositories.get(\"external2\").isChanged()"
      },
      {
        "header": "Proof build supportâ",
        "content": "For general concept of proof build, refer toproof build. Here we explain how to set up Subversion repository to support proof build."
      },
      {
        "header": "Test proof build as administratorâ",
        "content": "Since proof build set up is a bit tricky, we first set up proof build for the administrator account and make sure it works before we proceed to enable it for all developers. To set up proof build for administrator, please follow below steps: Login as administrator and download user agent by switching toMytab.Install and start user agent on your own desktop. For testing purpose, please start the agent as a foreground process. On windows, this can be done by runningagent.bat; on Unix platforms, this can be done by runningagent.sh consoleSet up a test configuration on QuickBuild server, define a Subversion repository, and enable the proof build option in advanced section like below:Make sure the svn command exist in the system path of both server machine and your desktop. If not, please follow the sectionSpecify svn command locationto tell QuickBuild location of svn command.Add arepository/checkoutstep into step execution graph and have it checkout from the repository defined above. Now proof build has been enabled for your account, please try to checkout and edit some files in working copies specified above, and then run the test configuration. If set up correctly, your local change will be picked up and reflected in the build result. A local change tab will also appear to display your uncommitted changes after build finishes. Your uncommitted changes will be committed automatically if build is successful."
      },
      {
        "header": "Enable proof build for all developersâ",
        "content": "Now that we have a concept of how proof build works. In order to get proof build works for all developers, we need to parameterize various proof build properties, so that different properties can be used for different developers. To do this, you will need to: Define configuration variables like below:Script various properties in proof build section to make use of above variables like below:Property NameProperty ValueWorking Copies${vars.get(\"workingCopies\")}User Name${vars.get(\"userName\")}Password${vars.get(\"password\")}Update Conditionvars.get(\"update\").asBoolean()Commit Conditionbuild.successful && vars.get(\"commit\").asBoolean()Commit Comment${vars.get(\"comment\")} In this way, various proof build properties will be prompted when your developer run the build. Once they've been input by your developer for the first time, the values will be remembered for subsequent triggers for that user. At last we suggest to set up the configuration toenable concurrent buildsso that multiple builds in the same configuration can run concurrently. This is vital to get fast feedback in case multiple developers are requesting proof builds in the same time."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Working+with+Team+Foundation+Server",
      "https://wiki.pmease.com/display/QB14/Working+with+Visual+SourceSafe",
      "https://wiki.pmease.com/display/QB14/Aggregate+SCM+Changes",
      "https://wiki.pmease.com/display/QB14/Working+with+Team+Foundation+Server"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Working+with+Team+Foundation+Server",
    "title": "Working with Team Foundation Server",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Working with SCM systems"
    ],
    "full_text": "Administrator's Guide\nWorking with SCM systems\nWorking with Team Foundation Server\nVersion: QB14\nOn this page\nWorking with Team Foundation Server\nPrerequisites\nâ\nQuickBuild utilizes the Team Foundation command (tf) to interact with remote Team Foundation Server repository. If this command (tf) is not in system path, you will need to specify location of the command by configuring Team Foundation Server plugin as below:\nwarning\nWhenever possible, install Team Explorer Everywhere CLC. This is because TEE is more CI friendly. If both Visual Studio and TEE are installed, make sure tf command is using TEE version.\nTEE can be download from Microsoft\nhttps://www.microsoft.com/en-us/download/details.aspx?id=30661\nFurther more, Team Foundation command (tf) location can be specified on a per-node basis by following below steps:\nOpen Team Foundation Server plugin setting page and define the Team Foundation command path property as:\n$\n{\nnode\n.\ngetAttribute\n(\n\"tfPath\"\n)\n}\nFor each node that does not have Team Foundation command on system path, define the user attribute\ntfPath\nto point to the actual Team Foundation path like below:\nNOTE:\nexample above is just for demonstration, you can use any other user attribute name instead of\ntfPath\n.\nCreating a Team Foundation Server Repository\nâ\nYou may refer to\nthis page\non how to add a repository.\nSupported URL prefixes\nâ\nCurrently, below URL prefixes are supported:\n[\nhttp://host\\[:port\\]/path/to/branch\\\n]\n[\nhttps://host\\[:port\\]/path/to/branch\\\n]\nIf\nhttps\nis used, and your credential need password, you need first add the credential manually to the nodes which you want check out code to.\nFor Team Foundation Server 2010, the path should be a collection path, for example,\nhttps://myserver/tfs/DefaultCollection\n.\nLabel the source code\nâ\nTo label the source code, you can add a label step from the configuration workflow definition page.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Working with Team Foundation Server",
        "content": ""
      },
      {
        "header": "Prerequisitesâ",
        "content": "QuickBuild utilizes the Team Foundation command (tf) to interact with remote Team Foundation Server repository. If this command (tf) is not in system path, you will need to specify location of the command by configuring Team Foundation Server plugin as below: warningWhenever possible, install Team Explorer Everywhere CLC. This is because TEE is more CI friendly. If both Visual Studio and TEE are installed, make sure tf command is using TEE version.TEE can be download from Microsofthttps://www.microsoft.com/en-us/download/details.aspx?id=30661 Further more, Team Foundation command (tf) location can be specified on a per-node basis by following below steps: Open Team Foundation Server plugin setting page and define the Team Foundation command path property as:${node.getAttribute(\"tfPath\")}For each node that does not have Team Foundation command on system path, define the user attributetfPathto point to the actual Team Foundation path like below: NOTE:example above is just for demonstration, you can use any other user attribute name instead oftfPath."
      },
      {
        "header": "Creating a Team Foundation Server Repositoryâ",
        "content": "You may refer tothis pageon how to add a repository."
      },
      {
        "header": "Supported URL prefixesâ",
        "content": "Currently, below URL prefixes are supported: [http://host\\[:port\\]/path/to/branch\\][https://host\\[:port\\]/path/to/branch\\] Ifhttpsis used, and your credential need password, you need first add the credential manually to the nodes which you want check out code to. For Team Foundation Server 2010, the path should be a collection path, for example,https://myserver/tfs/DefaultCollection."
      },
      {
        "header": "Label the source codeâ",
        "content": "To label the source code, you can add a label step from the configuration workflow definition page."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Working+with+Visual+SourceSafe",
      "https://wiki.pmease.com/display/QB14/Aggregate+SCM+Changes",
      "https://wiki.pmease.com/display/QB14/Working+with+Visual+SourceSafe"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Working+with+Visual+SourceSafe",
    "title": "Working with Visual SourceSafe",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Working with SCM systems"
    ],
    "full_text": "Administrator's Guide\nWorking with SCM systems\nWorking with Visual SourceSafe\nVersion: QB14\nOn this page\nWorking with Visual SourceSafe\nSpecify sourcesafe command location\nâ\nQuickBuild utilizes the sourcesafe command (normally ss.exe) to interact with SourceSafe database. If this command is not in system path, you will need to specify location of the command by configuring Visual SourceSafe plugin through\nPlugin Management\npage.\nFurther more, soucesafe command location can be specified on a per-node basis by following below steps:\nOpen Visual SourceSafe plugin setting page and set the property\nVSS Executable Path\nas:\n$\n{\nnode\n.\ngetAttribute\n(\n\"ssExePath\"\n)\n}\nFor each node that does not have sourcesafe command on system path, define the user attribute\nvssPath\nto point to the actual sourcesafe command path like below:\nIn case of user agent node, the user attribute need to be defined [in this way](Manage User Agent.html#ManageUserAgent-defineuserattributes).\nPlease note that in above example, the\nssExePath\nuser attribute is just for demonstration purpose. You can use any other user attribute name.\nLimitations\nâ\nTo use this repository, please be aware of below limitations:\nIf label step is executed after checkout step, the labeled code might not be consistent with the checkout code since SourceSafe only supports create label on the head. To avoid this issue, please execute label step before checkout step.\nDue to SourceSafe command line tool limitation, changes are only calculated in the range of minutes. For example, if a build started at 13:30:05, and a second build started at 13:30:50, any changes committed during 13:30:05 and 13:30:50 will not be detected by the second build.\nIf user name and password is not specified correctly,\nss.exe\nwill hang and use 100% CPU. Upon this, the only way is to bring out task manager and kill _ss.exe process.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Working with Visual SourceSafe",
        "content": ""
      },
      {
        "header": "Specify sourcesafe command locationâ",
        "content": "QuickBuild utilizes the sourcesafe command (normally ss.exe) to interact with SourceSafe database. If this command is not in system path, you will need to specify location of the command by configuring Visual SourceSafe plugin throughPlugin Managementpage. Further more, soucesafe command location can be specified on a per-node basis by following below steps: Open Visual SourceSafe plugin setting page and set the propertyVSS Executable Pathas:${node.getAttribute(\"ssExePath\")}For each node that does not have sourcesafe command on system path, define the user attributevssPathto point to the actual sourcesafe command path like below: In case of user agent node, the user attribute need to be defined [in this way](Manage User Agent.html#ManageUserAgent-defineuserattributes). Please note that in above example, thessExePathuser attribute is just for demonstration purpose. You can use any other user attribute name."
      },
      {
        "header": "Limitationsâ",
        "content": "To use this repository, please be aware of below limitations: If label step is executed after checkout step, the labeled code might not be consistent with the checkout code since SourceSafe only supports create label on the head. To avoid this issue, please execute label step before checkout step.Due to SourceSafe command line tool limitation, changes are only calculated in the range of minutes. For example, if a build started at 13:30:05, and a second build started at 13:30:50, any changes committed during 13:30:05 and 13:30:50 will not be detected by the second build.If user name and password is not specified correctly,ss.exewill hang and use 100% CPU. Upon this, the only way is to bring out task manager and kill _ss.exe process."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Aggregate+SCM+Changes",
      "https://wiki.pmease.com/display/QB14/Aggregate+SCM+Changes"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Aggregate+SCM+Changes",
    "title": "Aggregate SCM Changes",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Working with SCM systems"
    ],
    "full_text": "Administrator's Guide\nWorking with SCM systems\nAggregate SCM Changes\nVersion: QB14\nOn this page\nAggregate SCM Changes\nAggregate SCM Changes\nâ\nYou can aggregate the SCM changes in parent configuration to help know the latest changes for each child configuration like below:\nTo add aggregation, please go to configuration settings page and add an aggregation for \"SCM Changes\" like below:\nThen, you can define your own aggregation:\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Aggregate SCM Changes",
        "content": ""
      },
      {
        "header": "Aggregate SCM Changesâ",
        "content": "You can aggregate the SCM changes in parent configuration to help know the latest changes for each child configuration like below: To add aggregation, please go to configuration settings page and add an aggregation for \"SCM Changes\" like below: Then, you can define your own aggregation:"
      }
    ],
    "links": []
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Build+with+Xcode",
    "title": "Build with Xcode",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Working with Build Tools"
    ],
    "full_text": "Administrator's Guide\nWorking with Build Tools\nBuild with Xcode\nVersion: QB14\nOn this page\nBuild with Xcode\nSince QuickBuild version 5.1.16, Xcode plugin is bundled. This plugin can help to build Xcode project by calling command\nxcodebuild\n.\nConfigure xcodebuild command location\nâ\nQuickBuild calls the command\nxcodebuild\nto build Xcode project. If this command is not in system path, you will need to specify its location in plugin setting of the Xcode plugin through\nPlugin Management\npage.\nFurther more,\nxcodebuild\ncommand location can be specified on a per-node basis by following below steps:\nOpen Xcode plugin setting page and set the property\nxcodebuild Path\nas:\n$\n{\nnode\n.\ngetAttribute\n(\n\"xcodePath\"\n)\n}\nFor each node that does not have command\nxcodebuild\non system path, [define the user attribute](Working with Build Grid.html#WorkingwithBuildGrid-defineuserattributes)\nxcodePath\nto point to the actual ant command path, for example:\nxcodePath\n=\n/\nusr\n/\nbin\n/\nxcodebuild\nIn case of user agent node, the user attribute need to be defined [in this way](Manage User Agent.html#ManageUserAgent-defineuserattributes).\nPlease note that in above example, the\nxcodePath\nuser attribute is just for demonstration purpose. You can use any other user attribute name.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Build with Xcode",
        "content": ""
      },
      {
        "header": "Configure xcodebuild command locationâ",
        "content": "QuickBuild calls the commandxcodebuildto build Xcode project. If this command is not in system path, you will need to specify its location in plugin setting of the Xcode plugin throughPlugin Managementpage. Further more,xcodebuildcommand location can be specified on a per-node basis by following below steps: Open Xcode plugin setting page and set the propertyxcodebuild Pathas:${node.getAttribute(\"xcodePath\")}For each node that does not have commandxcodebuildon system path, [define the user attribute](Working with Build Grid.html#WorkingwithBuildGrid-defineuserattributes)xcodePathto point to the actual ant command path, for example:xcodePath=/usr/bin/xcodebuildIn case of user agent node, the user attribute need to be defined [in this way](Manage User Agent.html#ManageUserAgent-defineuserattributes). Please note that in above example, thexcodePathuser attribute is just for demonstration purpose. You can use any other user attribute name."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Build+with+Ant",
      "https://wiki.pmease.com/display/QB14/Build+with+Maven",
      "https://wiki.pmease.com/display/QB14/Build+with+Devenv",
      "https://wiki.pmease.com/display/QB14/Build+with+MSBuild",
      "https://wiki.pmease.com/display/QB14/Build+with+NAnt",
      "https://wiki.pmease.com/display/QB14/Build+with+Rake",
      "https://wiki.pmease.com/display/QB14/Build+with+Arbitrary+Command",
      "https://wiki.pmease.com/display/QB14/Scan+code+with+SonarQube",
      "https://wiki.pmease.com/display/QB14/Build+with+Ant"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Build+with+Ant",
    "title": "Build with Ant",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Working with Build Tools"
    ],
    "full_text": "Administrator's Guide\nWorking with Build Tools\nBuild with Ant\nVersion: QB14\nBuild with Ant\nQuickBuild supports\nAnt\nbased build through the Ant build step. Ant build step can be added by selecting menu item\nBuild -> Ant\nfrom the step menu.\nQuickBuild calls the command\nant\nto run Ant build script. If this command is not in system path, you will need to specify its location in plugin setting of the Ant plugin through\nPlugin Management\npage.\nFurther more, ant command location can be specified on a per-node basis by following below steps:\nOpen Ant plugin setting page and set the property\nAnt Executable Path\nas:\n$\n{\nnode\n.\ngetAttribute\n(\n\"antPath\"\n)\n}\nFor each node that does not have command\nant\non system path, [define the user attribute](Working with Build Grid.html#WorkingwithBuildGrid-defineuserattributes)\nantPath\nto point to the actual ant command path, for example:\nantPath\n=\n/\nhome\n/\nrobin\n/\nbin\n/\nant\nIn case of user agent node, the user attribute need to be defined [in this way](Manage User Agent.html#ManageUserAgent-defineuserattributes).\nPlease note that in above example, the\nantPath\nuser attribute is just for demonstration purpose. You can use any other user attribute name.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Build with Ant",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Build+with+Maven",
      "https://wiki.pmease.com/display/QB14/Build+with+Devenv",
      "https://wiki.pmease.com/display/QB14/Build+with+MSBuild",
      "https://wiki.pmease.com/display/QB14/Build+with+NAnt",
      "https://wiki.pmease.com/display/QB14/Build+with+Rake",
      "https://wiki.pmease.com/display/QB14/Build+with+Arbitrary+Command",
      "https://wiki.pmease.com/display/QB14/Scan+code+with+SonarQube",
      "https://wiki.pmease.com/display/QB14/Build+with+Maven"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Build+with+Maven",
    "title": "Build with Maven",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Working with Build Tools"
    ],
    "full_text": "Administrator's Guide\nWorking with Build Tools\nBuild with Maven\nVersion: QB14\nOn this page\nBuild with Maven\nQuickBuild is able to integrate with the popular build tool -\nMaven\n. A Maven build step can be added by selecting menu item\nBuild -> Maven\nfrom the step menu.\nConfigure Maven command location\nâ\nQuickBuild calls the command\nmvn\nto run Maven build. If this command is not in system path, you will need to specify its location in plugin setting of the Maven plugin through\nPlugin Management\npage.\nFurther more, mvn command location can be specified on a per-node basis by following below steps:\nOpen Maven plugin setting page and set the property\nMaven Executable Path\nas:\n$\n{\nnode\n.\ngetAttribute\n(\n\"mvnPath\"\n)\n}\nFor each node that does not have command\nmvn\non system path, [define the user attribute](Working with Build Grid.html#WorkingwithBuildGrid-defineuserattributes)\nmvnPath\nto point to the actual\nmvn\ncommand path, for example:\nmvnPath\n=\n/\nhome\n/\nrobin\n/\nbin\n/\nmvn\nIn case of user agent node, the user attribute need to be defined [in this way](Manage User Agent.html#ManageUserAgent-defineuserattributes).\nPlease note that in above example, the\nmvnPath\nuser attribute is just for demonstration purpose. You can use any other user attribute name.\nControl build version\nâ\nIf you want to control the build version from QuickBuild side, please follow below steps:\nChange the POM file and define the project version as\n${buildVersion}\n. Do not forget to commit the file into your SCM after change.\nDefine a build property like below when define the Maven build step:\nbuildVersion\n=\n$\n{\nbuild\n.\nversion\n}\nYou can also instruct QuickBuild to use version in POM file as build version by checking the\nSync Build Version\noption when define the maven build step (since 5.0.8).\nTrigger dependent projects\nâ\nWhen a snapshot version of a library is built, QuickBuild can be configured to do verificatin build of all projects using this snapshot library. This can be done by checking the option\nTrigger Dependents\nin general setting of the library configuration. Also please make sure that the option\nResolve Effective POM\nin maven plugin setting (can be found in page\nAdministration/Plugin Management\n) has been enabled.\nwarning\nNewly added maven configurations have to be triggered at least once (either manually or scheduled) before this works, as QuickBuild has to set up the dependency graph first at the time of running Maven build. Also the configuration has to be built once if dependency information is changed in its POM to update the dependency graph. Normally this will not be a problem if you set up the configuration to build automatically upon repository modification with a schedule.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Build with Maven",
        "content": ""
      },
      {
        "header": "Configure Maven command locationâ",
        "content": "QuickBuild calls the commandmvnto run Maven build. If this command is not in system path, you will need to specify its location in plugin setting of the Maven plugin throughPlugin Managementpage. Further more, mvn command location can be specified on a per-node basis by following below steps: Open Maven plugin setting page and set the propertyMaven Executable Pathas:${node.getAttribute(\"mvnPath\")}For each node that does not have commandmvnon system path, [define the user attribute](Working with Build Grid.html#WorkingwithBuildGrid-defineuserattributes)mvnPathto point to the actualmvncommand path, for example:mvnPath=/home/robin/bin/mvnIn case of user agent node, the user attribute need to be defined [in this way](Manage User Agent.html#ManageUserAgent-defineuserattributes). Please note that in above example, themvnPathuser attribute is just for demonstration purpose. You can use any other user attribute name."
      },
      {
        "header": "Control build versionâ",
        "content": "If you want to control the build version from QuickBuild side, please follow below steps:Change the POM file and define the project version as${buildVersion}. Do not forget to commit the file into your SCM after change.Define a build property like below when define the Maven build step:buildVersion=${build.version}You can also instruct QuickBuild to use version in POM file as build version by checking theSync Build Versionoption when define the maven build step (since 5.0.8)."
      },
      {
        "header": "Trigger dependent projectsâ",
        "content": "When a snapshot version of a library is built, QuickBuild can be configured to do verificatin build of all projects using this snapshot library. This can be done by checking the optionTrigger Dependentsin general setting of the library configuration. Also please make sure that the optionResolve Effective POMin maven plugin setting (can be found in pageAdministration/Plugin Management) has been enabled. warningNewly added maven configurations have to be triggered at least once (either manually or scheduled) before this works, as QuickBuild has to set up the dependency graph first at the time of running Maven build. Also the configuration has to be built once if dependency information is changed in its POM to update the dependency graph. Normally this will not be a problem if you set up the configuration to build automatically upon repository modification with a schedule."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Build+with+Devenv",
      "https://wiki.pmease.com/display/QB14/Build+with+MSBuild",
      "https://wiki.pmease.com/display/QB14/Build+with+NAnt",
      "https://wiki.pmease.com/display/QB14/Build+with+Rake",
      "https://wiki.pmease.com/display/QB14/Build+with+Arbitrary+Command",
      "https://wiki.pmease.com/display/QB14/Scan+code+with+SonarQube",
      "https://wiki.pmease.com/display/QB14/Build+with+Devenv"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Build+with+Devenv",
    "title": "Build with Devenv",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Working with Build Tools"
    ],
    "full_text": "Administrator's Guide\nWorking with Build Tools\nBuild with Devenv\nVersion: QB14\nOn this page\nBuild with Devenv\nMost Visual Studio projects can be built from command line with devenv command. QuickBuild supports this method now. You just need add a devenv step in your configuration steps definition.\nConfigure Devenv command location\nâ\nwarning\nThe deveenv command should be\ndevenv.com\ninstead of\ndevenv.exe\n. They exist in the same directory.\nBy default, QuickBuild executes \"devenv.com\" to run this build step, and expects this file to be on the system path. If not, you will need to specify path to this file by configuring the Devenv plugin through the\nPlugin Management\npage.\nFurther more,\nDevenv.com\nlocation can be specified on a per-node basis by following below steps:\nGo to Plugin management page and configure Devenv plugin\nSet the property\nDevenv Executable Path\nas below and save:\n$\n{\nnode\n.\ngetAttribute\n(\n\"devenvPath\"\n)\n}\nFor each node that does not have command\ndevenv.com\non system path or need different version of\ndevenv.com\n, [define the user attribute](Working with Build Grid.html#WorkingwithBuildGrid-defineuserattributes)\ndevenvPath\nto point to the actual Devenv command path, for example:\ndevenvPath\n=\nC\n:\n\\\nProgram\nFiles\n\\\nMicrosoft\nVisual\nStudio\n9.0\n\\\nCommon7\n\\\nIDE\n\\devenv\n.\ncom\nIn case of user agent node, the user attribute need to be defined [in this way](Manage User Agent.html#ManageUserAgent-defineuserattributes).\nPlease note that in above example, the\ndevenvPath\nuser attribute is just for demonstration purpose. You can use any other user attribute name.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Build with Devenv",
        "content": ""
      },
      {
        "header": "Configure Devenv command locationâ",
        "content": "warningThe deveenv command should bedevenv.cominstead ofdevenv.exe. They exist in the same directory. By default, QuickBuild executes \"devenv.com\" to run this build step, and expects this file to be on the system path. If not, you will need to specify path to this file by configuring the Devenv plugin through thePlugin Managementpage. Further more,Devenv.comlocation can be specified on a per-node basis by following below steps: Go to Plugin management page and configure Devenv pluginSet the propertyDevenv Executable Pathas below and save:${node.getAttribute(\"devenvPath\")}For each node that does not have commanddevenv.comon system path or need different version ofdevenv.com, [define the user attribute](Working with Build Grid.html#WorkingwithBuildGrid-defineuserattributes)devenvPathto point to the actual Devenv command path, for example:devenvPath=C:\\ProgramFiles\\MicrosoftVisualStudio9.0\\Common7\\IDE\\devenv.comIn case of user agent node, the user attribute need to be defined [in this way](Manage User Agent.html#ManageUserAgent-defineuserattributes). Please note that in above example, thedevenvPathuser attribute is just for demonstration purpose. You can use any other user attribute name."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Build+with+MSBuild",
      "https://wiki.pmease.com/display/QB14/Build+with+NAnt",
      "https://wiki.pmease.com/display/QB14/Build+with+Rake",
      "https://wiki.pmease.com/display/QB14/Build+with+Arbitrary+Command",
      "https://wiki.pmease.com/display/QB14/Scan+code+with+SonarQube",
      "https://wiki.pmease.com/display/QB14/Build+with+MSBuild"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Build+with+MSBuild",
    "title": "Build with MSBuild",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Working with Build Tools"
    ],
    "full_text": "Administrator's Guide\nWorking with Build Tools\nBuild with MSBuild\nVersion: QB14\nOn this page\nBuild with MSBuild\nQuickBuild is able to integrate with the popular build tool - MSBuild for .NET platform. You just need simply add a MSBuild step in the configuration steps definition.\nConfigure MSBuild command location\nâ\nBy default, QuickBuild executes \"MSBuild.exe\" to run this build step, and expects this file to be on the system path. If not, you will need to specify path to this file by configuring the MSBuild plugin through the\nPlugin Management\npage.\nFurther more,\nMSBuild.exe\nlocation can be specified on a per-node basis by following below steps:\nGo to Plugin management page and configure MSBuild plugin\nSet the property\nMSBuild Executable Path\nas below and save:\n$\n{\nnode\n.\ngetAttribute\n(\n\"msBuildPath\"\n)\n}\nFor each node that does not have command\nMSBuild.exe\non system path or need different version of\nMSBuild.exe\n, [define the user attribute](Working with Build Grid.html#WorkingwithBuildGrid-defineuserattributes)\nmsBuildPath\nto point to the actual MSBuild command path, for example:\nmsBuildPath\n=\nC\n:\n\\\nWINDOWS\n\\\nMicrosoft\n.\nNET\n\\\nFramework\n\\\n4.0\n\\\nMSBuild\n.\nexe\nIn case of user agent node, the user attribute need to be defined [in this way](Manage User Agent.html#ManageUserAgent-defineuserattributes).\nPlease note that in above example, the\nmsBuildPath\nuser attribute is just for demonstration purpose. You can use any other user attribute name.\nConfigure MSBuild step\nâ\nBasically, QuickBuild just need specify a project file to execute the MSBuild command. QuickBuild also gives you more flexibility to define your MSBuild command, most of the fields are scriptable, that means you need not input fixed values, instead you can input a script and QuickBuild will evaluate it later when this step is triggered.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Build with MSBuild",
        "content": ""
      },
      {
        "header": "Configure MSBuild command locationâ",
        "content": "By default, QuickBuild executes \"MSBuild.exe\" to run this build step, and expects this file to be on the system path. If not, you will need to specify path to this file by configuring the MSBuild plugin through thePlugin Managementpage. Further more,MSBuild.exelocation can be specified on a per-node basis by following below steps: Go to Plugin management page and configure MSBuild pluginSet the propertyMSBuild Executable Pathas below and save:${node.getAttribute(\"msBuildPath\")}For each node that does not have commandMSBuild.exeon system path or need different version ofMSBuild.exe, [define the user attribute](Working with Build Grid.html#WorkingwithBuildGrid-defineuserattributes)msBuildPathto point to the actual MSBuild command path, for example:msBuildPath=C:\\WINDOWS\\Microsoft.NET\\Framework\\4.0\\MSBuild.exeIn case of user agent node, the user attribute need to be defined [in this way](Manage User Agent.html#ManageUserAgent-defineuserattributes). Please note that in above example, themsBuildPathuser attribute is just for demonstration purpose. You can use any other user attribute name."
      },
      {
        "header": "Configure MSBuild stepâ",
        "content": "Basically, QuickBuild just need specify a project file to execute the MSBuild command. QuickBuild also gives you more flexibility to define your MSBuild command, most of the fields are scriptable, that means you need not input fixed values, instead you can input a script and QuickBuild will evaluate it later when this step is triggered."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Build+with+NAnt",
      "https://wiki.pmease.com/display/QB14/Build+with+Rake",
      "https://wiki.pmease.com/display/QB14/Build+with+Arbitrary+Command",
      "https://wiki.pmease.com/display/QB14/Scan+code+with+SonarQube",
      "https://wiki.pmease.com/display/QB14/Build+with+NAnt"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Build+with+NAnt",
    "title": "Build with NAnt",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Working with Build Tools"
    ],
    "full_text": "Administrator's Guide\nWorking with Build Tools\nBuild with NAnt\nVersion: QB14\nBuild with NAnt\nQuickBuild supports\nNAnt\nbased build through the NAnt build step. NAnt build step can be added by selecting menu item\nBuild -> NAnt\nfrom the step menu.\nQuickBuild calls the command\nnant.exe\nto run NAnt build script. If this command is not in system path, you will need to specify its location in plugin setting of the NAnt plugin through\nPlugin Management\npage.\nFurther more, nant command location can be specified on a per-node basis by following below steps:\nOpen NAnt plugin setting page and set the property\nNAnt Executable Path\nas:\n$\n{\nnode\n.\ngetAttribute\n(\n\"nantPath\"\n)\n}\nFor each node that does not have command\nnant.exe\non system path, [define the user attribute](Working with Build Grid.html#WorkingwithBuildGrid-defineuserattributes)\nnantPath\nto point to the actual nant command path, for example:\nrakePath\n=\nc\n:\n\\program files\\nant\\nant\n.\nexe\nIn case of user agent node, the user attribute need to be defined [in this way](Manage User Agent.html#ManageUserAgent-defineuserattributes).\nPlease note that in above example, the\nnantPath\nuser attribute is just for demonstration purpose. You can use any other user attribute name.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Build with NAnt",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Build+with+Rake",
      "https://wiki.pmease.com/display/QB14/Build+with+Arbitrary+Command",
      "https://wiki.pmease.com/display/QB14/Scan+code+with+SonarQube",
      "https://wiki.pmease.com/display/QB14/Build+with+Rake"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Build+with+Rake",
    "title": "Build with Rake",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Working with Build Tools"
    ],
    "full_text": "Administrator's Guide\nWorking with Build Tools\nBuild with Rake\nVersion: QB14\nBuild with Rake\nQuickBuild supports\nRuby Rake\nbased build through the Rake build step. Rake build step can be added by selecting menu item\nBuild -> Rake\nfrom the step menu.\nQuickBuild calls the command\nrake\nto run Rake build script. If this command is not in system path, you will need to specify its location in plugin setting of the Ruby Rake plugin through\nPlugin Management\npage.\nFurther more, rake command location can be specified on a per-node basis by following below steps:\nOpen Ruby Rake plugin setting page and set the property\nRake Executable Path\nas:\n$\n{\nnode\n.\ngetAttribute\n(\n\"rakePath\"\n)\n}\nFor each node that does not have command\nrake\non system path, [define the user attribute](Working with Build Grid.html#WorkingwithBuildGrid-defineuserattributes)\nrakePath\nto point to the actual rake command path, for example:\nrakePath\n=\n/\nhome\n/\nrobin\n/\nbin\n/\nrake\nIn case of user agent node, the user attribute need to be defined [in this way](Manage User Agent.html#ManageUserAgent-defineuserattributes).\nPlease note that in above example, the\nrakePath\nuser attribute is just for demonstration purpose. You can use any other user attribute name.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Build with Rake",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Build+with+Arbitrary+Command",
      "https://wiki.pmease.com/display/QB14/Scan+code+with+SonarQube",
      "https://wiki.pmease.com/display/QB14/Build+with+Arbitrary+Command"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Build+with+Arbitrary+Command",
    "title": "Build with Arbitrary Command",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Working with Build Tools"
    ],
    "full_text": "Administrator's Guide\nWorking with Build Tools\nBuild with Arbitrary Command\nVersion: QB14\nBuild with Arbitrary Command\nIf your build tool is not directly supported by QuickBuild, you may utilize the command build step to run your builds as long as your build can be performed from command line non-interactively. To add a command build step, choose\nBuild -> Shell/Batch Command\nfrom the step menu.\nSometimes it is desirable to call back into QuickBuild to execute some scripts while executing the command. To support this, QuickBuild treats all output lines between \"## Begin QuickBuild Script\" and \"## End QuickBuild Script\" as script to be executed.\nSome examples:\nSet build version\nversion\n=\n6.0\n.0\necho\n\"## Begin QuickBuild Script\"\necho\n\"groovy:build.setVersion('$version')\"\necho\n\"## End QuickBuild Script\"\nSet value of a variable\necho\n\"## Begin QuickBuild Script\"\necho\n\"groovy:vars.get('somevar').setValue('some value')\"\necho\n\"## End QuickBuild Script\"\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Build with Arbitrary Command",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Scan+code+with+SonarQube",
      "https://wiki.pmease.com/display/QB14/Scan+code+with+SonarQube"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Scan+code+with+SonarQube",
    "title": "Scan code with SonarQube",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Working with Build Tools"
    ],
    "full_text": "Administrator's Guide\nWorking with Build Tools\nScan code with SonarQube\nVersion: QB14\nOn this page\nScan code with SonarQube\nSince QuickBuild 10,\nSonarQube\n, a continuous code inspection solution, can be added to your continuous integration workflow.\nYou can trigger SonarQube to analyze your source code by adding a step. The step can be:\nSonar Scanner Step\nMaven Step\nGradle Step\nCommand line Step\nAnonymous Group\nâ\nAs QuickBuild uses RESTful API to receive the results from Sonar server, a group named \"anonymous\" with RESTful API permission need be created first.\nConfiguring Webhook\nâ\nQuickBuild uses Webhook to communicate with SonarQube. So firstly, you need config the webhook both in QuickBuild and in SonarQube.\nQuickBuild Side\nâ\nGo to configuration Settings page, then Webhook tab, you can define the SonarQube settings:\nIf the \"Anyone\" pseudo-group does not have permission to perform analyses, you'll need to\nsupply the credentials of a user with Execute Analysis permission for the analysis to run under. So, you need input Login or Token and Password for authentication. See more details at below page:\nhttps://docs.sonarqube.org/latest/analysis/analysis-parameters/\nwarning\nImportant\nThe Login or Token field and Password field are only used in Sonar Scanner Step. If you use\nother steps. like Maven step or Gradle step, those fields are no use.\nSonarQube Side\nâ\nGo to project administration page, create a webhook:\nPlease make sure the secret is identical to the secret filled in QuickBuild.\nThe URL is in below format:\nhttp\n:\n/\n/\n{\nyour\n-\nquickbuild\n-\nhost\n}\n/\nrest\n/\nwebhook\n/\nsonarqube\n/\n{\nconfigurationId\n}\nSonar Scanner Step\nâ\nIn configuration workflow, add Sonar Scanner Step to trigger SonarQube to analyze your source code. And beside triggering the analysis, this step can also used to detect the quality gate result.\nIf you are using Maven Step or Gradle Step to run Sonar scanner, this step can only be used for detecting the quality gate only and fail the build if quality gate is not passed.\nMaven Step\nâ\nIf you are using Maven step for triggering Sonar Scanner, you need add scanner parameters either in Maven properties section or in step build properties, see more details at below page:\nhttps://docs.sonarqube.org/latest/analysis/scan/sonarscanner-for-maven/\nThe parameters can be found at below page:\nhttps://docs.sonarqube.org/latest/analysis/analysis-parameters/\nQuickBuild need one additional parameter in order to receive the webhook result: sonar.analysis.buildNumber:\nsonar\n.\nanalysis\n.\nbuildNumber\n:\n$\n{\nbuild\n.\nid\n}\nwarning\nProperty: sonar.analysis.buildNumber is required when using Maven Step to trigger the scanner, otherwise, there is no quality gate report.\nGradle Step\nâ\nIf you are using Gradle step for triggering Sonar Scanner, you need add scanner parameters either in Gradle properties file or in step build properties, see more details at below page:\nhttps://docs.sonarqube.org/latest/analysis/scan/sonarscanner-for-gradle/\nThe parameters can be found at below page:\nhttps://docs.sonarqube.org/latest/analysis/analysis-parameters/\nQuickBuild need one additional parameter in order to receive the webhook result: sonar.analysis.buildNumber:\nsonar\n.\nanalysis\n.\nbuildNumber\n:\n$\n{\nbuild\n.\nid\n}\nwarning\nProperty: sonar.analysis.buildNumber is required when using Gradle Step to trigger the scanner, otherwise, there is no quality gate report.\nCommand line Step\nâ\nIf you are using command line step for triggering Sonar Scanner, you need add scanner parameters in command line directly:\nhttps://docs.sonarqube.org/latest/analysis/scan/sonarscanner/\nThe parameters can be found at below page:\nhttps://docs.sonarqube.org/latest/analysis/analysis-parameters/\nQuickBuild need one additional parameter in order to receive the webhook result: sonar.analysis.buildNumber:\n-\nDsonar\n.\nanalysis\n.\nbuildNumber\n=\n$\n{\nbuild\n.\nid\n}\nwarning\nProperty: sonar.analysis.buildNumber is required when using command line Step to trigger the scanner, otherwise, there is no quality gate report.\nView Quality Gate Result\nâ\nQuickBuild can receive the Quality Gate result from SonarQube webhook and showing them in build report tab:\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Scan code with SonarQube",
        "content": ""
      },
      {
        "header": "Anonymous Groupâ",
        "content": "As QuickBuild uses RESTful API to receive the results from Sonar server, a group named \"anonymous\" with RESTful API permission need be created first."
      },
      {
        "header": "Configuring Webhookâ",
        "content": "QuickBuild uses Webhook to communicate with SonarQube. So firstly, you need config the webhook both in QuickBuild and in SonarQube."
      },
      {
        "header": "QuickBuild Sideâ",
        "content": "Go to configuration Settings page, then Webhook tab, you can define the SonarQube settings: If the \"Anyone\" pseudo-group does not have permission to perform analyses, you'll need to supply the credentials of a user with Execute Analysis permission for the analysis to run under. So, you need input Login or Token and Password for authentication. See more details at below page: https://docs.sonarqube.org/latest/analysis/analysis-parameters/ warningImportantThe Login or Token field and Password field are only used in Sonar Scanner Step. If you useother steps. like Maven step or Gradle step, those fields are no use."
      },
      {
        "header": "SonarQube Sideâ",
        "content": "Go to project administration page, create a webhook: Please make sure the secret is identical to the secret filled in QuickBuild. The URL is in below format: http://{your-quickbuild-host}/rest/webhook/sonarqube/{configurationId}"
      },
      {
        "header": "Sonar Scanner Stepâ",
        "content": "In configuration workflow, add Sonar Scanner Step to trigger SonarQube to analyze your source code. And beside triggering the analysis, this step can also used to detect the quality gate result. If you are using Maven Step or Gradle Step to run Sonar scanner, this step can only be used for detecting the quality gate only and fail the build if quality gate is not passed."
      },
      {
        "header": "Maven Stepâ",
        "content": "If you are using Maven step for triggering Sonar Scanner, you need add scanner parameters either in Maven properties section or in step build properties, see more details at below page: https://docs.sonarqube.org/latest/analysis/scan/sonarscanner-for-maven/ The parameters can be found at below page: https://docs.sonarqube.org/latest/analysis/analysis-parameters/ QuickBuild need one additional parameter in order to receive the webhook result: sonar.analysis.buildNumber: sonar.analysis.buildNumber:${build.id} warningProperty: sonar.analysis.buildNumber is required when using Maven Step to trigger the scanner, otherwise, there is no quality gate report."
      },
      {
        "header": "Gradle Stepâ",
        "content": "If you are using Gradle step for triggering Sonar Scanner, you need add scanner parameters either in Gradle properties file or in step build properties, see more details at below page: https://docs.sonarqube.org/latest/analysis/scan/sonarscanner-for-gradle/ The parameters can be found at below page: https://docs.sonarqube.org/latest/analysis/analysis-parameters/ QuickBuild need one additional parameter in order to receive the webhook result: sonar.analysis.buildNumber: sonar.analysis.buildNumber:${build.id} warningProperty: sonar.analysis.buildNumber is required when using Gradle Step to trigger the scanner, otherwise, there is no quality gate report."
      },
      {
        "header": "Command line Stepâ",
        "content": "If you are using command line step for triggering Sonar Scanner, you need add scanner parameters in command line directly: https://docs.sonarqube.org/latest/analysis/scan/sonarscanner/ The parameters can be found at below page: https://docs.sonarqube.org/latest/analysis/analysis-parameters/ QuickBuild need one additional parameter in order to receive the webhook result: sonar.analysis.buildNumber: -Dsonar.analysis.buildNumber=${build.id} warningProperty: sonar.analysis.buildNumber is required when using command line Step to trigger the scanner, otherwise, there is no quality gate report."
      },
      {
        "header": "View Quality Gate Resultâ",
        "content": "QuickBuild can receive the Quality Gate result from SonarQube webhook and showing them in build report tab:"
      }
    ],
    "links": []
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+JIRA",
    "title": "Integrating QuickBuild with JIRA",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Working with Issue Tracker"
    ],
    "full_text": "Administrator's Guide\nWorking with Issue Tracker\nIntegrating QuickBuild with JIRA\nVersion: QB14\nOn this page\nIntegrating QuickBuild with JIRA\nSince QuickBuild 3, a two-way solution is provided to integrate with Atlassian JIRA. The integration features:\nHyperlink the JIRA keys in commit messages to corresponding JIRA pages\nGenerate an issues report from commit messages\nProgress/update the issues from commit messages\nRelease a version of a project in JIRA and update the fixed versions field of issues with status fixed or closed\nCreate an issue to JIRA based on a customized step condition\nView SCM changes for each issue\nView related builds for each issue\nView related builds for each project\nThis page will describe how to integrate JIRA in QuickBuild.\nOn This Page\nBasic Integration\nAdvanced Integration\nUpdate Issues\nRelease QuickBuild Version to JIRA\nCreate Issue from QuickBuild\nTrouble Shooting\nTriggering Build via Webhook\ninfo\nSupported JIRA version should be JIRA 3.13.3 or higher.\nBasic Integration\nâ\nTo enable the integration:\n1. Enable 'Access remote API calls' in JIRA Administration\n2. Configure JIRA server in your configuration setting tab\nYou can associate a JIRA project with this configuration. This project is used when you want to update issues or release version to JIRA. See details below.\nAfter doing these, the issues keys mentioned in commit messages will be hyperlinked:\nand an issues report tab will be displayed in Build tab:\nNOTE\nThe issues here will synchronize with JIRA to reflect their latest status.\nyou can also find all related issues from a specified version and view their changes:\nAfter configured the JIRA server in the configuration settings, below steps are available to add in your build workflow:\nUpdate Issue Step\nRelease Version Step\nCreate Issue Step\nAdvanced Integration\nâ\nBesides the basic integration, QuickBuild also features:\nUpdate issues mentioned in commit messages directly\nCooperate with JIRA to manage both JIRA and QuickBuild version\nRelease a JIRA version and also update the Fix Version/s field of issues mentioned in commit messages which can help you to generate the Release Notes easily.\nUpdate Issues\nâ\nTo update issues from the commit messages,\nUpdate JIRA Issue\nstep should be added to your build workflow. And you need specify one or more issue updater(s) below in the step:\nUpdate issues according to SCM commit messages\nUpdate issues by a specified JIRA filter\nUpdate issues with specified issue keys\nUpdate issues corresponding to changeset closed tasks\nBy default, QuickBuild will update issues according to SCM commit messages.\nUpdate issues according to SCM commit messages\nâ\nWhen QuickBuild find any\ncommit commands\nin the commit message, it will execute these commands to update or progress the issues listed in the commands.\nNOTE:\nThis step should be defined after your checkout step.\nQuickBuild will update all issues which are requested from the commit comments from\nprevious successful\nbuild.\nIf issue updated manually after committed, this issue will not be updated then.\nOnly issues which belong to the associated project be updated.\nCustomize Commit Command\nâ\nThe\ncommit command\nhas two types:\nProgress Command which is used to progress an issue in the JIRA workflow and\nstep\nattribute is required.\nUpdate Command which is used to update an issue only and will not lead to a workflow transition.\nThe commit commands can be customized in the Update Jira Issue step based on your JIRA workflow definition.\nCommand Attributes\nâ\nA\ncommit command\nhas below attributes, each attribute relates to the field of an issue:\nAttribute\nDescription\nsummary\na brief one-line summary of the issue.\ndescription\na detailed description of the issue.\ntype\nthe type of the issue, for example: Bug, Improvement, Task, etc.\npriority\nthe importance of the issue in relation to other issues.\nresolution\na record of the issue's resolution, if the issue has been resolved or closed.\nstep\nthe workflow transition that this command triggers. For example, step=Start Progress will progress issue to 'In Progress' status. See\nJIRA workflow\nfor details.\nreporter\nthe person who entered the issue into the system.\nassignee\nthe person to whom the issue is currently assigned.\nduedate\nspecify the issue due date.\ndateFormat\nspecify the date format for due date.\nenvironment\nthe hardware or software environment to which the issue relates.\naffectsVersions\nproject version(s) for which the issue is (or was) manifesting.\nfixVersions\nproject version(s) in which the issue was (or will be) fixed.\ncomment\nthe comment which will be added to the issue and will be diplayed in issue comment tab.\ntime\n:::warning To use time attribute,\ntime tracking\nmust be enabled in your JIRA server. Please check with your JIRA administrator, if you cannot record time tracking information against issues.\n::: Records the time tracking information of an issue. The syntax for time is:\njava <n>w <n>d <n>h <n>m <worklog comment>\nHere,\n<n>\nis user specified time period. For example:\n1w 2d 3h 20m Total cost period\n- this will record 1 week 2 days 3 hours and 20 minutes against the issue and add the comment 'Total cost period' in the Work Log tab of the issue. |\nJIRA custom fields are also supported, for custom fields, below format can be used:\ncustomfield_10000\n=\nHello\n,\nCustom\nField\nor\ncustomfield_My\nCustom\nField\nName\n=\nHello\n,\nCustom\nField\nhere,\n10000\nis the field id of a custom field, and 'My Custom Field Name' is the name of the custom field. Please reference\nhttps://confluence.atlassian.com/display/JIRA/Custom+fields\nfor details about custom field or consult your JIRA administrator for the custom field id.\nBelow we will give some example commit messages to illustrate the commit commands:\nIn below commit message, QuickBuild will resolve the issues TST-1 and TST-2 and add comment\nThe issue has been fixed\nto both issues.\n1.\nModified\nFoo\n.\njava\nto\nfix\nTST\n-\n1\n,\nTST\n-\n2\n--\ncomment\nThe\nissue has been fixed\n2.\nSome\ndummy comments\n.\n.\n.\nIn below commit message, QuickBuild will add\n2d 3h\nto the worklog and add comment\nSome comment\nto issue TST-1. The value of time\n2d 3h\nshould be used the format defined in JIRA time tracking.\nUpdate\nTST\n-\n1\n--\ntime\n2d\n3\nh\n--\ncomment\nSome\ncomment\nIn below commit message, the value of custom field 10000 will be updated to\nfor custom field\nUpdate\nTST\n-\n1\n--\ncustomfield_10000\nfor\ncustom field\nYou can define common attributes in the Update Jira Issue step so that when updating issues, the attributes can be applied to all of the issues. When an attribute is specified both in\ncommit command\nand\nExtra Attributes\n, the value in commit command will be used.\nUpdate issues by a specified JIRA filter\nâ\nThis updater is used to retrieve the issues to be updated from a specified JIRA filter. This filter should be saved by the user defined in configuration JIRA server setting. And you also need specify the workflow action you want to take.\n!filter-updater!\nUpdate issues with specified issue keys\nâ\nThis updater is much similar to update issues by filter. You can specify the JIRA keys directly here, or you can input a script here to generate the issue keys to be updated.\nUpdate issues corresponding to changeset closed tasks\nâ\nCurrently, this updater can only work with Perforce. If your Perforce job is associated with JIRA issue, QuickBuild will extract the issue keys from those closed jobs and then update the issue status.\nRelease QuickBuild Version to JIRA\nâ\nTo release version to JIRA,\nRelease JIRA Version\nstep should be added to your build workflow. And this step will release the build version to the associated project in JIRA. If this version does not exist, QuickBuild will create it automatically. Also, you can define one or more issue provider(s) below to provide the issues which you want to update their 'Fix Version/s' fields:\nResolved/Closed issues found in commit messages\nResolved/Closed issues in previous update issue steps\nIssues filtered by a specified filter (the filter should be saved by the user defined in configuration JIRA server setting)\nIssues with specified keys\nIssues corresponding to changeset closed tasks (currently, this can only work with Perforce, see Update issues corresponding to changeset closed tasks above)\nDo not update issues\nResolved/Closed issues found in commit messages\nâ\nResolved/Closed issues in previous update issue steps\nâ\nIssues filtered by a specified filter\nâ\nThe filter should be saved by the user defined in configuration JIRA server setting.\nIssues with specified keys\nâ\nYou can specify the issue keys directly or you can input a script to generate the issue keys.\nIssues corresponding to changeset closed tasks\nâ\nCurrently, this can only work with Perforce. If your Perforce job is associated with JIRA issue, QuickBuild will extract the issue keys from those closed jobs.\nDo not update issues\nâ\nIf you don't want to update the Fix Version/s field, you can use this.\nwarning\nThe user defined in JIRA Setting must have global or project administrator rights in order to release version.\nOnly the issues with status closed or resolved in the associated project will be updated.\nThe version can be managed either from QuickBuild or from JIRA:\nManage from QuickBuild\nâ\nBy default, the version is managed by QuickBuild, that means you need not define any version for the associated project in JIRA and QuickBuild will automatically create and release the version of this build.\nManage from JIRA\nâ\nSometimes, you want to manage the versions in JIRA side by yourself and let QuickBuild retrieve the version from JIRA. In this scenario, you just need change your\nNext Build Version\n(in configuration settings -> General Setting section) to\nuse next unreleased version from JIRA\n, and then you will find the next build version will be the first unreleased version you defined in JIRA when go to configuration dashboard.\nCreate Issue from QuickBuild\nâ\nYou may create an issue from QuickBuild by adding a\nCreate JIRA Issue\nstep. A common case is that when build failed, create an issue so that we can track the build from JIRA.\nTrouble Shooting\nâ\nQ: I have written the commit commands in my commit message correctly, but QuickBuild doesn't execute them and update the issues.\nA: In most cases, that is because your SCM user does not associate with your JIRA account correctly. See\nhow to associate them\nin this page.\nQ: I can't add comment to a closed issue, why?\nA: You need modify the file $JIRA_HOME/atlassian-jira/WEB-INF/classes/jira-workflow.xml, find 'Closed' step and change the value of 'jira.issue.editable' to\ntrue\n.\nQ: The commit command failed with error: Workflow step 'Start Progress' is not valid for issue: ABC-123.\nA: Normally, this is caused by several commit commands were submitted in wrong order to change the issue status. For example, two commit commands submitted to progress issue TST-123:\nClose TST-123 // OK, changed status to Closed\nFix TST-123 // Error! Workflow step is not valid\nQ: How to update a custom field with multiple users selection\nA: To update a custom field with multiple users, you can input below lines in the Extra Attributes field:\ncustomfield_Your Users Field=name:steve,name:robin\nThat is, use comma to separate the user and use colon to separate the property.\nTriggering Build via Webhook\nâ\nTo trigger build via JIRA webhook, first, you need create a webhook setting in JIRA like below:\nHere, the URL is in below format:\nhttp\n:\n/\n/\nquickbuild\n.\nhost\n/\nrest\n/\nwebhook\n/\njira\n/\n$\n{\nproject\n.\nkey\n}\n?\ntoken\n=\n{\nyour_token\n}\nPlease replace the QuickBuild host and token with your actual value.\nThe token is used for verification with QuickBuild.\nAfter setting up at JIRA side, go back to QuickBuild, in Administration -> Plugin Management page, search JIRA plugin:\nthen config it by filling below two fields:\nProject Mappings, config the project mappings between JIRA project and QuickBuild configuration.\nToken, specify the access token for security reason\nthen, go to the configuration you want and set up the webhook setting in the configuration setting:\nfilling below fields:\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Integrating QuickBuild with JIRA",
        "content": ""
      },
      {
        "header": "Basic Integrationâ",
        "content": "To enable the integration:1. Enable 'Access remote API calls' in JIRA Administration 2. Configure JIRA server in your configuration setting tab You can associate a JIRA project with this configuration. This project is used when you want to update issues or release version to JIRA. See details below. After doing these, the issues keys mentioned in commit messages will be hyperlinked: and an issues report tab will be displayed in Build tab: NOTEThe issues here will synchronize with JIRA to reflect their latest status. you can also find all related issues from a specified version and view their changes: After configured the JIRA server in the configuration settings, below steps are available to add in your build workflow: Update Issue StepRelease Version StepCreate Issue Step"
      },
      {
        "header": "Advanced Integrationâ",
        "content": "Besides the basic integration, QuickBuild also features: Update issues mentioned in commit messages directlyCooperate with JIRA to manage both JIRA and QuickBuild versionRelease a JIRA version and also update the Fix Version/s field of issues mentioned in commit messages which can help you to generate the Release Notes easily."
      },
      {
        "header": "Update Issuesâ",
        "content": "To update issues from the commit messages,Update JIRA Issuestep should be added to your build workflow. And you need specify one or more issue updater(s) below in the step: Update issues according to SCM commit messagesUpdate issues by a specified JIRA filterUpdate issues with specified issue keysUpdate issues corresponding to changeset closed tasks By default, QuickBuild will update issues according to SCM commit messages."
      },
      {
        "header": "Update issues according to SCM commit messagesâ",
        "content": "When QuickBuild find anycommit commandsin the commit message, it will execute these commands to update or progress the issues listed in the commands. NOTE: This step should be defined after your checkout step.QuickBuild will update all issues which are requested from the commit comments fromprevious successfulbuild.If issue updated manually after committed, this issue will not be updated then.Only issues which belong to the associated project be updated."
      },
      {
        "header": "Customize Commit Commandâ",
        "content": "Thecommit commandhas two types: Progress Command which is used to progress an issue in the JIRA workflow andstepattribute is required.Update Command which is used to update an issue only and will not lead to a workflow transition. The commit commands can be customized in the Update Jira Issue step based on your JIRA workflow definition."
      },
      {
        "header": "Command Attributesâ",
        "content": "Acommit commandhas below attributes, each attribute relates to the field of an issue: AttributeDescriptionsummarya brief one-line summary of the issue.descriptiona detailed description of the issue.typethe type of the issue, for example: Bug, Improvement, Task, etc.prioritythe importance of the issue in relation to other issues.resolutiona record of the issue's resolution, if the issue has been resolved or closed.stepthe workflow transition that this command triggers. For example, step=Start Progress will progress issue to 'In Progress' status. SeeJIRA workflowfor details.reporterthe person who entered the issue into the system.assigneethe person to whom the issue is currently assigned.duedatespecify the issue due date.dateFormatspecify the date format for due date.environmentthe hardware or software environment to which the issue relates.affectsVersionsproject version(s) for which the issue is (or was) manifesting.fixVersionsproject version(s) in which the issue was (or will be) fixed.commentthe comment which will be added to the issue and will be diplayed in issue comment tab.time:::warning To use time attribute,time trackingmust be enabled in your JIRA server. Please check with your JIRA administrator, if you cannot record time tracking information against issues. ::: Records the time tracking information of an issue. The syntax for time is:java <n>w <n>d <n>h <n>m <worklog comment>Here,<n>is user specified time period. For example:1w 2d 3h 20m Total cost period- this will record 1 week 2 days 3 hours and 20 minutes against the issue and add the comment 'Total cost period' in the Work Log tab of the issue. | JIRA custom fields are also supported, for custom fields, below format can be used: customfield_10000=Hello,CustomFieldorcustomfield_MyCustomFieldName=Hello,CustomField here,10000is the field id of a custom field, and 'My Custom Field Name' is the name of the custom field. Please referencehttps://confluence.atlassian.com/display/JIRA/Custom+fieldsfor details about custom field or consult your JIRA administrator for the custom field id. Below we will give some example commit messages to illustrate the commit commands: In below commit message, QuickBuild will resolve the issues TST-1 and TST-2 and add commentThe issue has been fixedto both issues.1.ModifiedFoo.javatofixTST-1,TST-2--commentTheissue has been fixed2.Somedummy comments... In below commit message, QuickBuild will add2d 3hto the worklog and add commentSome commentto issue TST-1. The value of time2d 3hshould be used the format defined in JIRA time tracking.UpdateTST-1--time2d3h--commentSomecomment In below commit message, the value of custom field 10000 will be updated tofor custom fieldUpdateTST-1--customfield_10000forcustom field You can define common attributes in the Update Jira Issue step so that when updating issues, the attributes can be applied to all of the issues. When an attribute is specified both incommit commandandExtra Attributes, the value in commit command will be used."
      },
      {
        "header": "Update issues by a specified JIRA filterâ",
        "content": "This updater is used to retrieve the issues to be updated from a specified JIRA filter. This filter should be saved by the user defined in configuration JIRA server setting. And you also need specify the workflow action you want to take.!filter-updater!"
      },
      {
        "header": "Update issues with specified issue keysâ",
        "content": "This updater is much similar to update issues by filter. You can specify the JIRA keys directly here, or you can input a script here to generate the issue keys to be updated."
      },
      {
        "header": "Update issues corresponding to changeset closed tasksâ",
        "content": "Currently, this updater can only work with Perforce. If your Perforce job is associated with JIRA issue, QuickBuild will extract the issue keys from those closed jobs and then update the issue status."
      },
      {
        "header": "Release QuickBuild Version to JIRAâ",
        "content": "To release version to JIRA,Release JIRA Versionstep should be added to your build workflow. And this step will release the build version to the associated project in JIRA. If this version does not exist, QuickBuild will create it automatically. Also, you can define one or more issue provider(s) below to provide the issues which you want to update their 'Fix Version/s' fields: Resolved/Closed issues found in commit messagesResolved/Closed issues in previous update issue stepsIssues filtered by a specified filter (the filter should be saved by the user defined in configuration JIRA server setting)Issues with specified keysIssues corresponding to changeset closed tasks (currently, this can only work with Perforce, see Update issues corresponding to changeset closed tasks above)Do not update issues"
      },
      {
        "header": "Resolved/Closed issues found in commit messagesâ",
        "content": ""
      },
      {
        "header": "Resolved/Closed issues in previous update issue stepsâ",
        "content": ""
      },
      {
        "header": "Issues filtered by a specified filterâ",
        "content": "The filter should be saved by the user defined in configuration JIRA server setting."
      },
      {
        "header": "Issues with specified keysâ",
        "content": "You can specify the issue keys directly or you can input a script to generate the issue keys."
      },
      {
        "header": "Issues corresponding to changeset closed tasksâ",
        "content": "Currently, this can only work with Perforce. If your Perforce job is associated with JIRA issue, QuickBuild will extract the issue keys from those closed jobs."
      },
      {
        "header": "Do not update issuesâ",
        "content": "If you don't want to update the Fix Version/s field, you can use this. warningThe user defined in JIRA Setting must have global or project administrator rights in order to release version.Only the issues with status closed or resolved in the associated project will be updated. The version can be managed either from QuickBuild or from JIRA:"
      },
      {
        "header": "Manage from QuickBuildâ",
        "content": "By default, the version is managed by QuickBuild, that means you need not define any version for the associated project in JIRA and QuickBuild will automatically create and release the version of this build."
      },
      {
        "header": "Manage from JIRAâ",
        "content": "Sometimes, you want to manage the versions in JIRA side by yourself and let QuickBuild retrieve the version from JIRA. In this scenario, you just need change yourNext Build Version(in configuration settings -> General Setting section) touse next unreleased version from JIRA, and then you will find the next build version will be the first unreleased version you defined in JIRA when go to configuration dashboard."
      },
      {
        "header": "Create Issue from QuickBuildâ",
        "content": "You may create an issue from QuickBuild by adding aCreate JIRA Issuestep. A common case is that when build failed, create an issue so that we can track the build from JIRA."
      },
      {
        "header": "Trouble Shootingâ",
        "content": "Q: I have written the commit commands in my commit message correctly, but QuickBuild doesn't execute them and update the issues.A: In most cases, that is because your SCM user does not associate with your JIRA account correctly. Seehow to associate themin this page.Q: I can't add comment to a closed issue, why?A: You need modify the file $JIRA_HOME/atlassian-jira/WEB-INF/classes/jira-workflow.xml, find 'Closed' step and change the value of 'jira.issue.editable' totrue. Q: The commit command failed with error: Workflow step 'Start Progress' is not valid for issue: ABC-123.A: Normally, this is caused by several commit commands were submitted in wrong order to change the issue status. For example, two commit commands submitted to progress issue TST-123:Close TST-123 // OK, changed status to ClosedFix TST-123 // Error! Workflow step is not valid Q: How to update a custom field with multiple users selectionA: To update a custom field with multiple users, you can input below lines in the Extra Attributes field:customfield_Your Users Field=name:steve,name:robinThat is, use comma to separate the user and use colon to separate the property."
      },
      {
        "header": "Triggering Build via Webhookâ",
        "content": "To trigger build via JIRA webhook, first, you need create a webhook setting in JIRA like below: Here, the URL is in below format: http://quickbuild.host/rest/webhook/jira/${project.key}?token={your_token} Please replace the QuickBuild host and token with your actual value. The token is used for verification with QuickBuild. After setting up at JIRA side, go back to QuickBuild, in Administration -> Plugin Management page, search JIRA plugin: then config it by filling below two fields: Project Mappings, config the project mappings between JIRA project and QuickBuild configuration.Token, specify the access token for security reason then, go to the configuration you want and set up the webhook setting in the configuration setting: filling below fields:"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Integrating+JIRA+with+QuickBuild",
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+JIRA+Cloud",
      "https://wiki.pmease.com/display/QB14/Integrate+QuickBuild+with+GitHub+Issue",
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+TeamForge",
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+Trac",
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+Bugzilla",
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+Redmine",
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+Other+Issue+Tracker",
      "https://wiki.pmease.com/display/QB14/Commit+Command",
      "https://wiki.pmease.com/display/QB14/Commit+Command",
      "https://wiki.pmease.com/display/QB14/Commit+Command",
      "https://wiki.pmease.com/display/QB14/Commit+Command",
      "https://wiki.pmease.com/display/QB14/Commit+Command",
      "https://wiki.pmease.com/display/QB14/Integrating+JIRA+with+QuickBuild"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Integrating+JIRA+with+QuickBuild",
    "title": "Integrating JIRA with QuickBuild",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Working with Issue Tracker"
    ],
    "full_text": "Administrator's Guide\nWorking with Issue Tracker\nIntegrating JIRA with QuickBuild\nVersion: QB14\nOn this page\nIntegrating JIRA with QuickBuild\nSince QuickBuild 3, a two-way solution is provided to integrate with Atlassian JIRA. The integration features:\nHyperlink the JIRA keys in commit messages to corresponding JIRA pages\nGenerate an issues report from commit messages\nProgress/update the issues from commit messages\nRelease a version of a project in JIRA and update the fixed versions field of issues with status fixed or closed\nCreate an issue to JIRA based on a customized step condition\nView SCM changes for each issue\nView related builds for each issue\nView related builds for each project\nThis page will describe how to integrate QuickBuild in JIRA.\ninfo\nSupported JIRA version: 4.0 or higher.\nOn This Page\nInstall QuickBuild Plugin For JIRA\nConfigure QuickBuild Server\nIssue Changes and Issue Builds\nProject Builds\nInstall QuickBuild Plugin For JIRA\nâ\nDownload QuickBuild Plugin for JIRA from administration page like below:\nShutdow JIRA server.\nCopy the plugin jar into plugins directory: {JIRA_HOME}/plugins/installed-plugins/\nStart JIRA server.\nYou may reference\nhttps://confluence.atlassian.com/display/JIRA/Managing+JIRA's+Plugins\nfor details about managing JIRA plugin.\nConfigure QuickBuild Server\nâ\nIf the plugin has been installed successfully, you can configure the QuickBuild server from Administration page:\nTo add a QuickBuild Server, you need define the associations between JIRA project and QuickBuild configuration(s). One JIRA project can be associated with multiple QuickBuild configurations.\nIssue Changes and Issue Builds\nâ\nwarning\nIssue changes and builds are only available when JIRA for QuickBuild plugin is configured. Reference\nIntegrating QuickBuild with JIRA\nfor details.\nAfter successfully configured QuickBuild server, you can now view the related changes for an issue:\nClick the 'View' link to view the source code, and 'Diff Prev' to diff the source code with previous edition.\nand also the related builds:\nProject Builds\nâ\nYou can also view the builds history from your JIRA project tab.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Integrating JIRA with QuickBuild",
        "content": ""
      },
      {
        "header": "Install QuickBuild Plugin For JIRAâ",
        "content": "Download QuickBuild Plugin for JIRA from administration page like below:Shutdow JIRA server.Copy the plugin jar into plugins directory: {JIRA_HOME}/plugins/installed-plugins/Start JIRA server. You may referencehttps://confluence.atlassian.com/display/JIRA/Managing+JIRA's+Pluginsfor details about managing JIRA plugin."
      },
      {
        "header": "Configure QuickBuild Serverâ",
        "content": "If the plugin has been installed successfully, you can configure the QuickBuild server from Administration page: To add a QuickBuild Server, you need define the associations between JIRA project and QuickBuild configuration(s). One JIRA project can be associated with multiple QuickBuild configurations."
      },
      {
        "header": "Issue Changes and Issue Buildsâ",
        "content": "warningIssue changes and builds are only available when JIRA for QuickBuild plugin is configured. ReferenceIntegrating QuickBuild with JIRAfor details. After successfully configured QuickBuild server, you can now view the related changes for an issue: Click the 'View' link to view the source code, and 'Diff Prev' to diff the source code with previous edition. and also the related builds:"
      },
      {
        "header": "Project Buildsâ",
        "content": "You can also view the builds history from your JIRA project tab."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+JIRA+Cloud",
      "https://wiki.pmease.com/display/QB14/Integrate+QuickBuild+with+GitHub+Issue",
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+TeamForge",
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+Trac",
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+Bugzilla",
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+Redmine",
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+Other+Issue+Tracker",
      "https://wiki.pmease.com/display/QB14/Commit+Command",
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+JIRA+Cloud"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+JIRA+Cloud",
    "title": "Integrating QuickBuild with JIRA Cloud",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Working with Issue Tracker"
    ],
    "full_text": "Administrator's Guide\nWorking with Issue Tracker\nIntegrating QuickBuild with JIRA Cloud\nVersion: QB14\nOn this page\nIntegrating QuickBuild with JIRA Cloud\nSince QuickBuild 10, a two-way solution is provided to integrate with Atlassian JIRA Cloud. The integration features:\nHyperlink the JIRA keys in commit messages to corresponding JIRA Cloud pages\nGenerate an issues report from commit messages\nCreate an issue to JIRA based on a customized step condition\nView SCM changes for each issue\nView related builds for each issue\nView related builds for each project\nQuickBuild Side\nâ\nJIRA Cloud Issue Tracker\nâ\nTo collect the issues information, you need first add JIRA Cloud tracker setting in QuickBuild. The tracker setting can be defined from Configuration settings -> Issue Tracker -> JIRA Cloud:\nThen, fill in the required information:\nThe token can be generated from:\nhttps://id.atlassian.com/manage/api-tokens\nSee more about API token at the following page:\nhttps://confluence.atlassian.com/cloud/api-tokens-938839638.html\nJira Cloud Issues Report\nâ\nAfter doing these, the issues keys mentioned in commit messages will be hyperlinked:\nand an issues report tab will be displayed in Build tab:\nCreate Issue Step\nâ\nYou can also create a issue based on build status or any conditions you want by adding a Create Issue Step just like any other steps in configuration workflow.\nThe only thing we want to mention here is that if you have some custom fields which are required when creating issue, you need specify them in Extra Attributes:\nThe format for extra attributes is JSON, for example:\n{\n\"customfield_10001\"\n:\n\"my custom status\"\n,\n\"customfield_10010\"\n:\n{\n\"type\"\n:\n\"obj\"\n,\n\"name\"\n:\n\"test\"\n}\n}\nJira Cloud Side\nâ\nTo view project builds, issue related builds or issue related changes in Jira Cloud. First, we need add mappings for Jira Project and QuickBuild configurations.\nAdd Project Mapping\nâ\nGo to QuickBuild administration page, and then Plugin Management tab, find Jira Cloud Integration:\nadd the mappings in the plugin setting:\nInstall QuickBuild App\nâ\nIn Jira Cloud, open Jira Settings page, click Apps, then Manage Apps:\nFrom the bottom of the page, there is a link named Settings\nClick and enable Development Mode so you can install the app not from Atlassian market place.\nAfter enable the development mode, you can add QuickBuild integration by uploading app:\nThe QuickBuild integration URL is:\nhttps://your-quickbuild-server/rest/jiracloud/connect/atlassian-connect.json\nPlease replace your-quickbuild-server with your actual server url.\nNOTE\nyour quickbuild instance should be accessible from internet.\nIf the installation is successful, you will see QuickBuild listed in the list:\nProject Builds\nâ\nGo to your project page, you will see QB Builds in the project sidebar:\nClick QB Builds will show you the latest builds related to this project:\nIssue Builds and Issue Changes\nâ\nFor a specific issue, the integration can also show you the related builds for that issue,\nand related SCM changes:\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Integrating QuickBuild with JIRA Cloud",
        "content": ""
      },
      {
        "header": "QuickBuild Sideâ",
        "content": ""
      },
      {
        "header": "JIRA Cloud Issue Trackerâ",
        "content": "To collect the issues information, you need first add JIRA Cloud tracker setting in QuickBuild. The tracker setting can be defined from Configuration settings -> Issue Tracker -> JIRA Cloud: Then, fill in the required information: The token can be generated from:https://id.atlassian.com/manage/api-tokens See more about API token at the following page: https://confluence.atlassian.com/cloud/api-tokens-938839638.html"
      },
      {
        "header": "Jira Cloud Issues Reportâ",
        "content": "After doing these, the issues keys mentioned in commit messages will be hyperlinked: and an issues report tab will be displayed in Build tab:"
      },
      {
        "header": "Create Issue Stepâ",
        "content": "You can also create a issue based on build status or any conditions you want by adding a Create Issue Step just like any other steps in configuration workflow. The only thing we want to mention here is that if you have some custom fields which are required when creating issue, you need specify them in Extra Attributes: The format for extra attributes is JSON, for example: {\"customfield_10001\":\"my custom status\",\"customfield_10010\":{\"type\":\"obj\",\"name\":\"test\"}}"
      },
      {
        "header": "Jira Cloud Sideâ",
        "content": "To view project builds, issue related builds or issue related changes in Jira Cloud. First, we need add mappings for Jira Project and QuickBuild configurations."
      },
      {
        "header": "Add Project Mappingâ",
        "content": "Go to QuickBuild administration page, and then Plugin Management tab, find Jira Cloud Integration: add the mappings in the plugin setting:"
      },
      {
        "header": "Install QuickBuild Appâ",
        "content": "In Jira Cloud, open Jira Settings page, click Apps, then Manage Apps: From the bottom of the page, there is a link named Settings Click and enable Development Mode so you can install the app not from Atlassian market place. After enable the development mode, you can add QuickBuild integration by uploading app: The QuickBuild integration URL is: https://your-quickbuild-server/rest/jiracloud/connect/atlassian-connect.json Please replace your-quickbuild-server with your actual server url. NOTEyour quickbuild instance should be accessible from internet. If the installation is successful, you will see QuickBuild listed in the list:"
      },
      {
        "header": "Project Buildsâ",
        "content": "Go to your project page, you will see QB Builds in the project sidebar: Click QB Builds will show you the latest builds related to this project:"
      },
      {
        "header": "Issue Builds and Issue Changesâ",
        "content": "For a specific issue, the integration can also show you the related builds for that issue, and related SCM changes:"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Integrate+QuickBuild+with+GitHub+Issue",
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+TeamForge",
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+Trac",
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+Bugzilla",
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+Redmine",
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+Other+Issue+Tracker",
      "https://wiki.pmease.com/display/QB14/Commit+Command",
      "https://wiki.pmease.com/display/QB14/Integrate+QuickBuild+with+GitHub+Issue"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Integrate+QuickBuild+with+GitHub+Issue",
    "title": "Integrate QuickBuild with GitHub Issue",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Working with Issue Tracker"
    ],
    "full_text": "Administrator's Guide\nWorking with Issue Tracker\nIntegrate QuickBuild with GitHub Issue\nVersion: QB14\nOn this page\nIntegrate QuickBuild with GitHub Issue\nSince QuickBuild 5.1.0, QuickBuild integrates with GitHub by featuring:\nHyperlink the issue ids mentioned in commit message\nGenerate an issues report from commit messages\nCreate an issue to Bugzilla based on step condition\nConfigure GitHub Issue Tracker\nâ\nGo to configuration settings and select GitHub server to define, and then below screen will be displayed:\nBelow lists the descriptions of these properties:\nProperty\nDescription\nServer URL\nThe URL of GitHub server.\nUser Name\nThe user name which will be used to retrieve the issues information from GitHub server.\nPassword\nThe password for the user.\nIssue Pattern\nUses\nJava regular expression\nto match the issue ids from commit messages. By default, below pattern will match #123 or bug:123. ```java (?<!:)(?:#\nAfter you configured, all issues mentioned in commit messages will by hyperlinked:\nand an issues report will be shown in Issues tab:\nCreate issue to GitHub\nâ\nTo create an issue to GitHub,\nCreate GitHub Issue\nstep should be added to your build workflow. You may use this step to track your build status in GitHub.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Integrate QuickBuild with GitHub Issue",
        "content": ""
      },
      {
        "header": "Configure GitHub Issue Trackerâ",
        "content": "Go to configuration settings and select GitHub server to define, and then below screen will be displayed: Below lists the descriptions of these properties: PropertyDescriptionServer URLThe URL of GitHub server.User NameThe user name which will be used to retrieve the issues information from GitHub server.PasswordThe password for the user.Issue PatternUsesJava regular expressionto match the issue ids from commit messages. By default, below pattern will match #123 or bug:123. ```java (?<!:)(?:# After you configured, all issues mentioned in commit messages will by hyperlinked: and an issues report will be shown in Issues tab:"
      },
      {
        "header": "Create issue to GitHubâ",
        "content": "To create an issue to GitHub,Create GitHub Issuestep should be added to your build workflow. You may use this step to track your build status in GitHub."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+TeamForge",
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+Trac",
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+Bugzilla",
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+Redmine",
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+Other+Issue+Tracker",
      "https://wiki.pmease.com/display/QB14/Commit+Command",
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+TeamForge"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+TeamForge",
    "title": "Integrating QuickBuild with TeamForge",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Working with Issue Tracker"
    ],
    "full_text": "Administrator's Guide\nWorking with Issue Tracker\nIntegrating QuickBuild with TeamForge\nVersion: QB14\nOn this page\nIntegrating QuickBuild with TeamForge\nThe integration features:\nHyperlink TeamForge artifacts in commit message to corresponding TeamForge pages\nGenerate an issues report from commit messages\nDisplay the modifications of each issue\nUpdate TeamForge tracker artifacts based on\ncommit commands in the commit messages\na list specified manually\na specified query based on lucene search syntax\nGenerate TeamForge tracker artifacts based on the build or step status\nCreate a release to TeamForge File Releases along with:\nUpdating \"Fix in Release\" fields\nUpdating specified fields of TeamForge tracker artifacts\nPublishing files to the release\nUpload files to TeamForge documents\nDelegate user management to TeamForge logins. (\nNOTE\nif you are using LDAP as TeamForge authenticator, please also use LDAP authenticator instead.)\nNOTE\nSupported Team Forge version should be TeamForge 5.4 or higher.\nBelow we will describe how to integrate with TeamForge.\nBasic Integration\nCreate TeamForge Artifact\nCreate TeamForge Release\nUpdate TeamForge Artifacts\nUpload Files to TeamForge Documents\nSupported TeamForge Artifact Attributes\nDelegate user management to TeamForge logins\nIntegrate with Orchestrate\nBasic Integration\nâ\nIn configuration setting > Issue Tracker > TeamForge Server, you can define the TeamForge setting like below:\nAfter the setting defined, the QuickBuild can generate the issues report automatically based on your commit messages, moreover, all TeamForge tracker artifact ids occurred in commit messages are hyperlinked.\nTeamForge Issues Report\nArtifacts link in commit messages\nAnd now below steps are available for you to add to your workflow:\nCreate TeamForge Artifact\nCreate TeamForge Release\nUpdate TeamForge Artifacts\nUpload Files to TeamForge\nCreate TeamForge Artifact\nâ\nIn your configuration workflow definition, you can add one or more \"Create TeamForge Artifact\" step to create TeamForge artifacts based on the build status or step status.\nCreate TeamForge Release\nâ\nIn your configuration workflow definition, you can add a \"Create TeamForge Release\" step to create a release in the specified package. The step can also help you to update the \"Fixed in Release\" field of specified TeamForge artifacts, moreover, you may update extra fields via \"extra attributes\".\nAlso, you may upload files based on \"File Pattern\" to the release.\nUpdate TeamForge Artifacts\nâ\nIn your configuration workflow definition, you can add a \"Update TeamForge Artifacts\" step to update the TeamForge tracker artifacts. The artifacts are provided from commit message, from a specific list, or from a lucene search.\nUpload Files to TeamForge Documents\nâ\nIn your configuration workflow definition, you can add a \"Upload Files to TeamForge\" step to upload files to TeamForge documents.\nSupported TeamForge Artifact Attributes\nâ\nBesides the attributes you need input in the step, you may specify extra attributes with below format line by line:\nattribute name=attribute value\nBelow lists all supported attributes:\nAttribute Name\nDescription\ntitle\nThe title of the artifact\ndescription\nThe description of the artifact\ngroup\nThe group of the artifact\ncategory\nThe category of the artifact\nstatus\nThe status of the artifact\ncustomer\nThe customer of the artifact\nestimatedEffort\nThe estimated effort of the artifact. Number only.\nremainingEffort\nThe remaining effort of the artifact. Number only.\nautosumming\nWhether auto summing the effort or not. true or false.\nassignee\nThe assignee of the artifact\nfixedIn\nThe release id this artifact is fixed in\ncomment\nThe comment for updating the artifact\nFlex/Custom Fields\nThe flex/custom fields are also supported, you need add a prefix \"flex:\" to the custom field name. For example, you have a custom field named\nMy Custom1\n, and if you want to specify the value, you need write like:\nflex\n:\nMy\nCustom1\n=\nSome\nvalue\nWhen you update TeamForge artifact via commit command, you need replace all space to underscore \"_\", for example:\nFix\nartf1100\n--\nflex\n:\nMy_Custom1\nSome\nvalue\nDelegate user management to TeamForge logins\nâ\nTo delegate user management to TeamForge is very easy, just go to Administration page and select Authenticators page, then add a TeamForge authenticator and QuickBuild will use TeamForge logins to authenticate the users.\nIntegrate with Orchestrate\nâ\nTo integrate with Orchestrate, first, you need enable Orchestrate feature in TeamForge, please refer to the TeamForge documentation for details.\nAfter Orchestrate is enabled in your project, go to Orchestrate page and click Manage Source button, you will see below page:\nChoose Build category and click button\nAdd a new source\n, so you can add QuickBuild source like below:\nNow, copy and paste the settings to our QuickBuild TeamForge server:\nAfter adding Orchestrate successfully, each time the build is finished, QuickBuild will post a message to Orchestrate and you will see the message in Orchestrate like below:\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Integrating QuickBuild with TeamForge",
        "content": ""
      },
      {
        "header": "Basic Integrationâ",
        "content": "In configuration setting > Issue Tracker > TeamForge Server, you can define the TeamForge setting like below: After the setting defined, the QuickBuild can generate the issues report automatically based on your commit messages, moreover, all TeamForge tracker artifact ids occurred in commit messages are hyperlinked. TeamForge Issues Report Artifacts link in commit messages And now below steps are available for you to add to your workflow: Create TeamForge ArtifactCreate TeamForge ReleaseUpdate TeamForge ArtifactsUpload Files to TeamForge"
      },
      {
        "header": "Create TeamForge Artifactâ",
        "content": "In your configuration workflow definition, you can add one or more \"Create TeamForge Artifact\" step to create TeamForge artifacts based on the build status or step status."
      },
      {
        "header": "Create TeamForge Releaseâ",
        "content": "In your configuration workflow definition, you can add a \"Create TeamForge Release\" step to create a release in the specified package. The step can also help you to update the \"Fixed in Release\" field of specified TeamForge artifacts, moreover, you may update extra fields via \"extra attributes\". Also, you may upload files based on \"File Pattern\" to the release."
      },
      {
        "header": "Update TeamForge Artifactsâ",
        "content": "In your configuration workflow definition, you can add a \"Update TeamForge Artifacts\" step to update the TeamForge tracker artifacts. The artifacts are provided from commit message, from a specific list, or from a lucene search."
      },
      {
        "header": "Upload Files to TeamForge Documentsâ",
        "content": "In your configuration workflow definition, you can add a \"Upload Files to TeamForge\" step to upload files to TeamForge documents."
      },
      {
        "header": "Supported TeamForge Artifact Attributesâ",
        "content": "Besides the attributes you need input in the step, you may specify extra attributes with below format line by line: attribute name=attribute value Below lists all supported attributes: Attribute NameDescriptiontitleThe title of the artifactdescriptionThe description of the artifactgroupThe group of the artifactcategoryThe category of the artifactstatusThe status of the artifactcustomerThe customer of the artifactestimatedEffortThe estimated effort of the artifact. Number only.remainingEffortThe remaining effort of the artifact. Number only.autosummingWhether auto summing the effort or not. true or false.assigneeThe assignee of the artifactfixedInThe release id this artifact is fixed incommentThe comment for updating the artifact Flex/Custom Fields The flex/custom fields are also supported, you need add a prefix \"flex:\" to the custom field name. For example, you have a custom field namedMy Custom1, and if you want to specify the value, you need write like: flex:MyCustom1=Somevalue When you update TeamForge artifact via commit command, you need replace all space to underscore \"_\", for example: Fixartf1100--flex:My_Custom1Somevalue"
      },
      {
        "header": "Delegate user management to TeamForge loginsâ",
        "content": "To delegate user management to TeamForge is very easy, just go to Administration page and select Authenticators page, then add a TeamForge authenticator and QuickBuild will use TeamForge logins to authenticate the users."
      },
      {
        "header": "Integrate with Orchestrateâ",
        "content": "To integrate with Orchestrate, first, you need enable Orchestrate feature in TeamForge, please refer to the TeamForge documentation for details.After Orchestrate is enabled in your project, go to Orchestrate page and click Manage Source button, you will see below page: Choose Build category and click buttonAdd a new source, so you can add QuickBuild source like below: Now, copy and paste the settings to our QuickBuild TeamForge server: After adding Orchestrate successfully, each time the build is finished, QuickBuild will post a message to Orchestrate and you will see the message in Orchestrate like below:"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+Trac",
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+Bugzilla",
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+Redmine",
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+Other+Issue+Tracker",
      "https://wiki.pmease.com/display/QB14/Commit+Command",
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+Trac"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+Trac",
    "title": "Integrating QuickBuild with Trac",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Working with Issue Tracker"
    ],
    "full_text": "Administrator's Guide\nWorking with Issue Tracker\nIntegrating QuickBuild with Trac\nVersion: QB14\nOn this page\nIntegrating QuickBuild with Trac\nQuickBuild now integrate with\nTrac\nnatively. The integration features:\nHyperlink the Trac ticket id in commit messages to corresponding JIRA pages\nGenerate an issues report from commit messages\nProgress/update the issues from commit messages\nRelease a milestone of a project in Trac\nCreate an issue to Trac based on step condition\nThis page will describe how to integrate Trac in QuickBuild.\nOn This Page\nBasic Integration\nAdvanced Integration\nUpdate Tickets\nRelease Milestone\nCreate Ticket\ninfo\nSupported Trac version: 0.11 or higher.\nBasic Integration\nâ\nTo enable the integration:\nInstall and enable XML RPC plugin for Trac.\nThis plugin and its installation guide can be found at below link:\nhttps://trac-hacks.org/wiki/XmlRpcPlugin\nConfigure Trac Server on configuration settings tab.\nBelow lists the descriptions of these properties:\nProperty\nDescription\nServer URL\nDefines the server url. you can test it by adding \"/rpc\", for example, if the server url is:\nhttp://localhost/trac/project\n, open below url in your browser:\nhttp://localhost/trac/project/rpc\n, and if the \"Remote Procedure Call (RPC)\" page can be displayed correctly, this url can work in QuickBuild.\nUser Name\nThe user should have TICKET_VIEW permission. If you want to update issues from QuickBuild, the user should also have TICKET_MODIFY permission.\nPassword\nThe password for the user.\nTicket Pattern\nDefines the ticket pattern which will be used to extract the ticket id from commit messages. The ticket pattern here uses\nJava regular expression\nto match the ticket ids. By default, below pattern will match #123 or ticket:123. ```java (?<!:)(?:#\nAfter doing these, the issues keys mentioned in commit messages will be hyperlinked:\nand a ticket report will be displayed in Build tab:\nyou can also find all related issues from a specified version and view the changes for an issue:\nAfter configured the Trac server in the configuration settings, below steps are available to add in your build workflow:\nUpdate Issue Step\nRelease Version Step\nCreate Issue Step\nAdvanced Integration\nâ\nBesides the basic integration, QuickBuild also features:\nUpdate tickets mentioned in commit messages directly\nCooperate with Trac to manage both Trac and QuickBuild version\nRelease a Trac milestone and also update the milestone field of tickets mentioned in commit messages which can help you to generate the Release Notes easily.\nUpdate Tickets\nâ\nTo update tickets from the commit messages,\nUpdate Trac Ticket\nstep should be added to your build workflow. And when QuickBuild find any\ncommit commands\nin the commit messages, QuickBuild will submit them to Trac to update or progress the tickets.\nNOTE:\nTo update issues, QuickBuild need map SCM committer to Trac user as we want to make sure the updates in Trac are made by the same person who submits the commit commands.\nThis step should be defined after your checkout step.\nQuickBuild will update all tickets which are requested from the commit comments from\nprevious successful\nbuild.\nIf a ticket updated manually after committed, this tickets will not be updated then.\nAssociated SCM user with Trac user\nâ\nIf the username and password in your SCM, QuickBuild and Trac are same, the association between them is already set up. Or you have to associate them together:\nIf the SCM user is different with QuickBuild user, you need associate them in your configuration Repository settings.\nIf the Trac user is different with QuickBuild user, you need associate them in Administration -> User Management tab (if you are administrator) or go to My tab (if you are normal user) and enable and input your Trac account like below:\nCustomize Commit Command\nâ\nThe\ncommit command\ncan be customized in step definition:\nThe\ncommit command\nproperty defines the commit command which you can change to meet your company requirements. And the\nupdate attributes\nhere are what you want to change in your Trac when executing the commit command. For example, when executing\naccept\ncommit command above, QuickBuild will update the ticket status and change it to accept, also will update the owner to the command committer which is same as the SCM committer.\nBelow section will discuss the attributes available.\nCommand Attributes\nâ\nThe command attributes for Trac are defined by the Trac server. You may ask your Trac administrator for available attributes or reference\nhttps://trac.edgewall.org/wiki/TracTickets\n. By default Trac installation, the attributes include:\ntype\n- The nature of the ticket (for example, defect or enhancement request)\nreporter\n- The author of the ticket.\nsummary\n- A brief description summarizing the problem or issue.\ndescription\n- The body of the ticket.\ncomponent\n- The project module or subsystem this ticket concerns.\nversion\n- Version of the project that this ticket pertains to.\nstatus\n- What is the current status? One of new, assigned, closed, reopened or whatever you add/customize in the Trac.\nresolution\n- Reason for why a ticket was closed.\npriority\n- The importance of this issue, ranging from trivial to blocker.\nmilestone\n- When this issue should be resolved at the latest.\nowner\n- Principal person responsible for handling the issue.\ncc\n- A comma-separated list of other users or E-Mail addresses to notify.\ncomment\n- Add a comment to the ticket\nThese attributes can be used not only in the\nUpdate Trac Ticket\nstep, but also in the\ncommit commands\n.\nBesides the attributes specified in the\ncommit command\n, the\nExtra Attributes\nin the step definition is used to add some common attributes you want. For example, you want leave a comment against each updating, you may define the extra attributes like:\ncomment\n=\nUpdated\nin build $\n{\nbuild\n.\ngetVersion\n}\nEach attribute should use one line and you can use script (see the example above) which gives you more flexibility to control the value you want to input to the issue.\nRelease Milestone\nâ\nTo release milestone to Trac server,\nRelease Trac Milestone\nstep should be added to your build workflow. This step will set or update the complete date of milestone, if the milestone does not exist in Trac, QuickBuild will create it and add it to Trac.\nThis step will also update the milestone field of all tickets mentioned in the commit messages from previous successful build.\nAlthough, the released milestone uses build version, you can still manage the milestone by yourself from Trac side and let QuickBuild use them.\nUse Trac milestone as build version\nâ\nTo use Trac milestone as your build version is very simple, you just need go to configuration settings and set the property\nNext Build Version\nto\nUse next unreleased milestone from Trac\n. By doing this, the next build version will use the default next milestone which defined in Trac.\nCreate Ticket\nâ\nBy adding\nCreate Trac Ticket\nstep, you can create a ticket to Trac based on your step condition which can be used to manage the build status in the Trac.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Integrating QuickBuild with Trac",
        "content": ""
      },
      {
        "header": "Basic Integrationâ",
        "content": "To enable the integration: Install and enable XML RPC plugin for Trac.This plugin and its installation guide can be found at below link:https://trac-hacks.org/wiki/XmlRpcPluginConfigure Trac Server on configuration settings tab.Below lists the descriptions of these properties:PropertyDescriptionServer URLDefines the server url. you can test it by adding \"/rpc\", for example, if the server url is:http://localhost/trac/project, open below url in your browser:http://localhost/trac/project/rpc, and if the \"Remote Procedure Call (RPC)\" page can be displayed correctly, this url can work in QuickBuild.User NameThe user should have TICKET_VIEW permission. If you want to update issues from QuickBuild, the user should also have TICKET_MODIFY permission.PasswordThe password for the user.Ticket PatternDefines the ticket pattern which will be used to extract the ticket id from commit messages. The ticket pattern here usesJava regular expressionto match the ticket ids. By default, below pattern will match #123 or ticket:123. ```java (?<!:)(?:# After doing these, the issues keys mentioned in commit messages will be hyperlinked: and a ticket report will be displayed in Build tab: you can also find all related issues from a specified version and view the changes for an issue: After configured the Trac server in the configuration settings, below steps are available to add in your build workflow: Update Issue StepRelease Version StepCreate Issue Step"
      },
      {
        "header": "Advanced Integrationâ",
        "content": "Besides the basic integration, QuickBuild also features: Update tickets mentioned in commit messages directlyCooperate with Trac to manage both Trac and QuickBuild versionRelease a Trac milestone and also update the milestone field of tickets mentioned in commit messages which can help you to generate the Release Notes easily."
      },
      {
        "header": "Update Ticketsâ",
        "content": "To update tickets from the commit messages,Update Trac Ticketstep should be added to your build workflow. And when QuickBuild find anycommit commandsin the commit messages, QuickBuild will submit them to Trac to update or progress the tickets. NOTE: To update issues, QuickBuild need map SCM committer to Trac user as we want to make sure the updates in Trac are made by the same person who submits the commit commands.This step should be defined after your checkout step.QuickBuild will update all tickets which are requested from the commit comments fromprevious successfulbuild.If a ticket updated manually after committed, this tickets will not be updated then."
      },
      {
        "header": "Associated SCM user with Trac userâ",
        "content": "If the username and password in your SCM, QuickBuild and Trac are same, the association between them is already set up. Or you have to associate them together: If the SCM user is different with QuickBuild user, you need associate them in your configuration Repository settings.If the Trac user is different with QuickBuild user, you need associate them in Administration -> User Management tab (if you are administrator) or go to My tab (if you are normal user) and enable and input your Trac account like below:"
      },
      {
        "header": "Customize Commit Commandâ",
        "content": "Thecommit commandcan be customized in step definition: Thecommit commandproperty defines the commit command which you can change to meet your company requirements. And theupdate attributeshere are what you want to change in your Trac when executing the commit command. For example, when executingacceptcommit command above, QuickBuild will update the ticket status and change it to accept, also will update the owner to the command committer which is same as the SCM committer. Below section will discuss the attributes available."
      },
      {
        "header": "Command Attributesâ",
        "content": "The command attributes for Trac are defined by the Trac server. You may ask your Trac administrator for available attributes or referencehttps://trac.edgewall.org/wiki/TracTickets. By default Trac installation, the attributes include: type- The nature of the ticket (for example, defect or enhancement request)reporter- The author of the ticket.summary- A brief description summarizing the problem or issue.description- The body of the ticket.component- The project module or subsystem this ticket concerns.version- Version of the project that this ticket pertains to.status- What is the current status? One of new, assigned, closed, reopened or whatever you add/customize in the Trac.resolution- Reason for why a ticket was closed.priority- The importance of this issue, ranging from trivial to blocker.milestone- When this issue should be resolved at the latest.owner- Principal person responsible for handling the issue.cc- A comma-separated list of other users or E-Mail addresses to notify.comment- Add a comment to the ticket These attributes can be used not only in theUpdate Trac Ticketstep, but also in thecommit commands. Besides the attributes specified in thecommit command, theExtra Attributesin the step definition is used to add some common attributes you want. For example, you want leave a comment against each updating, you may define the extra attributes like: comment=Updatedin build ${build.getVersion} Each attribute should use one line and you can use script (see the example above) which gives you more flexibility to control the value you want to input to the issue."
      },
      {
        "header": "Release Milestoneâ",
        "content": "To release milestone to Trac server,Release Trac Milestonestep should be added to your build workflow. This step will set or update the complete date of milestone, if the milestone does not exist in Trac, QuickBuild will create it and add it to Trac. This step will also update the milestone field of all tickets mentioned in the commit messages from previous successful build. Although, the released milestone uses build version, you can still manage the milestone by yourself from Trac side and let QuickBuild use them."
      },
      {
        "header": "Use Trac milestone as build versionâ",
        "content": "To use Trac milestone as your build version is very simple, you just need go to configuration settings and set the propertyNext Build VersiontoUse next unreleased milestone from Trac. By doing this, the next build version will use the default next milestone which defined in Trac."
      },
      {
        "header": "Create Ticketâ",
        "content": "By addingCreate Trac Ticketstep, you can create a ticket to Trac based on your step condition which can be used to manage the build status in the Trac."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+Bugzilla",
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+Redmine",
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+Other+Issue+Tracker",
      "https://wiki.pmease.com/display/QB14/Commit+Command",
      "https://wiki.pmease.com/display/QB14/Commit+Command",
      "https://wiki.pmease.com/display/QB14/Commit+Command",
      "https://wiki.pmease.com/display/QB14/Commit+Command",
      "https://wiki.pmease.com/display/QB14/Commit+Command",
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+Bugzilla"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+Bugzilla",
    "title": "Integrating QuickBuild with Bugzilla",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Working with Issue Tracker"
    ],
    "full_text": "Administrator's Guide\nWorking with Issue Tracker\nIntegrating QuickBuild with Bugzilla\nVersion: QB14\nOn this page\nIntegrating QuickBuild with Bugzilla\nSince QuickBuild 3, QuickBuild can integrate with Bugzilla, it features:\nHyperlink the issue ids mentioned in commit message\nGenerate an issues report from commit messages\nCreate an issue to Bugzilla based on step condition\nConfigure Bugzilla\nâ\nTo enable the integration, you need configure Bugzilla setting first. Go to configuration settings and select Bugzilla Server to define, and then below screen will be displayed:\nBelow lists the descriptions of these properties:\nProperty\nDescription\nServer URL\nThe URL of Bugzilla server. http:// or https:// is needed here.\nUser Name\nThe user name which will be used to retrieve the issues information from Bugzilla server.\nPassword\nThe password for the user.\nIssue Pattern\nUses\nJava regular expression\nto match the issue ids from commit messages. By default, below pattern will match #123 or bug:123. ```java (?<!:)(?:#\nAfter you configured, all issues mentioned in commit messages will by hyperlinked:\nand an issues report will be shown in Issues tab:\nCreate issue to Bugzilla\nâ\nTo create an issue to Bugzilla,\nCreate Bugzilla Issue\nstep should be added to your build workflow. You may use this step to track your build status in Bugzilla.\nTrouble shooting\nâ\nIf QuickBuild complains XmlRpcException, please make sure you have installed SOAP module like below:\n$ perl\n-\nMCPAN\n-\ne 'install\n\"SOAP::Lite\"\n'\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Integrating QuickBuild with Bugzilla",
        "content": ""
      },
      {
        "header": "Configure Bugzillaâ",
        "content": "To enable the integration, you need configure Bugzilla setting first. Go to configuration settings and select Bugzilla Server to define, and then below screen will be displayed: Below lists the descriptions of these properties: PropertyDescriptionServer URLThe URL of Bugzilla server. http:// or https:// is needed here.User NameThe user name which will be used to retrieve the issues information from Bugzilla server.PasswordThe password for the user.Issue PatternUsesJava regular expressionto match the issue ids from commit messages. By default, below pattern will match #123 or bug:123. ```java (?<!:)(?:# After you configured, all issues mentioned in commit messages will by hyperlinked: and an issues report will be shown in Issues tab:"
      },
      {
        "header": "Create issue to Bugzillaâ",
        "content": "To create an issue to Bugzilla,Create Bugzilla Issuestep should be added to your build workflow. You may use this step to track your build status in Bugzilla."
      },
      {
        "header": "Trouble shootingâ",
        "content": "If QuickBuild complains XmlRpcException, please make sure you have installed SOAP module like below: $ perl-MCPAN-e 'install\"SOAP::Lite\"'"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+Redmine",
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+Other+Issue+Tracker",
      "https://wiki.pmease.com/display/QB14/Commit+Command",
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+Redmine"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+Redmine",
    "title": "Integrating QuickBuild with Redmine",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Working with Issue Tracker"
    ],
    "full_text": "Administrator's Guide\nWorking with Issue Tracker\nIntegrating QuickBuild with Redmine\nVersion: QB14\nOn this page\nIntegrating QuickBuild with Redmine\nThe integration features:\nHyperlink the issue ids mentioned in commit message\nGenerate an issues report from commit messages\nDisplay SCM commits associated with each issue.\nConfigure Redmine\nâ\nTo enable the integration, you need configure Redmine setting first. Go to configuration settings->Issue Tracker->Redmine server, and then below screen will be displayed:\nBelow lists the descriptions of these properties:\nProperty\nDescription\nServer URL\nThe URL of Bugzilla server. http:// or https:// is needed here.\nUser Name\nThe user name which will be used to retrieve the issues information from Bugzilla server.\nPassword\nThe password for the user.\nIssue Pattern\nUses\nJava regular expression\nto match the issue ids from commit messages. By default, below pattern will match #123 or bug:123. ```java (?<!:)(?:#\nAssociated Project\nThe key of the related project.\nAfter you configured, all issues mentioned in commit messages will by hyperlinked:\nand an issues report will be shown in Issues tab:\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Integrating QuickBuild with Redmine",
        "content": ""
      },
      {
        "header": "Configure Redmineâ",
        "content": "To enable the integration, you need configure Redmine setting first. Go to configuration settings->Issue Tracker->Redmine server, and then below screen will be displayed: Below lists the descriptions of these properties: PropertyDescriptionServer URLThe URL of Bugzilla server. http:// or https:// is needed here.User NameThe user name which will be used to retrieve the issues information from Bugzilla server.PasswordThe password for the user.Issue PatternUsesJava regular expressionto match the issue ids from commit messages. By default, below pattern will match #123 or bug:123. ```java (?<!:)(?:#Associated ProjectThe key of the related project. After you configured, all issues mentioned in commit messages will by hyperlinked: and an issues report will be shown in Issues tab:"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+Other+Issue+Tracker",
      "https://wiki.pmease.com/display/QB14/Commit+Command",
      "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+Other+Issue+Tracker"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+Other+Issue+Tracker",
    "title": "Integrating QuickBuild with Other Issue Tracker",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Working with Issue Tracker"
    ],
    "full_text": "Administrator's Guide\nWorking with Issue Tracker\nIntegrating QuickBuild with Other Issue Tracker\nVersion: QB14\nIntegrating QuickBuild with Other Issue Tracker\nFor those issue trackers QuickBuild not support, you can define a search pattern and a replace pattern in\nComments Transformer\n. For example, we want to hyperlink all issue keys mentioned in commit messages to corresponding Bugzilla issue page, we can define search pattern as:\n(\n?\n<\n!\n\\\n:\n)\n(\n?\n:\n#\n|\nbug\n:\n)\n(\n\\d\n+\n)\n(\n\\b\n|\n$\n)\nand define replace pattern as:\n<\na target\n=\n\"_blank\"\ntitle\n=\n\"Click to open this issue a new window\"\nhref\n=\n\"http://mybugzilla.com/browse/$1\"\n>\n#$\n1\n<\n/\na\n>\nYou can define arbitary HTML pieces here. The syntax for the pattern is useing\nJava regular expression\n.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Integrating QuickBuild with Other Issue Tracker",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Commit+Command",
      "https://wiki.pmease.com/display/QB14/Commit+Command"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Commit+Command",
    "title": "Commit Command",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Working with Issue Tracker"
    ],
    "full_text": "Administrator's Guide\nWorking with Issue Tracker\nCommit Command\nVersion: QB14\nCommit Command\nCommit command is used in commit message to update or progress issues. It has below syntax:\nCOMMAND_NAME\nISSUE_KEY\n[\nISSUE_KEY\n.\n.\n.\n]\n[\n--\nOPTION1\nVALUE1\n]\n[\n--\nOPTION2\nVALUE2\n]\nFor example, the command below means: command name is\nFix\n, issues are\nTST-1\n,\nTST-2\nand TST-3, with one attribute\ncomment\nwhich value is\nimplemented a cool feature\nFix\nTST\n-\n1\n,\nTST\n-\n2\nand\nTST\n-\n3\n--\ncomment implemented a cool feature\nNormally, one command is in one line\n, if you need multiple line for an attribute, a '\\' should be added to the end of line, for example:\nFix\nTST\n-\n1\n--\ncomment\nFirst\nline \\\nSecond\nline \\\nThird\nline\nCommand Name\nThe action can be customized when you add an\nUpdate Issue Step\n. The action in commit command is case-insensitive that means Fix TST-1 is equals to fix TST-1 or FIX TST-1.\nIssue Key\nThe issue key is issue tracker related. You can customize it in related issue tracker settings by using\nJava regular expression\n.\nCommand Option\nCommand options in a commit command use defined attributes in issue tracker and they are issue tracker related. Please reference them in the corresponding page in this wiki.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Commit Command",
        "content": ""
      }
    ],
    "links": []
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Publish+Build+Artifacts",
    "title": "Publish Build Artifacts",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Artifact Management"
    ],
    "full_text": "Administrator's Guide\nArtifact Management\nPublish Build Artifacts\nVersion: QB14\nPublish Build Artifacts\nArtifacts\ncan be published to build server during the build process. These artifacts can be manually downloaded by user from QuickBuild web interface, or can be used as dependency while building other projects. To publish artifacts, just add the step\nPublish -> Artifacts\nfrom the step menu.\nProperties in the artifact publish step are explained in the online help, and we will not repeat it here. Instead, we will give an example to help you better understand how to publish the artifacts. Suppose the\nworkspace\nhas the following directory structure:\ndistribution\n/\nfile1\n.\nzip\nfile2\n.\nzip\ndocs\n/\nfile1\n.\ndoc\nfile2\n.\ndoc\nAnd we want that the artifact directory has following directory structure after publish step:\nfile1\n.\nzip\nfile2\n.\nzip\nuserguide\n/\nfile1\n.\ndoc\nfile2\n.\ndoc\nTo accomplish this, you will need two artifact publish steps, one that publishes zip files, and the another that publishes doc files. Key property of the zip publish step are listed below:\nfrom directory\n: distribution\nfiles to publish\n: *.zip\ndestination directory\n: <left empty>\nKey properties of the doc publish step are:\nfrom directory\n: docs\nfiles to publish\n: *.doc\ndestination directory\n: userguide\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Publish Build Artifacts",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Store+Build+Artifacts+on+Agent",
      "https://wiki.pmease.com/display/QB14/Artifactory+Integration",
      "https://wiki.pmease.com/display/QB14/Amazon+S3+Integration",
      "https://wiki.pmease.com/display/QB14/Store+Build+Artifacts+on+Agent"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Store+Build+Artifacts+on+Agent",
    "title": "Store Build Artifacts on Agent",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Artifact Management"
    ],
    "full_text": "Administrator's Guide\nArtifact Management\nStore Build Artifacts on Agent\nVersion: QB14\nStore Build Artifacts on Agent\nSince QuickBuild 5.0, build artifacts can be stored on one or more agents to reduce load of publishing and serving artifacts from QuickBuild server. For instance, one can edit advanced setting of a configuration to store artifacts of all its builds on desired agent as below:\nThanks to the inheritance nature of configuration settings, all descendant configurations will also store artifacts on that agent unless they has its own artifact storage strategy defined.\nWhen you decide to store artifacts on agent, please note that:\nYou may need to tune your firewall setting to allow users accessing port of involved build agents to download build artifacts from GUI.\nYou may need to tune the firewall setting to allow other agents accessing port of involved build agents to publish and download artifacts during a build.\nUsers will be prompted to input their credentials again when downloading artifacts from GUI if artifacts are not allowed to be accessed anonymously on relevant build agents.\nBy default artifacts are stored on agent under the directory\n<build agent install dir>/storage/<build id>/artifacts\n. So please be careful not to remove this folder when manually upgrade your build agent (manually upgrade build agent is generally not necessary as QuickBuild server can upgrade them automatically in most cases).\nIf you'd like to store artifacts on some other places on agent other than the default directory, please do the following:\nModify storage directory setting in advanced setting of relevant configuration like below:\nThen define the user attribute\nstorageDir\non relevant agents like below for instance:\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Store Build Artifacts on Agent",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Artifactory+Integration",
      "https://wiki.pmease.com/display/QB14/Amazon+S3+Integration",
      "https://wiki.pmease.com/display/QB14/Artifactory+Integration"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Artifactory+Integration",
    "title": "Artifactory Integration",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Artifact Management"
    ],
    "full_text": "Administrator's Guide\nArtifact Management\nArtifactory Integration\nVersion: QB14\nOn this page\nArtifactory Integration\nJFrog's Artifactory\nis a popular artifact management server. Integration with Artifactory enables QuickBuild to publish artifacts to Artifactory server as well as using published artifacts as build dependencies.\nPrerequisites\nâ\nThis plugin requires professional version of Artifactory. Version 3.4.2 has been tested.\nEnable Artifactory integration\nâ\nTo enable Artifactory integration, login to QuickBuild as administrator to configure Artifactory plugin like below:\nPublish artifacts to Artifactory\nâ\nTo publish artifacts to Artifactory, add a step of type\nPublish > Artifactory Artifacts\nlike below:\nOnce published, the artifacts will appear in artifactory repository together with associated build information like below:\nYou may publish desired properties along with the build information via configuration level Artifactory setting like below:\nAfter publishing, QuickBuild will display links to published artifacts as below:\nUse artifacts published to Artifactory\nâ\nConfigurations in QuickBuild can be set up to use artifacts published to Artifactory as build dependencies. To do it, define a repository of type\nArtifactory Artifacts\nat QuickBuild side like below:\nAnd then add a step to check out this repository just as other repositories. The repository is considered to be changed if the build version is set to LATEST, and there are new versions published under specified build name.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Artifactory Integration",
        "content": ""
      },
      {
        "header": "Prerequisitesâ",
        "content": "This plugin requires professional version of Artifactory. Version 3.4.2 has been tested."
      },
      {
        "header": "Enable Artifactory integrationâ",
        "content": "To enable Artifactory integration, login to QuickBuild as administrator to configure Artifactory plugin like below:"
      },
      {
        "header": "Publish artifacts to Artifactoryâ",
        "content": "To publish artifacts to Artifactory, add a step of typePublish > Artifactory Artifactslike below: Once published, the artifacts will appear in artifactory repository together with associated build information like below: You may publish desired properties along with the build information via configuration level Artifactory setting like below: After publishing, QuickBuild will display links to published artifacts as below:"
      },
      {
        "header": "Use artifacts published to Artifactoryâ",
        "content": "Configurations in QuickBuild can be set up to use artifacts published to Artifactory as build dependencies. To do it, define a repository of typeArtifactory Artifactsat QuickBuild side like below: And then add a step to check out this repository just as other repositories. The repository is considered to be changed if the build version is set to LATEST, and there are new versions published under specified build name."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Amazon+S3+Integration",
      "https://wiki.pmease.com/display/QB14/Amazon+S3+Integration"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Amazon+S3+Integration",
    "title": "Amazon S3 Integration",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Artifact Management"
    ],
    "full_text": "Administrator's Guide\nArtifact Management\nAmazon S3 Integration\nVersion: QB14\nOn this page\nAmazon S3 Integration\nSince QuickBuild 10, artifacts can be published to Amazon S3 (\nAmazon Simple Storage Service\n), artifacts can also be checked out from Amazon S3.\nPublish Artifacts\nâ\nTo publish artifacts to Amazon S3, you can add Publish S3 Artifacts step to your build workflow:\nIn step definitions, specify the source directory and files to publish pattern, and S3 bucket and region fields are required.\nif artifacts have been published to S3 successfully, QuickBuild will show you the artifacts report in build overview page like below:\nAuthentication\nâ\nIn QuickBuild, credential provider chain looks for credentials in below order to communicate with S3 service:\nStep level\n: access key id and access secret specified in the step.\nCredential File\nspecified in EC2 plugin setting.\nEnvironment variables\n: AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY\nJava system properties\n: aws.accessKeyId and aws.secretKey.\nThe default credential profiles file\n: typically located at ~/.aws/credentials (location can vary per platform).\nAmazon ECS container credentials\n: loaded from the Amazon ECS if the environment variable AWS_CONTAINER_CREDENTIALS_RELATIVE_URI is set.\nS3 Repository\nâ\nYou can also use S3 as a repository and then later use checkout step to checkout the artifacts from Amazon S3.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Amazon S3 Integration",
        "content": ""
      },
      {
        "header": "Publish Artifactsâ",
        "content": "To publish artifacts to Amazon S3, you can add Publish S3 Artifacts step to your build workflow: In step definitions, specify the source directory and files to publish pattern, and S3 bucket and region fields are required. if artifacts have been published to S3 successfully, QuickBuild will show you the artifacts report in build overview page like below:"
      },
      {
        "header": "Authenticationâ",
        "content": "In QuickBuild, credential provider chain looks for credentials in below order to communicate with S3 service: Step level: access key id and access secret specified in the step.Credential Filespecified in EC2 plugin setting.Environment variables: AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEYJava system properties: aws.accessKeyId and aws.secretKey.The default credential profiles file: typically located at ~/.aws/credentials (location can vary per platform).Amazon ECS container credentials: loaded from the Amazon ECS if the environment variable AWS_CONTAINER_CREDENTIALS_RELATIVE_URI is set."
      },
      {
        "header": "S3 Repositoryâ",
        "content": "You can also use S3 as a repository and then later use checkout step to checkout the artifacts from Amazon S3."
      }
    ],
    "links": []
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Publish+Boost+Test+Report",
    "title": "Publish Boost Test Report",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Publish Build Reports"
    ],
    "full_text": "Administrator's Guide\nPublish Build Reports\nPublish Boost Test Report\nVersion: QB14\nOn this page\nPublish Boost Test Report\nTo publish\nBoost Test\nreport, you only need two steps:\nGenerate Boost Test\nXML\nreport.\nAdd a Publish Boost Test Report step by choosing Settings->Steps->\nPublish ->Boost Test Report\nin step menu.\nGenerate Boost XML Report\nâ\nBoost.Test can output test reports in XML format. Suppose the program that runs your tests is called run_tests, then we can get an XML report by running that program as:\nrun_tests\n--\nlog_format\n=\nXML\n--\nreport_level\n=\ndetailed\nand below XML report will be generated:\n<\nTestLog\n>\n<\nTestSuite\nname\n=\n\"MyBoostTest\"\n>\n<\nTestSuite\nname\n=\n\"FooSuites\"\n>\n<\nTestCase\nname\n=\n\"simpleTestCase\"\n>\n<\nMessage\nfile\n=\n\"./boost/test/impl/results_collector.ipp\"\nline\n=\n\"210\"\n>\n<\n!\n[\nCDATA\n[\nTest\ncase\nsimplePass did not check any assertions\n]\n]\n>\n<\n/\nMessage\n>\n<\nTestingTime\n>\n35\n<\n/\nTestingTime\n>\n<\n/\nTestCase\n>\n<\nTestCase\nname\n=\n\"checkFailure\"\n>\n<\nError\nfile\n=\n\"main.cpp\"\nline\n=\n\"30\"\n>\n<\n!\n[\nCDATA\n[\ncheck\nadd\n(\n2\n,\n2\n)\n==\n4\nfailed\n]\n]\n>\n<\n/\nError\n>\n<\nTestingTime\n>\n57\n<\n/\nTestingTime\n>\n<\n/\nTestCase\n>\n<\nTestCase\nname\n=\n\"multipleCheckFailures\"\n>\n<\nError\nfile\n=\n\"main.cpp\"\nline\n=\n\"25\"\n>\n<\n!\n[\nCDATA\n[\ncheck\nadd\n(\n2\n,\n2\n)\n==\n1\nfailed\n]\n]\n>\n<\n/\nError\n>\n<\nError\nfile\n=\n\"main.cpp\"\nline\n=\n\"27\"\n>\n<\n!\n[\nCDATA\n[\ncheck\nadd\n(\n2\n,\n2\n)\n==\n3\nfailed\n]\n]\n>\n<\n/\nError\n>\n<\nTestingTime\n>\n63\n<\n/\nTestingTime\n>\n<\n/\nTestCase\n>\n<\n/\nTestSuite\n>\n<\n/\nTestSuite\n>\n<\n/\nTestLog\n>\nPublish Boost Test Report\nâ\nAdd\nPublish Boost Test Report\nstep to your build workflow. If you have several report sets, you can add several publish Boost Test Report steps with different report set names. Reference\nthis page\nfor more details.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Publish Boost Test Report",
        "content": ""
      },
      {
        "header": "Generate Boost XML Reportâ",
        "content": "Boost.Test can output test reports in XML format. Suppose the program that runs your tests is called run_tests, then we can get an XML report by running that program as: run_tests--log_format=XML--report_level=detailed and below XML report will be generated: <TestLog><TestSuitename=\"MyBoostTest\"><TestSuitename=\"FooSuites\"><TestCasename=\"simpleTestCase\"><Messagefile=\"./boost/test/impl/results_collector.ipp\"line=\"210\"><![CDATA[TestcasesimplePass did not check any assertions]]></Message><TestingTime>35</TestingTime></TestCase><TestCasename=\"checkFailure\"><Errorfile=\"main.cpp\"line=\"30\"><![CDATA[checkadd(2,2)==4failed]]></Error><TestingTime>57</TestingTime></TestCase><TestCasename=\"multipleCheckFailures\"><Errorfile=\"main.cpp\"line=\"25\"><![CDATA[checkadd(2,2)==1failed]]></Error><Errorfile=\"main.cpp\"line=\"27\"><![CDATA[checkadd(2,2)==3failed]]></Error><TestingTime>63</TestingTime></TestCase></TestSuite></TestSuite></TestLog>"
      },
      {
        "header": "Publish Boost Test Reportâ",
        "content": "AddPublish Boost Test Reportstep to your build workflow. If you have several report sets, you can add several publish Boost Test Report steps with different report set names. Referencethis pagefor more details."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Publish+Busted+Report",
      "https://wiki.pmease.com/display/QB14/Publish+CheckStyle+Report",
      "https://wiki.pmease.com/display/QB14/Publish+Clover+Report",
      "https://wiki.pmease.com/display/QB14/Publish+Cobertura+Report",
      "https://wiki.pmease.com/display/QB14/Publish+Coverity+Report",
      "https://wiki.pmease.com/display/QB14/Publish+CPD+Report",
      "https://wiki.pmease.com/display/QB14/Publish+CppCheck+Report",
      "https://wiki.pmease.com/display/QB14/Publish+EMMA+Report",
      "https://wiki.pmease.com/display/QB14/Publish+Findbugs+Report",
      "https://wiki.pmease.com/display/QB14/Publish+Fxcop+Report",
      "https://wiki.pmease.com/display/QB14/Publish+JaCoCo+Report",
      "https://wiki.pmease.com/display/QB14/Publish+JMeter+Report",
      "https://wiki.pmease.com/display/QB14/Publish+JUnit+Report",
      "https://wiki.pmease.com/display/QB14/Publish+MBUnit+Report",
      "https://wiki.pmease.com/display/QB14/Publish+MSTest+Report",
      "https://wiki.pmease.com/display/QB14/Publish+NCover+Report",
      "https://wiki.pmease.com/display/QB14/Publish+NUnit+Report",
      "https://wiki.pmease.com/display/QB14/Publish+PMD+Report",
      "https://wiki.pmease.com/display/QB14/Publish+TAP+Report",
      "https://wiki.pmease.com/display/QB14/Publish+TestNG+Report",
      "https://wiki.pmease.com/display/QB14/Report+Aggregation",
      "https://wiki.pmease.com/display/QB14/Rebuild+statistics+and+aggregation+data",
      "https://wiki.pmease.com/display/QB14/Publish+Build+Reports",
      "https://wiki.pmease.com/display/QB14/Publish+Busted+Report"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Publish+Busted+Report",
    "title": "Publish Busted Report",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Publish Build Reports"
    ],
    "full_text": "Administrator's Guide\nPublish Build Reports\nPublish Busted Report\nVersion: QB14\nOn this page\nPublish Busted Report\nBusted\nis a Lua unit testing framework. Since QuickBuild 6.0.9, Busted generated test reports can be published. To publish the report:\nGenerate JUnit style output reports.\nAdd a publish step to publish the reports.\nGenerate Busted Reports\nâ\nThe QuickBuild only supports publish JUnit alike reports. To generate JUnit alike report, below command can be used:\nbusted\n--\noutput\n=\njunit\n<\nfiles\n>\nPublish Busted Report\nâ\nAdd Publish Busted Report step to your build workflow. If you have several report sets, you can add several steps with different report set names. Reference\nthis page\nor this page for more details.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Publish Busted Report",
        "content": ""
      },
      {
        "header": "Generate Busted Reportsâ",
        "content": "The QuickBuild only supports publish JUnit alike reports. To generate JUnit alike report, below command can be used: busted--output=junit<files>"
      },
      {
        "header": "Publish Busted Reportâ",
        "content": "Add Publish Busted Report step to your build workflow. If you have several report sets, you can add several steps with different report set names. Referencethis pageor this page for more details."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Publish+CheckStyle+Report",
      "https://wiki.pmease.com/display/QB14/Publish+Clover+Report",
      "https://wiki.pmease.com/display/QB14/Publish+Cobertura+Report",
      "https://wiki.pmease.com/display/QB14/Publish+Coverity+Report",
      "https://wiki.pmease.com/display/QB14/Publish+CPD+Report",
      "https://wiki.pmease.com/display/QB14/Publish+CppCheck+Report",
      "https://wiki.pmease.com/display/QB14/Publish+EMMA+Report",
      "https://wiki.pmease.com/display/QB14/Publish+Findbugs+Report",
      "https://wiki.pmease.com/display/QB14/Publish+Fxcop+Report",
      "https://wiki.pmease.com/display/QB14/Publish+JaCoCo+Report",
      "https://wiki.pmease.com/display/QB14/Publish+JMeter+Report",
      "https://wiki.pmease.com/display/QB14/Publish+JUnit+Report",
      "https://wiki.pmease.com/display/QB14/Publish+MBUnit+Report",
      "https://wiki.pmease.com/display/QB14/Publish+MSTest+Report",
      "https://wiki.pmease.com/display/QB14/Publish+NCover+Report",
      "https://wiki.pmease.com/display/QB14/Publish+NUnit+Report",
      "https://wiki.pmease.com/display/QB14/Publish+PMD+Report",
      "https://wiki.pmease.com/display/QB14/Publish+TAP+Report",
      "https://wiki.pmease.com/display/QB14/Publish+TestNG+Report",
      "https://wiki.pmease.com/display/QB14/Report+Aggregation",
      "https://wiki.pmease.com/display/QB14/Rebuild+statistics+and+aggregation+data",
      "https://wiki.pmease.com/display/QB14/Publish+Build+Reports",
      "https://wiki.pmease.com/display/QB14/Publish+CheckStyle+Report"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Publish+CheckStyle+Report",
    "title": "Publish CheckStyle Report",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Publish Build Reports"
    ],
    "full_text": "Administrator's Guide\nPublish Build Reports\nPublish CheckStyle Report\nVersion: QB14\nOn this page\nPublish CheckStyle Report\nTo publish\nCheckStyle\nreport, you only need two steps:\nGenerate CheckStyle\nXML\nreport from\nAnt\nor\nMaven\nor any other build tool.\nAdd Checkstyle publish step by choosing\nPublish -> CheckStyle Report\nfrom the step menu.\nGenerate CheckStyle Report\nâ\nQuickBuild will NOT generate\nCheckStyle\nreport automatically, so first make sure the CheckStyle report is produced by\nANT\nor by any other build tool. The following example shows how to generate CheckStyle XML report by\nAnt JUnit task\n:\nCheckStyle target in build.xml\n<\ntarget\nname\n=\n\"\ncheckstyle\n\"\ndescription\n=\n\"\nCheck coding style\n\"\n>\n<\ntaskdef\nresource\n=\n\"\ncheckstyletask.properties\n\"\n>\n<\nclasspath\nrefid\n=\n\"\npath.lib\n\"\n/>\n</\ntaskdef\n>\n<\ncheckstyle\nconfig\n=\n\"\ncheckstyle_checks.xml\n\"\n>\n<\nfileset\ndir\n=\n\"\n${src.dir}\n\"\n>\n<\ninclude\nname\n=\n\"\n**/*.java\n\"\n/>\n</\nfileset\n>\n<\nformatter\ntype\n=\n\"\nxml\n\"\n/>\n<!-- DO use xml formatter -->\n</\ncheckstyle\n>\n</\ntarget\n>\nAfter adding the target above, generate the XML report for your source code, and you can tell QuickBuild to publish the results.\nPublish CheckStyle Report\nâ\nAdd\nPublish CheckStyle Report\nstep to your build workflow. If you have several report sets, you can add several\nPublish CheckStyle steps\nwith different report set names. Reference\nthis page\nfor more details.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Publish CheckStyle Report",
        "content": ""
      },
      {
        "header": "Generate CheckStyle Reportâ",
        "content": "QuickBuild will NOT generateCheckStylereport automatically, so first make sure the CheckStyle report is produced byANTor by any other build tool. The following example shows how to generate CheckStyle XML report byAnt JUnit task:CheckStyle target in build.xml <targetname=\"checkstyle\"description=\"Check coding style\"><taskdefresource=\"checkstyletask.properties\"><classpathrefid=\"path.lib\"/></taskdef><checkstyleconfig=\"checkstyle_checks.xml\"><filesetdir=\"${src.dir}\"><includename=\"**/*.java\"/></fileset><formattertype=\"xml\"/><!-- DO use xml formatter --></checkstyle></target> After adding the target above, generate the XML report for your source code, and you can tell QuickBuild to publish the results."
      },
      {
        "header": "Publish CheckStyle Reportâ",
        "content": "AddPublish CheckStyle Reportstep to your build workflow. If you have several report sets, you can add severalPublish CheckStyle stepswith different report set names. Referencethis pagefor more details."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Publish+Clover+Report",
      "https://wiki.pmease.com/display/QB14/Publish+Cobertura+Report",
      "https://wiki.pmease.com/display/QB14/Publish+Coverity+Report",
      "https://wiki.pmease.com/display/QB14/Publish+CPD+Report",
      "https://wiki.pmease.com/display/QB14/Publish+CppCheck+Report",
      "https://wiki.pmease.com/display/QB14/Publish+EMMA+Report",
      "https://wiki.pmease.com/display/QB14/Publish+Findbugs+Report",
      "https://wiki.pmease.com/display/QB14/Publish+Fxcop+Report",
      "https://wiki.pmease.com/display/QB14/Publish+JaCoCo+Report",
      "https://wiki.pmease.com/display/QB14/Publish+JMeter+Report",
      "https://wiki.pmease.com/display/QB14/Publish+JUnit+Report",
      "https://wiki.pmease.com/display/QB14/Publish+MBUnit+Report",
      "https://wiki.pmease.com/display/QB14/Publish+MSTest+Report",
      "https://wiki.pmease.com/display/QB14/Publish+NCover+Report",
      "https://wiki.pmease.com/display/QB14/Publish+NUnit+Report",
      "https://wiki.pmease.com/display/QB14/Publish+PMD+Report",
      "https://wiki.pmease.com/display/QB14/Publish+TAP+Report",
      "https://wiki.pmease.com/display/QB14/Publish+TestNG+Report",
      "https://wiki.pmease.com/display/QB14/Report+Aggregation",
      "https://wiki.pmease.com/display/QB14/Rebuild+statistics+and+aggregation+data",
      "https://wiki.pmease.com/display/QB14/Publish+Build+Reports",
      "https://wiki.pmease.com/display/QB14/Publish+Clover+Report"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Publish+Clover+Report",
    "title": "Publish Clover Report",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Publish Build Reports"
    ],
    "full_text": "Administrator's Guide\nPublish Build Reports\nPublish Clover Report\nVersion: QB14\nOn this page\nPublish Clover Report\nSince QuickBuild 5.1.22, you can generate and publish\nClover\nXML report by:\nGenerate Cobertura\nXML\nreport from\nAnt\nor\nMaven\nor any other build tool.\nAdd Cobertura publish step by choosing\nPublish -> Cobertura Report\nfrom step menu.\nGenerate Clover Report\nâ\nQuickBuild will NOT generate\nClover\nreport automatically, so first make sure the\nClover\nreport is produced by\nANT\nor by any other build tool. The following example shows how to generate Cobertura test results with\nAnt\nor\nMaven\nClover coverage report target in build.xml\n<\ntarget\nname\n=\n\"\nclover.current\n\"\ndepends\n=\n\"\ntest.run\n\"\n>\n<\nclover-report\n>\n<\ncurrent\noutfile\n=\n\"\n${clover.report.dir}/clover.xml\n\"\ntitle\n=\n\"\nClover Demo\n\"\ncharset\n=\n\"\nUTF-8\n\"\n>\n<\nformat\ntype\n=\n\"\nxml\n\"\n/>\n<\ncolumns\n>\n<\ntotalChildren\n/>\n<\nfilteredElements\n/>\n<\navgMethodComplexity\n/>\n<\nuncoveredElements\nformat\n=\n\"\nraw\n\"\n/>\n<\ntotalPercentageCovered\nformat\n=\n\"\nraw\n\"\n/>\n<\ncomplexity\nformat\n=\n\"\nraw\n\"\n/>\n<\ncomplexityDensity\nformat\n=\n\"\nraw\n\"\n/>\n<\ncoveredBranches\nformat\n=\n\"\nraw\n\"\n/>\n<\ncoveredElements\nformat\n=\n\"\nraw\n\"\n/>\n<\ncoveredMethods\nformat\n=\n\"\nraw\n\"\n/>\n<\ncoveredStatements\nformat\n=\n\"\nraw\n\"\n/>\n<\ntotalBranches\n/>\n<\ntotalClasses\n/>\n<\ntotalElements\n/>\n<\ntotalFiles\n/>\n<\ntotalMethods\n/>\n<\ntotalStatements\n/>\n<\nncLineCount\n/>\n<\nlineCount\n/>\n<\nuncoveredBranches\nformat\n=\n\"\nraw\n\"\n/>\n<\nuncoveredElements\nformat\n=\n\"\nraw\n\"\n/>\n<\nuncoveredMethods\nformat\n=\n\"\nraw\n\"\n/>\n<\nuncoveredStatements\nformat\n=\n\"\nraw\n\"\n/>\n</\ncolumns\n>\n</\ncurrent\n>\n</\nclover-report\n>\n</\ntarget\n>\nThe code snippet will generate the XML reports, and the report will be captured to '${clover.report.dir}/clover.xml'.\nPublish Clover Report\nâ\nAdd\nPublish Clover Report\nstep to your build workflow. If you have several report sets, you can add several steps with different report set names. Reference\nthis page\nfor more details.\nTrouble Shooting\nâ\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Publish Clover Report",
        "content": ""
      },
      {
        "header": "Generate Clover Reportâ",
        "content": "QuickBuild will NOT generateCloverreport automatically, so first make sure theCloverreport is produced byANTor by any other build tool. The following example shows how to generate Cobertura test results withAntorMavenClover coverage report target in build.xml <targetname=\"clover.current\"depends=\"test.run\"><clover-report><currentoutfile=\"${clover.report.dir}/clover.xml\"title=\"Clover Demo\"charset=\"UTF-8\"><formattype=\"xml\"/><columns><totalChildren/><filteredElements/><avgMethodComplexity/><uncoveredElementsformat=\"raw\"/><totalPercentageCoveredformat=\"raw\"/><complexityformat=\"raw\"/><complexityDensityformat=\"raw\"/><coveredBranchesformat=\"raw\"/><coveredElementsformat=\"raw\"/><coveredMethodsformat=\"raw\"/><coveredStatementsformat=\"raw\"/><totalBranches/><totalClasses/><totalElements/><totalFiles/><totalMethods/><totalStatements/><ncLineCount/><lineCount/><uncoveredBranchesformat=\"raw\"/><uncoveredElementsformat=\"raw\"/><uncoveredMethodsformat=\"raw\"/><uncoveredStatementsformat=\"raw\"/></columns></current></clover-report></target> The code snippet will generate the XML reports, and the report will be captured to '${clover.report.dir}/clover.xml'."
      },
      {
        "header": "Publish Clover Reportâ",
        "content": "AddPublish Clover Reportstep to your build workflow. If you have several report sets, you can add several steps with different report set names. Referencethis pagefor more details."
      },
      {
        "header": "Trouble Shootingâ",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Publish+Cobertura+Report",
      "https://wiki.pmease.com/display/QB14/Publish+Coverity+Report",
      "https://wiki.pmease.com/display/QB14/Publish+CPD+Report",
      "https://wiki.pmease.com/display/QB14/Publish+CppCheck+Report",
      "https://wiki.pmease.com/display/QB14/Publish+EMMA+Report",
      "https://wiki.pmease.com/display/QB14/Publish+Findbugs+Report",
      "https://wiki.pmease.com/display/QB14/Publish+Fxcop+Report",
      "https://wiki.pmease.com/display/QB14/Publish+JaCoCo+Report",
      "https://wiki.pmease.com/display/QB14/Publish+JMeter+Report",
      "https://wiki.pmease.com/display/QB14/Publish+JUnit+Report",
      "https://wiki.pmease.com/display/QB14/Publish+MBUnit+Report",
      "https://wiki.pmease.com/display/QB14/Publish+MSTest+Report",
      "https://wiki.pmease.com/display/QB14/Publish+NCover+Report",
      "https://wiki.pmease.com/display/QB14/Publish+NUnit+Report",
      "https://wiki.pmease.com/display/QB14/Publish+PMD+Report",
      "https://wiki.pmease.com/display/QB14/Publish+TAP+Report",
      "https://wiki.pmease.com/display/QB14/Publish+TestNG+Report",
      "https://wiki.pmease.com/display/QB14/Report+Aggregation",
      "https://wiki.pmease.com/display/QB14/Rebuild+statistics+and+aggregation+data",
      "https://wiki.pmease.com/display/QB14/Publish+Build+Reports",
      "https://wiki.pmease.com/display/QB14/Publish+Cobertura+Report"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Publish+Cobertura+Report",
    "title": "Publish Cobertura Report",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Publish Build Reports"
    ],
    "full_text": "Administrator's Guide\nPublish Build Reports\nPublish Cobertura Report\nVersion: QB14\nOn this page\nPublish Cobertura Report\nTo publish\nCobertura\nreport, you only need two steps:\nGenerate Cobertura\nXML\nreport from\nAnt\nor\nMaven\nor any other build tool.\nAdd Cobertura publish step by choosing\nPublish -> Cobertura Report\nfrom step menu.\nwarning\nThe cobertura should be version 1.9.2 or higher.\nGenerate Cobertura Report\nâ\nQuickBuild will NOT generate\nCobertura\nreport automatically, so first make sure the\nCobertura\nreport is produced by\nANT\nor by any other build tool. The following example shows how to generate Cobertura test results with\nAnt Cobertura task\n:\nCobertura coverage report target in build.xml\n<\ntarget\nname\n=\n\"\ninstrument\n\"\ndepends\n=\n\"\njar\n\"\n>\n<\ndelete\nfile\n=\n\"\n${basedir}/cobertura.ser\n\"\n/>\n<\ndelete\nfile\n=\n\"\n${build.dir}/cobertura.ser\n\"\n/>\n<\ncobertura-taskdef\n/>\n<\ncobertura-instrument\ndatafile\n=\n\"\n${build.dir}/cobertura.ser\n\"\ntodir\n=\n\"\n${build.instrumented.dir}\n\"\n>\n<\nfileset\ndir\n=\n\"\n${build.classes.dir}\n\"\n>\n<\ninclude\nname\n=\n\"\n**/*.class\n\"\n/>\n<\nexclude\nname\n=\n\"\n**/*Test.class\n\"\n/>\n<\nexclude\nname\n=\n\"\nnet/sourceforge/cobertura/javancss/*.class\n\"\n/>\n</\nfileset\n>\n<\nfileset\ndir\n=\n\"\n${build.otherclasses.dir}\n\"\n>\n<\ninclude\nname\n=\n\"\n**/*.class\n\"\n/>\n<\nexclude\nname\n=\n\"\n**/*Test.class\n\"\n/>\n</\nfileset\n>\n</\ncobertura-instrument\n>\n</\ntarget\n>\n<\ntarget\nname\n=\n\"\ncoverage-report\n\"\n>\n<\ncobertura-taskdef\n/>\n<\ndelete\ndir\n=\n\"\n${build.reports.dir}/coverage-xml\n\"\n/>\n<\nmkdir\ndir\n=\n\"\n${build.reports.dir}/coverage-xml\n\"\n/>\n<\ncobertura-report\ndatafile\n=\n\"\n${build.dir}/cobertura.ser\n\"\ndestdir\n=\n\"\n${build.reports.dir}/coverage-xml\n\"\nformat\n=\n\"\nxml\n\"\n>\n<\nfileset\ndir\n=\n\"\n${src.dir}\n\"\n>\n<\ninclude\nname\n=\n\"\n**/*.java\n\"\n/>\n</\nfileset\n>\n<\nfileset\ndir\n=\n\"\n${othersrc.dir}\n\"\n>\n<\ninclude\nname\n=\n\"\n**/*.java\n\"\n/>\n</\nfileset\n>\n</\ncobertura-report\n>\n<\ncobertura-check\ndatafile\n=\n\"\n${build.dir}/cobertura.ser\n\"\ntotalbranchrate\n=\n\"\n50\n\"\ntotallinerate\n=\n\"\n50\n\"\n/>\n</\ntarget\n>\nThe code snippet will generate the XML reports for each test case, and the reports will be captured to '${build.reports.dir}/coverage-xml' directory.\nwarning\nFor property src.dir, should define like below:\nsrc.dir=${basedir}/src\ninstead of a relative path below:\nsrc.dir=src\notherwise, opening source code from QuickBuild may fail if basedir is different from workspace directory.\nPublish Cobertura Report\nâ\nAdd\nPublish Cobertura Report\nstep to your build workflow. If you have several report sets, you can add several steps with different report set names. Reference\nthis page\nfor more details.\nTrouble Shooting\nâ\nIf you can not publish Cobertura reports correctly, please:\nMake sure you generate the Cobertura XML files. As by default, Cobertura only generate .ser file.\nMake sure your file pattern is specified correctly. For example, Cobertura maven goal will generate the Cobertura XML files to target/site/cobertura/coverage.xml and the pattern \"**/target/*.xml\" will not work, instead, you may need use pattern like \"**/target/site/cobertura/*.xml\".\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Publish Cobertura Report",
        "content": ""
      },
      {
        "header": "Generate Cobertura Reportâ",
        "content": "QuickBuild will NOT generateCoberturareport automatically, so first make sure theCoberturareport is produced byANTor by any other build tool. The following example shows how to generate Cobertura test results withAnt Cobertura task:Cobertura coverage report target in build.xml <targetname=\"instrument\"depends=\"jar\"><deletefile=\"${basedir}/cobertura.ser\"/><deletefile=\"${build.dir}/cobertura.ser\"/><cobertura-taskdef/><cobertura-instrumentdatafile=\"${build.dir}/cobertura.ser\"todir=\"${build.instrumented.dir}\"><filesetdir=\"${build.classes.dir}\"><includename=\"**/*.class\"/><excludename=\"**/*Test.class\"/><excludename=\"net/sourceforge/cobertura/javancss/*.class\"/></fileset><filesetdir=\"${build.otherclasses.dir}\"><includename=\"**/*.class\"/><excludename=\"**/*Test.class\"/></fileset></cobertura-instrument></target><targetname=\"coverage-report\"><cobertura-taskdef/><deletedir=\"${build.reports.dir}/coverage-xml\"/><mkdirdir=\"${build.reports.dir}/coverage-xml\"/><cobertura-reportdatafile=\"${build.dir}/cobertura.ser\"destdir=\"${build.reports.dir}/coverage-xml\"format=\"xml\"><filesetdir=\"${src.dir}\"><includename=\"**/*.java\"/></fileset><filesetdir=\"${othersrc.dir}\"><includename=\"**/*.java\"/></fileset></cobertura-report><cobertura-checkdatafile=\"${build.dir}/cobertura.ser\"totalbranchrate=\"50\"totallinerate=\"50\"/></target> The code snippet will generate the XML reports for each test case, and the reports will be captured to '${build.reports.dir}/coverage-xml' directory. warningFor property src.dir, should define like below:src.dir=${basedir}/srcinstead of a relative path below:src.dir=srcotherwise, opening source code from QuickBuild may fail if basedir is different from workspace directory."
      },
      {
        "header": "Publish Cobertura Reportâ",
        "content": "AddPublish Cobertura Reportstep to your build workflow. If you have several report sets, you can add several steps with different report set names. Referencethis pagefor more details."
      },
      {
        "header": "Trouble Shootingâ",
        "content": "If you can not publish Cobertura reports correctly, please: Make sure you generate the Cobertura XML files. As by default, Cobertura only generate .ser file.Make sure your file pattern is specified correctly. For example, Cobertura maven goal will generate the Cobertura XML files to target/site/cobertura/coverage.xml and the pattern \"**/target/*.xml\" will not work, instead, you may need use pattern like \"**/target/site/cobertura/*.xml\"."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Publish+Coverity+Report",
      "https://wiki.pmease.com/display/QB14/Publish+CPD+Report",
      "https://wiki.pmease.com/display/QB14/Publish+CppCheck+Report",
      "https://wiki.pmease.com/display/QB14/Publish+EMMA+Report",
      "https://wiki.pmease.com/display/QB14/Publish+Findbugs+Report",
      "https://wiki.pmease.com/display/QB14/Publish+Fxcop+Report",
      "https://wiki.pmease.com/display/QB14/Publish+JaCoCo+Report",
      "https://wiki.pmease.com/display/QB14/Publish+JMeter+Report",
      "https://wiki.pmease.com/display/QB14/Publish+JUnit+Report",
      "https://wiki.pmease.com/display/QB14/Publish+MBUnit+Report",
      "https://wiki.pmease.com/display/QB14/Publish+MSTest+Report",
      "https://wiki.pmease.com/display/QB14/Publish+NCover+Report",
      "https://wiki.pmease.com/display/QB14/Publish+NUnit+Report",
      "https://wiki.pmease.com/display/QB14/Publish+PMD+Report",
      "https://wiki.pmease.com/display/QB14/Publish+TAP+Report",
      "https://wiki.pmease.com/display/QB14/Publish+TestNG+Report",
      "https://wiki.pmease.com/display/QB14/Report+Aggregation",
      "https://wiki.pmease.com/display/QB14/Rebuild+statistics+and+aggregation+data",
      "https://wiki.pmease.com/display/QB14/Publish+Build+Reports",
      "https://wiki.pmease.com/display/QB14/Publish+Coverity+Report"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Publish+Coverity+Report",
    "title": "Publish Coverity Report",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Publish Build Reports"
    ],
    "full_text": "Administrator's Guide\nPublish Build Reports\nPublish Coverity Report\nVersion: QB14\nPublish Coverity Report\nTo publish\ncoverity report\n, you need:\nGenerate coverity JSON report\nAdd Publish Coverity Report step\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Publish Coverity Report",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Publish+CPD+Report",
      "https://wiki.pmease.com/display/QB14/Publish+CppCheck+Report",
      "https://wiki.pmease.com/display/QB14/Publish+EMMA+Report",
      "https://wiki.pmease.com/display/QB14/Publish+Findbugs+Report",
      "https://wiki.pmease.com/display/QB14/Publish+Fxcop+Report",
      "https://wiki.pmease.com/display/QB14/Publish+JaCoCo+Report",
      "https://wiki.pmease.com/display/QB14/Publish+JMeter+Report",
      "https://wiki.pmease.com/display/QB14/Publish+JUnit+Report",
      "https://wiki.pmease.com/display/QB14/Publish+MBUnit+Report",
      "https://wiki.pmease.com/display/QB14/Publish+MSTest+Report",
      "https://wiki.pmease.com/display/QB14/Publish+NCover+Report",
      "https://wiki.pmease.com/display/QB14/Publish+NUnit+Report",
      "https://wiki.pmease.com/display/QB14/Publish+PMD+Report",
      "https://wiki.pmease.com/display/QB14/Publish+TAP+Report",
      "https://wiki.pmease.com/display/QB14/Publish+TestNG+Report",
      "https://wiki.pmease.com/display/QB14/Report+Aggregation",
      "https://wiki.pmease.com/display/QB14/Rebuild+statistics+and+aggregation+data",
      "https://wiki.pmease.com/display/QB14/Publish+CPD+Report"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Publish+CPD+Report",
    "title": "Publish CPD Report",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Publish Build Reports"
    ],
    "full_text": "Administrator's Guide\nPublish Build Reports\nPublish CPD Report\nVersion: QB14\nOn this page\nPublish CPD Report\nTo publish\nCPD\nreport, you only need two steps:\nGenerate CPD\nXML\nreport from\nAnt\nor\nMaven\nor any other build tool.\nAdd CPD report publish step by choosing\nPublish -> CPD Report\nfrom step menu.\nGenerate CPD Report\nâ\nQuickBuild will NOT generate\nCPD\nreport automatically, so first make sure the CPD report is produced by\nANT\nor by any other build tool. The following example shows how to generate CPD XML report with\nCPD Ant task\n:\nCheckStyle target in build.xml\n<\ntarget\nname\n=\n\"\ncpd\n\"\ndepends\n=\n\"\ninit\n\"\ndescription\n=\n\"\nGenerate the CPD XML report\n\"\n>\n<\ntaskdef\nname\n=\n\"\ncpd\n\"\nclassname\n=\n\"\nnet.sourceforge.pmd.cpd.CPDTask\n\"\n>\n<\nclasspath\n>\n<\nfileset\ndir\n=\n\"\n${pmd.home}/lib\n\"\n>\n<\ninclude\nname\n=\n\"\n*.jar\n\"\n/>\n</\nfileset\n>\n</\nclasspath\n>\n</\ntaskdef\n>\n<\nmkdir\ndir\n=\n\"\n${cpd.report.dir}\n\"\n/>\n<\ncpd\nminimumTokenCount\n=\n\"\n100\n\"\nformat\n=\n\"\nxml\n\"\noutputFile\n=\n\"\n${cpd.report.dir}/cpd_report.xml\n\"\n>\n<\nfileset\ndir\n=\n\"\n${dir.src}\n\"\n>\n<\ninclude\nname\n=\n\"\n**/*.java\n\"\n/>\n</\nfileset\n>\n</\ncpd\n>\n</\ntarget\n>\nAfter adding the target, you can generate the XML report for your source code, and after that you can tell QuickBuild to publish the results.\nPublish CPD Report\nâ\nAdd\nPublish CPD Report\nstep to your build workflow. If you have several report sets, you can add several steps with different report set names. Reference\nthis page\nfor more details.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Publish CPD Report",
        "content": ""
      },
      {
        "header": "Generate CPD Reportâ",
        "content": "QuickBuild will NOT generateCPDreport automatically, so first make sure the CPD report is produced byANTor by any other build tool. The following example shows how to generate CPD XML report withCPD Ant task:CheckStyle target in build.xml <targetname=\"cpd\"depends=\"init\"description=\"Generate the CPD XML report\"><taskdefname=\"cpd\"classname=\"net.sourceforge.pmd.cpd.CPDTask\"><classpath><filesetdir=\"${pmd.home}/lib\"><includename=\"*.jar\"/></fileset></classpath></taskdef><mkdirdir=\"${cpd.report.dir}\"/><cpdminimumTokenCount=\"100\"format=\"xml\"outputFile=\"${cpd.report.dir}/cpd_report.xml\"><filesetdir=\"${dir.src}\"><includename=\"**/*.java\"/></fileset></cpd></target> After adding the target, you can generate the XML report for your source code, and after that you can tell QuickBuild to publish the results."
      },
      {
        "header": "Publish CPD Reportâ",
        "content": "AddPublish CPD Reportstep to your build workflow. If you have several report sets, you can add several steps with different report set names. Referencethis pagefor more details."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Publish+CppCheck+Report",
      "https://wiki.pmease.com/display/QB14/Publish+EMMA+Report",
      "https://wiki.pmease.com/display/QB14/Publish+Findbugs+Report",
      "https://wiki.pmease.com/display/QB14/Publish+Fxcop+Report",
      "https://wiki.pmease.com/display/QB14/Publish+JaCoCo+Report",
      "https://wiki.pmease.com/display/QB14/Publish+JMeter+Report",
      "https://wiki.pmease.com/display/QB14/Publish+JUnit+Report",
      "https://wiki.pmease.com/display/QB14/Publish+MBUnit+Report",
      "https://wiki.pmease.com/display/QB14/Publish+MSTest+Report",
      "https://wiki.pmease.com/display/QB14/Publish+NCover+Report",
      "https://wiki.pmease.com/display/QB14/Publish+NUnit+Report",
      "https://wiki.pmease.com/display/QB14/Publish+PMD+Report",
      "https://wiki.pmease.com/display/QB14/Publish+TAP+Report",
      "https://wiki.pmease.com/display/QB14/Publish+TestNG+Report",
      "https://wiki.pmease.com/display/QB14/Report+Aggregation",
      "https://wiki.pmease.com/display/QB14/Rebuild+statistics+and+aggregation+data",
      "https://wiki.pmease.com/display/QB14/Publish+Build+Reports",
      "https://wiki.pmease.com/display/QB14/Publish+CppCheck+Report"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Publish+CppCheck+Report",
    "title": "Publish CppCheck Report",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Publish Build Reports"
    ],
    "full_text": "Administrator's Guide\nPublish Build Reports\nPublish CppCheck Report\nVersion: QB14\nOn this page\nPublish CppCheck Report\nTo publish\nCppCheck\nreport, first you need:\nGenerate version 2 XML report\nAdd a publish step in your configuration\nGenerate CppCheck XML report\nâ\nCppCheck can generate XML report, QuickBuild only supports\nversion 2\nformat. For example:\ncppcheck\n--\nxml\n-\nversion\n=\n2\nfile1\n.\ncpp\nPublish the report\nâ\nAdd Publish CppCheck Report\nstep to your build workflow. If you have several report sets, you can add multiple publish CppCheck report steps with different report set names. Reference\nthis page\nfor more details.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Publish CppCheck Report",
        "content": ""
      },
      {
        "header": "Generate CppCheck XML reportâ",
        "content": "CppCheck can generate XML report, QuickBuild only supportsversion 2format. For example: cppcheck--xml-version=2file1.cpp"
      },
      {
        "header": "Publish the reportâ",
        "content": "Add Publish CppCheck Reportstep to your build workflow. If you have several report sets, you can add multiple publish CppCheck report steps with different report set names. Referencethis pagefor more details."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Publish+EMMA+Report",
      "https://wiki.pmease.com/display/QB14/Publish+Findbugs+Report",
      "https://wiki.pmease.com/display/QB14/Publish+Fxcop+Report",
      "https://wiki.pmease.com/display/QB14/Publish+JaCoCo+Report",
      "https://wiki.pmease.com/display/QB14/Publish+JMeter+Report",
      "https://wiki.pmease.com/display/QB14/Publish+JUnit+Report",
      "https://wiki.pmease.com/display/QB14/Publish+MBUnit+Report",
      "https://wiki.pmease.com/display/QB14/Publish+MSTest+Report",
      "https://wiki.pmease.com/display/QB14/Publish+NCover+Report",
      "https://wiki.pmease.com/display/QB14/Publish+NUnit+Report",
      "https://wiki.pmease.com/display/QB14/Publish+PMD+Report",
      "https://wiki.pmease.com/display/QB14/Publish+TAP+Report",
      "https://wiki.pmease.com/display/QB14/Publish+TestNG+Report",
      "https://wiki.pmease.com/display/QB14/Report+Aggregation",
      "https://wiki.pmease.com/display/QB14/Rebuild+statistics+and+aggregation+data",
      "https://wiki.pmease.com/display/QB14/Publish+Build+Reports",
      "https://wiki.pmease.com/display/QB14/Publish+EMMA+Report"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Publish+EMMA+Report",
    "title": "Publish EMMA Report",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Publish Build Reports"
    ],
    "full_text": "Administrator's Guide\nPublish Build Reports\nPublish EMMA Report\nVersion: QB14\nOn this page\nPublish EMMA Report\nTo publish\nEMMA\nreport, you only need two steps:\nGenerate EMMA\nXML\nreport from\nAnt\nor\nMaven\nor any other build tool.\nAdd EMMA publish step by choosing\nPublish -> EMMA Report\nfrom the step menu.\nGenerate EMMA Report\nâ\nQuickBuild will NOT generate\nEMMA\nreport automatically, so first make sure that the EMMA report is produced by\nANT\nor by any other build tool. The following example shows how to generate EMMA\ncode coverage\nwith\nAnt EMMA task\n:\nEMMA target in build.xml\n<\ntarget\nname\n=\n\"\nemma.instr\n\"\ndepends\n=\n\"\nclean, compile.tests\n\"\nif\n=\n\"\nemma.enabled\n\"\n>\n<\navailable\nfile\n=\n\"\nlib/emma.jar\n\"\nproperty\n=\n\"\nemma.available\n\"\n/>\n<\nfail\nunless\n=\n\"\nemma.available\n\"\nmessage\n=\n\"\nError: emma.jar not found\n\"\n/>\n<\npath\nid\n=\n\"\nemma.lib.dir\n\"\n>\n<\npathelement\nlocation\n=\n\"\n${lib.dir}/emma.jar\n\"\n/>\n<\npathelement\nlocation\n=\n\"\n${lib.dir}/emma_ant.jar\n\"\n/>\n</\npath\n>\n<\ntaskdef\nresource\n=\n\"\nemma_ant.properties\n\"\nclasspathref\n=\n\"\nemma.lib.dir\n\"\n/>\n<\nmkdir\ndir\n=\n\"\n${emma.report.dir}\n\"\n/>\n<\nemma\n>\n<\ninstr\ninstrpath\n=\n\"\n${build.home}/classes\n\"\ndestdir\n=\n\"\n${build.home}/classes\n\"\nmetadatafile\n=\n\"\n${emma.report.dir}/metadata.emma\n\"\nmerge\n=\n\"\ntrue\n\"\nmode\n=\n\"\noverwrite\n\"\n/>\n</\nemma\n>\n</\ntarget\n>\n<!-- Run all the JUnit Tests -->\n<\ntarget\nname\n=\n\"\njunit\n\"\ndepends\n=\n\"\nemma.instr\n\"\n>\n<\nmkdir\ndir\n=\n\"\n${junit.report.dir}\n\"\n/>\n<\nmkdir\ndir\n=\n\"\n${junit.report.dir}/test-out\n\"\n/>\n<\nrecord\nname\n=\n\"\n${junit.report.dir}/test-output.txt\n\"\nappend\n=\n\"\nno\n\"\naction\n=\n\"\nstart\n\"\n/>\n<\njunit\nprintsummary\n=\n\"\nyes\n\"\nhaltonfailure\n=\n\"\nfalse\n\"\nfork\n=\n\"\nyes\n\"\n>\n<\njvmarg\nvalue\n=\n\"\n-Demma.coverage.out.file=${emma.report.dir}/coverage.emma\n\"\n/>\n<\njvmarg\nvalue\n=\n\"\n-Demma.coverage.out.merge=true\n\"\n/>\n<\nclasspath\nrefid\n=\n\"\ntest.classpath\n\"\n/>\n<!-- <formatter type=\"plain\"/> -->\n<\nformatter\ntype\n=\n\"\nxml\n\"\n/>\n<\nbatchtest\nfork\n=\n\"\nyes\n\"\ntodir\n=\n\"\n${junit.report.dir}/test-out\n\"\n>\n<\nfileset\ndir\n=\n\"\n${test.home}\n\"\n>\n<\ninclude\nname\n=\n\"\n**/*Test.java\n\"\n/>\n<\nexclude\nname\n=\n\"\n**/*AbstractTest.java\n\"\n/>\n</\nfileset\n>\n</\nbatchtest\n>\n</\njunit\n>\n<\njunitreport\ntodir\n=\n\"\n${junit.report.dir}\n\"\n>\n<\nfileset\ndir\n=\n\"\n${junit.report.dir}/test-out\n\"\n>\n<\ninclude\nname\n=\n\"\nTEST-*.xml\n\"\n/>\n</\nfileset\n>\n</\njunitreport\n>\n<\nrecord\nname\n=\n\"\n${junit.report.dir}/test-output.txt\n\"\naction\n=\n\"\nstop\n\"\n/>\n</\ntarget\n>\n<!-- Generate Emma Report -->\n<\ntarget\nname\n=\n\"\nemma.report\n\"\ndepends\n=\n\"\njunit\n\"\nif\n=\n\"\nemma.enabled\n\"\n>\n<\nemma\nenabled\n=\n\"\ntrue\n\"\n>\n<\nreport\nsourcepath\n=\n\"\n${dir.src}\n\"\nsort\n=\n\"\n+name,+class,+method,+block\n\"\nmetrics\n=\n\"\nmethod:70,block:80,line:80,class:100\n\"\n>\n<\nfileset\ndir\n=\n\"\n${emma.report.dir}\n\"\n>\n<\ninclude\nname\n=\n\"\n*.emma\n\"\n/>\n</\nfileset\n>\n<\nxml\noutfile\n=\n\"\n${emma.report.dir}/coverage.xml\n\"\ndepth\n=\n\"\nmethod\n\"\n/>\n</\nreport\n>\n</\nemma\n>\n<!-- deleted the instrumented .class files -->\n<!-- <delete dir=\"${build.home}/classes\" /> -->\n</\ntarget\n>\nThe code snippet will generate the XML report for all the source code. XML report coverage.xml will be generated in 'reports/emma directory' directory which is relative to the\nworkspace\ndirectory.\nAfter adding the target above, generate the XML code coverage report for your source code, and after that you can tell QuickBuild to publish the results.\nPublish EMMA Report\nâ\nAdd\nPublish EMMA Report\nstep to your build workflow. If you have several report sets, you can add several steps with different report set names. Reference\nthis page\nfor more details.\nLast updated\non\nOct 24, 2024",
    "sections": [
      {
        "header": "Publish EMMA Report",
        "content": ""
      },
      {
        "header": "Generate EMMA Reportâ",
        "content": "QuickBuild will NOT generateEMMAreport automatically, so first make sure that the EMMA report is produced byANTor by any other build tool. The following example shows how to generate EMMAcode coveragewithAnt EMMA task:EMMA target in build.xml <targetname=\"emma.instr\"depends=\"clean, compile.tests\"if=\"emma.enabled\"><availablefile=\"lib/emma.jar\"property=\"emma.available\"/><failunless=\"emma.available\"message=\"Error: emma.jar not found\"/><pathid=\"emma.lib.dir\"><pathelementlocation=\"${lib.dir}/emma.jar\"/><pathelementlocation=\"${lib.dir}/emma_ant.jar\"/></path><taskdefresource=\"emma_ant.properties\"classpathref=\"emma.lib.dir\"/><mkdirdir=\"${emma.report.dir}\"/><emma><instrinstrpath=\"${build.home}/classes\"destdir=\"${build.home}/classes\"metadatafile=\"${emma.report.dir}/metadata.emma\"merge=\"true\"mode=\"overwrite\"/></emma></target><!-- Run all the JUnit Tests --><targetname=\"junit\"depends=\"emma.instr\"><mkdirdir=\"${junit.report.dir}\"/><mkdirdir=\"${junit.report.dir}/test-out\"/><recordname=\"${junit.report.dir}/test-output.txt\"append=\"no\"action=\"start\"/><junitprintsummary=\"yes\"haltonfailure=\"false\"fork=\"yes\"><jvmargvalue=\"-Demma.coverage.out.file=${emma.report.dir}/coverage.emma\"/><jvmargvalue=\"-Demma.coverage.out.merge=true\"/><classpathrefid=\"test.classpath\"/><!-- <formatter type=\"plain\"/> --><formattertype=\"xml\"/><batchtestfork=\"yes\"todir=\"${junit.report.dir}/test-out\"><filesetdir=\"${test.home}\"><includename=\"**/*Test.java\"/><excludename=\"**/*AbstractTest.java\"/></fileset></batchtest></junit><junitreporttodir=\"${junit.report.dir}\"><filesetdir=\"${junit.report.dir}/test-out\"><includename=\"TEST-*.xml\"/></fileset></junitreport><recordname=\"${junit.report.dir}/test-output.txt\"action=\"stop\"/></target><!-- Generate Emma Report --><targetname=\"emma.report\"depends=\"junit\"if=\"emma.enabled\"><emmaenabled=\"true\"><reportsourcepath=\"${dir.src}\"sort=\"+name,+class,+method,+block\"metrics=\"method:70,block:80,line:80,class:100\"><filesetdir=\"${emma.report.dir}\"><includename=\"*.emma\"/></fileset><xmloutfile=\"${emma.report.dir}/coverage.xml\"depth=\"method\"/></report></emma><!-- deleted the instrumented .class files --><!-- <delete dir=\"${build.home}/classes\" /> --></target> The code snippet will generate the XML report for all the source code. XML report coverage.xml will be generated in 'reports/emma directory' directory which is relative to theworkspacedirectory. After adding the target above, generate the XML code coverage report for your source code, and after that you can tell QuickBuild to publish the results."
      },
      {
        "header": "Publish EMMA Reportâ",
        "content": "AddPublish EMMA Reportstep to your build workflow. If you have several report sets, you can add several steps with different report set names. Referencethis pagefor more details."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Publish+Findbugs+Report",
      "https://wiki.pmease.com/display/QB14/Publish+Fxcop+Report",
      "https://wiki.pmease.com/display/QB14/Publish+JaCoCo+Report",
      "https://wiki.pmease.com/display/QB14/Publish+JMeter+Report",
      "https://wiki.pmease.com/display/QB14/Publish+JUnit+Report",
      "https://wiki.pmease.com/display/QB14/Publish+MBUnit+Report",
      "https://wiki.pmease.com/display/QB14/Publish+MSTest+Report",
      "https://wiki.pmease.com/display/QB14/Publish+NCover+Report",
      "https://wiki.pmease.com/display/QB14/Publish+NUnit+Report",
      "https://wiki.pmease.com/display/QB14/Publish+PMD+Report",
      "https://wiki.pmease.com/display/QB14/Publish+TAP+Report",
      "https://wiki.pmease.com/display/QB14/Publish+TestNG+Report",
      "https://wiki.pmease.com/display/QB14/Report+Aggregation",
      "https://wiki.pmease.com/display/QB14/Rebuild+statistics+and+aggregation+data",
      "https://wiki.pmease.com/display/QB14/Publish+Build+Reports",
      "https://wiki.pmease.com/display/QB14/Publish+Findbugs+Report"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Publish+Findbugs+Report",
    "title": "Publish Findbugs Report",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Publish Build Reports"
    ],
    "full_text": "Administrator's Guide\nPublish Build Reports\nPublish Findbugs Report\nVersion: QB14\nOn this page\nPublish Findbugs Report\nTo publish\nFindbugs\nreport, you only need two steps:\nGenerate Findbugs\nXML\nreport from\nAnt\nor\nMaven\nor any other build tool.\nAdd Findbugs report publish step by choosing menu item\nPublish -> Findbugs Reports\nfrom the step menu.\nGenerate Findbugs Report\nâ\nQuickBuild will NOT generate\nFindbugs\nreport automatically, so first make sure the\nFindbugs\nreport is produced by\nANT\nor by any other build tool. The following example shows how to generate Findbugs test results with\nAnt Findbugs task\n:\nFindbugs report target in build.xml\n<\ntaskdef\nname\n=\n\"\nfindbugs\n\"\nclassname\n=\n\"\nedu.umd.cs.findbugs.anttask.FindBugsTask\n\"\nclasspath\n=\n\"\n${findbugs.utils.dir}/findbugs-ant.jar\n\"\n/>\n<\ntarget\nname\n=\n\"\nfindbugs\n\"\ndepends\n=\n\"\ndist,findbugs-xml,findbugs-html\n\"\n/>\n<\ntarget\nname\n=\n\"\nfindbugs-xml\n\"\n>\n<\nmkdir\ndir\n=\n\"\n${findbugs.reports}\n\"\n/>\n<\nfindbugs\nhome\n=\n\"\n${findbugs.home}\n\"\noutput\n=\n\"\nxml:withMessages\n\"\noutputFile\n=\n\"\n${findbugs.reports}/findbugs.xml\n\"\njvmargs\n=\n\"\n-Xmx512m\n\"\n>\n<\nauxClasspath\npath\n=\n\"\n${lib.dir}\n\"\n/>\n<\nsourcePath\npath\n=\n\"\n${src.dir}\n\"\n/>\n<\nclass\nlocation\n=\n\"\n${dist.dir}/${exe.name}.jar\n\"\n/>\n</\nfindbugs\n>\n</\ntarget\n>\nThe code snippet will generate the XML reports for each test case, and the reports will be captured to '${findbugs.reports}' directory.\nNote. The\noutput\nformat should be set to 'xml:withMessages'.\nPublish Findbugs Report\nâ\nAdd\nPublish Findbugs Report\nstep to your build workflow. If you have several report sets, you can add several steps with different report set names. Reference\nthis page\nfor more details.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Publish Findbugs Report",
        "content": ""
      },
      {
        "header": "Generate Findbugs Reportâ",
        "content": "QuickBuild will NOT generateFindbugsreport automatically, so first make sure theFindbugsreport is produced byANTor by any other build tool. The following example shows how to generate Findbugs test results withAnt Findbugs task:Findbugs report target in build.xml <taskdefname=\"findbugs\"classname=\"edu.umd.cs.findbugs.anttask.FindBugsTask\"classpath=\"${findbugs.utils.dir}/findbugs-ant.jar\"/><targetname=\"findbugs\"depends=\"dist,findbugs-xml,findbugs-html\"/><targetname=\"findbugs-xml\"><mkdirdir=\"${findbugs.reports}\"/><findbugshome=\"${findbugs.home}\"output=\"xml:withMessages\"outputFile=\"${findbugs.reports}/findbugs.xml\"jvmargs=\"-Xmx512m\"><auxClasspathpath=\"${lib.dir}\"/><sourcePathpath=\"${src.dir}\"/><classlocation=\"${dist.dir}/${exe.name}.jar\"/></findbugs></target> The code snippet will generate the XML reports for each test case, and the reports will be captured to '${findbugs.reports}' directory.Note. Theoutputformat should be set to 'xml:withMessages'."
      },
      {
        "header": "Publish Findbugs Reportâ",
        "content": "AddPublish Findbugs Reportstep to your build workflow. If you have several report sets, you can add several steps with different report set names. Referencethis pagefor more details."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Publish+Fxcop+Report",
      "https://wiki.pmease.com/display/QB14/Publish+JaCoCo+Report",
      "https://wiki.pmease.com/display/QB14/Publish+JMeter+Report",
      "https://wiki.pmease.com/display/QB14/Publish+JUnit+Report",
      "https://wiki.pmease.com/display/QB14/Publish+MBUnit+Report",
      "https://wiki.pmease.com/display/QB14/Publish+MSTest+Report",
      "https://wiki.pmease.com/display/QB14/Publish+NCover+Report",
      "https://wiki.pmease.com/display/QB14/Publish+NUnit+Report",
      "https://wiki.pmease.com/display/QB14/Publish+PMD+Report",
      "https://wiki.pmease.com/display/QB14/Publish+TAP+Report",
      "https://wiki.pmease.com/display/QB14/Publish+TestNG+Report",
      "https://wiki.pmease.com/display/QB14/Report+Aggregation",
      "https://wiki.pmease.com/display/QB14/Rebuild+statistics+and+aggregation+data",
      "https://wiki.pmease.com/display/QB14/Publish+Build+Reports",
      "https://wiki.pmease.com/display/QB14/Publish+Fxcop+Report"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Publish+Fxcop+Report",
    "title": "Publish Fxcop Report",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Publish Build Reports"
    ],
    "full_text": "Administrator's Guide\nPublish Build Reports\nPublish Fxcop Report\nVersion: QB14\nOn this page\nPublish Fxcop Report\nTo publish Fxcop reports, you need:\nGenerate Fxcop reports by using\nFxcopCmd\nor\nNAnt fxcop task\nor any other tools.\nAdd a Publish Fxcop Reports step in your configuration steps.\nNote:\nThe Fxcop version should be 1.35+.\nAfter doing this, QuickBuild will generate the Fxcop reports automatically.\nNOTE\nQuickBuild only parses the XML reports.\nGenerate Fxcop XML Reports\nâ\nWe use NAnt fxcop task as an example for how to generate Fxcop XML reports:\n<\nfxcop\nfailonerror\n=\n\"\nfalse\n\"\nprojectFile\n=\n\"\n${build.dir}\\Sample.fxcop\n\"\n>\n<\ntargets\n>\n<\ninclude\nname\n=\n\"\n${build.dir}\\bin\\*.dll\n\"\n/>\n</\ntargets\n>\n<\nrules\n>\n<\ninclude\nname\n=\n\"\n${build.dir}\\rules\\*.dll\n\"\n/>\n</\nrules\n>\n</\nfxcop\n>\nPublish Fxcop Reports\nâ\nAdd\nPublish Fxcop Report\nstep to your build workflow. If you have several report sets, you can add several steps with different report set names. Reference\nthis page\nfor more details.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Publish Fxcop Report",
        "content": ""
      },
      {
        "header": "Generate Fxcop XML Reportsâ",
        "content": "We use NAnt fxcop task as an example for how to generate Fxcop XML reports: <fxcopfailonerror=\"false\"projectFile=\"${build.dir}\\Sample.fxcop\"><targets><includename=\"${build.dir}\\bin\\*.dll\"/></targets><rules><includename=\"${build.dir}\\rules\\*.dll\"/></rules></fxcop>"
      },
      {
        "header": "Publish Fxcop Reportsâ",
        "content": "AddPublish Fxcop Reportstep to your build workflow. If you have several report sets, you can add several steps with different report set names. Referencethis pagefor more details."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Publish+JaCoCo+Report",
      "https://wiki.pmease.com/display/QB14/Publish+JMeter+Report",
      "https://wiki.pmease.com/display/QB14/Publish+JUnit+Report",
      "https://wiki.pmease.com/display/QB14/Publish+MBUnit+Report",
      "https://wiki.pmease.com/display/QB14/Publish+MSTest+Report",
      "https://wiki.pmease.com/display/QB14/Publish+NCover+Report",
      "https://wiki.pmease.com/display/QB14/Publish+NUnit+Report",
      "https://wiki.pmease.com/display/QB14/Publish+PMD+Report",
      "https://wiki.pmease.com/display/QB14/Publish+TAP+Report",
      "https://wiki.pmease.com/display/QB14/Publish+TestNG+Report",
      "https://wiki.pmease.com/display/QB14/Report+Aggregation",
      "https://wiki.pmease.com/display/QB14/Rebuild+statistics+and+aggregation+data",
      "https://wiki.pmease.com/display/QB14/Publish+Build+Reports",
      "https://wiki.pmease.com/display/QB14/Publish+JaCoCo+Report"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Publish+JaCoCo+Report",
    "title": "Publish JaCoCo Report",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Publish Build Reports"
    ],
    "full_text": "Administrator's Guide\nPublish Build Reports\nPublish JaCoCo Report\nVersion: QB14\nOn this page\nPublish JaCoCo Report\nTo publish\nJaCoCo\nreport, you only need two steps:\nGenerate JaCoCo\nXML\nreport from\nAnt\nor\nMaven\nor any other build tool.\nAdd JaCoCo publish step by choosing\nPublish -> JaCoCo Report\nfrom step menu.\nwarning\nThe JaCoCo should be version 0.6.1 or higher.\nGenerate JaCoCo Report\nâ\nQuickBuild will NOT generate\nJaCoCo\nreport automatically, so first make sure the\nJaCoCo\nreport is produced by\nANT\nor by any other build tool. The following example shows how to generate JaCoCo coverage XML report with\nAnt Cobertura task\n, you may find more examples from\nJaCoCo\nwebsite:\nJaCoCo coverage report target in build.xml\n<\ntarget\nname\n=\n\"\ntest\n\"\ndepends\n=\n\"\ncompile\n\"\n>\n<!-- Step 2: Wrap test execution with the JaCoCo coverage task -->\n<\njacoco:\ncoverage\ndestfile\n=\n\"\n${result.exec.file}\n\"\n>\n<\njava\nclassname\n=\n\"\norg.jacoco.examples.parser.Main\n\"\nfork\n=\n\"\ntrue\n\"\n>\n<\nclasspath\npath\n=\n\"\n${result.classes.dir}\n\"\n/>\n<\narg\nvalue\n=\n\"\n2 * 3 + 4\n\"\n/>\n<\narg\nvalue\n=\n\"\n2 + 3 * 4\n\"\n/>\n<\narg\nvalue\n=\n\"\n(2 + 3) * 4\n\"\n/>\n<\narg\nvalue\n=\n\"\n2 * 2 * 2 * 2\n\"\n/>\n<\narg\nvalue\n=\n\"\n1 + 2 + 3 + 4\n\"\n/>\n<\narg\nvalue\n=\n\"\n2 * 3 + 2 * 5\n\"\n/>\n</\njava\n>\n</\njacoco:\ncoverage\n>\n</\ntarget\n>\n<\ntarget\nname\n=\n\"\nreport\n\"\ndepends\n=\n\"\ntest\n\"\n>\n<!-- Step 3. Create coverage report -->\n<\njacoco:\nreport\n>\n<!-- This task needs the collected execution data and ... -->\n<\nexecutiondata\n>\n<\nfile\nfile\n=\n\"\n${result.exec.file}\n\"\n/>\n</\nexecutiondata\n>\n<!-- the class files and optional source files ... -->\n<\nstructure\nname\n=\n\"\nJaCoCo Ant Example\n\"\n>\n<\nclassfiles\n>\n<\nfileset\ndir\n=\n\"\n${result.classes.dir}\n\"\n/>\n</\nclassfiles\n>\n<\nsourcefiles\nencoding\n=\n\"\nUTF-8\n\"\n>\n<\nfileset\ndir\n=\n\"\n${src.dir}\n\"\n/>\n</\nsourcefiles\n>\n</\nstructure\n>\n<!-- to produce reports in XML formats. -->\n<\nxml\ndestfile\n=\n\"\n${result.report.dir}/report.xml\n\"\n/>\n</\njacoco:\nreport\n>\n</\ntarget\n>\nThe code snippet will generate the JaCoCo report will be captured to '${result.report.dir}/report.xml'.\nwarning\nWhen generating the report, please also make sure the source directory is under your configuration workspace directory. Otherwise, QuickBuild will fail to find the source code and will not be able to open the source code later.\nPublish JaCoCo Report\nâ\nAdd\nPublish JaCoCo Report\nstep to your build workflow. You can category your coverage report by adding multiple steps with different report set name(category name). Reference\nthis page\nfor how to use report set.\nIf the JaCoCo is published successfully, the build overview page will display the summary for your coverage,\nand JaCoCo report tab will be displayed in your build page like below:\nbelow shows the coverage of source code opening from class report or method report:\nConfigure Coverage Threshold\nâ\nYou may also change the JaCoCo coverage threshold for each configuration. Go to Configuration Settings / Report Settings / JaCoCo Setting:\nthen change to your threshold and configure the color you want.\nAggregate JaCoCo Report\nâ\nLike all other reports, JaCoCo coverage data can be aggregated to current configuration and parent configuration, please refer to this page for how to add aggregation based on your strategy.\nTrouble Shooting\nâ\nIf you can not publish JaCoCo reports correctly, please:\nMake sure you generate the Cobertura XML files.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Publish JaCoCo Report",
        "content": ""
      },
      {
        "header": "Generate JaCoCo Reportâ",
        "content": "QuickBuild will NOT generateJaCoCoreport automatically, so first make sure theJaCoCoreport is produced byANTor by any other build tool. The following example shows how to generate JaCoCo coverage XML report withAnt Cobertura task, you may find more examples fromJaCoCowebsite:JaCoCo coverage report target in build.xml <targetname=\"test\"depends=\"compile\"><!-- Step 2: Wrap test execution with the JaCoCo coverage task --><jacoco:coveragedestfile=\"${result.exec.file}\"><javaclassname=\"org.jacoco.examples.parser.Main\"fork=\"true\"><classpathpath=\"${result.classes.dir}\"/><argvalue=\"2 * 3 + 4\"/><argvalue=\"2 + 3 * 4\"/><argvalue=\"(2 + 3) * 4\"/><argvalue=\"2 * 2 * 2 * 2\"/><argvalue=\"1 + 2 + 3 + 4\"/><argvalue=\"2 * 3 + 2 * 5\"/></java></jacoco:coverage></target><targetname=\"report\"depends=\"test\"><!-- Step 3. Create coverage report --><jacoco:report><!-- This task needs the collected execution data and ... --><executiondata><filefile=\"${result.exec.file}\"/></executiondata><!-- the class files and optional source files ... --><structurename=\"JaCoCo Ant Example\"><classfiles><filesetdir=\"${result.classes.dir}\"/></classfiles><sourcefilesencoding=\"UTF-8\"><filesetdir=\"${src.dir}\"/></sourcefiles></structure><!-- to produce reports in XML formats. --><xmldestfile=\"${result.report.dir}/report.xml\"/></jacoco:report></target> The code snippet will generate the JaCoCo report will be captured to '${result.report.dir}/report.xml'. warningWhen generating the report, please also make sure the source directory is under your configuration workspace directory. Otherwise, QuickBuild will fail to find the source code and will not be able to open the source code later."
      },
      {
        "header": "Publish JaCoCo Reportâ",
        "content": "AddPublish JaCoCo Reportstep to your build workflow. You can category your coverage report by adding multiple steps with different report set name(category name). Referencethis pagefor how to use report set. If the JaCoCo is published successfully, the build overview page will display the summary for your coverage, and JaCoCo report tab will be displayed in your build page like below: below shows the coverage of source code opening from class report or method report:"
      },
      {
        "header": "Configure Coverage Thresholdâ",
        "content": "You may also change the JaCoCo coverage threshold for each configuration. Go to Configuration Settings / Report Settings / JaCoCo Setting: then change to your threshold and configure the color you want."
      },
      {
        "header": "Aggregate JaCoCo Reportâ",
        "content": "Like all other reports, JaCoCo coverage data can be aggregated to current configuration and parent configuration, please refer to this page for how to add aggregation based on your strategy."
      },
      {
        "header": "Trouble Shootingâ",
        "content": "If you can not publish JaCoCo reports correctly, please: Make sure you generate the Cobertura XML files."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Publish+JMeter+Report",
      "https://wiki.pmease.com/display/QB14/Publish+JUnit+Report",
      "https://wiki.pmease.com/display/QB14/Publish+MBUnit+Report",
      "https://wiki.pmease.com/display/QB14/Publish+MSTest+Report",
      "https://wiki.pmease.com/display/QB14/Publish+NCover+Report",
      "https://wiki.pmease.com/display/QB14/Publish+NUnit+Report",
      "https://wiki.pmease.com/display/QB14/Publish+PMD+Report",
      "https://wiki.pmease.com/display/QB14/Publish+TAP+Report",
      "https://wiki.pmease.com/display/QB14/Publish+TestNG+Report",
      "https://wiki.pmease.com/display/QB14/Report+Aggregation",
      "https://wiki.pmease.com/display/QB14/Rebuild+statistics+and+aggregation+data",
      "https://wiki.pmease.com/display/QB14/Publish+Build+Reports",
      "https://wiki.pmease.com/display/QB14/Publish+JMeter+Report"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Publish+JMeter+Report",
    "title": "Publish JMeter Report",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Publish Build Reports"
    ],
    "full_text": "Administrator's Guide\nPublish Build Reports\nPublish JMeter Report\nVersion: QB14\nOn this page\nPublish JMeter Report\nTo publish\nJMeter\nreport, you only need two steps:\nGenerate JMeter\nXML\nreport from\nAnt\nor\nMaven\nor any other build tool.\nAdd JMeter publish step by choosing\nPublish -> JMeter Report\nfrom step menu.\nGenerate JMeter Report\nâ\nQuickBuild will NOT generate\nJMeter\nreport automatically, so first make sure the\nJMeter\nreport is produced by\nANT\nor by any other build tool. The following example shows how to generate JMeter XML report with Ant JMeter task:\nGenerate JMeter Report\n<\nproject\ndefault\n=\n\"\nall\n\"\n>\n<\nproperty\nname\n=\n\"\njmeter-home\n\"\nvalue\n=\n\"\n/your/jmeter/home\n\"\n/>\n<!-- ant-jmeter.jar comes with jmeter, be sure this is the release you have -->\n<\npath\nid\n=\n\"\nant.jmeter.classpath\n\"\n>\n<\npathelement\nlocation\n=\n\"\n${jmeter-home}/extras/ant-jmeter-1.1.1.jar\n\"\n/>\n</\npath\n>\n<\ntaskdef\nname\n=\n\"\njmeter\n\"\nclassname\n=\n\"\norg.programmerplanet.ant.taskdefs.jmeter.JMeterTask\n\"\nclasspathref\n=\n\"\nant.jmeter.classpath\n\"\n/>\n<\ntarget\nname\n=\n\"\nclean\n\"\n>\n<\ndelete\ndir\n=\n\"\nresults\n\"\n/>\n<\ndelete\nfile\n=\n\"\njmeter.log\n\"\n/>\n<\nmkdir\ndir\n=\n\"\nresults/jtl\n\"\n/>\n<\nmkdir\ndir\n=\n\"\nresults/html\n\"\n/>\n</\ntarget\n>\n<\ntarget\nname\n=\n\"\ntest\n\"\ndepends\n=\n\"\nclean\n\"\n>\n<\njmeter\njmeterhome\n=\n\"\n${jmeter-home}\n\"\nresultlogdir\n=\n\"\nresults/jtl\n\"\n>\n<\ntestplans\ndir\n=\n\"\ntest/jmeter\n\"\nincludes\n=\n\"\n*.jmx\n\"\n/>\n<\nproperty\nname\n=\n\"\njmeter.save.saveservice.output_format\n\"\nvalue\n=\n\"\nxml\n\"\n/>\n</\njmeter\n>\n</\ntarget\n>\n<!-- This is not needed for the plugin, but it produces a nice html report\nwhich can be saved usin jenkins's archive artifact feature -->\n<\ntarget\nname\n=\n\"\nreport\n\"\ndepends\n=\n\"\ntest\n\"\n>\n<\nxslt\nbasedir\n=\n\"\nresults/jtl\n\"\ndestdir\n=\n\"\nresults/html\n\"\nincludes\n=\n\"\n*.jtl\n\"\nstyle\n=\n\"\n${jmeter-home}/extras/jmeter-results-detail-report_21.xsl\n\"\n/>\n</\ntarget\n>\n<\ntarget\nname\n=\n\"\nall\n\"\ndepends\n=\n\"\ntest, report\n\"\n/>\n</\nproject\n>\nPublish JMeter Report\nâ\nAdd\nPublish JMeter Report\nstep to your build workflow. You can category your JMeter report by adding multiple steps with different report set name(category name). Reference\nthis page\nfor how to use report set.\nIf the JMeter is published successfully, the build overview page will display the summary for your JMeter requests,\nAggregate JMeter Report\nâ\nLike all other reports, JMeter data can be aggregated to current configuration and parent configuration, please refer to\nReport Aggregation\nfor how to add aggregation based on your strategy.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Publish JMeter Report",
        "content": ""
      },
      {
        "header": "Generate JMeter Reportâ",
        "content": "QuickBuild will NOT generateJMeterreport automatically, so first make sure theJMeterreport is produced byANTor by any other build tool. The following example shows how to generate JMeter XML report with Ant JMeter task:Generate JMeter Report <projectdefault=\"all\"><propertyname=\"jmeter-home\"value=\"/your/jmeter/home\"/><!-- ant-jmeter.jar comes with jmeter, be sure this is the release you have --><pathid=\"ant.jmeter.classpath\"><pathelementlocation=\"${jmeter-home}/extras/ant-jmeter-1.1.1.jar\"/></path><taskdefname=\"jmeter\"classname=\"org.programmerplanet.ant.taskdefs.jmeter.JMeterTask\"classpathref=\"ant.jmeter.classpath\"/><targetname=\"clean\"><deletedir=\"results\"/><deletefile=\"jmeter.log\"/><mkdirdir=\"results/jtl\"/><mkdirdir=\"results/html\"/></target><targetname=\"test\"depends=\"clean\"><jmeterjmeterhome=\"${jmeter-home}\"resultlogdir=\"results/jtl\"><testplansdir=\"test/jmeter\"includes=\"*.jmx\"/><propertyname=\"jmeter.save.saveservice.output_format\"value=\"xml\"/></jmeter></target><!-- This is not needed for the plugin, but it produces a nice html reportwhich can be saved usin jenkins's archive artifact feature --><targetname=\"report\"depends=\"test\"><xsltbasedir=\"results/jtl\"destdir=\"results/html\"includes=\"*.jtl\"style=\"${jmeter-home}/extras/jmeter-results-detail-report_21.xsl\"/></target><targetname=\"all\"depends=\"test, report\"/></project>"
      },
      {
        "header": "Publish JMeter Reportâ",
        "content": "AddPublish JMeter Reportstep to your build workflow. You can category your JMeter report by adding multiple steps with different report set name(category name). Referencethis pagefor how to use report set. If the JMeter is published successfully, the build overview page will display the summary for your JMeter requests,"
      },
      {
        "header": "Aggregate JMeter Reportâ",
        "content": "Like all other reports, JMeter data can be aggregated to current configuration and parent configuration, please refer toReport Aggregationfor how to add aggregation based on your strategy."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Publish+JUnit+Report",
      "https://wiki.pmease.com/display/QB14/Publish+MBUnit+Report",
      "https://wiki.pmease.com/display/QB14/Publish+MSTest+Report",
      "https://wiki.pmease.com/display/QB14/Publish+NCover+Report",
      "https://wiki.pmease.com/display/QB14/Publish+NUnit+Report",
      "https://wiki.pmease.com/display/QB14/Publish+PMD+Report",
      "https://wiki.pmease.com/display/QB14/Publish+TAP+Report",
      "https://wiki.pmease.com/display/QB14/Publish+TestNG+Report",
      "https://wiki.pmease.com/display/QB14/Report+Aggregation",
      "https://wiki.pmease.com/display/QB14/Rebuild+statistics+and+aggregation+data",
      "https://wiki.pmease.com/display/QB14/Publish+Build+Reports",
      "https://wiki.pmease.com/display/QB14/Report+Aggregation",
      "https://wiki.pmease.com/display/QB14/Publish+JUnit+Report"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Publish+JUnit+Report",
    "title": "Publish JUnit Report",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Publish Build Reports"
    ],
    "full_text": "Administrator's Guide\nPublish Build Reports\nPublish JUnit Report\nVersion: QB14\nOn this page\nPublish JUnit Report\nTo publish\nJUnit\nreport, you only need two steps:\nGenerate JUnit\nXML\nreport from\nAnt\nor\nMaven\nor any other build tool.\nAdd a JUnit report publish step by choosing\nPublish -> Junit Report\nin step menu.\nGenerate JUnit Report\nâ\nQuickBuild will NOT generate\nJUnit\nreport automatically, so first make sure the\nJUnit\nreport is produced by\nANT\nor by any other build tool. The following example shows how to generate JUnit test results with\nAnt JUnit task\nand aggregate all the test reports into one by using\nAnt JUnitReport task\n(this is not required):\nJUnit target in build.xml\n<\ntarget\nname\n=\n\"\njunit\n\"\ndepends\n=\n\"\ncompile.test\n\"\n>\n<\nmkdir\ndir\n=\n\"\n${junit.report.dir}\n\"\n/>\n<\nmkdir\ndir\n=\n\"\n${junit.report.dir}/test-out\n\"\n/>\n<\nrecord\nname\n=\n\"\n${junit.report.dir}/test-output.txt\n\"\nappend\n=\n\"\nno\n\"\naction\n=\n\"\nstart\n\"\n/>\n<\njunit\nprintsummary\n=\n\"\nyes\n\"\nhaltonfailure\n=\n\"\nfalse\n\"\nfork\n=\n\"\nyes\n\"\n>\n<\nclasspath\nrefid\n=\n\"\ntest.classpath\n\"\n/>\n<\nformatter\ntype\n=\n\"\nxml\n\"\n/>\n<\nbatchtest\nfork\n=\n\"\nyes\n\"\ntodir\n=\n\"\n${junit.report.dir}/test-out\n\"\n>\n<\nfileset\ndir\n=\n\"\n${test.home}\n\"\n>\n<\ninclude\nname\n=\n\"\n**/*Test.java\n\"\n/>\n<\nexclude\nname\n=\n\"\n**/*AbstractTest.java\n\"\n/>\n</\nfileset\n>\n</\nbatchtest\n>\n</\njunit\n>\n<\njunitreport\ntodir\n=\n\"\n${junit.report.dir}\n\"\n>\n<\nfileset\ndir\n=\n\"\n${junit.report.dir}/test-out\n\"\n>\n<\ninclude\nname\n=\n\"\nTEST-*.xml\n\"\n/>\n</\nfileset\n>\n</\njunitreport\n>\n<\nrecord\nname\n=\n\"\n${junit.report.dir}/test-output.txt\n\"\naction\n=\n\"\nstop\n\"\n/>\n</\ntarget\n>\nThe code snippet will generate the XML reports for each test case, and the reports will be captured to '${junit.report.dir}' directory.\nwarning\nAbout haltonfailure\nIf 'haltonfailure' in junit task is defined to true, the junit reports are not complete. If you want to generate the full reports, set 'haltonfailure' to false.\nPublish JUnit Report\nâ\nAdd\nPublish JUnit Report\nstep to your build workflow. If you have several report sets, you can add several publish JUnit steps with different report set names. Reference\nthis page\nfor more details.\nSupported JUnit-style Report\nâ\nFor those who are willing to output JUnit-style XML report by yourself, below illustrates the format supported in QuickBuild:\nTestcase element\nâ\n<\ntestcase\nclassname\n=\n\"\nxxx\n\"\nname\n=\n\"\nxxx\n\"\ntime\n=\n\"\nxxx\n\"\n>\n<\nerror\ntype\n=\n\"\nxxx\n\"\n>\nsome error message if any\n</\nerror\n>\n<\nfailure\ntype\n=\n\"\nxxx\n\"\n>\nsome failure message if any\n</\nfailure\n>\n<\nskipped\n/>\n<!-- if this test case is skipped -->\n</\ntestcase\n>\nThe system-out and system-err are not generated by JUnit, so you can use them to output the message only for this testcase and QuickBuild can display them. classname should also include package name, QuickBuild only parse the classname attribute to generate the package name. The attribute time is the duration of a test case which should be in milliseconds.\nAll child elements: system-out, system-err, error, failure, skipped are optional. The status of test case depends on one of error, failure or skipped element, if none of them, then the test is passed.\nTestsuite element\nâ\n<\ntestsuite\nclassname\n=\n\"\nxxx\n\"\npackage\n=\n\"\nxxx\n\"\ntests\n=\n\"\nxxx\n\"\ntime\n=\n\"\nxxx\n\"\n>\n<\ntestcase\n...\n>\n</\ntestcase\n>\n...\n<\nignored-testcase\n...\n>\n<!-- test case is ignored -->\n</\nignored-testcase\n>\n<\nsystem-out\n/>\n<\nsystem-err\n/>\n</\ntestsuite\n>\nHere, you may use classname only without package attribute, that is, package name will be parsed from attribute\nclassname=\"com.pmease.quickbuild.DummyTest\nif there is no package attribute presented. tests attribute and time attribute are optional, QuickBuild will accumulate all test cases and their duration automatically.\nThe attribute system-out and system-err are for all test cases in this test suite and will be displayed for all test cases in it.\nIf you have multiple test suites in one report, then a root element <testsuites> should be used, like below:\n<\ntestsuites\n>\n<\ntestsuite\n...\n>\n</\ntestsuite\n>\n... ...\n<\ntestsuite\n...\n>\n</\ntestsuite\n>\n</\ntestsuites\n>\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Publish JUnit Report",
        "content": ""
      },
      {
        "header": "Generate JUnit Reportâ",
        "content": "QuickBuild will NOT generateJUnitreport automatically, so first make sure theJUnitreport is produced byANTor by any other build tool. The following example shows how to generate JUnit test results withAnt JUnit taskand aggregate all the test reports into one by usingAnt JUnitReport task(this is not required):JUnit target in build.xml <targetname=\"junit\"depends=\"compile.test\"><mkdirdir=\"${junit.report.dir}\"/><mkdirdir=\"${junit.report.dir}/test-out\"/><recordname=\"${junit.report.dir}/test-output.txt\"append=\"no\"action=\"start\"/><junitprintsummary=\"yes\"haltonfailure=\"false\"fork=\"yes\"><classpathrefid=\"test.classpath\"/><formattertype=\"xml\"/><batchtestfork=\"yes\"todir=\"${junit.report.dir}/test-out\"><filesetdir=\"${test.home}\"><includename=\"**/*Test.java\"/><excludename=\"**/*AbstractTest.java\"/></fileset></batchtest></junit><junitreporttodir=\"${junit.report.dir}\"><filesetdir=\"${junit.report.dir}/test-out\"><includename=\"TEST-*.xml\"/></fileset></junitreport><recordname=\"${junit.report.dir}/test-output.txt\"action=\"stop\"/></target> The code snippet will generate the XML reports for each test case, and the reports will be captured to '${junit.report.dir}' directory. warningAbout haltonfailureIf 'haltonfailure' in junit task is defined to true, the junit reports are not complete. If you want to generate the full reports, set 'haltonfailure' to false."
      },
      {
        "header": "Publish JUnit Reportâ",
        "content": "AddPublish JUnit Reportstep to your build workflow. If you have several report sets, you can add several publish JUnit steps with different report set names. Referencethis pagefor more details."
      },
      {
        "header": "Supported JUnit-style Reportâ",
        "content": "For those who are willing to output JUnit-style XML report by yourself, below illustrates the format supported in QuickBuild:"
      },
      {
        "header": "Testcase elementâ",
        "content": "<testcaseclassname=\"xxx\"name=\"xxx\"time=\"xxx\"><errortype=\"xxx\">some error message if any</error><failuretype=\"xxx\">some failure message if any</failure><skipped/><!-- if this test case is skipped --></testcase> The system-out and system-err are not generated by JUnit, so you can use them to output the message only for this testcase and QuickBuild can display them. classname should also include package name, QuickBuild only parse the classname attribute to generate the package name. The attribute time is the duration of a test case which should be in milliseconds. All child elements: system-out, system-err, error, failure, skipped are optional. The status of test case depends on one of error, failure or skipped element, if none of them, then the test is passed."
      },
      {
        "header": "Testsuite elementâ",
        "content": "<testsuiteclassname=\"xxx\"package=\"xxx\"tests=\"xxx\"time=\"xxx\"><testcase...></testcase>...<ignored-testcase...><!-- test case is ignored --></ignored-testcase><system-out/><system-err/></testsuite> Here, you may use classname only without package attribute, that is, package name will be parsed from attributeclassname=\"com.pmease.quickbuild.DummyTestif there is no package attribute presented. tests attribute and time attribute are optional, QuickBuild will accumulate all test cases and their duration automatically. The attribute system-out and system-err are for all test cases in this test suite and will be displayed for all test cases in it. If you have multiple test suites in one report, then a root element <testsuites> should be used, like below: <testsuites><testsuite...></testsuite>... ...<testsuite...></testsuite></testsuites>"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Publish+MBUnit+Report",
      "https://wiki.pmease.com/display/QB14/Publish+MSTest+Report",
      "https://wiki.pmease.com/display/QB14/Publish+NCover+Report",
      "https://wiki.pmease.com/display/QB14/Publish+NUnit+Report",
      "https://wiki.pmease.com/display/QB14/Publish+PMD+Report",
      "https://wiki.pmease.com/display/QB14/Publish+TAP+Report",
      "https://wiki.pmease.com/display/QB14/Publish+TestNG+Report",
      "https://wiki.pmease.com/display/QB14/Report+Aggregation",
      "https://wiki.pmease.com/display/QB14/Rebuild+statistics+and+aggregation+data",
      "https://wiki.pmease.com/display/QB14/Publish+Build+Reports",
      "https://wiki.pmease.com/display/QB14/Publish+MBUnit+Report"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Publish+MBUnit+Report",
    "title": "Publish MBUnit Report",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Publish Build Reports"
    ],
    "full_text": "Administrator's Guide\nPublish Build Reports\nPublish MBUnit Report\nVersion: QB14\nOn this page\nPublish MBUnit Report\nMbUnit\nis an advanced, extensible unit testing framework originally developed by Jonathon 'Peli' de Halleux and Jamie Cansdale. It is a free and open source unit testing tool for the .NET Framework. To publish the MBUnit reports to QuickBuild, first, the XML reports should be generated by\nnant\nor by msbuild which is freely available as part of the .NET 2.0 Framework.\nGenerate MBUnit Reports\nâ\nThe following code snippet is an example from\nMBUnit\nwhich will generate the XML test reports by NAnt:\n<\nproject\ndefault\n=\n\"tests\"\n>\n<\ntarget name\n=\n\"tests\"\n>\n<\nmbunit\nreport\n-\ntypes\n=\n\"xml\"\nreport\n-\nfilename\n-\nformat\n=\n\"myreport{0}{1}\"\nreport\n-\noutput\n-\ndirectory\n=\n\".\"\nhalt\n-\non\n-\nfailure\n=\n\"true\"\n>\n<\nassemblies\n>\n<\ninclude name\n=\n\"FizzBuzzTests.dll\"\n/\n>\n<\n/\nassemblies\n>\n<\n/\nmbunit\n>\n<\n/\ntarget\n>\n<\n/\nproject\n>\nMore detailed information please refer to the\ndocumentation of MBUnit\n.\nAdd MBUnit Report Publish Step\nâ\nAdd\nPublish MBUnit Report\nstep to your build workflow. If you have several report sets, you can add several steps with different report set names. Reference\nthis page\nfor more details.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Publish MBUnit Report",
        "content": ""
      },
      {
        "header": "Generate MBUnit Reportsâ",
        "content": "The following code snippet is an example fromMBUnitwhich will generate the XML test reports by NAnt: <projectdefault=\"tests\"><target name=\"tests\"><mbunitreport-types=\"xml\"report-filename-format=\"myreport{0}{1}\"report-output-directory=\".\"halt-on-failure=\"true\"><assemblies><include name=\"FizzBuzzTests.dll\"/></assemblies></mbunit></target></project> More detailed information please refer to thedocumentation of MBUnit."
      },
      {
        "header": "Add MBUnit Report Publish Stepâ",
        "content": "AddPublish MBUnit Reportstep to your build workflow. If you have several report sets, you can add several steps with different report set names. Referencethis pagefor more details."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Publish+MSTest+Report",
      "https://wiki.pmease.com/display/QB14/Publish+NCover+Report",
      "https://wiki.pmease.com/display/QB14/Publish+NUnit+Report",
      "https://wiki.pmease.com/display/QB14/Publish+PMD+Report",
      "https://wiki.pmease.com/display/QB14/Publish+TAP+Report",
      "https://wiki.pmease.com/display/QB14/Publish+TestNG+Report",
      "https://wiki.pmease.com/display/QB14/Report+Aggregation",
      "https://wiki.pmease.com/display/QB14/Rebuild+statistics+and+aggregation+data",
      "https://wiki.pmease.com/display/QB14/Publish+Build+Reports",
      "https://wiki.pmease.com/display/QB14/Publish+MSTest+Report"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Publish+MSTest+Report",
    "title": "Publish MSTest Report",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Publish Build Reports"
    ],
    "full_text": "Administrator's Guide\nPublish Build Reports\nPublish MSTest Report\nVersion: QB14\nOn this page\nPublish MSTest Report\nTo publish MSTest report, the following two steps are required:\nGenerate MSTest TRX test report by running\nmstest command\nor by MSBuild, NAnt etc.\nAdd MSTest report publish step by choosing\nPublish -> Publish MSTest Report\nfrom step menu.\nGenerate MSTest Report\nâ\nYou may generate MSTest report by running\nmstest.exe\nfrom command line or by MSBuild task. The result of MSTest should be TRX test report.\nwarning\nIn this version, QuickBuild will not parse the MSTest coverage result.\nPublish MSTest Report\nâ\nAdd\nPublish MSTest Report\nstep to your build workflow. If you have several report sets, you can add several steps with different report set names. Reference\nthis page\nfor more details.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Publish MSTest Report",
        "content": ""
      },
      {
        "header": "Generate MSTest Reportâ",
        "content": "You may generate MSTest report by runningmstest.exefrom command line or by MSBuild task. The result of MSTest should be TRX test report. warningIn this version, QuickBuild will not parse the MSTest coverage result."
      },
      {
        "header": "Publish MSTest Reportâ",
        "content": "AddPublish MSTest Reportstep to your build workflow. If you have several report sets, you can add several steps with different report set names. Referencethis pagefor more details."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Publish+NCover+Report",
      "https://wiki.pmease.com/display/QB14/Publish+NUnit+Report",
      "https://wiki.pmease.com/display/QB14/Publish+PMD+Report",
      "https://wiki.pmease.com/display/QB14/Publish+TAP+Report",
      "https://wiki.pmease.com/display/QB14/Publish+TestNG+Report",
      "https://wiki.pmease.com/display/QB14/Report+Aggregation",
      "https://wiki.pmease.com/display/QB14/Rebuild+statistics+and+aggregation+data",
      "https://wiki.pmease.com/display/QB14/Publish+Build+Reports",
      "https://wiki.pmease.com/display/QB14/Publish+NCover+Report"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Publish+NCover+Report",
    "title": "Publish NCover Report",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Publish Build Reports"
    ],
    "full_text": "Administrator's Guide\nPublish Build Reports\nPublish NCover Report\nVersion: QB14\nOn this page\nPublish NCover Report\nTo publish NCover reports, you need:\nGenerate NCover\nSymbolModuleNamespaceClassMethod\nXML reports by using\nNCover\n.\nAdd a Publish NCover Reports step in your configuration steps.\nAfter doing this, QuickBuild will generate the NCover reports automatically.\nwarning\nQuickBuild only parses the XML reports.\nNCover version should be 3.0+\nThe NCover report type should be SymbolModuleNamespaceClassMethod\nGenerate NCover XML Reports\nâ\nThe NCover SymbolModuleNamespaceClassMethod XML reports can be generated from NCover command tool or msbuild or nant. Below we are using msbuild to generate the coverage report:\n<\nUsingTask\nTaskName\n=\n\"NCover.MSBuildTasks.NCover\"\nAssemblyFile\n=\n\"C:\\Program Files\\NCover\\Build Task Plugins\\NCover.MSBuildTasks.dll\"\n/\n>\n<\nUsingTask\nTaskName\n=\n\"NCover.MSBuildTasks.NCoverReporting\"\nAssemblyFile\n=\n\"C:\\Program Files\\NCover\\Build Task Plugins\\NCover.MSBuildTasks.dll\"\n/\n>\n<\nTarget\nName\n=\n\"Coverage\"\n>\n<\nNCover\nToolPath\n=\n\"\nC\n:\n\\\nProgram\nFiles\n\\\nNCover\n\\\"\nTestRunnerExe\n=\n\"$(NUnitPath)\\nunit-console.exe\"\nTestRunnerArgs\n=\n\"TestAssembly1.dll TestRunner2.dll\"\nCoverageFile\n=\n\"Coverage.xml\"\n/\n>\n<\n/\nTarget\n>\n<\nPropertyGroup\n>\n<\nReports\n>\n<\nReport\n>\n<\nReportType\n>\nSymbolModuleNamespaceClassMethod\n<\n/\nReportType\n>\n<\nFormat\n>\nXml\n<\n/\nFormat\n>\n<\nOutputPath\n>\n$\n(\noutputDir\n)\n\\smncm\n.\nxml\n<\n/\nOutputPath\n>\n<\n/\nReport\n>\n<\n/\nReports\n>\n<\n/\nPropertyGroup\n>\n<\nTarget\nName\n=\n\"CreateCoverageReports\"\n>\n<\nNCoverReporting\nToolPath\n=\n\"\nC\n:\n\\\nProgram\nFiles\n\\\nNCover\n\\\"\nCoverageDataPaths\n=\n\"Coverage.xml\"\nOutputReport\n=\n\"$(Reports)\"\n/\n>\n<\n/\nTarget\n>\nNCover 4\nâ\nFor NCover 4+, you need export your coverage data in v3 XML format, please refer to below page:\nNCover Export\nPublish NCover Reports\nâ\nAdd\nPublish NCover Report\nstep to your build workflow. If you have several report sets, you can add several steps with different report set names. Reference\nthis page\nfor more details.\ninfo\nEspecially thanks for the help from\nNCover developer team\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Publish NCover Report",
        "content": ""
      },
      {
        "header": "Generate NCover XML Reportsâ",
        "content": "The NCover SymbolModuleNamespaceClassMethod XML reports can be generated from NCover command tool or msbuild or nant. Below we are using msbuild to generate the coverage report: <UsingTaskTaskName=\"NCover.MSBuildTasks.NCover\"AssemblyFile=\"C:\\Program Files\\NCover\\Build Task Plugins\\NCover.MSBuildTasks.dll\"/><UsingTaskTaskName=\"NCover.MSBuildTasks.NCoverReporting\"AssemblyFile=\"C:\\Program Files\\NCover\\Build Task Plugins\\NCover.MSBuildTasks.dll\"/><TargetName=\"Coverage\"><NCoverToolPath=\"C:\\ProgramFiles\\NCover\\\"TestRunnerExe=\"$(NUnitPath)\\nunit-console.exe\"TestRunnerArgs=\"TestAssembly1.dll TestRunner2.dll\"CoverageFile=\"Coverage.xml\"/></Target><PropertyGroup><Reports><Report><ReportType>SymbolModuleNamespaceClassMethod</ReportType><Format>Xml</Format><OutputPath>$(outputDir)\\smncm.xml</OutputPath></Report></Reports></PropertyGroup><TargetName=\"CreateCoverageReports\"><NCoverReportingToolPath=\"C:\\ProgramFiles\\NCover\\\"CoverageDataPaths=\"Coverage.xml\"OutputReport=\"$(Reports)\"/></Target>"
      },
      {
        "header": "NCover 4â",
        "content": "For NCover 4+, you need export your coverage data in v3 XML format, please refer to below page:NCover Export"
      },
      {
        "header": "Publish NCover Reportsâ",
        "content": "AddPublish NCover Reportstep to your build workflow. If you have several report sets, you can add several steps with different report set names. Referencethis pagefor more details. infoEspecially thanks for the help fromNCover developer team"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Publish+NUnit+Report",
      "https://wiki.pmease.com/display/QB14/Publish+PMD+Report",
      "https://wiki.pmease.com/display/QB14/Publish+TAP+Report",
      "https://wiki.pmease.com/display/QB14/Publish+TestNG+Report",
      "https://wiki.pmease.com/display/QB14/Report+Aggregation",
      "https://wiki.pmease.com/display/QB14/Rebuild+statistics+and+aggregation+data",
      "https://wiki.pmease.com/display/QB14/Publish+Build+Reports",
      "https://wiki.pmease.com/display/QB14/Publish+NUnit+Report"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Publish+NUnit+Report",
    "title": "Publish NUnit Report",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Publish Build Reports"
    ],
    "full_text": "Administrator's Guide\nPublish Build Reports\nPublish NUnit Report\nVersion: QB14\nOn this page\nPublish NUnit Report\nTo publish\nNUnit\nreport, you only need two steps:\nGenerate NUnit\nXML\nreport from\nNAnt\nor any other build tool.\nAdd NUnit report publish step by choosing\nPublish -> NUnit Report\nfrom step menu.\nGenerate NUnit Report\nâ\nQuickBuild will NOT generate\nNUnit\nreport automatically, so first make sure the NUnit report is produced by\nNANT\nor by any other build tool. The following example shows how to generate NUnit XML report with\nNAnt task\n:\nNUnit target in build.xml\n<\ntarget\nname\n=\n\"\nrunUnitTests\n\"\ndescription\n=\n\"\nRuns unit tests on specified dlls\n\"\n>\n<\necho\nmessage\n=\n\"\nBefore running tests\n\"\n/>\n<\nnunit2\nfailonerror\n=\n\"\nfalse\n\"\nverbose\n=\n\"\nfalse\n\"\n>\n<\nformatter\noutputdir\n=\n\"\n${nant.project.basedir}\n\"\nusefile\n=\n\"\ntrue\n\"\ntype\n=\n\"\nXml\n\"\nextension\n=\n\"\n.xml\n\"\n/>\n<\ntest\nassemblyname\n=\n\"\n${compile.dir}\\foo.bar.dll\n\"\nappconfig\n=\n\"\n${compile.dir}\\foo.bar.dll.config\n\"\n/>\n</\nnunit2\n>\n</\ntarget\n>\nAfter adding the target, you can generate the NUnit report for your source code, and then you can tell QuickBuild to publish the results.\nPublish NUnit Report\nâ\nAdd\nPublish NUnit Report\nstep to your build workflow. If you have several report sets, you can add several steps with different report set names. Reference\nthis page\nfor more details.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Publish NUnit Report",
        "content": ""
      },
      {
        "header": "Generate NUnit Reportâ",
        "content": "QuickBuild will NOT generateNUnitreport automatically, so first make sure the NUnit report is produced byNANTor by any other build tool. The following example shows how to generate NUnit XML report withNAnt task:NUnit target in build.xml <targetname=\"runUnitTests\"description=\"Runs unit tests on specified dlls\"><echomessage=\"Before running tests\"/><nunit2failonerror=\"false\"verbose=\"false\"><formatteroutputdir=\"${nant.project.basedir}\"usefile=\"true\"type=\"Xml\"extension=\".xml\"/><testassemblyname=\"${compile.dir}\\foo.bar.dll\"appconfig=\"${compile.dir}\\foo.bar.dll.config\"/></nunit2></target> After adding the target, you can generate the NUnit report for your source code, and then you can tell QuickBuild to publish the results."
      },
      {
        "header": "Publish NUnit Reportâ",
        "content": "AddPublish NUnit Reportstep to your build workflow. If you have several report sets, you can add several steps with different report set names. Referencethis pagefor more details."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Publish+PMD+Report",
      "https://wiki.pmease.com/display/QB14/Publish+TAP+Report",
      "https://wiki.pmease.com/display/QB14/Publish+TestNG+Report",
      "https://wiki.pmease.com/display/QB14/Report+Aggregation",
      "https://wiki.pmease.com/display/QB14/Rebuild+statistics+and+aggregation+data",
      "https://wiki.pmease.com/display/QB14/Publish+Build+Reports",
      "https://wiki.pmease.com/display/QB14/Publish+PMD+Report"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Publish+PMD+Report",
    "title": "Publish PMD Report",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Publish Build Reports"
    ],
    "full_text": "Administrator's Guide\nPublish Build Reports\nPublish PMD Report\nVersion: QB14\nOn this page\nPublish PMD Report\nTo publish\nPMD\nreport, you only need two steps:\nGenerate PMD\nXML\nreport from\nAnt\nor\nMaven\nor any other build tool.\nAdd PMD report publish step by choosing\nPublish -> PMD Report\nfrom step menu.\nGenerate PMD Report\nâ\nQuickBuild will NOT generate\nPMD\nreport automatically, so first make sure the PMD report is produced by\nANT\nor by any other build tool. The following example shows how to generate PMD XML report with\nPMD Ant task\n:\nCheckStyle target in build.xml\n<\ntaskdef\nname\n=\n\"\npmd\n\"\nclassname\n=\n\"\nnet.sourceforge.pmd.ant.PMDTask\n\"\n/>\n<\ntarget\nname\n=\n\"\npmd\n\"\n>\n<\ntaskdef\nname\n=\n\"\npmd\n\"\nclassname\n=\n\"\nnet.sourceforge.pmd.ant.PMDTask\n\"\n/>\n<\npmd\nrulesetfiles\n=\n\"\nimports.xml,unusedcode\n\"\n>\n<\nformatter\ntype\n=\n\"\nxml\n\"\ntoFile\n=\n\"\nc:\\pmd_report.xml\n\"\n/>\n<\nfileset\ndir\n=\n\"\nC:\\j2sdk1.4.1_01\\src\\java\\lang\\\n\"\n>\n<\ninclude\nname\n=\n\"\n**/*.java\n\"\n/>\n</\nfileset\n>\n</\npmd\n>\n</\ntarget\n>\nwarning\n\"Be Careful\"\nPlease don't use 'shortFileNames' attribute for PMD task, or set this attribute to false instead, otherwise QuickBuild will not open the source code correctly.\nAfter adding the target, you can generate the XML report for your source code, and after that you can tell QuickBuild to publish the results.\nPublish PMD Report\nâ\nAdd\nPublish PMD Report\nstep to your build workflow. If you have several report sets, you can add several steps with different report set names. Reference\nthis page\nfor more details.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Publish PMD Report",
        "content": ""
      },
      {
        "header": "Generate PMD Reportâ",
        "content": "QuickBuild will NOT generatePMDreport automatically, so first make sure the PMD report is produced byANTor by any other build tool. The following example shows how to generate PMD XML report withPMD Ant task:CheckStyle target in build.xml <taskdefname=\"pmd\"classname=\"net.sourceforge.pmd.ant.PMDTask\"/><targetname=\"pmd\"><taskdefname=\"pmd\"classname=\"net.sourceforge.pmd.ant.PMDTask\"/><pmdrulesetfiles=\"imports.xml,unusedcode\"><formattertype=\"xml\"toFile=\"c:\\pmd_report.xml\"/><filesetdir=\"C:\\j2sdk1.4.1_01\\src\\java\\lang\\\"><includename=\"**/*.java\"/></fileset></pmd></target> warning\"Be Careful\"Please don't use 'shortFileNames' attribute for PMD task, or set this attribute to false instead, otherwise QuickBuild will not open the source code correctly. After adding the target, you can generate the XML report for your source code, and after that you can tell QuickBuild to publish the results."
      },
      {
        "header": "Publish PMD Reportâ",
        "content": "AddPublish PMD Reportstep to your build workflow. If you have several report sets, you can add several steps with different report set names. Referencethis pagefor more details."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Publish+TAP+Report",
      "https://wiki.pmease.com/display/QB14/Publish+TestNG+Report",
      "https://wiki.pmease.com/display/QB14/Report+Aggregation",
      "https://wiki.pmease.com/display/QB14/Rebuild+statistics+and+aggregation+data",
      "https://wiki.pmease.com/display/QB14/Publish+Build+Reports",
      "https://wiki.pmease.com/display/QB14/Publish+TAP+Report"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Publish+TAP+Report",
    "title": "Publish TAP Report",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Publish Build Reports"
    ],
    "full_text": "Administrator's Guide\nPublish Build Reports\nPublish TAP Report\nVersion: QB14\nPublish TAP Report\nTAP, the Test Anything Protocol, is a text-based interface between testing modules in a test harness. See more details in its website below:\nhttps://testanything.org/\nSince QuickBuild 6.0.9, TAP report can be published as other test reports. To publish TAP report, you need generate TAP reports first. Below is a TAP test stream copied from TAP website:\n1.\n.4\nok\n1\n-\nInput\nfile opened\nnot ok\n2\n-\nFirst\nline of the input valid\nok\n3\n-\nRead\nthe rest of the file\nnot ok\n4\n-\nSummarized\ncorrectly #\nTODO\nNot\nwritten yet\nIf the TAP is published successfully, QuickBuild can show you tests information like below:\nQuickBuild will use your TAP file name as test set name automatically and then calculate the total tests, failed, passed for you, below image as an example:\nTAP report by default has no duration information, but some test tool will add duration information in the diagnostic data like below:\nnot ok\n2\n-\nFirst\nline of the input valid\n--\n-\nduration_ms\n:\n123.456\nmessage\n:\n\"Board layout\"\nseverity\n:\ncomment\n.\n.\n.\nIf you need duration information, you need add\nduration_ms\nin your diagnostic data.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Publish TAP Report",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Publish+TestNG+Report",
      "https://wiki.pmease.com/display/QB14/Report+Aggregation",
      "https://wiki.pmease.com/display/QB14/Rebuild+statistics+and+aggregation+data",
      "https://wiki.pmease.com/display/QB14/Publish+TestNG+Report"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Publish+TestNG+Report",
    "title": "Publish TestNG Report",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Publish Build Reports"
    ],
    "full_text": "Administrator's Guide\nPublish Build Reports\nPublish TestNG Report\nVersion: QB14\nOn this page\nPublish TestNG Report\nTo publish\nTestNG\nreport, you only need two steps:\nGenerate TestNG\nXML\nreport (the TestNG also supports generate JUnit style report) from\nAnt\nor\nMaven\nor any other build tool.\nAdd TestNG report publish steps by choosing step\nPublish -> TestNG Report\nfrom step menu.\nGenerate TestNG Report\nâ\nQuickBuild will NOT generate\nTestNG\nreports automatically, so first make sure the\nTestNG\nreport is produced by\nANT\nor by any other build tool. The following example shows how to generate TestNG test results with\nAnt TestNG task\n:\nJUnit target in build.xml\n<\ntestng\nclasspathref\n=\n\"\nrun.cp\n\"\noutputDir\n=\n\"\n${testng.report.dir}\n\"\nsourcedir\n=\n\"\n${test.src.dir}\n\"\nhaltOnfailure\n=\n\"\nfalse\n\"\n>\n<\nxmlfileset\ndir\n=\n\"\n${test14.dir}\n\"\nincludes\n=\n\"\ntestng.xml\n\"\n/>\n</\ntestng\n>\nBy default, TestNG will create both XML and HTML reports. You can customize the report listener for TestNG to generate the reports, the detailed information can be referred to\nTestNG webiste\n.\nwarning\nAbout haltOnfailure\nIf 'haltOnfailure' in testng task is defined to true, the TestNG reports are not complete. If you want to generate the full reports, set 'haltOnfailure' to false.\nPublish TestNG Report\nâ\nAdd\nPublish TestNG Report\nstep to your build workflow. If you have several report sets, you can add several steps with different report set names. Reference\nthis page\nfor more details.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Publish TestNG Report",
        "content": ""
      },
      {
        "header": "Generate TestNG Reportâ",
        "content": "QuickBuild will NOT generateTestNGreports automatically, so first make sure theTestNGreport is produced byANTor by any other build tool. The following example shows how to generate TestNG test results withAnt TestNG task:JUnit target in build.xml <testngclasspathref=\"run.cp\"outputDir=\"${testng.report.dir}\"sourcedir=\"${test.src.dir}\"haltOnfailure=\"false\"><xmlfilesetdir=\"${test14.dir}\"includes=\"testng.xml\"/></testng> By default, TestNG will create both XML and HTML reports. You can customize the report listener for TestNG to generate the reports, the detailed information can be referred toTestNG webiste. warningAbout haltOnfailureIf 'haltOnfailure' in testng task is defined to true, the TestNG reports are not complete. If you want to generate the full reports, set 'haltOnfailure' to false."
      },
      {
        "header": "Publish TestNG Reportâ",
        "content": "AddPublish TestNG Reportstep to your build workflow. If you have several report sets, you can add several steps with different report set names. Referencethis pagefor more details."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Report+Aggregation",
      "https://wiki.pmease.com/display/QB14/Rebuild+statistics+and+aggregation+data",
      "https://wiki.pmease.com/display/QB14/Publish+Build+Reports"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Report+Aggregation",
    "title": "Report Aggregation",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Publish Build Reports"
    ],
    "full_text": "Administrator's Guide\nPublish Build Reports\nReport Aggregation\nVersion: QB14\nOn this page\nReport Aggregation\nWhat is report aggregation\nâ\nReport aggregation is designed to provide quick insight of build metrics of descendant configurations from the parent configuration. For example you may define a JUnit aggregation in root configuration to display the overall test number, success rate and test duration for all configurations in the system. The statistics page of root configuration will also include aggregation statistics to display aggregated metrics over time. Metrics will be aggregated when build runs, so you will not see aggregated metrics immediately after aggregation definition.\nDefine aggregations\nâ\nAggregations can be defined in configuration setting page like below:\nThe report set field tells QuickBuild which report sets to aggregate. If left empty, QuickBuild will aggregate all available report sets.\nAggregations defined in high level configurations will be inherited by low level configurations. This makes aggregation at different levels much easier. Taking below hierarchy for example:\nWe can define three JUnit aggregations at root configuration to aggregate JUnit metrics from DEV, QA and RELEASE configurations respectively. After building of all configurations, overview page of the root configuration will display three aggregation result shown as below:\nThe\nRelease JUnit Summary\ntable displays JUnit summaries from all release configurations in the system, and the same applies for\nQA JUnit Summary\nand\nDev JUnit Summary\n.\nIf switch to overview page of\nProject A\n, it also has three JUnit summaries. However instead of summarizing the RELEASE/QA/DEV configurations of the whole system, these summaries are aggregated from RELEASE/QA/DEV configurations under the\nProject A\nconfiguration. The reason is that\nProject A\ninherits aggregations from root configuration. Taking Release aggregation for instance, it declares to aggregate metrics from all child release configurations. In root configuration, this means to aggregate from all release configurations in the system, but in\nProject A\n, this means to aggregate from all release configurations under\nProject A\n.\nAdditionally, statistics page of relevant configurations will display the aggregated metrics over time, grouped by day, week, or month.\nAdd aggregation gadget\nâ\nYou may also add the aggregation gadgets to the user dashboard to know the aggregated build metrics at first glance.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Report Aggregation",
        "content": ""
      },
      {
        "header": "What is report aggregationâ",
        "content": "Report aggregation is designed to provide quick insight of build metrics of descendant configurations from the parent configuration. For example you may define a JUnit aggregation in root configuration to display the overall test number, success rate and test duration for all configurations in the system. The statistics page of root configuration will also include aggregation statistics to display aggregated metrics over time. Metrics will be aggregated when build runs, so you will not see aggregated metrics immediately after aggregation definition."
      },
      {
        "header": "Define aggregationsâ",
        "content": "Aggregations can be defined in configuration setting page like below: The report set field tells QuickBuild which report sets to aggregate. If left empty, QuickBuild will aggregate all available report sets. Aggregations defined in high level configurations will be inherited by low level configurations. This makes aggregation at different levels much easier. Taking below hierarchy for example: We can define three JUnit aggregations at root configuration to aggregate JUnit metrics from DEV, QA and RELEASE configurations respectively. After building of all configurations, overview page of the root configuration will display three aggregation result shown as below: TheRelease JUnit Summarytable displays JUnit summaries from all release configurations in the system, and the same applies forQA JUnit SummaryandDev JUnit Summary. If switch to overview page ofProject A, it also has three JUnit summaries. However instead of summarizing the RELEASE/QA/DEV configurations of the whole system, these summaries are aggregated from RELEASE/QA/DEV configurations under theProject Aconfiguration. The reason is thatProject Ainherits aggregations from root configuration. Taking Release aggregation for instance, it declares to aggregate metrics from all child release configurations. In root configuration, this means to aggregate from all release configurations in the system, but inProject A, this means to aggregate from all release configurations underProject A. Additionally, statistics page of relevant configurations will display the aggregated metrics over time, grouped by day, week, or month."
      },
      {
        "header": "Add aggregation gadgetâ",
        "content": "You may also add the aggregation gadgets to the user dashboard to know the aggregated build metrics at first glance."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Rebuild+statistics+and+aggregation+data",
      "https://wiki.pmease.com/display/QB14/Rebuild+statistics+and+aggregation+data"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Rebuild+statistics+and+aggregation+data",
    "title": "Rebuild statistics and aggregation data",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Publish Build Reports"
    ],
    "full_text": "Administrator's Guide\nPublish Build Reports\nRebuild statistics and aggregation data\nVersion: QB14\nRebuild statistics and aggregation data\nSometimes, the statistics data and aggregation data don't seem to be synced after you delete some builds. Then, you can rebuild the statistics data and/or aggregation data.\nFirst, you will need create a new configuration, and in this configuration, you can add a step like below:\nthen, choose the configuration and the report/s you want to rebuild like below:\nOK, now, trigger a build, the statistics data will be rebuilt.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Rebuild statistics and aggregation data",
        "content": ""
      }
    ],
    "links": []
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Configuration+Visibility+and+Permissions",
    "title": "Configuration Visibility and Permissions",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Security Management"
    ],
    "full_text": "Administrator's Guide\nSecurity Management\nConfiguration Visibility and Permissions\nVersion: QB14\nConfiguration Visibility and Permissions\nQuickBuild organizes configurations into a hierarchy tree. You can selectively expose portions of the tree to certain group of users by adding authorizations for certain configurations when defining related groups. Let's assume a full configuration tree like below:\nNow you want that developers can only access the subtree under\nroot/componentA\n. To do this, you define a developer group, add an authorization for configuration\nroot/componentA\n, and specify proper permissions. When logged in as developer, the resulting dashboard will look like this:\nAs you can see, the authorization entry for\nroot/componentA\nexposes corresponding subtree to members of the group. If multiple authorization entries exist for the group, the resulting visible subtree will be a union of all subtrees rooted at each authorized configuration. Subtree union also applies when a user is a member of multiple groups.\nWhen determining permissions for a particular configuration, QuickBuild will look for the nearest ancestor configuration that is authorized in the group, and uses the corresponding permissions. For example, if authorizations of the developer group is defined as:\nDevelopers will only have\nRUN_BUILD\npermission for configuration\nroot/componentA/2.0/QA\nas the authorization entry\nroot/componentA/2.0\nis the nearest ancestor.\nWhen a user is member of multiple groups, configuration permissions consist of the union of permissions that are calculated separately for each group using algorithm described above. For example, if the user\nmadaha\nis also a member of group\ntester\nbesides being member of\ndeveloper\ngroup mentioned above, and the\ntester\ngroup has following authorizations:\nUser\nmadaha\nwill have permission\nRUN_BUILD\nand\nPROMOTE_BUILD\nfor configuration\nroot/componentA/2.0/QA\nas the permissions derived from\ndeveloper\ngroup is\nRUN_BUILD\n, and the permissions derived from\ntester\ngroup is\nRUN_BUILDS\nand\nPROMOTE_BUILD\n. The union of these two sets of permissions will be\nRUN_BUILD, PROMOTE_BUILD\n.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Configuration Visibility and Permissions",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/category/Single+Sign+On",
      "https://wiki.pmease.com/display/QB14/Listen+to+specified+IP+address",
      "https://wiki.pmease.com/display/QB14/Protect+QuickBuild+using+SSL",
      "https://wiki.pmease.com/display/QB14/User+and+Group+Management",
      "https://wiki.pmease.com/display/QB14/Manage+Permission+Sets",
      "https://wiki.pmease.com/display/QB14/Enable+Anonymous+Access+and+Self+Registering",
      "https://wiki.pmease.com/display/QB14/Authenticate+with+Active+Directory+and+LDAP",
      "https://wiki.pmease.com/display/QB14/Other+permissions",
      "https://wiki.pmease.com/display/QB14/User+and+Group+Management",
      "https://wiki.pmease.com/display/QB14/Manage+Permission+Sets"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/One+Build+For+One+Agent",
    "title": "One Build For One Agent",
    "breadcrumb": [
      "",
      "Build Setup Tutorials",
      "Resource Management"
    ],
    "full_text": "Build Setup Tutorials\nResource Management\nOne Build For One Agent\nVersion: QB14\nOn this page\nOne Build For One Agent\nSituation\nâ\nSet up the build so that one agent runs only one build at a time. If all agents are occupied, the build should be waiting.\nDemonstration\nâ\nCheck\ngrid tab\non the demo site, and there are two agents available.\nVisit\nthe control project\n, and hit the run button to trigger all its children (project1, project2 and project3) concurrently.\nCheck the\nqueue tab\n. Only two child builds will be running, each occupying one agent. The waiting child build will start to run when one of the running child builds finishes.\nResolution\nâ\nSwitch to\nresources tab\nand a resource named \"Agent\" is defined with each agent providing one resource.\nCheck master step definition of\nchild project1\n,\nchild project2\n, and\nchild project3\n. They all set to run on node with resource\nAgent\n. If resource requirement of the master step is not satisfied, the build itself will be put into waiting state.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "One Build For One Agent",
        "content": ""
      },
      {
        "header": "Situationâ",
        "content": "Set up the build so that one agent runs only one build at a time. If all agents are occupied, the build should be waiting."
      },
      {
        "header": "Demonstrationâ",
        "content": "Checkgrid tabon the demo site, and there are two agents available.Visitthe control project, and hit the run button to trigger all its children (project1, project2 and project3) concurrently.Check thequeue tab. Only two child builds will be running, each occupying one agent. The waiting child build will start to run when one of the running child builds finishes."
      },
      {
        "header": "Resolutionâ",
        "content": "Switch toresources taband a resource named \"Agent\" is defined with each agent providing one resource.Check master step definition ofchild project1,child project2, andchild project3. They all set to run on node with resourceAgent. If resource requirement of the master step is not satisfied, the build itself will be put into waiting state."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Exclusive+Deployment",
      "https://wiki.pmease.com/display/QB14/Exclusive+Deployment"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Launch+Node+in+GCP",
    "title": "Launch Node in GCP",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Working with Cloud Profiles"
    ],
    "full_text": "Administrator's Guide\nWorking with Cloud Profiles\nLaunch Node in GCP\nVersion: QB14\nOn this page\nLaunch Node in GCP\nGCP cloud profile\nâ\nCloud profiles rely on cloud providers to do its job. QuickBuild 12.0 ships with the GCP cloud provider. To use it, one has to enable the GCP plugin by providing a json file containing private key of a GCP service account in\nAdministration/Plugin Management\npage as demonstrated below:\nThe GCP service account should have permission to launch/access/delete compute instances in particular GCP projects. Check\nhere\non how to create service account and\nhere\non how to obtain json file containing private key of the service account\nAlso make sure to\nenable GCP compute engine API\nThen one can follow the\ncloud profiles\nguide to create cloud profiles using GCP launchers like below:\n{#LaunchNodeinGCP-createbuildagentinstancetemplate}\nCreate build agent instance template\nâ\nAn instance template is required to set up GCP cloud profile. This instance template should be pre-configured with your build environment as well as QuickBuild build agent. To create an instance template able to be used by GCP cloud profile, please do the following:\nManually launch a compute instance of desired platform using your GCP account, and install Java Runtime Environment version 8 or higher on the launched instance. You may also want to install other software required by your build to this instance.\nDownload QuickBuild build agent package from Grid page, and upload it to launched instance above.\nLogin to the compute instance and extract build agent package to your chosen agent installation directory.\nEdit file\n<agent install dir>/conf/wrapper.conf\nto define property\nwrapper.java.command\nto point to java binary if it is not in system path.\nEdit file\n<agent install dir>/conf/node.properties\nto configure QuickBuild server URL. You may also run\n<agent install dir>/bin/config.(bat|sh)\nto config node properties such as SSL setting. However this program requires GUI terminal, and if your console does not have that facility, you may run this program at your desktop to populate the node.properties, then transfer this file to launched instance.\nEdit file\n<agent install dir>/conf/attributes.properties\nto define necessary user attributes for the build agent.\nFor Unix instances, edit file\n<agent install dir>/bin/agent.sh\nto uncomment below line and assign an OS user to run the agent in service mode.\n#\nRUN_AS_USER\n=\nThe service user should own the agent installation directory.\nRun\n<agent install dir>/bin/agent.(sh|bat) install\nto install agent as system service.\nConfigure GCP firewall of the network associated with the launched instance to allow incoming connections to agent port.\nRestart launched node. After the system comes up, the build agent should be started automatically and will contact QuickBuild server to download necessary plugins. You may check file\n<agent install dir>/logs/console.log\nfor the progress and possible errors.\nIf agent starts up normally, you should be able to see this agent appears at\nunauthorized nodes\nlist at grid page. Authorize the node and wait for a while to see if it can come active.\nIf the agent comes active, stop the compute instance, and create a storage image from the instance disk.\nCreate an instance template using the storage image, and specify desired machine type and disk type.\nYou can define multiple instance templates for multiple cloud profiles to satisfy different build requirements.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Launch Node in GCP",
        "content": ""
      },
      {
        "header": "GCP cloud profileâ",
        "content": "Cloud profiles rely on cloud providers to do its job. QuickBuild 12.0 ships with the GCP cloud provider. To use it, one has to enable the GCP plugin by providing a json file containing private key of a GCP service account inAdministration/Plugin Managementpage as demonstrated below: The GCP service account should have permission to launch/access/delete compute instances in particular GCP projects. Checkhereon how to create service account andhereon how to obtain json file containing private key of the service account Also make sure toenable GCP compute engine API Then one can follow thecloud profilesguide to create cloud profiles using GCP launchers like below: {#LaunchNodeinGCP-createbuildagentinstancetemplate}"
      },
      {
        "header": "Create build agent instance templateâ",
        "content": "An instance template is required to set up GCP cloud profile. This instance template should be pre-configured with your build environment as well as QuickBuild build agent. To create an instance template able to be used by GCP cloud profile, please do the following: Manually launch a compute instance of desired platform using your GCP account, and install Java Runtime Environment version 8 or higher on the launched instance. You may also want to install other software required by your build to this instance.Download QuickBuild build agent package from Grid page, and upload it to launched instance above.Login to the compute instance and extract build agent package to your chosen agent installation directory.Edit file<agent install dir>/conf/wrapper.confto define propertywrapper.java.commandto point to java binary if it is not in system path.Edit file<agent install dir>/conf/node.propertiesto configure QuickBuild server URL. You may also run<agent install dir>/bin/config.(bat|sh)to config node properties such as SSL setting. However this program requires GUI terminal, and if your console does not have that facility, you may run this program at your desktop to populate the node.properties, then transfer this file to launched instance.Edit file<agent install dir>/conf/attributes.propertiesto define necessary user attributes for the build agent.For Unix instances, edit file<agent install dir>/bin/agent.shto uncomment below line and assign an OS user to run the agent in service mode.#RUN_AS_USER=The service user should own the agent installation directory.Run<agent install dir>/bin/agent.(sh|bat) installto install agent as system service.Configure GCP firewall of the network associated with the launched instance to allow incoming connections to agent port.Restart launched node. After the system comes up, the build agent should be started automatically and will contact QuickBuild server to download necessary plugins. You may check file<agent install dir>/logs/console.logfor the progress and possible errors.If agent starts up normally, you should be able to see this agent appears atunauthorized nodeslist at grid page. Authorize the node and wait for a while to see if it can come active.If the agent comes active, stop the compute instance, and create a storage image from the instance disk.Create an instance template using the storage image, and specify desired machine type and disk type.You can define multiple instance templates for multiple cloud profiles to satisfy different build requirements."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Launch+Node+in+EC2",
      "https://wiki.pmease.com/display/QB14/Launch+Node+in+Azure",
      "https://wiki.pmease.com/display/QB14/Launch+Node+in+Kubernetes",
      "https://wiki.pmease.com/display/QB14/Working+with+Cloud+Profiles",
      "https://wiki.pmease.com/display/QB14/Launch+Node+in+EC2"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Launch+Node+in+EC2",
    "title": "Launch Node in EC2",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Working with Cloud Profiles"
    ],
    "full_text": "Administrator's Guide\nWorking with Cloud Profiles\nLaunch Node in EC2\nVersion: QB14\nOn this page\nLaunch Node in EC2\nEC2 cloud profile\nâ\nCloud profiles rely on cloud providers to do its job. QuickBuild 5.0 ships with the EC2 cloud provider. To use it, one has to enable the EC2 plugin by providing a property file containing your EC2 access keys in\nAdministration/Plugin Management\npage as demonstrated below:\nThen one can follow the\ncloud profiles\nguide to create cloud profiles using EC2 launchers like below:\n{#LaunchNodeinEC2-createbuildagentAMI}\nCreate build agent AMI\nâ\nBesides launching node into public EC2 network, the EC2 plugin also provides the ability to launch node into EC2 virtual private cloud. Both launch settings requires the user to specify a AMI ID. The AMI should be pre-configured with your build environment as well as QuickBuild build agent. To configure a AMI with build agent, please do the following:\nManually launch an instance of desired platform using your EC2 account, and install Java Runtime Environment version 8 or higher on the launched instance. You may also want to install other software required by your build to this instance.\nDownload QuickBuild build agent package from Grid page, and upload it to launched instance above.\nLogin to the EC2 instance and extract build agent package to your chosen agent installation directory.\nEdit file\n<agent install dir>/conf/wrapper.conf\nto define property\nwrapper.java.command\nto point to java binary if it is not in system path.\nEdit file\n<agent install dir>/conf/node.properties\nto configure QuickBuild server URL. You may also run\n<agent install dir>/bin/config.(bat|sh)\nto config node properties such as SSL setting. However this program requires GUI terminal, and if your console does not have that facility, you may run this program at your desktop to populate the node.properties, then transfer this file to launched instance.\nEdit file\n<agent install dir>/conf/attributes.properties\nto define necessary user attributes for the build agent.\nFor Unix instances, edit file\n<agent install dir>/bin/agent.sh\nto uncomment below line and assign an OS user to run the agent in service mode.\n#\nRUN_AS_USER\n=\nThe service user should own the agent installation directory.\nRun\n<agent install dir>/bin/agent.(sh|bat) install\nto install agent as system service.\nEdit security group associated with the launched instance to allow incoming connections to agent port.\nRestart launched node. After the system comes up, the build agent should be started automatically and will contact QuickBuild server to download necessary plugins. You may check file\n<agent install dir>/logs/console.log\nfor the progress and possible errors.\nIf agent starts up normally, you should be able to see this agent appears at\nunauthorized nodes\nlist at grid page. Authorize the node and wait for a while to see if it can come active.\nIf the agent comes active, create a EBS AMI for the launched instance and this AMI can then be used to define your cloud profiles to run certain builds. After build agent AMI is created, you may terminate the manually launched instance.\nYou can certainly define multiple build agent AMIs for multiple cloud profiles to satisfy different build requirements.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Launch Node in EC2",
        "content": ""
      },
      {
        "header": "EC2 cloud profileâ",
        "content": "Cloud profiles rely on cloud providers to do its job. QuickBuild 5.0 ships with the EC2 cloud provider. To use it, one has to enable the EC2 plugin by providing a property file containing your EC2 access keys inAdministration/Plugin Managementpage as demonstrated below: Then one can follow thecloud profilesguide to create cloud profiles using EC2 launchers like below: {#LaunchNodeinEC2-createbuildagentAMI}"
      },
      {
        "header": "Create build agent AMIâ",
        "content": "Besides launching node into public EC2 network, the EC2 plugin also provides the ability to launch node into EC2 virtual private cloud. Both launch settings requires the user to specify a AMI ID. The AMI should be pre-configured with your build environment as well as QuickBuild build agent. To configure a AMI with build agent, please do the following: Manually launch an instance of desired platform using your EC2 account, and install Java Runtime Environment version 8 or higher on the launched instance. You may also want to install other software required by your build to this instance.Download QuickBuild build agent package from Grid page, and upload it to launched instance above.Login to the EC2 instance and extract build agent package to your chosen agent installation directory.Edit file<agent install dir>/conf/wrapper.confto define propertywrapper.java.commandto point to java binary if it is not in system path.Edit file<agent install dir>/conf/node.propertiesto configure QuickBuild server URL. You may also run<agent install dir>/bin/config.(bat|sh)to config node properties such as SSL setting. However this program requires GUI terminal, and if your console does not have that facility, you may run this program at your desktop to populate the node.properties, then transfer this file to launched instance.Edit file<agent install dir>/conf/attributes.propertiesto define necessary user attributes for the build agent.For Unix instances, edit file<agent install dir>/bin/agent.shto uncomment below line and assign an OS user to run the agent in service mode.#RUN_AS_USER=The service user should own the agent installation directory.Run<agent install dir>/bin/agent.(sh|bat) installto install agent as system service.Edit security group associated with the launched instance to allow incoming connections to agent port.Restart launched node. After the system comes up, the build agent should be started automatically and will contact QuickBuild server to download necessary plugins. You may check file<agent install dir>/logs/console.logfor the progress and possible errors.If agent starts up normally, you should be able to see this agent appears atunauthorized nodeslist at grid page. Authorize the node and wait for a while to see if it can come active.If the agent comes active, create a EBS AMI for the launched instance and this AMI can then be used to define your cloud profiles to run certain builds. After build agent AMI is created, you may terminate the manually launched instance.You can certainly define multiple build agent AMIs for multiple cloud profiles to satisfy different build requirements."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Launch+Node+in+Azure",
      "https://wiki.pmease.com/display/QB14/Launch+Node+in+Kubernetes",
      "https://wiki.pmease.com/display/QB14/Working+with+Cloud+Profiles",
      "https://wiki.pmease.com/display/QB14/Launch+Node+in+Azure"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Launch+Node+in+Azure",
    "title": "Launch Node in Azure",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Working with Cloud Profiles"
    ],
    "full_text": "Administrator's Guide\nWorking with Cloud Profiles\nLaunch Node in Azure\nVersion: QB14\nOn this page\nLaunch Node in Azure\nAzure cloud profile\nâ\nCloud profiles rely on cloud providers to do its job. QuickBuild 8.0 ships with the Azure cloud provider. To use it, one has to enable the Azure plugin by providing an authentication file in\nAdministration/Plugin Management\npage as demonstrated below:\nThen one can follow the\ncloud profiles\nguide to create cloud profiles using Azure launchers like below:\n{#LaunchNodeinAzure-createbuildagentimage}\nThe Azure launcher requires either a custom Windows image or Linux image being equipped with build agent and your build environment.\nCreate custom Windows build agent image\nâ\nManually launch a Windows virtual machine, and install Java Runtime Environment version 8 or higher on the machine. You may also want to install other software required by your build.\nDownload QuickBuild build agent package from Grid page, and upload it to the virtual machine.\nLogin to the machine and extract build agent package to your chosen agent installation directory.\nEdit file\n<agent install dir>/conf/wrapper.conf\nto define property\nwrapper.java.command\nto point to java binary if it is not in system path.\nEdit file\n<agent install dir>/conf/node.properties\nto configure QuickBuild server URL. You may also run\n<agent install dir>/bin/config.(bat|sh)\nto config node properties such as SSL setting.\nEdit file\n<agent install dir>/conf/attributes.properties\nto define necessary user attributes for the build agent.\nOpen a command window as Administrator and run\n<agent install dir>/bin/agent.bat install\nto install agent as system service.\nConfigure firewall rules of the machine to allow incoming connection to build agent port.\nEdit network security group associated with the machine from Azure portal to allow incoming connection to build agent port.\nRestart the virtual machine. After the system comes up, the build agent should be started automatically and will contact QuickBuild server to download necessary plugins. You may check file\n<agent install dir>/logs/console.log\nfor the progress and possible errors.\nIf agent starts up normally, you should be able to see this agent appears at\nunauthorized nodes\nlist at grid page. Authorize the node and wait for a while to make sure it appears as active node in the grid.\nDelete file\nC:\\AzureData\\CustomData.bin\nif exists.\nCreate an empty file\n<agent install dir>/azure_windows.txt\n.\nFollow\nthis instruction\nto prepare the machine for image capture.\nCapture the virtual machine as a custom image from Azure portal. Make sure to select \"No, capture only a managed image\" for option \"Share image to Azure compute gallery\"\nCreate custom Linux build agent image\nâ\nManually launch a Linux virtual machine, and install Java Runtime Environment version 8 or higher on the machine. You may also want to install other software required by your build.\nDownload QuickBuild build agent package from Grid page, and upload it to the virtual machine.\nLogin to the EC2 instance and extract build agent package to your chosen agent installation directory.\nEdit file\n<agent install dir>/conf/wrapper.conf\nto define property\nwrapper.java.command\nto point to java binary if it is not in system path.\nEdit file\n<agent install dir>/conf/node.properties\nto configure QuickBuild server URL. You may also run\n<agent install dir>/bin/config.sh\nto config node properties such as SSL setting. However this program requires GUI terminal, and if your console does not have that facility, you may run this program at your desktop to populate the node.properties, then transfer this file to launched instance.\nEdit file\n<agent install dir>/conf/attributes.properties\nto define necessary user attributes for the build agent.\nEdit file\n<agent install dir>/bin/agent.sh\nto uncomment below line and define\nRUN_AS_USER\nas the user specified when creating the virtual machine\n#\nRUN_AS_USER\n=\nYou may also specify other user here. However the user should have sudo permission without password prompt, as the build agent needs to access the file\n/var/lib/waagent/ovf-env.xml\nto get the grid token. Azure makes this file only accessible by root user. If you are using other users, make sure below command can run successfully as that user:\nsudo\n-\nn cat\n/\nvar\n/\nlib\n/\nwaagent\n/\novf\n-\nenv\n.\nxml\nRun\nsudo <agent install dir>/bin/agent.sh install\nto install agent as system service.\nEdit network security group associated with the machine to allow incoming connections to agent port.\nRestart the virtual machine. After the system comes up, the build agent should be started automatically and will contact QuickBuild server to download necessary plugins. You may check file\n<agent install dir>/logs/console.log\nfor the progress and possible errors.\nIf agent starts up normally, you should be able to see this agent appears at\nunauthorized nodes\nlist at grid page. Authorize the node and wait for a while to make sure it can come active.\nRun sudo\nwaagent -deprovision\nto prepare the machine for image capture.\nwarning\nDo not add the\n+user\noption when run\nwaagent\n, as otherwise the current user will be erased\nCapture the virtual machine as a custom image from Azure portal. Make sure to select \"No, capture only a managed image\" for option \"Share image to Azure compute gallery\"\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Launch Node in Azure",
        "content": ""
      },
      {
        "header": "Azure cloud profileâ",
        "content": "Cloud profiles rely on cloud providers to do its job. QuickBuild 8.0 ships with the Azure cloud provider. To use it, one has to enable the Azure plugin by providing an authentication file inAdministration/Plugin Managementpage as demonstrated below: Then one can follow thecloud profilesguide to create cloud profiles using Azure launchers like below: {#LaunchNodeinAzure-createbuildagentimage} The Azure launcher requires either a custom Windows image or Linux image being equipped with build agent and your build environment."
      },
      {
        "header": "Create custom Windows build agent imageâ",
        "content": "Manually launch a Windows virtual machine, and install Java Runtime Environment version 8 or higher on the machine. You may also want to install other software required by your build.Download QuickBuild build agent package from Grid page, and upload it to the virtual machine.Login to the machine and extract build agent package to your chosen agent installation directory.Edit file<agent install dir>/conf/wrapper.confto define propertywrapper.java.commandto point to java binary if it is not in system path.Edit file<agent install dir>/conf/node.propertiesto configure QuickBuild server URL. You may also run<agent install dir>/bin/config.(bat|sh)to config node properties such as SSL setting.Edit file<agent install dir>/conf/attributes.propertiesto define necessary user attributes for the build agent.Open a command window as Administrator and run<agent install dir>/bin/agent.bat installto install agent as system service.Configure firewall rules of the machine to allow incoming connection to build agent port.Edit network security group associated with the machine from Azure portal to allow incoming connection to build agent port.Restart the virtual machine. After the system comes up, the build agent should be started automatically and will contact QuickBuild server to download necessary plugins. You may check file<agent install dir>/logs/console.logfor the progress and possible errors.If agent starts up normally, you should be able to see this agent appears atunauthorized nodeslist at grid page. Authorize the node and wait for a while to make sure it appears as active node in the grid.Delete fileC:\\AzureData\\CustomData.binif exists.Create an empty file<agent install dir>/azure_windows.txt.Followthis instructionto prepare the machine for image capture.Capture the virtual machine as a custom image from Azure portal. Make sure to select \"No, capture only a managed image\" for option \"Share image to Azure compute gallery\""
      },
      {
        "header": "Create custom Linux build agent imageâ",
        "content": "Manually launch a Linux virtual machine, and install Java Runtime Environment version 8 or higher on the machine. You may also want to install other software required by your build.Download QuickBuild build agent package from Grid page, and upload it to the virtual machine.Login to the EC2 instance and extract build agent package to your chosen agent installation directory.Edit file<agent install dir>/conf/wrapper.confto define propertywrapper.java.commandto point to java binary if it is not in system path.Edit file<agent install dir>/conf/node.propertiesto configure QuickBuild server URL. You may also run<agent install dir>/bin/config.shto config node properties such as SSL setting. However this program requires GUI terminal, and if your console does not have that facility, you may run this program at your desktop to populate the node.properties, then transfer this file to launched instance.Edit file<agent install dir>/conf/attributes.propertiesto define necessary user attributes for the build agent.Edit file<agent install dir>/bin/agent.shto uncomment below line and defineRUN_AS_USERas the user specified when creating the virtual machine#RUN_AS_USER=You may also specify other user here. However the user should have sudo permission without password prompt, as the build agent needs to access the file/var/lib/waagent/ovf-env.xmlto get the grid token. Azure makes this file only accessible by root user. If you are using other users, make sure below command can run successfully as that user:sudo-n cat/var/lib/waagent/ovf-env.xmlRunsudo <agent install dir>/bin/agent.sh installto install agent as system service.Edit network security group associated with the machine to allow incoming connections to agent port.Restart the virtual machine. After the system comes up, the build agent should be started automatically and will contact QuickBuild server to download necessary plugins. You may check file<agent install dir>/logs/console.logfor the progress and possible errors.If agent starts up normally, you should be able to see this agent appears atunauthorized nodeslist at grid page. Authorize the node and wait for a while to make sure it can come active.Run sudowaagent -deprovisionto prepare the machine for image capture.warningDo not add the+useroption when runwaagent, as otherwise the current user will be erasedCapture the virtual machine as a custom image from Azure portal. Make sure to select \"No, capture only a managed image\" for option \"Share image to Azure compute gallery\""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Launch+Node+in+Kubernetes",
      "https://wiki.pmease.com/display/QB14/Working+with+Cloud+Profiles",
      "https://wiki.pmease.com/display/QB14/Launch+Node+in+Kubernetes"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Launch+Node+in+Kubernetes",
    "title": "Launch Node in Kubernetes",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Working with Cloud Profiles"
    ],
    "full_text": "Administrator's Guide\nWorking with Cloud Profiles\nLaunch Node in Kubernetes\nVersion: QB14\nOn this page\nLaunch Node in Kubernetes\nConfigure server to access Kubernetes cluster\nâ\nOn the machine running QuickBuild server, make sure that the OS account\nrunning QuickBuild service\nis set up appropriately so that it can run below command to connect to desired Kubernetes cluster:\nkubectl cluster\n-\ninfo\nSet up firewall rule to allow node ports\nâ\nBuild agents are running as pods in Kubernetes cluster, and these pods are exposed via services with type \"NodePort\". QuickBuild server has to access these node ports, so appropriate firewall rule may need to be set up to allow this. For Google Kubernetes Engine, an example firewall rule can be as following:\n{#LaunchNodeinKubernetes-createbuildagentimage}\nCreate build agent image\nâ\nBuild agent docker image needs to be configured with your build environment as well as QuickBuild build agent. Below is an example to create a Debian Linux image only with OpenJDK and build agent installed.\nAssume we have build agent installed at\n/path/to/buildagent\n. First run the build agent to make sure it can connect with the build server.\nCreate file\n/path/to/buildagent/Dockerfile\nwith below content:\nFROM\nopenjdk\n:\n8\n-\njdk\nADD\n.\n/\napp\nEXPOSE\n8811\nCMD\n[\n\"/app/bin/wrapper-linux-x86-64\"\n,\n\"/app/conf/wrapper.conf\"\n]\nChange to directory\n/path/to/buildagent\n, and run below command\nsudo docker build\n-\nt youraccount\n/\nqbagent\n:\nlatest\n.\nThen publish the built image:\nsudo docker push youraccount\n/\nqbagent\n:\nlatest\nEnable Kubernetes plugin in QuickBuild\nâ\nLogin to QuickBuild server, and enable the Kubernetes plugin in\nAdministration/Plugin Management\npage as demonstrated below:\nAdd Kubernetes cloud profile in QuickBuild\nâ\nThen one can follow the\ncloud profiles\nguide to create cloud profiles using Kubernetes launchers like below:\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Launch Node in Kubernetes",
        "content": ""
      },
      {
        "header": "Configure server to access Kubernetes clusterâ",
        "content": "On the machine running QuickBuild server, make sure that the OS accountrunning QuickBuild serviceis set up appropriately so that it can run below command to connect to desired Kubernetes cluster: kubectl cluster-info"
      },
      {
        "header": "Set up firewall rule to allow node portsâ",
        "content": "Build agents are running as pods in Kubernetes cluster, and these pods are exposed via services with type \"NodePort\". QuickBuild server has to access these node ports, so appropriate firewall rule may need to be set up to allow this. For Google Kubernetes Engine, an example firewall rule can be as following: {#LaunchNodeinKubernetes-createbuildagentimage}"
      },
      {
        "header": "Create build agent imageâ",
        "content": "Build agent docker image needs to be configured with your build environment as well as QuickBuild build agent. Below is an example to create a Debian Linux image only with OpenJDK and build agent installed. Assume we have build agent installed at/path/to/buildagent. First run the build agent to make sure it can connect with the build server.Create file/path/to/buildagent/Dockerfilewith below content:FROMopenjdk:8-jdkADD./appEXPOSE8811CMD[\"/app/bin/wrapper-linux-x86-64\",\"/app/conf/wrapper.conf\"]Change to directory/path/to/buildagent, and run below commandsudo docker build-t youraccount/qbagent:latest.Then publish the built image:sudo docker push youraccount/qbagent:latest"
      },
      {
        "header": "Enable Kubernetes plugin in QuickBuildâ",
        "content": "Login to QuickBuild server, and enable the Kubernetes plugin inAdministration/Plugin Managementpage as demonstrated below:"
      },
      {
        "header": "Add Kubernetes cloud profile in QuickBuildâ",
        "content": "Then one can follow thecloud profilesguide to create cloud profiles using Kubernetes launchers like below:"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Working+with+Cloud+Profiles"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/category/Single+Sign+On",
    "title": "Single Sign On",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Security Management"
    ],
    "full_text": "ðï¸\nSSO via Trusted Http Header\nHow it works\nðï¸\nSSO via SAML\nHow it works\nðï¸\nSSO via OpenID\nHow it works",
    "sections": [
      {
        "header": "ðï¸ SSO via Trusted Http Header",
        "content": "How it works"
      },
      {
        "header": "ðï¸ SSO via SAML",
        "content": "How it works"
      },
      {
        "header": "ðï¸ SSO via OpenID",
        "content": "How it works"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/SSO+via+Trusted+Http+Header",
      "https://wiki.pmease.com/display/QB14/SSO+via+SAML",
      "https://wiki.pmease.com/display/QB14/SSO+via+OpenID",
      "https://wiki.pmease.com/display/QB14/Listen+to+specified+IP+address",
      "https://wiki.pmease.com/display/QB14/Protect+QuickBuild+using+SSL",
      "https://wiki.pmease.com/display/QB14/User+and+Group+Management",
      "https://wiki.pmease.com/display/QB14/Manage+Permission+Sets",
      "https://wiki.pmease.com/display/QB14/Enable+Anonymous+Access+and+Self+Registering",
      "https://wiki.pmease.com/display/QB14/Authenticate+with+Active+Directory+and+LDAP",
      "https://wiki.pmease.com/display/QB14/Other+permissions",
      "https://wiki.pmease.com/display/QB14/SSO+via+Trusted+Http+Header",
      "https://wiki.pmease.com/display/QB14/SSO+via+SAML",
      "https://wiki.pmease.com/display/QB14/SSO+via+OpenID",
      "https://wiki.pmease.com/display/QB14/SSO+via+Trusted+Http+Header"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Listen+to+specified+IP+address",
    "title": "Listen to specified IP address",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Security Management"
    ],
    "full_text": "Administrator's Guide\nSecurity Management\nListen to specified IP address\nVersion: QB14\nListen to specified IP address\nBy default, QuickBuild server or agent accept connections from all network interfaces. For security considerations, you may want to have them listening on specified network interface. This can be done by running \"bin/config.(sh|bat)\" and specify binding address.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Listen to specified IP address",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Protect+QuickBuild+using+SSL",
      "https://wiki.pmease.com/display/QB14/User+and+Group+Management",
      "https://wiki.pmease.com/display/QB14/Manage+Permission+Sets",
      "https://wiki.pmease.com/display/QB14/Enable+Anonymous+Access+and+Self+Registering",
      "https://wiki.pmease.com/display/QB14/Authenticate+with+Active+Directory+and+LDAP",
      "https://wiki.pmease.com/display/QB14/Other+permissions",
      "https://wiki.pmease.com/display/QB14/SSO+via+OpenID",
      "https://wiki.pmease.com/display/QB14/Protect+QuickBuild+using+SSL"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Protect+QuickBuild+using+SSL",
    "title": "Protect QuickBuild using SSL",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Security Management"
    ],
    "full_text": "Administrator's Guide\nSecurity Management\nProtect QuickBuild using SSL\nVersion: QB14\nOn this page\nProtect QuickBuild using SSL\nEnable https access to server\nâ\nQuickBuild server by default runs on top of http protocol. Https can be enabled to encrypt passwords and data send to the server. Please follow below procedure to enable https access to QuickBuild server:\nRun keytool command to generate a keystore. Assume Sun JDK is installed at\n/path/to/jdk\nand you want to generate keystore to\n/path/to/keystore\n. The command will be:\n/\npath\n/\nto\n/\njdk\n/\nbin\n/\nkeytool\n-\nkeystore\n/\npath\n/\nto\n/\nkeystore\n-\nalias\nQuickBuild\n-\ngenkey\n-\nkeyalg\nRSA\n-\nvalidity\n365\nYou will be prompted for some settings including the keystore password and private key password. Note when prompting for name, please use host name of QB server instead of name of the person in order to make the CN field of the DN match the server and allow the cert to pass hostname validation.\nChange to directory\n<QuickBuild server install dir>/bin\nand run command\nconfig.(bat|sh)\n. In the displayed config window, enable https access, specify https port, and specify keytool path and passwords provided in step 1.\nOnce https is enabled, you may access QuickBuild web interface and RESTful API through https protocol. And QuickBuild agents can be configured to connect to QuickBuild server through https protocol by editing the file\n<agent install dir>/conf/node.properties\nand changing the\nserverUrl\naccordingly.\nWe suggest to enable http and https access to QuickBuild server at the same time. While browser and RESTful API access are forced to go through https protocol with proper firewall settings, all agents can still talk to server via http protocol, which will perform bettern than https protocol considering the short and frequent interactions between agents and server.\nIf connections between server and certain agents go through insecure networks, you will need to configure those agents to connect to server via https protocol, and further, you may configure those agents to run themselves on https protocol to protect incoming connections from server and other agents, as introduced in next section.\nEnable https access to agents\nâ\nAgent can be configured to run on top of https port so that other nodes in the grid are forced to connect to it securely. To do this:\nRun keytool command to generate a keystore. Assume Sun JDK is installed at\n/path/to/jdk\nand you want to generate keystore to\n/path/to/keystore\n. The command will be:\n/\npath\n/\nto\n/\njdk\n/\nbin\n/\nkeytool\n-\nkeystore\n/\npath\n/\nto\n/\nkeystore\n-\nalias\nQuickBuild\n-\ngenkey\n-\nkeyalg\nRSA\n-\nvalidity\n365\nYou will be prompted for some settings including the keystore password and private key password. Note when prompting for name, please use host name of QB server instead of name of the person in order to make the CN field of the DN match the server and allow the cert to pass hostname validation.\nChange to directory\n<QuickBuild agent install dir>/bin\nand run command\nconfig.(bat|sh)\n. In the displayed config window, enable https access, and specify keytool path and passwords provided in step 1.\nExclude SSL ciphers\nâ\nCertain SSL ciphers can be excluded by editing file\nconf/ciphers.excluded\nof server (or agent if you are enabling SSL at agent side). QB server by default excludes below ciphers:\nSSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA\nSSL_RSA_EXPORT_WITH_DES40_CBC_SHA\nSSL_RSA_EXPORT_WITH_RC4_40_MD5\nSSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA\nSSL_RSA_EXPORT_WITH_DES40_CBC_SHA\nSSL_RSA_EXPORT_WITH_RC4_40_MD5\nSSL_DHE_RSA_WITH_DES_CBC_SHA\nSSL_RSA_WITH_DES_CBC_SHA\nSSL_DHE_RSA_WITH_DES_CBC_SHA\nSSL_RSA_WITH_DES_CBC_SHA\nExclude SSL protocols (since 6.0.25)\nâ\nCertain SSL protocols can be excluded by editing file\nconf/protocols.excluded\nof server (or agent if you are enabling SSL at agent side). QB server by default excludes below protocols:\nSSLv3\nImport external certificate\nâ\nAbove steps generates self-signed certificate, if you have external certificate, you may follow\nJohn Szakmeister\n's excellent guide to configure QuickBuild using it:\nFirst, you need to get a cert into the right format. In our case, that meant we needed to bundle the key, the public cert, and the provider's intermediate cert.\nTo do this, use openssl:\nopenssl pkcs12\n-\nexport\n-\nout certificate\n.\npfx\n-\ninkey\nprivate\n.\nkey\n-\nin\npublic\n.\ncrt\n-\ncertfile cacert\n.\ncrt\nMake sure to type in a password when prompted, otherwise keytool will die with a divide by zero error when you go to import it into a Java keystore.\nThen get the new cert into a keystore, run:\nkeytool\n-\nimportkeystore\n-\nsrckeystore certificate\n.\npfx\n-\nsrcstoretype\nPKCS12\n\\\n-\nsrcalias\n1\n-\ndestkeystore\n/\npath\n/\nto\n/\nkeystore\n-\ndestalias $\nALIAS\n\\\n-\ndeststorepass\n\"$PASSWORD\"\n-\ndestkeypass\n\"$PASSWORD\"\nHere,\nA\nL\nI\nA\nS\ni\ns\nt\nh\ne\nn\na\nm\ne\nt\no\na\ns\ns\ni\ng\nn\nt\no\nt\nh\ne\nc\ne\nr\nt\n.\nF\no\nr\nQ\nu\ni\nc\nk\nB\nu\ni\nl\nd\n,\ni\nt\nn\ne\ne\nd\ns\nt\no\nb\ne\nc\na\nl\nl\ne\nd\nQ\nu\ni\nc\nk\nB\nu\ni\nl\nd\n.\nALIAS is the name to assign to the cert. For QuickBuild, it needs to be called QuickBuild.\nA\nL\nI\nA\nS\ni\ns\nt\nh\ne\nnam\ne\nt\no\na\nss\ni\ng\nn\nt\no\nt\nh\necer\nt\n.\nF\nor\nQ\nu\ni\nc\nk\nB\nu\ni\nl\nd\n,\ni\nt\nn\nee\nd\ns\nt\no\nb\nec\na\nll\ne\nd\nQ\nu\ni\nc\nk\nB\nu\ni\nl\nd\n.\nPASSWORD is the same password assigned to the export, but only the destkeypass really requires that. You could assign a different deststorepass, if you like. Note: the srcalias is actually a 1. There is no alias in a pfx file, so it just uses an index number. We put only one combined certificate in there, so the alias for it becomes 1. Also, it's not necessary to put the passwords on the command line. keytool will prompt you for them if you leave them off. It is necessary that you at least provide one. Check your work with:\nkeytool\n-\nlist\n-\nkeystore\n/\npath\n/\nto\n/\nkeystore\n-\nstorepass\n\"$PASSWORD\"\nYou should see the cert listed as a PrivateKeyEntry. If it's listed as a trustedCertEntry, then you've failed to include the private key.\nAt last, tell QuickBuild to use the keystore by running \"bin/config.sh\" (or bin/config.bat) on windows.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Protect QuickBuild using SSL",
        "content": ""
      },
      {
        "header": "Enable https access to serverâ",
        "content": "QuickBuild server by default runs on top of http protocol. Https can be enabled to encrypt passwords and data send to the server. Please follow below procedure to enable https access to QuickBuild server: Run keytool command to generate a keystore. Assume Sun JDK is installed at/path/to/jdkand you want to generate keystore to/path/to/keystore. The command will be:/path/to/jdk/bin/keytool-keystore/path/to/keystore-aliasQuickBuild-genkey-keyalgRSA-validity365You will be prompted for some settings including the keystore password and private key password. Note when prompting for name, please use host name of QB server instead of name of the person in order to make the CN field of the DN match the server and allow the cert to pass hostname validation.Change to directory<QuickBuild server install dir>/binand run commandconfig.(bat|sh). In the displayed config window, enable https access, specify https port, and specify keytool path and passwords provided in step 1. Once https is enabled, you may access QuickBuild web interface and RESTful API through https protocol. And QuickBuild agents can be configured to connect to QuickBuild server through https protocol by editing the file<agent install dir>/conf/node.propertiesand changing theserverUrlaccordingly. We suggest to enable http and https access to QuickBuild server at the same time. While browser and RESTful API access are forced to go through https protocol with proper firewall settings, all agents can still talk to server via http protocol, which will perform bettern than https protocol considering the short and frequent interactions between agents and server. If connections between server and certain agents go through insecure networks, you will need to configure those agents to connect to server via https protocol, and further, you may configure those agents to run themselves on https protocol to protect incoming connections from server and other agents, as introduced in next section."
      },
      {
        "header": "Enable https access to agentsâ",
        "content": "Agent can be configured to run on top of https port so that other nodes in the grid are forced to connect to it securely. To do this: Run keytool command to generate a keystore. Assume Sun JDK is installed at/path/to/jdkand you want to generate keystore to/path/to/keystore. The command will be:/path/to/jdk/bin/keytool-keystore/path/to/keystore-aliasQuickBuild-genkey-keyalgRSA-validity365You will be prompted for some settings including the keystore password and private key password. Note when prompting for name, please use host name of QB server instead of name of the person in order to make the CN field of the DN match the server and allow the cert to pass hostname validation.Change to directory<QuickBuild agent install dir>/binand run commandconfig.(bat|sh). In the displayed config window, enable https access, and specify keytool path and passwords provided in step 1."
      },
      {
        "header": "Exclude SSL ciphersâ",
        "content": "Certain SSL ciphers can be excluded by editing fileconf/ciphers.excludedof server (or agent if you are enabling SSL at agent side). QB server by default excludes below ciphers: SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHASSL_RSA_EXPORT_WITH_DES40_CBC_SHASSL_RSA_EXPORT_WITH_RC4_40_MD5SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHASSL_RSA_EXPORT_WITH_DES40_CBC_SHASSL_RSA_EXPORT_WITH_RC4_40_MD5SSL_DHE_RSA_WITH_DES_CBC_SHASSL_RSA_WITH_DES_CBC_SHASSL_DHE_RSA_WITH_DES_CBC_SHASSL_RSA_WITH_DES_CBC_SHA"
      },
      {
        "header": "Exclude SSL protocols (since 6.0.25)â",
        "content": "Certain SSL protocols can be excluded by editing fileconf/protocols.excludedof server (or agent if you are enabling SSL at agent side). QB server by default excludes below protocols: SSLv3"
      },
      {
        "header": "Import external certificateâ",
        "content": "Above steps generates self-signed certificate, if you have external certificate, you may followJohn Szakmeister's excellent guide to configure QuickBuild using it: First, you need to get a cert into the right format. In our case, that meant we needed to bundle the key, the public cert, and the provider's intermediate cert.To do this, use openssl:openssl pkcs12-export-out certificate.pfx-inkeyprivate.key-inpublic.crt-certfile cacert.crtMake sure to type in a password when prompted, otherwise keytool will die with a divide by zero error when you go to import it into a Java keystore.Then get the new cert into a keystore, run:keytool-importkeystore-srckeystore certificate.pfx-srcstoretypePKCS12\\-srcalias1-destkeystore/path/to/keystore-destalias $ALIAS\\-deststorepass\"$PASSWORD\"-destkeypass\"$PASSWORD\"Here,ALIASisthenametoassigntothecert.ForQuickBuild,itneedstobecalledQuickBuild.ALIAS is the name to assign to the cert. For QuickBuild, it needs to be called QuickBuild.ALIASisthenametoassigntothecert.ForQuickBuild,itneedstobecalledQuickBuild.PASSWORD is the same password assigned to the export, but only the destkeypass really requires that. You could assign a different deststorepass, if you like. Note: the srcalias is actually a 1. There is no alias in a pfx file, so it just uses an index number. We put only one combined certificate in there, so the alias for it becomes 1. Also, it's not necessary to put the passwords on the command line. keytool will prompt you for them if you leave them off. It is necessary that you at least provide one. Check your work with:keytool-list-keystore/path/to/keystore-storepass\"$PASSWORD\"You should see the cert listed as a PrivateKeyEntry. If it's listed as a trustedCertEntry, then you've failed to include the private key.At last, tell QuickBuild to use the keystore by running \"bin/config.sh\" (or bin/config.bat) on windows."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/User+and+Group+Management",
      "https://wiki.pmease.com/display/QB14/Manage+Permission+Sets",
      "https://wiki.pmease.com/display/QB14/Enable+Anonymous+Access+and+Self+Registering",
      "https://wiki.pmease.com/display/QB14/Authenticate+with+Active+Directory+and+LDAP",
      "https://wiki.pmease.com/display/QB14/Other+permissions",
      "https://wiki.pmease.com/display/QB14/User+and+Group+Management"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/User+and+Group+Management",
    "title": "User and Group Management",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Security Management"
    ],
    "full_text": "Administrator's Guide\nSecurity Management\nUser and Group Management\nVersion: QB14\nUser and Group Management\nPermission control in QuickBuild is implemented through group and user. The administrator creates groups and give them certain permissions. All users in the group will have the permissions defined for the group. A single user can be associated with multiple groups, and the user permission is the union of all permissions of all groups.\nGroups are managed through menu\nAdministration/Group Management\nas indicated below:\nUsers are managed through menu\nAdministration/User Management\nas indicated below:\nThe administrator account is created when you initially setup the server and cannot be deleted. However you can follow the account link to edit its details including changing the password.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "User and Group Management",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Manage+Permission+Sets",
      "https://wiki.pmease.com/display/QB14/Enable+Anonymous+Access+and+Self+Registering",
      "https://wiki.pmease.com/display/QB14/Authenticate+with+Active+Directory+and+LDAP",
      "https://wiki.pmease.com/display/QB14/Other+permissions"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Manage+Permission+Sets",
    "title": "Manage Permission Sets",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Security Management"
    ],
    "full_text": "Administrator's Guide\nSecurity Management\nManage Permission Sets\nVersion: QB14\nManage Permission Sets\nOften you might find yourself in a situation where the same set of permissions need to be assigned to different groups and configurations again and again. The permission set feature comes to rescue: it lets you select a set of permissions and give it a name, then you can assign that permission set as a whole to configurations just as other individual permissions. A permission set can be defined as below:\nAfter the permission set has been defined, you can then assign it to corresponding configurations when define authorizations of the group:\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Manage Permission Sets",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Enable+Anonymous+Access+and+Self+Registering",
      "https://wiki.pmease.com/display/QB14/Authenticate+with+Active+Directory+and+LDAP",
      "https://wiki.pmease.com/display/QB14/Other+permissions",
      "https://wiki.pmease.com/display/QB14/Enable+Anonymous+Access+and+Self+Registering"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Enable+Anonymous+Access+and+Self+Registering",
    "title": "Enable Anonymous Access and Self Registering",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Security Management"
    ],
    "full_text": "Administrator's Guide\nSecurity Management\nEnable Anonymous Access and Self Registering\nVersion: QB14\nOn this page\nEnable Anonymous Access and Self Registering\nEnable anonymous access\nâ\nTo enable anonymous access, please create a group with the name\nanonymous\nlike below:\nPermissions of anonymous users will have the same permissions assigned to the anonymous group.\nEnable user self registering\nâ\nTo enable user self-registering, please create a group with the name\nregister\nlike below:\nPermissions of self registered users will have the same permissions assigned to the register group.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Enable Anonymous Access and Self Registering",
        "content": ""
      },
      {
        "header": "Enable anonymous accessâ",
        "content": "To enable anonymous access, please create a group with the nameanonymouslike below: Permissions of anonymous users will have the same permissions assigned to the anonymous group."
      },
      {
        "header": "Enable user self registeringâ",
        "content": "To enable user self-registering, please create a group with the nameregisterlike below: Permissions of self registered users will have the same permissions assigned to the register group."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Authenticate+with+Active+Directory+and+LDAP",
      "https://wiki.pmease.com/display/QB14/Other+permissions",
      "https://wiki.pmease.com/display/QB14/Authenticate+with+Active+Directory+and+LDAP"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Authenticate+with+Active+Directory+and+LDAP",
    "title": "Authenticate with Active Directory and LDAP",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Security Management"
    ],
    "full_text": "Administrator's Guide\nSecurity Management\nAuthenticate with Active Directory and LDAP\nVersion: QB14\nAuthenticate with Active Directory and LDAP\nQuickBuild can be configured to authenticate users through Active Directory or generic LDAP servers. To do this, please navigate to menu\nAdministration/Security Settings\n, and add an authenticator with the type Active Directory or LDAP.\nMultiple LDAP authenticators can be configured in the system to allow authenticating users to multiple sources. When a user logins into the system, QuickBuild will check user credential against the authentiators one by one, until an authenticator successfully authenticates the user. If all authenticators fail to authenticate the user, the internal database will be used to authenticate the user. New user entries will be created in the internal database for all users authenticated successfully through the authenticators. These user entries are created to hold user settings that are not available in the LDAP servers. For example, an LDAP authenticated user can edit his/her setting to add build subscriptions. These subscription settings will be saved in that user's entry in the internal database.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Authenticate with Active Directory and LDAP",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Other+permissions",
      "https://wiki.pmease.com/display/QB14/Other+permissions"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Other+permissions",
    "title": "Other permissions",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Security Management"
    ],
    "full_text": "Administrator's Guide\nSecurity Management\nOther permissions\nVersion: QB14\nOther permissions\nBelow permissions can also be assigned to a group:\nQuickBuild administration\nThis permission can be assigned by checking the\nIs Admin Group\noption of the group. Users assigned to admin group becomes administrators and will have all permissions even if they are not explicitly assigned.\nAccess to node attributes\nThis permission controls whether or not the user can view system and user attributes of grid nodes.\nExpand all configurations\nThis permission controls whether or not the user can expand the whole configuration tree in one click. to assign this permission, a group with permission\nExpand All Allowed\nneeds to be associated with the user.\nAccess system log\nThis permission controls whether or not an user can access system log.\nAllow user agent {#Otherpermissions-allowuseragent}\nThis permission controls whether or not an user can download and connect the user agent to QuickBuild server for\nproof build\npurposes.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Other permissions",
        "content": ""
      }
    ],
    "links": []
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/category/Plugin+Tutorials",
    "title": "Plugin Tutorials",
    "breadcrumb": [
      "",
      "Developer's Guide",
      "Develop Plugins"
    ],
    "full_text": "ðï¸\nSet up Plugin Development Workspace\n1. Make sure JDK version 1.8 or higher is installed on your development machine.\nðï¸\nWrite Your First Plugin\nTo start simple, we will create a plugin adding a \"hello world\" step to the step choice menu. A \"hello world\" message will be printed in the build log if this step is executed.\nðï¸\nWorking with Plugin UI\nGenerate UI with annotations\nðï¸\nWorking with Plugin Settings\nGlobal plugin setting\nðï¸\nPlugin Data Storage\nStore build related data\nðï¸\nMigrate Plugin Data\nNow your plugin is used by a lot of users and they've configured your plugin and used steps contributed by your plugin. This leads to a problem: you might need to change fields of plugin setting and step classes in new version of your plugin and the change could be incompatible with existing steps and plugin settings. We certainly do not want to have users re-define their steps and plugin settings.",
    "sections": [
      {
        "header": "ðï¸ Set up Plugin Development Workspace",
        "content": "1. Make sure JDK version 1.8 or higher is installed on your development machine."
      },
      {
        "header": "ðï¸ Write Your First Plugin",
        "content": "To start simple, we will create a plugin adding a \"hello world\" step to the step choice menu. A \"hello world\" message will be printed in the build log if this step is executed."
      },
      {
        "header": "ðï¸ Working with Plugin UI",
        "content": "Generate UI with annotations"
      },
      {
        "header": "ðï¸ Working with Plugin Settings",
        "content": "Global plugin setting"
      },
      {
        "header": "ðï¸ Plugin Data Storage",
        "content": "Store build related data"
      },
      {
        "header": "ðï¸ Migrate Plugin Data",
        "content": "Now your plugin is used by a lot of users and they've configured your plugin and used steps contributed by your plugin. This leads to a problem: you might need to change fields of plugin setting and step classes in new version of your plugin and the change could be incompatible with existing steps and plugin settings. We certainly do not want to have users re-define their steps and plugin settings."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Set+up+Plugin+Development+Workspace",
      "https://wiki.pmease.com/display/QB14/Write+Your+First+Plugin",
      "https://wiki.pmease.com/display/QB14/Working+with+Plugin+UI",
      "https://wiki.pmease.com/display/QB14/Working+with+Plugin+Settings",
      "https://wiki.pmease.com/display/QB14/Plugin+Data+Storage",
      "https://wiki.pmease.com/display/QB14/Migrate+Plugin+Data",
      "https://wiki.pmease.com/display/QB14/category/Plugin+Examples",
      "https://wiki.pmease.com/display/QB14/category/Development+References",
      "https://wiki.pmease.com/display/QB14/Set+up+Plugin+Development+Workspace",
      "https://wiki.pmease.com/display/QB14/Write+Your+First+Plugin",
      "https://wiki.pmease.com/display/QB14/Working+with+Plugin+UI",
      "https://wiki.pmease.com/display/QB14/Working+with+Plugin+Settings",
      "https://wiki.pmease.com/display/QB14/Plugin+Data+Storage",
      "https://wiki.pmease.com/display/QB14/Migrate+Plugin+Data",
      "https://wiki.pmease.com/display/QB14/Set+up+Plugin+Development+Workspace"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/category/Plugin+Examples",
    "title": "Plugin Examples",
    "breadcrumb": [
      "",
      "Developer's Guide",
      "Develop Plugins"
    ],
    "full_text": "ðï¸\nWrite Custom Gadget\nIn this example, we will enhance the plugin in tutorial Write Your First Plugin to add a custom gadget to display a specified message. Firstable, we create our gadget class as below:\nðï¸\nThe Example Plugin in Tutorial\nSource code of this plugin can be found in project com.example.myplugin after you import the example plugins, and this is the final version of the example plugin used in the Plugin Tutorials\nðï¸\nThe JavaNCSS Plugin\nThis example plugin analyzes JavaNCSS report to count source and comment lines of your project and if comment to source ratio is under a specified threshold, it reports a build error. It also adds a pie chart to build overview page displaying source and comment lines, and adds a stack bar chart to statistics page to display trends of comment to source ratio over time.\nðï¸\nCreating a Test Report Plugin\nSince 4.0, you can add your own test report plugin by using report plugin APIs. Normally, a test report plugin contributes below extension-points to QuickBuild:\nðï¸\nCreating an Issue Tracker Plugin\nSince 4.0, you can add your own test report plugin by using report plugin APIs. Normally, an typical issue tracker plugin contributes below extension points:",
    "sections": [
      {
        "header": "ðï¸ Write Custom Gadget",
        "content": "In this example, we will enhance the plugin in tutorial Write Your First Plugin to add a custom gadget to display a specified message. Firstable, we create our gadget class as below:"
      },
      {
        "header": "ðï¸ The Example Plugin in Tutorial",
        "content": "Source code of this plugin can be found in project com.example.myplugin after you import the example plugins, and this is the final version of the example plugin used in the Plugin Tutorials"
      },
      {
        "header": "ðï¸ The JavaNCSS Plugin",
        "content": "This example plugin analyzes JavaNCSS report to count source and comment lines of your project and if comment to source ratio is under a specified threshold, it reports a build error. It also adds a pie chart to build overview page displaying source and comment lines, and adds a stack bar chart to statistics page to display trends of comment to source ratio over time."
      },
      {
        "header": "ðï¸ Creating a Test Report Plugin",
        "content": "Since 4.0, you can add your own test report plugin by using report plugin APIs. Normally, a test report plugin contributes below extension-points to QuickBuild:"
      },
      {
        "header": "ðï¸ Creating an Issue Tracker Plugin",
        "content": "Since 4.0, you can add your own test report plugin by using report plugin APIs. Normally, an typical issue tracker plugin contributes below extension points:"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Write+Custom+Gadget",
      "https://wiki.pmease.com/display/QB14/The+Example+Plugin+in+Tutorial",
      "https://wiki.pmease.com/display/QB14/The+JavaNCSS+Plugin",
      "https://wiki.pmease.com/display/QB14/Creating+a+Test+Report+Plugin",
      "https://wiki.pmease.com/display/QB14/Creating+an+Issue+Tracker+Plugin",
      "https://wiki.pmease.com/display/QB14/category/Development+References",
      "https://wiki.pmease.com/display/QB14/Write+Custom+Gadget",
      "https://wiki.pmease.com/display/QB14/The+Example+Plugin+in+Tutorial",
      "https://wiki.pmease.com/display/QB14/The+JavaNCSS+Plugin",
      "https://wiki.pmease.com/display/QB14/Creating+a+Test+Report+Plugin",
      "https://wiki.pmease.com/display/QB14/Creating+an+Issue+Tracker+Plugin",
      "https://wiki.pmease.com/display/QB14/Migrate+Plugin+Data",
      "https://wiki.pmease.com/display/QB14/Write+Custom+Gadget"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/category/Development+References",
    "title": "Development References",
    "breadcrumb": [
      "",
      "Developer's Guide",
      "Develop Plugins"
    ],
    "full_text": "ðï¸\nExtension Points\nFor documentation of plugin extension points defined in the system, please extract the file \\/plugins/com.pmease.quickbuild.bootstrap/javadoc.zip/com/pmease/quickbuild/extensionpoint/package-summary.html.\nðï¸\nBean Editor\nWe use plugin setting to explain how to use the bean editor to generate plugin UI. As introduced in Write a Simple Plugin, user can provide a plugin setting class by overriding getPluginSettingClass() method in the plugin class. If provided, this class will be used by QuickBuild to generate plugin setting user interface. The setting will be saved as an instance of this class and can be retrieved later through getPluginSetting() method when this plugin runs. Let's start with a very simple plugin setting class:",
    "sections": [
      {
        "header": "ðï¸ Extension Points",
        "content": "For documentation of plugin extension points defined in the system, please extract the file \\/plugins/com.pmease.quickbuild.bootstrap/javadoc.zip/com/pmease/quickbuild/extensionpoint/package-summary.html."
      },
      {
        "header": "ðï¸ Bean Editor",
        "content": "We use plugin setting to explain how to use the bean editor to generate plugin UI. As introduced in Write a Simple Plugin, user can provide a plugin setting class by overriding getPluginSettingClass() method in the plugin class. If provided, this class will be used by QuickBuild to generate plugin setting user interface. The setting will be saved as an instance of this class and can be retrieved later through getPluginSetting() method when this plugin runs. Let's start with a very simple plugin setting class:"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Extension+Points",
      "https://wiki.pmease.com/display/QB14/Bean+Editor",
      "https://wiki.pmease.com/display/QB14/Extension+Points",
      "https://wiki.pmease.com/display/QB14/Bean+Editor",
      "https://wiki.pmease.com/display/QB14/Creating+an+Issue+Tracker+Plugin",
      "https://wiki.pmease.com/display/QB14/Extension+Points"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Available+Clients",
    "title": "Available Clients",
    "breadcrumb": [
      "",
      "Developer's Guide",
      "RESTful API"
    ],
    "full_text": "Developer's Guide\nRESTful API\nAvailable Clients\nVersion: QB14\nAvailable Clients\nPython\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Available Clients",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Get+API+Version",
      "https://wiki.pmease.com/display/QB14/Interact+with+Audits",
      "https://wiki.pmease.com/display/QB14/Interact+with+Configurations",
      "https://wiki.pmease.com/display/QB14/Interact+with+Builds",
      "https://wiki.pmease.com/display/QB14/Interact+with+Latest+Builds",
      "https://wiki.pmease.com/display/QB14/Interact+with+Build+Requests",
      "https://wiki.pmease.com/display/QB14/Trigger+Build+via+GET+Request",
      "https://wiki.pmease.com/display/QB14/Interact+with+Users",
      "https://wiki.pmease.com/display/QB14/Interact+with+Groups",
      "https://wiki.pmease.com/display/QB14/Interact+with+Group+Memberships",
      "https://wiki.pmease.com/display/QB14/Interact+with+Dashboards",
      "https://wiki.pmease.com/display/QB14/Interact+with+Group+Share",
      "https://wiki.pmease.com/display/QB14/Interact+with+User+Share",
      "https://wiki.pmease.com/display/QB14/Interact+with+Cloud+Profiles",
      "https://wiki.pmease.com/display/QB14/Interact+with+Configuration+Authorizations",
      "https://wiki.pmease.com/display/QB14/Interact+with+Resources",
      "https://wiki.pmease.com/display/QB14/Interact+with+Agent+Tokens",
      "https://wiki.pmease.com/display/QB14/Get+System+Attributes+of+Grid+Node",
      "https://wiki.pmease.com/display/QB14/Get+and+Set+User+Attributes+of+Grid+Node",
      "https://wiki.pmease.com/display/QB14/Interact+with+Reports",
      "https://wiki.pmease.com/display/QB14/Interact+with+Changes",
      "https://wiki.pmease.com/display/QB14/Interact+with+Issues",
      "https://wiki.pmease.com/display/QB14/Query+Build+Notifications",
      "https://wiki.pmease.com/display/QB14/Query+Grid+Measurements",
      "https://wiki.pmease.com/display/QB14/Access+Information+of+Published+Files",
      "https://wiki.pmease.com/display/QB14/Interact+with+Build+Agents",
      "https://wiki.pmease.com/display/QB14/Backup+Database",
      "https://wiki.pmease.com/display/QB14/Pause+System",
      "https://wiki.pmease.com/display/QB14/Resume+System",
      "https://wiki.pmease.com/display/QB14/Check+System+Pause+Information",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Get+API+Version"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Get+API+Version",
    "title": "Get API Version",
    "breadcrumb": [
      "",
      "Developer's Guide",
      "RESTful API"
    ],
    "full_text": "Developer's Guide\nRESTful API\nGet API Version\nVersion: QB14\nGet API Version\nVersion of the RESTful API can be retrieved by visiting below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nversion\nNo any authentication is required for this service. Mime type of the response is\ntext/plain\n, and the content is string representation of the API version.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Get API Version",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Interact+with+Audits",
      "https://wiki.pmease.com/display/QB14/Interact+with+Configurations",
      "https://wiki.pmease.com/display/QB14/Interact+with+Builds",
      "https://wiki.pmease.com/display/QB14/Interact+with+Latest+Builds",
      "https://wiki.pmease.com/display/QB14/Interact+with+Build+Requests",
      "https://wiki.pmease.com/display/QB14/Trigger+Build+via+GET+Request",
      "https://wiki.pmease.com/display/QB14/Interact+with+Users",
      "https://wiki.pmease.com/display/QB14/Interact+with+Groups",
      "https://wiki.pmease.com/display/QB14/Interact+with+Group+Memberships",
      "https://wiki.pmease.com/display/QB14/Interact+with+Dashboards",
      "https://wiki.pmease.com/display/QB14/Interact+with+Group+Share",
      "https://wiki.pmease.com/display/QB14/Interact+with+User+Share",
      "https://wiki.pmease.com/display/QB14/Interact+with+Cloud+Profiles",
      "https://wiki.pmease.com/display/QB14/Interact+with+Configuration+Authorizations",
      "https://wiki.pmease.com/display/QB14/Interact+with+Resources",
      "https://wiki.pmease.com/display/QB14/Interact+with+Agent+Tokens",
      "https://wiki.pmease.com/display/QB14/Get+System+Attributes+of+Grid+Node",
      "https://wiki.pmease.com/display/QB14/Get+and+Set+User+Attributes+of+Grid+Node",
      "https://wiki.pmease.com/display/QB14/Interact+with+Reports",
      "https://wiki.pmease.com/display/QB14/Interact+with+Changes",
      "https://wiki.pmease.com/display/QB14/Interact+with+Issues",
      "https://wiki.pmease.com/display/QB14/Query+Build+Notifications",
      "https://wiki.pmease.com/display/QB14/Query+Grid+Measurements",
      "https://wiki.pmease.com/display/QB14/Access+Information+of+Published+Files",
      "https://wiki.pmease.com/display/QB14/Interact+with+Build+Agents",
      "https://wiki.pmease.com/display/QB14/Backup+Database",
      "https://wiki.pmease.com/display/QB14/Pause+System",
      "https://wiki.pmease.com/display/QB14/Resume+System",
      "https://wiki.pmease.com/display/QB14/Check+System+Pause+Information",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Interact+with+Audits"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Interact+with+Audits",
    "title": "Interact with Audits",
    "breadcrumb": [
      "",
      "Developer's Guide",
      "RESTful API"
    ],
    "full_text": "Developer's Guide\nRESTful API\nInteract with Audits\nVersion: QB14\nOn this page\nInteract with Audits\nwarning\nThis API is added since QuickBuild 6.0.6.\nSearch Audits\nâ\nSyntax\nâ\nAudits can be searched using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\naudits\n?\n<\nsearch criteria1\n>\n=\n<\nvalue1\n>\n&\n<\nsearch criteria2\n>\n=\n<\nvalue2\n>\n&\n.\n.\n.\nQuery string part of the url represents various search criterias to restrict the search result. Supported search criterias are:\nSearch criteria\nExplanation\nusername\nName of the user to audit. If not specified, audit log of all users will be searched.\nsource\nSpecify source of audit to match. The character\n*\ncan be used in the source string to do wildcard match. If not specified, audits from all sources will be matched.\naction\nAction of the audit to match. If left empty, any action will be matched.\nsince\nIn the format of\nyyyy-MM-dd\nHH:mm, for example:\n2009-11-12 13:00\n. If specified, search audits generated after this date\nuntil\nIn the format of\nyyyy-MM-dd\nHH:mm, for example:\n2009-11-12 14:00\n. If specified, search builds generated before this date\nfirst\nSpecified first audit entry to return. If not specified, value\n0\nis assumed\ncount\nSpecified number of audit entries to return. This param must be specified in order not to mistakenly return all audits to stress the system\nThe response is of mime type\napplication/xml\n, and the content is XML representation of list of matched builds. If no any search criterias are specified, all builds in the system will be returned.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as administrator if the anonymous does not have administative permission.\nDemo\nâ\nBelow\ncurl\ncommands demonstrates how to combine different criterias to perform search:\nSearch recent 100 audit entries for user\nrobin\nunder configuration tree\nroot/test\n:\ncurl\n-\nu admin\n:\nadmin\n\"http://localhost:8810/rest/audits?username=robin&source=root/test/*&count=100\"\nwarning\nMake sure to append \"/\" to configuration path if you want to search against certain configuration as QuickBuild uses trailing slash to differenticate audits generated from configurations and other sources. In this example we also append\n*\nto end of source param to match all sub configurations under\nroot/test\nSearch all audits bewteen generated after\n2015-01-12 13:00\nand after\n2015-01-12 23:00\nin the system:\ncurl\n-\nu admin\n:\nadmin\n\"http://localhost:8810/rest/audits?since=2015-01-12+13:00&until=2015-01-12+23:00\"\nwarning\nHere we use\n2015-01-12+13:00\ninstead of\n2015-01-12 13:00\nas the white space in query string has to be encoded as plus sign.\nCount Audits\nâ\nCounting audits uses the same syntax as searching audits, except that:\nIt goes to url\nhttp://localhost:8810/rest/audits/count\ninstead of\nhttp://localhost:8810/rest/audits\n.\nfirst and count param should not be specified.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Interact with Audits",
        "content": ""
      },
      {
        "header": "Search Auditsâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Audits can be searched using http GET method through below url: http://localhost:8810/rest/audits?<search criteria1>=<value1>&<search criteria2>=<value2>&... Query string part of the url represents various search criterias to restrict the search result. Supported search criterias are: Search criteriaExplanationusernameName of the user to audit. If not specified, audit log of all users will be searched.sourceSpecify source of audit to match. The character*can be used in the source string to do wildcard match. If not specified, audits from all sources will be matched.actionAction of the audit to match. If left empty, any action will be matched.sinceIn the format ofyyyy-MM-ddHH:mm, for example:2009-11-12 13:00. If specified, search audits generated after this dateuntilIn the format ofyyyy-MM-ddHH:mm, for example:2009-11-12 14:00. If specified, search builds generated before this datefirstSpecified first audit entry to return. If not specified, value0is assumedcountSpecified number of audit entries to return. This param must be specified in order not to mistakenly return all audits to stress the system The response is of mime typeapplication/xml, and the content is XML representation of list of matched builds. If no any search criterias are specified, all builds in the system will be returned."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as administrator if the anonymous does not have administative permission."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommands demonstrates how to combine different criterias to perform search: Search recent 100 audit entries for userrobinunder configuration treeroot/test:curl-u admin:admin\"http://localhost:8810/rest/audits?username=robin&source=root/test/*&count=100\"warningMake sure to append \"/\" to configuration path if you want to search against certain configuration as QuickBuild uses trailing slash to differenticate audits generated from configurations and other sources. In this example we also append*to end of source param to match all sub configurations underroot/testSearch all audits bewteen generated after2015-01-12 13:00and after2015-01-12 23:00in the system:curl-u admin:admin\"http://localhost:8810/rest/audits?since=2015-01-12+13:00&until=2015-01-12+23:00\"warningHere we use2015-01-12+13:00instead of2015-01-12 13:00as the white space in query string has to be encoded as plus sign."
      },
      {
        "header": "Count Auditsâ",
        "content": "Counting audits uses the same syntax as searching audits, except that: It goes to urlhttp://localhost:8810/rest/audits/countinstead ofhttp://localhost:8810/rest/audits.first and count param should not be specified."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Interact+with+Configurations",
      "https://wiki.pmease.com/display/QB14/Interact+with+Builds",
      "https://wiki.pmease.com/display/QB14/Interact+with+Latest+Builds",
      "https://wiki.pmease.com/display/QB14/Interact+with+Build+Requests",
      "https://wiki.pmease.com/display/QB14/Trigger+Build+via+GET+Request",
      "https://wiki.pmease.com/display/QB14/Interact+with+Users",
      "https://wiki.pmease.com/display/QB14/Interact+with+Groups",
      "https://wiki.pmease.com/display/QB14/Interact+with+Group+Memberships",
      "https://wiki.pmease.com/display/QB14/Interact+with+Dashboards",
      "https://wiki.pmease.com/display/QB14/Interact+with+Group+Share",
      "https://wiki.pmease.com/display/QB14/Interact+with+User+Share",
      "https://wiki.pmease.com/display/QB14/Interact+with+Cloud+Profiles",
      "https://wiki.pmease.com/display/QB14/Interact+with+Configuration+Authorizations",
      "https://wiki.pmease.com/display/QB14/Interact+with+Resources",
      "https://wiki.pmease.com/display/QB14/Interact+with+Agent+Tokens",
      "https://wiki.pmease.com/display/QB14/Get+System+Attributes+of+Grid+Node",
      "https://wiki.pmease.com/display/QB14/Get+and+Set+User+Attributes+of+Grid+Node",
      "https://wiki.pmease.com/display/QB14/Interact+with+Reports",
      "https://wiki.pmease.com/display/QB14/Interact+with+Changes",
      "https://wiki.pmease.com/display/QB14/Interact+with+Issues",
      "https://wiki.pmease.com/display/QB14/Query+Build+Notifications",
      "https://wiki.pmease.com/display/QB14/Query+Grid+Measurements",
      "https://wiki.pmease.com/display/QB14/Access+Information+of+Published+Files",
      "https://wiki.pmease.com/display/QB14/Interact+with+Build+Agents",
      "https://wiki.pmease.com/display/QB14/Backup+Database",
      "https://wiki.pmease.com/display/QB14/Pause+System",
      "https://wiki.pmease.com/display/QB14/Resume+System",
      "https://wiki.pmease.com/display/QB14/Check+System+Pause+Information",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Interact+with+Configurations"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Interact+with+Configurations",
    "title": "Interact with Configurations",
    "breadcrumb": [
      "",
      "Developer's Guide",
      "RESTful API"
    ],
    "full_text": "Developer's Guide\nRESTful API\nInteract with Configurations\nVersion: QB14\nOn this page\nInteract with Configurations\nGet child configurations of specified configuration\nâ\nSyntax\nâ\nA list of child configurations can be accessed by parent configuration id using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nconfigurations\n?\nparent_id\n=\n<\nparent configuration id\n>\nHere\n<parent configuration id>\nrepresents id of the parent configuration. The response is of mime type\napplication/xml\nand the content is brief xml representation of list of all child configurations.\nwarning\nFor performance reason, only brief information of the configuration will be returned here, including id, name, description, schedule, runMode, errorMessage, and parent id. You may\nget the full xml representation using id\nif necessary.\nSecurity\nâ\nOnly configurations accessible by current user (specified in http BASIC authentication) will be returned.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get child configurations under the configuration with id of\n1\n:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nconfigurations\n?\nparent_id\n=\n1\nGet all descendent configurations of specified configuration\nâ\nSyntax\nâ\nAll descendent configurations can be accessed by parent configuration id using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nconfigurations\n?\nparent_id\n=\n<\nparent configuration id\n>\n&\nrecursive\n=\ntrue\nHere\n<parent configuration id>\nrepresents id of the parent configuration. The response is of mime type\napplication/xml\nand the content is brief xml representation of list of all descendent configurations.\nwarning\nFor performance reason, only brief information of the configuration will be returned here, including id, name, description, schedule, runMode, errorMessage, and parent id. You may\nget the full xml representation using id\nif necessary.\nSecurity\nâ\nOnly configurations accessible by current user (specified in http BASIC authentication) will be returned.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get descendent configurations under the configuration with id of\n1\n:\ncurl\n-\nu admin\n:\nadmin\n\"http://localhost:8810/rest/configurations?parent_id=1&recursive=true\"\nGet all configurations in the system\nâ\nSyntax\nâ\nAll configurations in the system can be accessed using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nconfigurations\n?\nrecursive\n=\ntrue\nThe response is of mime type\napplication/xml\nand the content is brief xml representation of list of all configurations.\nwarning\nFor performance reason, only brief information of the configuration will be returned here, including id, name, description, schedule, runMode, errorMessage, and parent id. You may\nget the full xml representation using id\nif necessary.\nSecurity\nâ\nOnly configurations accessible by current user (specified in http BASIC authentication) will be returned.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get descendent configurations under the configuration with id of\n1\n:\ncurl\n-\nu admin\n:\nadmin\n\"http://localhost:8810/rest/configurations?recursive=true\"\nSearch configurations by path pattern\nâ\nSyntax\nâ\nConfigurations matching specified path pattern can be accessed using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nconfigurations\n?\nsearch\n=\nsome\n/\npath\n/\npattern\nThe response is of mime type\napplication/xml\nand the content is brief xml representation of list of all matched configurations.\nwarning\nFor performance reason, only brief information of the configuration will be returned here, including id, name, description, schedule, runMode, errorMessage, and parent id. You may\nget the full xml representation using id\nif necessary.\nSecurity\nâ\nOnly configurations accessible by current user (specified in http BASIC authentication) will be returned.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get all release configurations:\ncurl\n-\nu admin\n:\nadmin\n\"http://localhost:8810/rest/configurations?search=**/release/**\"\n{Interact+with+Configurations}\nAccess configuration by id\nâ\nSyntax\nâ\nConfiguration can be accessed by id using http GET method through below url:\nhttp\n:\n/\n/\nqb\n-\nserver\n:\n8810\n/\nrest\n/\nconfigurations\n/\n<\nconfiguration id\n>\nHere\n<configuration id>\nstands for id of the configuration. The response is of mime type\napplication/xml\nand the content is xml representation of the configuration.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as an authorized QuickBuild user if the anonymous does not have the\nACCESS_SETTINGS\npermission of the requested configuration.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get xml representation of configuration with identifier\n1\n(the root configuration):\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nconfigurations\n/\n1\nAccess configuration path by id\nâ\nSyntax\nâ\nConfiguration path can be accessed by id using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nconfigurations\n/\n<\nconfiguration id\n>\n/\npath\nHere\n<configuration id>\nstands for id of the configuration. The response is of mime type\nplain/text\nand the content is string representation of the configuration path name.\nSecurity\nâ\nAny user can access this service including anonymous.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get path name of configuration with id\n2\n:\ncurl http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nconfigurations\n/\n2\n/\npath\nAccess configuration name by id\nâ\nSyntax\nâ\nConfiguration name can be accessed by id using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nconfigurations\n/\n<\nconfiguration id\n>\n/\nname\nHere\n<configuration id>\nstands for id of the configuration. The response is of mime type\nplain/text\nand the content is string representation of the configuration name.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as an authorized QuickBuild user if the anonymous is not allowed to access the requested configuration.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get name of configuration with id\n2\n:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nconfigurations\n/\n2\n/\nname\nAccess configuration description by id\nâ\nSyntax\nâ\nConfiguration description can be accessed by id using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nconfigurations\n/\n<\nconfiguration id\n>\n/\ndescription\nHere\n<configuration id>\nstands for id of the configuration. The response is of mime type\nplain/text\nand the content is string representation of the configuration description. Status code 204 (No Content) will be returned if the configuration does not have description.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as an authorized QuickBuild user if the anonymous is not allowed to access the requested configuration.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get description of configuration with id\n2\n:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nconfigurations\n/\n2\n/\ndescription\nAccess configuration error message by id\nâ\nSyntax\nâ\nConfiguration error message can be accessed by id using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nconfigurations\n/\n<\nconfiguration id\n>\n/\nerror_message\nHere\n<configuration id>\nstands for id of the configuration. The response is of mime type\nplain/text\nand the content is string representation of the configuration error message. Status code 204 (No Content) will be returned if the configuration is not in error.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as an authorized QuickBuild user if the anonymous is not allowed to access the requested configuration.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get error message of configuration with id\n2\n:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nconfigurations\n/\n2\n/\nerror_message\nAccess configuration run mode by id\nâ\nSyntax\nâ\nConfiguration run mode can be accessed by id using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nconfigurations\n/\n<\nconfiguration id\n>\n/\nrun_mode\nHere\n<configuration id>\nstands for id of the configuration. The response is of mime type\nplain/text\nand the content is string representation of configuration run mode. Status code 204 (No Content) will be returned if run mode is inherited from parent configuration.\nSecurity\nâ\nAny user can access this service including anonymous.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get run mode of configuration with id\n2\n:\ncurl http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nconfigurations\n/\n2\n/\nrun_mode\nAccess configuration schedule by id\nâ\nSyntax\nâ\nConfiguration schedule can be accessed by id using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nconfigurations\n/\n<\nconfiguration id\n>\n/\nschedule\nHere\n<configuration id>\nstands for id of the configuration. The response is of mime type\napplication/xml\nand the content is XML representation of configuration schedule. Status code 204 (No Content) will be returned if schedule is inherited from parent configuration.\nSecurity\nâ\nAny user can access this service including anonymous.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get schedule of configuration with id\n2\n:\ncurl http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nconfigurations\n/\n2\n/\nschedule\nAccess configuration variables in hierarchy by id\nâ\nSyntax\nâ\nConfiguration variables in hierarchy can be accessed by id using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nconfigurations\n/\n<\nconfiguration id\n>\n/\nvariablesInHierarchy\nHere\n<configuration id>\nstands for id of the configuration. The response is of mime type\napplication/xml\nand the content is xml representation of returned variables.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as an authorized QuickBuild user if the anonymous is not allowed to access settings of the requested configuration.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get hierarchy variables of configuration with id\n2\n:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nconfigurations\n/\n2\n/\nvariablesInHierarchy\nAccess interpolated configuration variables in hierarchy by id\nâ\nSyntax\nâ\nInterpolated configuration variables in hierarchy can be accessed by id using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nconfigurations\n/\n<\nconfiguration id\n>\n/\ninterpolatedVariablesInHierarchy\nHere\n<configuration id>\nstands for id of the configuration. The response is of mime type\napplication/xml\nand the content is xml representation of interpolated variables.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as an authorized QuickBuild user if the anonymous is not allowed to access settings of the requested configuration.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get interpolated hierarchy variables of configuration with id\n2\n:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nconfigurations\n/\n2\n/\ninterpolatedVariablesInHierarchy\nAccess average build duration of configuration by id\nâ\nSyntax\nâ\nAverage build duration can be accessed by configuration id using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nconfigurations\n/\n<\nconfiguration id\n>\n/\naverage_duration\n?\nfrom_date\n=\n<\nfrom date\n>\n&\nto_date\n=\n<\nto\ndate\n>\nHere\n<configuration id>\nstands for id of the configuration, and one can optionally limit scope of build for calculation via query parameter\nfrom_date\nand\nto_date\n. Date is of format yyyy-MM-dd, for example: 2009-11-12. The response is of mime type\nplain/text\nand the content is milli-seconds of average build duration.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as an authorized QuickBuild user if the anonymous is not allowed to access the requested configuration.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get average duration of configuration with id\n2\n:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nconfigurations\n/\n2\n/\naverage_duration\nAccess build success rate of configuration by id\nâ\nSyntax\nâ\nBuild success rate can be accessed by configuration id using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nconfigurations\n/\n<\nconfiguration id\n>\n/\nsuccess_rate\n?\nfrom_date\n=\n<\nfrom date\n>\n&\nto_date\n=\n<\nto\ndate\n>\nHere\n<configuration id>\nstands for id of the configuration, and one can optionally limit scope of build for calculation via query parameter\nfrom_date\nand\nto_date\n. Date is of format yyyy-MM-dd, for example: 2009-11-12. The response is of mime type\nplain/text\nand the content is an integer in the range of 0~100, with 0 stands for 0%, and 100 stands for 100%.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as an authorized QuickBuild user if the anonymous is not allowed to access the requested configuration.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get success rate of configuration with id\n2\n:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nconfigurations\n/\n2\n/\nsuccess_rate\nAccess parent configuration by id\nâ\nSyntax\nâ\nParent configuration can be accessed by id using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nconfigurations\n/\n<\nconfiguration id\n>\n/\nparent\nHere\n<configuration id>\nstands for id of the configuration. The response is of mime type\nplain/text\nand the content is string representation of id of parent configuration. Status code 204 (No Content) will be returned if the configuration is root configuration and does not have parent.\nSecurity\nâ\nAny user can access this service including anonymous.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get parent of configuration with id\n2\n:\ncurl http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nconfigurations\n/\n2\n/\nparent\nUpdate configuration\nâ\nSyntax\nâ\nConfiguration can be updated by posting xml representation of the configuration to below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nconfigurations\nPlease note that the\nparent\nelement denotes id of the parent configuration.\nNormally you do not need to create the xml from scratch: you may retrieve full xml representation of the configuration using configuration id, modify certain parts of the xml and post back to above url.\nThe response is of mime type\ntext/plain\nand the content is string representation of the configuration id being updated.\nwarning\nIf you want to change value of secret elements (elements with attribute \"secret=encrypt\", including repository passwords, secret variable values, etc.), please make sure to remove the \"secret\" attribute and then supply a plain text password; otherwise, QuickBuild will think that the supplied password has already been encrypted.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have\nEDIT_SETTINGS\npermission on the requested configuration.\nDemo\nâ\nWe will use\ncurl\nto demonstrate how to modify description of configuration\nroot/test\n:\nRetrieve id of configuration\nroot/test\nusing id service\n:\ncurl http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nids\n?\nconfiguration_path\n=\nroot\n/\ntest\nRetrieve full xml representation of configuration\nroot/test\ninto a temp file using below command:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nconfigurations\n/\n<\nconfiguration id\n>\n>\ntempfile\n.\nxml\nHere\n<configuration id>\nneeds to be replaced with query result of first step.\nEdit\ntempfile.xml\nand change the\ndescription\nproperty to desired value (or add description element if it does not exist).\nPost back modified content using below command:\ncurl\n-\nX\nPOST\n-\nu admin\n:\nadmin\n--\ndata\n-\nbinary\n\"@tempfile.xml\"\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nconfigurations\nCreate configuration\nâ\nSyntax\nâ\nConfiguration can be created by posting xml representation of the configuration to below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nconfigurations\nPlease note that:\nThe posted xml should NOT contain the\nid\nelement; otherwise, QuickBuild will treat the post as an update to the configuration with that id.\nThe\nparent\nelement denotes id of the parent configuration.\nNormally you do not need to create the xml from scratch: you may retrieve xml representation of a templating configuration using various configuration access methods, remove the\nid\nelement, modify certain parts and post back to above url.\nThe response is of mime type\ntext/plain\nand the content is string representation of id of the newly created configuration.\nSecret elements (Elements with attribute \"secret=encrypt\" in XML representation of an existing configuration, typically they are repository passwords, secret variable values, etc.) should not contain the \"secret\" attribute; otherwise QuickBuild will think that the password has already been encrypted. However if you creating configuration by copying existing one and want to remain the passwords, the \"secret\" attribute should then be preserved.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have\nADD_CHILDREN\npermission on the parent configuration.\nDemo\nâ\nWe will use\ncurl\nto demonstrate how to create a new configuration\nroot/test-copy\nby copying the configuration\nroot/test\n.\nRetrieve id of configuration\nroot/test\nusing id service\n:\ncurl http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nids\n?\nconfiguration_path\n=\nroot\n/\ntest\nRetrieve full xml representation of configuration\nroot/test\ninto a temp file using below command:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nconfigurations\n/\n<\nconfiguration id\n>\n>\ntempfile\n.\nxml\nHere\n<configuration id>\nneeds to be replaced with query result of first step.\nEdit\ntempfile.xml\n, remove the\nid\nelement, and change the\nname\nelement to be\ntest-copy\nPost back modified content using below command:\ncurl\n-\nX\nPOST\n-\nu admin\n:\nadmin\n--\ndata\n-\nbinary\n\"@tempfile.xml\"\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nconfigurations\nCopy configuration (available since 4.0.72)\nâ\nSyntax\nâ\nConfiguration can be copied via GET method like below:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nconfigurations\n/\n<\nconfiguration id\n>\n/\ncopy\n?\nparent_id\n=\n<\nparent id\n>\n&\nname\n=\n<\nname\n>\n&\nrecursive\n=\n[\ntrue\n|\nfalse\n]\nHere:\nThe\n<configuration id>\nhas to be replaced by id of the configuration to be copied.\nThe\n<parent id>\nhas to be replaced by id of the parent to place newly copied configuration.\nThe\n<name>\nhas to be replaced by name of the newly copied configuration.\nSpecify parameter\nrecursive=true\nto copy specified configuration and all its descendant configurations recursively; otherwise, only the configuration itself will be copied.\nThe response is of mime type\ntext/plain\nand the content is string representation of id of the newly copied configuration.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have\nACCESS_SETTINGS\npermission on the configuration to be copied and have\nADD_CHILDREN\npermission on the parent configuration.\nDemo\nâ\nWe will use\ncurl\nto demonstrate how to copy a configuration\nroot/project/test\nrecursively as\nroot/project/test_copy\n.\nRetrieve id of configuration\nroot/project/test\nusing id service\n:\ncurl http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nids\n?\nconfiguration_path\n=\nroot\n/\nproject\n/\ntest\nAssume retrieved identifier is 100.\nRetrieve id of configuration\nroot/project\nusing id service\n:\ncurl http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nids\n?\nconfiguration_path\n=\nroot\n/\nproject\nAssume retrieved parent identifier is 2.\nRun below command to copy the configuration:\ncurl\n-\nu admin\n:\nadmin\n\"http://localhost:8810/rest/configurations/100/copy?parent_id=2&name=test_copy&recursive=true\"\nDelete configuration\nâ\nSyntax\nâ\nConfiguration can be deleted using http DELETE method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nconfigurations\n/\n<\nconfiguration id\n>\nHere\n<configuration id>\nstands for id of the configuration to be deleted and can be queried with\nid service\n.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have\nDELETE_CHILDREN\non the parent configuration.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to delete the configuration with id\n2\n:\ncurl\n-\nX\nDELETE\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nconfigurations\n/\n2\nLast updated\non\nOct 24, 2024",
    "sections": [
      {
        "header": "Interact with Configurations",
        "content": ""
      },
      {
        "header": "Get child configurations of specified configurationâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "A list of child configurations can be accessed by parent configuration id using http GET method through below url: http://localhost:8810/rest/configurations?parent_id=<parent configuration id> Here<parent configuration id>represents id of the parent configuration. The response is of mime typeapplication/xmland the content is brief xml representation of list of all child configurations. warningFor performance reason, only brief information of the configuration will be returned here, including id, name, description, schedule, runMode, errorMessage, and parent id. You mayget the full xml representation using idif necessary."
      },
      {
        "header": "Securityâ",
        "content": "Only configurations accessible by current user (specified in http BASIC authentication) will be returned."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get child configurations under the configuration with id of1: curl-u admin:admin http://localhost:8810/rest/configurations?parent_id=1"
      },
      {
        "header": "Get all descendent configurations of specified configurationâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "All descendent configurations can be accessed by parent configuration id using http GET method through below url: http://localhost:8810/rest/configurations?parent_id=<parent configuration id>&recursive=true Here<parent configuration id>represents id of the parent configuration. The response is of mime typeapplication/xmland the content is brief xml representation of list of all descendent configurations. warningFor performance reason, only brief information of the configuration will be returned here, including id, name, description, schedule, runMode, errorMessage, and parent id. You mayget the full xml representation using idif necessary."
      },
      {
        "header": "Securityâ",
        "content": "Only configurations accessible by current user (specified in http BASIC authentication) will be returned."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get descendent configurations under the configuration with id of1: curl-u admin:admin\"http://localhost:8810/rest/configurations?parent_id=1&recursive=true\""
      },
      {
        "header": "Get all configurations in the systemâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "All configurations in the system can be accessed using http GET method through below url: http://localhost:8810/rest/configurations?recursive=true The response is of mime typeapplication/xmland the content is brief xml representation of list of all configurations. warningFor performance reason, only brief information of the configuration will be returned here, including id, name, description, schedule, runMode, errorMessage, and parent id. You mayget the full xml representation using idif necessary."
      },
      {
        "header": "Securityâ",
        "content": "Only configurations accessible by current user (specified in http BASIC authentication) will be returned."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get descendent configurations under the configuration with id of1: curl-u admin:admin\"http://localhost:8810/rest/configurations?recursive=true\""
      },
      {
        "header": "Search configurations by path patternâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Configurations matching specified path pattern can be accessed using http GET method through below url: http://localhost:8810/rest/configurations?search=some/path/pattern The response is of mime typeapplication/xmland the content is brief xml representation of list of all matched configurations. warningFor performance reason, only brief information of the configuration will be returned here, including id, name, description, schedule, runMode, errorMessage, and parent id. You mayget the full xml representation using idif necessary."
      },
      {
        "header": "Securityâ",
        "content": "Only configurations accessible by current user (specified in http BASIC authentication) will be returned."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get all release configurations: curl-u admin:admin\"http://localhost:8810/rest/configurations?search=**/release/**\" {Interact+with+Configurations}"
      },
      {
        "header": "Access configuration by idâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Configuration can be accessed by id using http GET method through below url: http://qb-server:8810/rest/configurations/<configuration id> Here<configuration id>stands for id of the configuration. The response is of mime typeapplication/xmland the content is xml representation of the configuration."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as an authorized QuickBuild user if the anonymous does not have theACCESS_SETTINGSpermission of the requested configuration."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get xml representation of configuration with identifier1(the root configuration): curl-u admin:admin http://localhost:8810/rest/configurations/1"
      },
      {
        "header": "Access configuration path by idâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Configuration path can be accessed by id using http GET method through below url: http://localhost:8810/rest/configurations/<configuration id>/path Here<configuration id>stands for id of the configuration. The response is of mime typeplain/textand the content is string representation of the configuration path name."
      },
      {
        "header": "Securityâ",
        "content": "Any user can access this service including anonymous."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get path name of configuration with id2: curl http://localhost:8810/rest/configurations/2/path"
      },
      {
        "header": "Access configuration name by idâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Configuration name can be accessed by id using http GET method through below url: http://localhost:8810/rest/configurations/<configuration id>/name Here<configuration id>stands for id of the configuration. The response is of mime typeplain/textand the content is string representation of the configuration name."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as an authorized QuickBuild user if the anonymous is not allowed to access the requested configuration."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get name of configuration with id2: curl-u admin:admin http://localhost:8810/rest/configurations/2/name"
      },
      {
        "header": "Access configuration description by idâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Configuration description can be accessed by id using http GET method through below url: http://localhost:8810/rest/configurations/<configuration id>/description Here<configuration id>stands for id of the configuration. The response is of mime typeplain/textand the content is string representation of the configuration description. Status code 204 (No Content) will be returned if the configuration does not have description."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as an authorized QuickBuild user if the anonymous is not allowed to access the requested configuration."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get description of configuration with id2: curl-u admin:admin http://localhost:8810/rest/configurations/2/description"
      },
      {
        "header": "Access configuration error message by idâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Configuration error message can be accessed by id using http GET method through below url: http://localhost:8810/rest/configurations/<configuration id>/error_message Here<configuration id>stands for id of the configuration. The response is of mime typeplain/textand the content is string representation of the configuration error message. Status code 204 (No Content) will be returned if the configuration is not in error."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as an authorized QuickBuild user if the anonymous is not allowed to access the requested configuration."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get error message of configuration with id2: curl-u admin:admin http://localhost:8810/rest/configurations/2/error_message"
      },
      {
        "header": "Access configuration run mode by idâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Configuration run mode can be accessed by id using http GET method through below url: http://localhost:8810/rest/configurations/<configuration id>/run_mode Here<configuration id>stands for id of the configuration. The response is of mime typeplain/textand the content is string representation of configuration run mode. Status code 204 (No Content) will be returned if run mode is inherited from parent configuration."
      },
      {
        "header": "Securityâ",
        "content": "Any user can access this service including anonymous."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get run mode of configuration with id2: curl http://localhost:8810/rest/configurations/2/run_mode"
      },
      {
        "header": "Access configuration schedule by idâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Configuration schedule can be accessed by id using http GET method through below url: http://localhost:8810/rest/configurations/<configuration id>/schedule Here<configuration id>stands for id of the configuration. The response is of mime typeapplication/xmland the content is XML representation of configuration schedule. Status code 204 (No Content) will be returned if schedule is inherited from parent configuration."
      },
      {
        "header": "Securityâ",
        "content": "Any user can access this service including anonymous."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get schedule of configuration with id2: curl http://localhost:8810/rest/configurations/2/schedule"
      },
      {
        "header": "Access configuration variables in hierarchy by idâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Configuration variables in hierarchy can be accessed by id using http GET method through below url: http://localhost:8810/rest/configurations/<configuration id>/variablesInHierarchy Here<configuration id>stands for id of the configuration. The response is of mime typeapplication/xmland the content is xml representation of returned variables."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as an authorized QuickBuild user if the anonymous is not allowed to access settings of the requested configuration."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get hierarchy variables of configuration with id2: curl-u admin:admin http://localhost:8810/rest/configurations/2/variablesInHierarchy"
      },
      {
        "header": "Access interpolated configuration variables in hierarchy by idâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Interpolated configuration variables in hierarchy can be accessed by id using http GET method through below url: http://localhost:8810/rest/configurations/<configuration id>/interpolatedVariablesInHierarchy Here<configuration id>stands for id of the configuration. The response is of mime typeapplication/xmland the content is xml representation of interpolated variables."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as an authorized QuickBuild user if the anonymous is not allowed to access settings of the requested configuration."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get interpolated hierarchy variables of configuration with id2: curl-u admin:admin http://localhost:8810/rest/configurations/2/interpolatedVariablesInHierarchy"
      },
      {
        "header": "Access average build duration of configuration by idâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Average build duration can be accessed by configuration id using http GET method through below url: http://localhost:8810/rest/configurations/<configuration id>/average_duration?from_date=<from date>&to_date=<todate> Here<configuration id>stands for id of the configuration, and one can optionally limit scope of build for calculation via query parameterfrom_dateandto_date. Date is of format yyyy-MM-dd, for example: 2009-11-12. The response is of mime typeplain/textand the content is milli-seconds of average build duration."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as an authorized QuickBuild user if the anonymous is not allowed to access the requested configuration."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get average duration of configuration with id2: curl-u admin:admin http://localhost:8810/rest/configurations/2/average_duration"
      },
      {
        "header": "Access build success rate of configuration by idâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Build success rate can be accessed by configuration id using http GET method through below url: http://localhost:8810/rest/configurations/<configuration id>/success_rate?from_date=<from date>&to_date=<todate> Here<configuration id>stands for id of the configuration, and one can optionally limit scope of build for calculation via query parameterfrom_dateandto_date. Date is of format yyyy-MM-dd, for example: 2009-11-12. The response is of mime typeplain/textand the content is an integer in the range of 0~100, with 0 stands for 0%, and 100 stands for 100%."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as an authorized QuickBuild user if the anonymous is not allowed to access the requested configuration."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get success rate of configuration with id2: curl-u admin:admin http://localhost:8810/rest/configurations/2/success_rate"
      },
      {
        "header": "Access parent configuration by idâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Parent configuration can be accessed by id using http GET method through below url: http://localhost:8810/rest/configurations/<configuration id>/parent Here<configuration id>stands for id of the configuration. The response is of mime typeplain/textand the content is string representation of id of parent configuration. Status code 204 (No Content) will be returned if the configuration is root configuration and does not have parent."
      },
      {
        "header": "Securityâ",
        "content": "Any user can access this service including anonymous."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get parent of configuration with id2: curl http://localhost:8810/rest/configurations/2/parent"
      },
      {
        "header": "Update configurationâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Configuration can be updated by posting xml representation of the configuration to below url: http://localhost:8810/rest/configurations Please note that theparentelement denotes id of the parent configuration. Normally you do not need to create the xml from scratch: you may retrieve full xml representation of the configuration using configuration id, modify certain parts of the xml and post back to above url. The response is of mime typetext/plainand the content is string representation of the configuration id being updated. warningIf you want to change value of secret elements (elements with attribute \"secret=encrypt\", including repository passwords, secret variable values, etc.), please make sure to remove the \"secret\" attribute and then supply a plain text password; otherwise, QuickBuild will think that the supplied password has already been encrypted."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not haveEDIT_SETTINGSpermission on the requested configuration."
      },
      {
        "header": "Demoâ",
        "content": "We will usecurlto demonstrate how to modify description of configurationroot/test: Retrieve id of configurationroot/testusing id service:curl http://localhost:8810/rest/ids?configuration_path=root/testRetrieve full xml representation of configurationroot/testinto a temp file using below command:curl-u admin:admin http://localhost:8810/rest/configurations/<configuration id>>tempfile.xmlHere<configuration id>needs to be replaced with query result of first step.Edittempfile.xmland change thedescriptionproperty to desired value (or add description element if it does not exist).Post back modified content using below command:curl-XPOST-u admin:admin--data-binary\"@tempfile.xml\"http://localhost:8810/rest/configurations"
      },
      {
        "header": "Create configurationâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Configuration can be created by posting xml representation of the configuration to below url: http://localhost:8810/rest/configurations Please note that: The posted xml should NOT contain theidelement; otherwise, QuickBuild will treat the post as an update to the configuration with that id.Theparentelement denotes id of the parent configuration.Normally you do not need to create the xml from scratch: you may retrieve xml representation of a templating configuration using various configuration access methods, remove theidelement, modify certain parts and post back to above url.The response is of mime typetext/plainand the content is string representation of id of the newly created configuration.Secret elements (Elements with attribute \"secret=encrypt\" in XML representation of an existing configuration, typically they are repository passwords, secret variable values, etc.) should not contain the \"secret\" attribute; otherwise QuickBuild will think that the password has already been encrypted. However if you creating configuration by copying existing one and want to remain the passwords, the \"secret\" attribute should then be preserved."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not haveADD_CHILDRENpermission on the parent configuration."
      },
      {
        "header": "Demoâ",
        "content": "We will usecurlto demonstrate how to create a new configurationroot/test-copyby copying the configurationroot/test. Retrieve id of configurationroot/testusing id service:curl http://localhost:8810/rest/ids?configuration_path=root/testRetrieve full xml representation of configurationroot/testinto a temp file using below command:curl-u admin:admin http://localhost:8810/rest/configurations/<configuration id>>tempfile.xmlHere<configuration id>needs to be replaced with query result of first step.Edittempfile.xml, remove theidelement, and change thenameelement to betest-copyPost back modified content using below command:curl-XPOST-u admin:admin--data-binary\"@tempfile.xml\"http://localhost:8810/rest/configurations"
      },
      {
        "header": "Copy configuration (available since 4.0.72)â",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Configuration can be copied via GET method like below: http://localhost:8810/rest/configurations/<configuration id>/copy?parent_id=<parent id>&name=<name>&recursive=[true|false] Here: The<configuration id>has to be replaced by id of the configuration to be copied.The<parent id>has to be replaced by id of the parent to place newly copied configuration.The<name>has to be replaced by name of the newly copied configuration.Specify parameterrecursive=trueto copy specified configuration and all its descendant configurations recursively; otherwise, only the configuration itself will be copied. The response is of mime typetext/plainand the content is string representation of id of the newly copied configuration."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not haveACCESS_SETTINGSpermission on the configuration to be copied and haveADD_CHILDRENpermission on the parent configuration."
      },
      {
        "header": "Demoâ",
        "content": "We will usecurlto demonstrate how to copy a configurationroot/project/testrecursively asroot/project/test_copy. Retrieve id of configurationroot/project/testusing id service:curl http://localhost:8810/rest/ids?configuration_path=root/project/testAssume retrieved identifier is 100.Retrieve id of configurationroot/projectusing id service:curl http://localhost:8810/rest/ids?configuration_path=root/projectAssume retrieved parent identifier is 2.Run below command to copy the configuration:curl-u admin:admin\"http://localhost:8810/rest/configurations/100/copy?parent_id=2&name=test_copy&recursive=true\""
      },
      {
        "header": "Delete configurationâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Configuration can be deleted using http DELETE method through below url: http://localhost:8810/rest/configurations/<configuration id> Here<configuration id>stands for id of the configuration to be deleted and can be queried withid service."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not haveDELETE_CHILDRENon the parent configuration."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to delete the configuration with id2: curl-XDELETE-u admin:admin http://localhost:8810/rest/configurations/2"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Interact+with+Builds",
      "https://wiki.pmease.com/display/QB14/Interact+with+Latest+Builds",
      "https://wiki.pmease.com/display/QB14/Interact+with+Build+Requests",
      "https://wiki.pmease.com/display/QB14/Trigger+Build+via+GET+Request",
      "https://wiki.pmease.com/display/QB14/Interact+with+Users",
      "https://wiki.pmease.com/display/QB14/Interact+with+Groups",
      "https://wiki.pmease.com/display/QB14/Interact+with+Group+Memberships",
      "https://wiki.pmease.com/display/QB14/Interact+with+Dashboards",
      "https://wiki.pmease.com/display/QB14/Interact+with+Group+Share",
      "https://wiki.pmease.com/display/QB14/Interact+with+User+Share",
      "https://wiki.pmease.com/display/QB14/Interact+with+Cloud+Profiles",
      "https://wiki.pmease.com/display/QB14/Interact+with+Configuration+Authorizations",
      "https://wiki.pmease.com/display/QB14/Interact+with+Resources",
      "https://wiki.pmease.com/display/QB14/Interact+with+Agent+Tokens",
      "https://wiki.pmease.com/display/QB14/Get+System+Attributes+of+Grid+Node",
      "https://wiki.pmease.com/display/QB14/Get+and+Set+User+Attributes+of+Grid+Node",
      "https://wiki.pmease.com/display/QB14/Interact+with+Reports",
      "https://wiki.pmease.com/display/QB14/Interact+with+Changes",
      "https://wiki.pmease.com/display/QB14/Interact+with+Issues",
      "https://wiki.pmease.com/display/QB14/Query+Build+Notifications",
      "https://wiki.pmease.com/display/QB14/Query+Grid+Measurements",
      "https://wiki.pmease.com/display/QB14/Access+Information+of+Published+Files",
      "https://wiki.pmease.com/display/QB14/Interact+with+Build+Agents",
      "https://wiki.pmease.com/display/QB14/Backup+Database",
      "https://wiki.pmease.com/display/QB14/Pause+System",
      "https://wiki.pmease.com/display/QB14/Resume+System",
      "https://wiki.pmease.com/display/QB14/Check+System+Pause+Information",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Interact+with+Builds"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Interact+with+Builds",
    "title": "Interact with Builds",
    "breadcrumb": [
      "",
      "Developer's Guide",
      "RESTful API"
    ],
    "full_text": "Developer's Guide\nRESTful API\nInteract with Builds\nVersion: QB14\nOn this page\nInteract with Builds\nAccess build by build id\nâ\nSyntax\nâ\nBuild can be accessed by id using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nbuilds\n/\n<\nbuild id\n>\nThe response is of mime type\napplication/xml\n, and the content is XML representation of the build.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as an authorized QuickBuild user if the anonymous does not have permission to access belonging configuration of requested build.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to access XML representation of build with id\n14\n:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nbuilds\n/\n14\nAccess build status by build id\nâ\nSyntax\nâ\nBuild status can be accessed by build id using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nbuilds\n/\n<\nbuild id\n>\n/\nstatus\nThe response is of mime type\ntext/plain\n, and the content is string representation of the build status.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as an authorized QuickBuild user if the anonymous does not have permission to access belonging configuration of requested build.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to access status of build with id\n14\n:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nbuilds\n/\n14\n/\nstatus\nAccess build begin date by build id\nâ\nSyntax\nâ\nBuild begin date can be accessed by build id using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nbuilds\n/\n<\nbuild id\n>\n/\nbegin_date\nThe response is of mime type\ntext/plain\n, and the content is string representation of build begin date (mill-seconds since January 1, 1970, 00:00:00 GMT)\nSecurity\nâ\nYou will need to use http BASIC authentication to login as an authorized QuickBuild user if the anonymous does not have permission to access belonging configuration of requested build.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to access begin date of build with id\n14\n:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nbuilds\n/\n14\n/\nbegin_date\nAccess build version by build id\nâ\nSyntax\nâ\nBuild version can be accessed by build id using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nbuilds\n/\n<\nbuild id\n>\n/\nversion\nThe response is of mime type\ntext/plain\n, and the content is string representation of the build version.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as an authorized QuickBuild user if the anonymous does not have permission to access belonging configuration of requested build.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to access version of build with id\n14\n:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nbuilds\n/\n14\n/\nversion\nAccess build duration by build id\nâ\nSyntax\nâ\nBuild duration can be accessed by build id using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nbuilds\n/\n<\nbuild id\n>\n/\nduration\nThe response is of mime type\ntext/plain\n, and the content is string representation of the build duration (milli-seconds). Status 204 (No Content) will be returned if build is not finished.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as an authorized QuickBuild user if the anonymous does not have permission to access belonging configuration of requested build.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to access duration of build with id\n14\n:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nbuilds\n/\n14\n/\nduration\n{Interact+with+Builds}\nGet build request id by build id\nâ\nSyntax\nâ\nBuild request\nid can be accessed by build id using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nbuilds\n/\n<\nbuild id\n>\n/\nrequest_id\nThe response is of mime type\ntext/plain\n, and the content is string representation of the build request id. Status 204 (No Content) will be returned if build is finished.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as an authorized QuickBuild user if the anonymous does not have permission to access belonging configuration of requested build.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get request id of build with id\n14\n:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nbuilds\n/\n14\n/\nrequest_id\nAccess executed steps by build id\nâ\nSyntax\nâ\nExecuted steps of a build can be accessed by build id using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nbuilds\n/\n<\nbuild id\n>\n/\nsteps\nThe response is of mime type\napplication/xml\n, and the content is XML representation of the list of steps executed in the build.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have permission to access settings of belonging configuration.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to access executed steps by build with id\n14\n:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nbuilds\n/\n14\n/\nsteps\nAccess used repositories by build id\nâ\nSyntax\nâ\nUsed repositories of a build can be accessed by build id using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nbuilds\n/\n<\nbuild id\n>\n/\nrepositories\nThe response is of mime type\napplication/xml\n, and the content is XML representation of the list of repositories used in the build.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have permission to access settings of belonging configuration.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to access used repositories by build with id\n14\n:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nbuilds\n/\n14\n/\nrepositories\nAccess used variables by build id\nâ\nSyntax\nâ\nUsed variables of a build can be accessed by build id using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nbuilds\n/\n<\nbuild id\n>\n/\nvariables\nThe response is of mime type\napplication/xml\n, and the content is XML representation of the list of variables used in the build.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have permission to access build variables.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to access used variables in build with id\n14\n:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nbuilds\n/\n14\n/\nvariables\nAccess dependency builds by build id\nâ\nSyntax\nâ\nAll dependency builds whose artifacts are used by current build can be accessed by build id using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nbuilds\n/\n<\nbuild id\n>\n/\ndependencies\nThe response is of mime type\napplication/xml\n, and the content is XML representation of the list of dependency builds of specified build.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have permission to access all dependency builds of specified build.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to access dependency builds of build with id\n14\n:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nbuilds\n/\n14\n/\ndependencies\nAccess dependent builds by build id\nâ\nSyntax\nâ\nAll dependent builds who using artifacts of current build can be accessed by build id using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nbuilds\n/\n<\nbuild id\n>\n/\ndependents\nThe response is of mime type\napplication/xml\n, and the content is XML representation of the list of dependent builds of specified build.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have permission to access all dependent builds of specified build.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to access dependent builds of build with id\n14\n:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nbuilds\n/\n14\n/\ndependents\nSearch Builds\nâ\nSyntax\nâ\nBuilds can be searched using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nbuilds\n?\n<\nsearch criteria1\n>\n=\n<\nvalue1\n>\n&\n<\nsearch criteria2\n>\n=\n<\nvalue2\n>\n&\n.\n.\n.\nQuery string part of the url represents various search criterias to restrict the search result. Supported search criterias are:\nSearch criteria\nExplanation\nconfiguration_id\nThis tells QuickBuild under which configuration id to search builds. If not specified, all configurations will be searched.\nrecursive\nIf set to\ntrue\n, QuickBuild will also search builds in all descendent configurations of specified configuration. The value is assumed as\nfalse\nif not specified.\nfrom_date\nIn the format of\nyyyy-MM-dd\n, for example:\n2009-11-12\n. If specified, search builds generated after this date\nto_date\nIn the format of\nyyyy-MM-dd\n, for example:\n2009-11-12\n. If specified, search builds generated before this date\nversion\nSpecify the build version to match. The character\n*\ncan be used in the version string to do wildcard match. If not specified, all versions will be matched.\nstatus\nStatus of the build to match. Valid build statuses are:\nSUCCESSFUL\n,\nFAILED\n,\nRECOMMENDED\n,\nCANCELLED\n,\nRUNNING\n,\nTIMEOUT\n. If left empty, any build status will be matched.\nuser_id\nMatch builds which is triggered by specified user. If not specified, builds triggered by any user will be matched.\nmaster_node\nMatch builds with master step running on specified node if specified.\npromoted_from_id\nMatch builds promoted from specified build id if specified.\nrequest_id\nIf specified, match builds with specified build request id\nfirst\nSpecify start position of search results. Position\n0\nis assumed if this param is not specified.\ncount\nSpecify number of builds to return. This parameter is required.\nThe response is of mime type\napplication/xml\n, and the content is XML representation of list of matched builds.\ndanger\nThe parameter\ncount\nis required to limit the returned result set in order not to put heavy load on the server.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have permission to access returned builds.\nDemo\nâ\nBelow\ncurl\ncommands demonstrates how to combine different criterias to perform search:\nSearch all failed builds under configuration with id\n2\n:\ncurl\n-\nu admin\n:\nadmin\n\"http://localhost:8810/rest/builds?configuration_id=2&status=FAILED&count=100\"\nSearch all successful builds generated before\n2009-11-12\nin the system:\ncurl\n-\nu admin\n:\nadmin\n\"http://localhost:8810/rest/builds?status=SUCCESSFUL&to_date=2009-11-12&count=100\"\nSearch all failed builds with version containing\nqa\n:\ncurl\n-\nu admin\n:\nadmin\n\"http://localhost:8810/rest/builds?version=*qa*&status=FAILED&count=100\"\nCount Builds\nâ\nSyntax\nâ\nBuilds can be counted using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nbuilds\n/\ncount\n?\n<\nsearch criteria1\n>\n=\n<\nvalue1\n>\n&\n<\nsearch criteria2\n>\n=\n<\nvalue2\n>\n&\n.\n.\n.\nQuery string part of the url represents various search criterias to restrict the search result. Supported search criterias are:\nSearch criteria\nExplanation\nconfiguration_id\nThis tells QuickBuild under which configuration id to search builds. If not specified, all configurations will be searched.\nrecursive\nIf set to\ntrue\n, QuickBuild will also search builds in all descendent configurations of specified configuration. The value is assumed as\nfalse\nif not specified.\nfrom_date\nIn the format of\nyyyy-MM-dd\n, for example:\n2009-11-12\n. If specified, search builds generated after this date\nto_date\nIn the format of\nyyyy-MM-dd\n, for example:\n2009-11-12\n. If specified, search builds generated before this date\nversion\nSpecify the build version to match. The character\n*\ncan be used in the version string to do wildcard match. If not specified, all versions will be matched.\nstatus\nStatus of the build to match. Valid build statuses are:\nSUCCESSFUL\n,\nFAILED\n,\nRECOMMENDED\n,\nCANCELLED\n,\nRUNNING\n,\nTIMEOUT\n. If left empty, any build status will be matched.\nuser_id\nMatch builds which is triggered by specified user. If not specified, builds triggered by any user will be matched.\npromoted_from_id\nIf specified, match builds which is promoted from specified build\nrequest_id\nIf specified, match builds with specified build request id\nThe response is of mime type\ntext/plain\n, and the content is string representation of number of builds matching search criterias. If no any search criterias are specified, all builds in the system will be counted.\nSecurity\nâ\nAny user can call this RESTful API to count builds in system.\nDemo\nâ\nBelow\ncurl\ncommands demonstrates how to combine different criterias to perform build counting:\nCount all failed builds under configuration with id\n2\n:\ncurl\n-\nu admin\n:\nadmin\n\"http://localhost:8810/rest/builds/count?configuration_id=2&status=FAILED\"\nCount all successful builds generated before\n2009-11-12\nin the system:\ncurl\n-\nu admin\n:\nadmin\n\"http://localhost:8810/rest/builds/count?status=SUCCESSFUL&to_date=2009-11-12\"\nCount all failed builds with version containing\nqa\n:\ncurl\n-\nu admin\n:\nadmin\n\"http://localhost:8810/rest/builds/count?version=*qa*&status=FAILED\"\nUpdate build\nâ\nSyntax\nâ\nBuild can be updated by posting XML representation of the build to below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nbuilds\nPlease note that the\nconfiguration\nelement denotes id of the belonging configuration.\nNormally you do not need to create the XML from scratch: you may retrieve XML representation of the build using the http GET method, modify certain parts of the XML and post back to above url.\nThe response is of mime type\ntext/plain\nand the content is string representation of the build id being updated.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have\nSAVE_BUILD\npermission on the belonging configuration.\nDemo\nâ\nWe will use\ncurl\nto demonstrate how to move the build to be under another configuration. Let's assume the build id is\n100\n, and the destination configuration id is\n6\n.\nRetrieve xml representation of desired build into a temp file using below command:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nbuilds\n/\n100\n>\ntempfile\n.\nxml\nEdit\ntempfile.xml\nand change the\nconfiguration\nproperty to take the value\n6\n.\nPost back modified content using below command:\ncurl\n-\nX\nPOST\n-\nu admin\n:\nadmin\n-\nd\n@tempfile.xml\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nbuilds\ndanger\nMoving builds to other configurations is not suggested since it will result in inaccurate change sets when compare builds in the original configuration.\nCreate build\nâ\nSyntax\nâ\nBuild object can be created by posting XML representation of the build to below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nbuilds\nPlease note that:\nThe posted xml should NOT contain the\nid\nelement; otherwise, QuickBuild will treat the post as an updating to the build with that id.\nThe\nconfiguration\nelement denotes id of the belonging configuration.\nNormally you do not need to create the XML from scratch: you may retrieve XML representation of a templating build using the http GET method, remove the\nid\nelement, modify certain parts and post back to above url.\nThe response is of mime type\ntext/plain\nand the content is string representation of id of the newly created build.\nwarning\nThis is different from [requesting new build](Interact with Build Requests.html#InteractwithBuildRequests-requestnewbuild) in the system. It simply adds a build object in the system, and is normally used to move build objects between different servers or configurations.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as administrator if the anonymous does not have administrative rights.\nDemo\nâ\nWe will use\ncurl\nto demonstrate how to create a new build by copying an existing build with id\n100\n.\nRetrieve xml representation of build with id\n100\ninto a temp file using below command:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nbuilds\n/\n100\n>\ntempfile\n.\nxml\nEdit\ntempfile.xml\nto remove the\nid\nelement, and change other properties as desired.\nPost back modified content using below command:\ncurl\n-\nX\nPOST\n-\nu admin\n:\nadmin\n-\nd\n@tempfile.xml\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nbuilds\nDelete Build\nâ\nSyntax\nâ\nBuild can be deleted using http DELETE method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nbuilds\n/\n<\nbuild id\n>\nwarning\nThis service simply deletes the build object in database, and is different from build cacellation. You may follow below steps to cancel a running build:\nGet build request id\n[Delete the build request](Interact with Build Requests.html#InteractwithBuildRequests-deletebuildrequest) with build request id if it is not empty\nSecurity\nâ\nYou will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have\nDELETE_BUILD\npermission on the belonging configuration.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to delete the build with id\n100\n:\ncurl\n-\nX\nDELETE\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nbuilds\n/\n100\nRecommend build\nâ\nSyntax\nâ\nBuild can be recommended using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nbuilds\n/\n<\nbuild id\n>\n/\nrecommend\nSecurity\nâ\nYou will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have permission to recommend specified build\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to recommend build with id\n14\n:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nbuilds\n/\n14\n/\nrecommend\nUnecommend build\nâ\nSyntax\nâ\nBuild can be unrecommended using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nbuilds\n/\n<\nbuild id\n>\n/\nunrecommend\nSecurity\nâ\nYou will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have permission to unrecommend specified build\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to unrecommend build with id\n14\n:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nbuilds\n/\n14\n/\nunrecommend\nLast updated\non\nOct 24, 2024",
    "sections": [
      {
        "header": "Interact with Builds",
        "content": ""
      },
      {
        "header": "Access build by build idâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Build can be accessed by id using http GET method through below url: http://localhost:8810/rest/builds/<build id> The response is of mime typeapplication/xml, and the content is XML representation of the build."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as an authorized QuickBuild user if the anonymous does not have permission to access belonging configuration of requested build."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to access XML representation of build with id14: curl-u admin:admin http://localhost:8810/rest/builds/14"
      },
      {
        "header": "Access build status by build idâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Build status can be accessed by build id using http GET method through below url: http://localhost:8810/rest/builds/<build id>/status The response is of mime typetext/plain, and the content is string representation of the build status."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as an authorized QuickBuild user if the anonymous does not have permission to access belonging configuration of requested build."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to access status of build with id14: curl-u admin:admin http://localhost:8810/rest/builds/14/status"
      },
      {
        "header": "Access build begin date by build idâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Build begin date can be accessed by build id using http GET method through below url: http://localhost:8810/rest/builds/<build id>/begin_date The response is of mime typetext/plain, and the content is string representation of build begin date (mill-seconds since January 1, 1970, 00:00:00 GMT)"
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as an authorized QuickBuild user if the anonymous does not have permission to access belonging configuration of requested build."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to access begin date of build with id14: curl-u admin:admin http://localhost:8810/rest/builds/14/begin_date"
      },
      {
        "header": "Access build version by build idâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Build version can be accessed by build id using http GET method through below url: http://localhost:8810/rest/builds/<build id>/version The response is of mime typetext/plain, and the content is string representation of the build version."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as an authorized QuickBuild user if the anonymous does not have permission to access belonging configuration of requested build."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to access version of build with id14: curl-u admin:admin http://localhost:8810/rest/builds/14/version"
      },
      {
        "header": "Access build duration by build idâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Build duration can be accessed by build id using http GET method through below url: http://localhost:8810/rest/builds/<build id>/duration The response is of mime typetext/plain, and the content is string representation of the build duration (milli-seconds). Status 204 (No Content) will be returned if build is not finished."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as an authorized QuickBuild user if the anonymous does not have permission to access belonging configuration of requested build."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to access duration of build with id14: curl-u admin:admin http://localhost:8810/rest/builds/14/duration {Interact+with+Builds}"
      },
      {
        "header": "Get build request id by build idâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Build requestid can be accessed by build id using http GET method through below url: http://localhost:8810/rest/builds/<build id>/request_id The response is of mime typetext/plain, and the content is string representation of the build request id. Status 204 (No Content) will be returned if build is finished."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as an authorized QuickBuild user if the anonymous does not have permission to access belonging configuration of requested build."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get request id of build with id14: curl-u admin:admin http://localhost:8810/rest/builds/14/request_id"
      },
      {
        "header": "Access executed steps by build idâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Executed steps of a build can be accessed by build id using http GET method through below url: http://localhost:8810/rest/builds/<build id>/steps The response is of mime typeapplication/xml, and the content is XML representation of the list of steps executed in the build."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have permission to access settings of belonging configuration."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to access executed steps by build with id14: curl-u admin:admin http://localhost:8810/rest/builds/14/steps"
      },
      {
        "header": "Access used repositories by build idâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Used repositories of a build can be accessed by build id using http GET method through below url: http://localhost:8810/rest/builds/<build id>/repositories The response is of mime typeapplication/xml, and the content is XML representation of the list of repositories used in the build."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have permission to access settings of belonging configuration."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to access used repositories by build with id14: curl-u admin:admin http://localhost:8810/rest/builds/14/repositories"
      },
      {
        "header": "Access used variables by build idâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Used variables of a build can be accessed by build id using http GET method through below url: http://localhost:8810/rest/builds/<build id>/variables The response is of mime typeapplication/xml, and the content is XML representation of the list of variables used in the build."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have permission to access build variables."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to access used variables in build with id14: curl-u admin:admin http://localhost:8810/rest/builds/14/variables"
      },
      {
        "header": "Access dependency builds by build idâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "All dependency builds whose artifacts are used by current build can be accessed by build id using http GET method through below url: http://localhost:8810/rest/builds/<build id>/dependencies The response is of mime typeapplication/xml, and the content is XML representation of the list of dependency builds of specified build."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have permission to access all dependency builds of specified build."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to access dependency builds of build with id14: curl-u admin:admin http://localhost:8810/rest/builds/14/dependencies"
      },
      {
        "header": "Access dependent builds by build idâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "All dependent builds who using artifacts of current build can be accessed by build id using http GET method through below url: http://localhost:8810/rest/builds/<build id>/dependents The response is of mime typeapplication/xml, and the content is XML representation of the list of dependent builds of specified build."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have permission to access all dependent builds of specified build."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to access dependent builds of build with id14: curl-u admin:admin http://localhost:8810/rest/builds/14/dependents"
      },
      {
        "header": "Search Buildsâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Builds can be searched using http GET method through below url: http://localhost:8810/rest/builds?<search criteria1>=<value1>&<search criteria2>=<value2>&... Query string part of the url represents various search criterias to restrict the search result. Supported search criterias are: Search criteriaExplanationconfiguration_idThis tells QuickBuild under which configuration id to search builds. If not specified, all configurations will be searched.recursiveIf set totrue, QuickBuild will also search builds in all descendent configurations of specified configuration. The value is assumed asfalseif not specified.from_dateIn the format ofyyyy-MM-dd, for example:2009-11-12. If specified, search builds generated after this dateto_dateIn the format ofyyyy-MM-dd, for example:2009-11-12. If specified, search builds generated before this dateversionSpecify the build version to match. The character*can be used in the version string to do wildcard match. If not specified, all versions will be matched.statusStatus of the build to match. Valid build statuses are:SUCCESSFUL,FAILED,RECOMMENDED,CANCELLED,RUNNING,TIMEOUT. If left empty, any build status will be matched.user_idMatch builds which is triggered by specified user. If not specified, builds triggered by any user will be matched.master_nodeMatch builds with master step running on specified node if specified.promoted_from_idMatch builds promoted from specified build id if specified.request_idIf specified, match builds with specified build request idfirstSpecify start position of search results. Position0is assumed if this param is not specified.countSpecify number of builds to return. This parameter is required. The response is of mime typeapplication/xml, and the content is XML representation of list of matched builds. dangerThe parametercountis required to limit the returned result set in order not to put heavy load on the server."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have permission to access returned builds."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommands demonstrates how to combine different criterias to perform search: Search all failed builds under configuration with id2:curl-u admin:admin\"http://localhost:8810/rest/builds?configuration_id=2&status=FAILED&count=100\"Search all successful builds generated before2009-11-12in the system:curl-u admin:admin\"http://localhost:8810/rest/builds?status=SUCCESSFUL&to_date=2009-11-12&count=100\"Search all failed builds with version containingqa:curl-u admin:admin\"http://localhost:8810/rest/builds?version=*qa*&status=FAILED&count=100\""
      },
      {
        "header": "Count Buildsâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Builds can be counted using http GET method through below url: http://localhost:8810/rest/builds/count?<search criteria1>=<value1>&<search criteria2>=<value2>&... Query string part of the url represents various search criterias to restrict the search result. Supported search criterias are: Search criteriaExplanationconfiguration_idThis tells QuickBuild under which configuration id to search builds. If not specified, all configurations will be searched.recursiveIf set totrue, QuickBuild will also search builds in all descendent configurations of specified configuration. The value is assumed asfalseif not specified.from_dateIn the format ofyyyy-MM-dd, for example:2009-11-12. If specified, search builds generated after this dateto_dateIn the format ofyyyy-MM-dd, for example:2009-11-12. If specified, search builds generated before this dateversionSpecify the build version to match. The character*can be used in the version string to do wildcard match. If not specified, all versions will be matched.statusStatus of the build to match. Valid build statuses are:SUCCESSFUL,FAILED,RECOMMENDED,CANCELLED,RUNNING,TIMEOUT. If left empty, any build status will be matched.user_idMatch builds which is triggered by specified user. If not specified, builds triggered by any user will be matched.promoted_from_idIf specified, match builds which is promoted from specified buildrequest_idIf specified, match builds with specified build request id The response is of mime typetext/plain, and the content is string representation of number of builds matching search criterias. If no any search criterias are specified, all builds in the system will be counted."
      },
      {
        "header": "Securityâ",
        "content": "Any user can call this RESTful API to count builds in system."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommands demonstrates how to combine different criterias to perform build counting: Count all failed builds under configuration with id2:curl-u admin:admin\"http://localhost:8810/rest/builds/count?configuration_id=2&status=FAILED\"Count all successful builds generated before2009-11-12in the system:curl-u admin:admin\"http://localhost:8810/rest/builds/count?status=SUCCESSFUL&to_date=2009-11-12\"Count all failed builds with version containingqa:curl-u admin:admin\"http://localhost:8810/rest/builds/count?version=*qa*&status=FAILED\""
      },
      {
        "header": "Update buildâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Build can be updated by posting XML representation of the build to below url: http://localhost:8810/rest/builds Please note that theconfigurationelement denotes id of the belonging configuration. Normally you do not need to create the XML from scratch: you may retrieve XML representation of the build using the http GET method, modify certain parts of the XML and post back to above url. The response is of mime typetext/plainand the content is string representation of the build id being updated."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not haveSAVE_BUILDpermission on the belonging configuration."
      },
      {
        "header": "Demoâ",
        "content": "We will usecurlto demonstrate how to move the build to be under another configuration. Let's assume the build id is100, and the destination configuration id is6. Retrieve xml representation of desired build into a temp file using below command:curl-u admin:admin http://localhost:8810/rest/builds/100>tempfile.xmlEdittempfile.xmland change theconfigurationproperty to take the value6.Post back modified content using below command:curl-XPOST-u admin:admin-d@tempfile.xmlhttp://localhost:8810/rest/builds dangerMoving builds to other configurations is not suggested since it will result in inaccurate change sets when compare builds in the original configuration."
      },
      {
        "header": "Create buildâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Build object can be created by posting XML representation of the build to below url: http://localhost:8810/rest/builds Please note that: The posted xml should NOT contain theidelement; otherwise, QuickBuild will treat the post as an updating to the build with that id.Theconfigurationelement denotes id of the belonging configuration.Normally you do not need to create the XML from scratch: you may retrieve XML representation of a templating build using the http GET method, remove theidelement, modify certain parts and post back to above url.The response is of mime typetext/plainand the content is string representation of id of the newly created build. warningThis is different from [requesting new build](Interact with Build Requests.html#InteractwithBuildRequests-requestnewbuild) in the system. It simply adds a build object in the system, and is normally used to move build objects between different servers or configurations."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as administrator if the anonymous does not have administrative rights."
      },
      {
        "header": "Demoâ",
        "content": "We will usecurlto demonstrate how to create a new build by copying an existing build with id100. Retrieve xml representation of build with id100into a temp file using below command:curl-u admin:admin http://localhost:8810/rest/builds/100>tempfile.xmlEdittempfile.xmlto remove theidelement, and change other properties as desired.Post back modified content using below command:curl-XPOST-u admin:admin-d@tempfile.xmlhttp://localhost:8810/rest/builds"
      },
      {
        "header": "Delete Buildâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Build can be deleted using http DELETE method through below url: http://localhost:8810/rest/builds/<build id> warningThis service simply deletes the build object in database, and is different from build cacellation. You may follow below steps to cancel a running build:Get build request id[Delete the build request](Interact with Build Requests.html#InteractwithBuildRequests-deletebuildrequest) with build request id if it is not empty"
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not haveDELETE_BUILDpermission on the belonging configuration."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to delete the build with id100: curl-XDELETE-u admin:admin http://localhost:8810/rest/builds/100"
      },
      {
        "header": "Recommend buildâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Build can be recommended using http GET method through below url: http://localhost:8810/rest/builds/<build id>/recommend"
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have permission to recommend specified build"
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to recommend build with id14: curl-u admin:admin http://localhost:8810/rest/builds/14/recommend"
      },
      {
        "header": "Unecommend buildâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Build can be unrecommended using http GET method through below url: http://localhost:8810/rest/builds/<build id>/unrecommend"
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have permission to unrecommend specified build"
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to unrecommend build with id14: curl-u admin:admin http://localhost:8810/rest/builds/14/unrecommend"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Interact+with+Latest+Builds",
      "https://wiki.pmease.com/display/QB14/Interact+with+Build+Requests",
      "https://wiki.pmease.com/display/QB14/Trigger+Build+via+GET+Request",
      "https://wiki.pmease.com/display/QB14/Interact+with+Users",
      "https://wiki.pmease.com/display/QB14/Interact+with+Groups",
      "https://wiki.pmease.com/display/QB14/Interact+with+Group+Memberships",
      "https://wiki.pmease.com/display/QB14/Interact+with+Dashboards",
      "https://wiki.pmease.com/display/QB14/Interact+with+Group+Share",
      "https://wiki.pmease.com/display/QB14/Interact+with+User+Share",
      "https://wiki.pmease.com/display/QB14/Interact+with+Cloud+Profiles",
      "https://wiki.pmease.com/display/QB14/Interact+with+Configuration+Authorizations",
      "https://wiki.pmease.com/display/QB14/Interact+with+Resources",
      "https://wiki.pmease.com/display/QB14/Interact+with+Agent+Tokens",
      "https://wiki.pmease.com/display/QB14/Get+System+Attributes+of+Grid+Node",
      "https://wiki.pmease.com/display/QB14/Get+and+Set+User+Attributes+of+Grid+Node",
      "https://wiki.pmease.com/display/QB14/Interact+with+Reports",
      "https://wiki.pmease.com/display/QB14/Interact+with+Changes",
      "https://wiki.pmease.com/display/QB14/Interact+with+Issues",
      "https://wiki.pmease.com/display/QB14/Query+Build+Notifications",
      "https://wiki.pmease.com/display/QB14/Query+Grid+Measurements",
      "https://wiki.pmease.com/display/QB14/Access+Information+of+Published+Files",
      "https://wiki.pmease.com/display/QB14/Interact+with+Build+Agents",
      "https://wiki.pmease.com/display/QB14/Backup+Database",
      "https://wiki.pmease.com/display/QB14/Pause+System",
      "https://wiki.pmease.com/display/QB14/Resume+System",
      "https://wiki.pmease.com/display/QB14/Check+System+Pause+Information",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Interact+with+Build+Requests",
      "https://wiki.pmease.com/display/QB14/Interact+with+Latest+Builds"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Interact+with+Latest+Builds",
    "title": "Interact with Latest Builds",
    "breadcrumb": [
      "",
      "Developer's Guide",
      "RESTful API"
    ],
    "full_text": "Developer's Guide\nRESTful API\nInteract with Latest Builds\nVersion: QB14\nOn this page\nInteract with Latest Builds\nThis API is provided for the purpose of accessing latest build information of one or more configurations efficiently.\nAccess latest build of a specific configuration\nâ\nSyntax\nâ\nLatest build information can be accessed by configuration id using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nlatest_builds\n/\n<\nconfiguration id\n>\nThe response is of mime type\napplication/xml\n, and the content is XML representation of the build. Http status code 204 (no content) will be returned if no any build exists in the configuration.\nwarning\nPlease note that only brief information of the build will be returned for efficiency. These brief information includes build id, build version, build status, begin date, build duration, and id of belonging configuration.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as an authorized QuickBuild user if the anonymous does not have permission to access builds of specified configuration.\nDemo\nâ\nBelow\ncurl\ncommand demostrates how to access XML representation of latest build of configuration with id\n2\n:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nlatest_builds\n/\n2\nGet latest builds for all child configurations\nâ\nSyntax\nâ\nLatest builds can be queried for all child configurations of specified configuration using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nlatest_builds\n?\nparent_configuration_id\n=\n<\nparent configuration id\n>\n&\nrecursive\n=\n<\nrecursive\n>\nHere\n<parent configuration id>\nneeds to be replaced with identifier of the parent configuration. QuickBuild will return latest builds of all child configurations of this parent configuration.\n<recursive>\nis either\ntrue\nor\nfalse\n, where\ntrue\nmeans to get latest builds for all child configurations recursively, and\nfalse\nmeans to get latest builds for all child configurations non-recursively.\nThe response is of mime type\ntext/plain\n, and the content is string representation of the build status.\nwarning\nPlease note that only brief information of the build will be returned for efficiency. These brief information includes build id, build version, build status, begin date, build duration, and id of belonging configuration.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as an authorized QuickBuild user if the anonymous does not have permission to access builds of any of the child configurations.\nDemo\nâ\nBelow\ncurl\ncommand demostrates how to access latest builds for all child configurations of root configuration non-recursively:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nlatest_builds\n?\nparent_configuration_id\n=\n1\n&\nrecursive\n=\nfalse\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Interact with Latest Builds",
        "content": ""
      },
      {
        "header": "Access latest build of a specific configurationâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Latest build information can be accessed by configuration id using http GET method through below url: http://localhost:8810/rest/latest_builds/<configuration id> The response is of mime typeapplication/xml, and the content is XML representation of the build. Http status code 204 (no content) will be returned if no any build exists in the configuration. warningPlease note that only brief information of the build will be returned for efficiency. These brief information includes build id, build version, build status, begin date, build duration, and id of belonging configuration."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as an authorized QuickBuild user if the anonymous does not have permission to access builds of specified configuration."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demostrates how to access XML representation of latest build of configuration with id2: curl-u admin:admin http://localhost:8810/rest/latest_builds/2"
      },
      {
        "header": "Get latest builds for all child configurationsâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Latest builds can be queried for all child configurations of specified configuration using http GET method through below url: http://localhost:8810/rest/latest_builds?parent_configuration_id=<parent configuration id>&recursive=<recursive> Here<parent configuration id>needs to be replaced with identifier of the parent configuration. QuickBuild will return latest builds of all child configurations of this parent configuration.<recursive>is eithertrueorfalse, wheretruemeans to get latest builds for all child configurations recursively, andfalsemeans to get latest builds for all child configurations non-recursively. The response is of mime typetext/plain, and the content is string representation of the build status. warningPlease note that only brief information of the build will be returned for efficiency. These brief information includes build id, build version, build status, begin date, build duration, and id of belonging configuration."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as an authorized QuickBuild user if the anonymous does not have permission to access builds of any of the child configurations."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demostrates how to access latest builds for all child configurations of root configuration non-recursively: curl-u admin:admin http://localhost:8810/rest/latest_builds?parent_configuration_id=1&recursive=false"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Interact+with+Build+Requests",
      "https://wiki.pmease.com/display/QB14/Trigger+Build+via+GET+Request",
      "https://wiki.pmease.com/display/QB14/Interact+with+Users",
      "https://wiki.pmease.com/display/QB14/Interact+with+Groups",
      "https://wiki.pmease.com/display/QB14/Interact+with+Group+Memberships",
      "https://wiki.pmease.com/display/QB14/Interact+with+Dashboards",
      "https://wiki.pmease.com/display/QB14/Interact+with+Group+Share",
      "https://wiki.pmease.com/display/QB14/Interact+with+User+Share",
      "https://wiki.pmease.com/display/QB14/Interact+with+Cloud+Profiles",
      "https://wiki.pmease.com/display/QB14/Interact+with+Configuration+Authorizations",
      "https://wiki.pmease.com/display/QB14/Interact+with+Resources",
      "https://wiki.pmease.com/display/QB14/Interact+with+Agent+Tokens",
      "https://wiki.pmease.com/display/QB14/Get+System+Attributes+of+Grid+Node",
      "https://wiki.pmease.com/display/QB14/Get+and+Set+User+Attributes+of+Grid+Node",
      "https://wiki.pmease.com/display/QB14/Interact+with+Reports",
      "https://wiki.pmease.com/display/QB14/Interact+with+Changes",
      "https://wiki.pmease.com/display/QB14/Interact+with+Issues",
      "https://wiki.pmease.com/display/QB14/Query+Build+Notifications",
      "https://wiki.pmease.com/display/QB14/Query+Grid+Measurements",
      "https://wiki.pmease.com/display/QB14/Access+Information+of+Published+Files",
      "https://wiki.pmease.com/display/QB14/Interact+with+Build+Agents",
      "https://wiki.pmease.com/display/QB14/Backup+Database",
      "https://wiki.pmease.com/display/QB14/Pause+System",
      "https://wiki.pmease.com/display/QB14/Resume+System",
      "https://wiki.pmease.com/display/QB14/Check+System+Pause+Information",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Interact+with+Build+Requests"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Interact+with+Build+Requests",
    "title": "Interact with Build Requests",
    "breadcrumb": [
      "",
      "Developer's Guide",
      "RESTful API"
    ],
    "full_text": "Developer's Guide\nRESTful API\nInteract with Build Requests\nVersion: QB14\nOn this page\nInteract with Build Requests\nBuild request object can be used to request new build or cancel running build.\nList build requests\nâ\nSyntax\nâ\nBuild requests of a particular configuration can be listed via below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nbuild_requests\n?\nconfiguration_id\n=\n<\nconfiguration id\n>\n&\ntrigger_user_id\n=\n<\ntrigger user id\n>\nWhere:\n<configuration id>\nshould be replaced with identifier of a configuration. If this query parameter is missing, QB will return all build requests in the system.\n<trigger user id>\nshould be replaced with identifier of the user triggering the request. If this query param is missing, QB will return build requests triggered by all users in the system.\nThe response is of mime type\ntext/plain\nand the content is XML representation of list of build requests.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have permission to access requested configuration.\nDemo\nâ\nWe use\ncurl\nto demonstrate how to list all build requests in configuration\nroot/test\nrequested by user\nrobin\n:\nGet configuration id using\nid service\n:\ncurl http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nids\n?\nconfiguration_path\n=\nroot\n/\ntest\nAssume returned identifier of configuration\nroot/test\nis\n2\n,\nGet user id using\nid service\n:\ncurl http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nids\n?\nuser_name\n=\nrobin\nAssume returned identifier of user\nrobin\nis\n100\n,\nexecute below command to get all build requests of\nroot/test\ntriggered by\nrobin\n:\ncurl\n-\nu admin\n:\nadmin\n\"http://localhost:8810/rest/build_requests?configuration_id=2&trigger_user_id=100\"\n{#InteractwithBuildRequests-requestnewbuild}\nRequest new build\nâ\nSyntax\nâ\nNew build can be requested by posting XML representation of the build request object to below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nbuild_requests\nA sample XML of build request object is like below (the sample build request can be retrieved via url \"\nhttp://localhost:8810/rest/build_requests/sample\n\"):\n<\ncom\n.\npmease\n.\nquickbuild\n.\nBuildRequest\n>\n<\n!\n--\nThis\nelement tells\nQuickBuild\nin what configuration\nto\ntrigger\nbuild\n.\n--\n>\n<\nconfigurationId\n>\n10\n<\n/\nconfigurationId\n>\n<\n!\n--\nThis\nelement tells whether or not\nto\nrespect\nbuild condition of the\nconfiguration\n.\nIf\nthis\nis set\nto\ntrue\n,\nand\nif\nthe build condition evaluates\nto\nfalse\n,\nbuild will\nnot be triggered\n.\n--\n>\n<\nrespectBuildCondition\n>\nfalse\n<\n/\nrespectBuildCondition\n>\n<\n!\n--\nThis\noptional element specifies priority of the build request\n,\nwith\nvalue\nranging from\n1\nto\n10.\nThe\nbigger\nthis\nvalue is\n,\nthe higher the priority is\n--\n>\n<\npriority\n>\n10\n<\n/\npriority\n>\n<\n!\n--\nThis\nelement is optional and is used\nto\nspecify\nvariables\nfor\nbuild\ntriggering\n.\nIf\nspecified\n,\nit will override the variable\nwith\nthe\nsame name defined in configuration\nbasic setting\n.\n--\n>\n<\nvariables\n>\n<\nentry\n>\n<\nstring\n>\nvar_name1\n<\n/\nstring\n>\n<\nstring\n>\nvar_value1\n<\n/\nstring\n>\n<\n/\nentry\n>\n<\nentry\n>\n<\nstring\n>\nvar_name2\n<\n/\nstring\n>\n<\nstring\n>\nvar_value2\n<\n/\nstring\n>\n<\n/\nentry\n>\n<\n/\nvariables\n>\n<\n!\n--\nThis\nelement is optional and is used\nto\nspecify\ncontent of file\nto\nbe\nuploaded\n.\nIn\nbelow example\n,\nfile content will be attached\nto\nvariable\n\"var_name1\"\n,\nand\nvalue of\nthis\nvariable specified in variables section will be the file\nname\n.\nOne\ncan access full path\nto\nthe\nfile at\nQuickBuild\nside via vars\n.\ngetValue\n(\n\"var_name1\"\n)\n--\n>\n<\nfileContents\n>\n<\nentry\n>\n<\nstring\n>\nvar_name1\n<\n/\nstring\n>\n<\nstring\n>\nbase64 encoding of file content\n<\n/\nstring\n>\n<\n/\nentry\n>\n<\n/\nfileContents\n>\n<\n!\n--\nThis\nelement is optional and is used\nto\ntell\nQuickBuild\nto\nrequest\na build promotion\n.\n--\n>\n<\npromotionSource\n>\n<\n!\n--\nThis\nelement is optional and is used\nto\ntell\nQuickBuild\nthat the source build resides on another\nQuickBuild\nserver\n.\n--\n>\n<\nserver\n>\n<\nurl\n>\nhttp\n:\n/\n/\nanother\n-\nqb\n-\nserver\n:\n8810\n<\n/\nurl\n>\n<\nuserName\n>\nadmin\n<\n/\nuserName\n>\n<\npassword\n>\nadmin\n<\n/\npassword\n>\n<\n/\nserver\n>\n<\n!\n--\nIdentifier\nof the source build\nto\npromote\nfrom\n--\n>\n<\nbuildId\n>\n697\n<\n/\nbuildId\n>\n<\n!\n--\nThis\nelement is optional and used\nto\nspecify\nfiles\nto\npromote\n--\n>\n<\ndeliveries\n>\n<\ncom\n.\npmease\n.\nquickbuild\n.\nFileDelivery\n>\n<\nsrcPath\n>\nartifacts\n/\ndir1\n<\n/\nsrcPath\n>\n<\nfilePatterns\n>\n*\n*\n/*.jar</filePatterns>\n</com.pmease.quickbuild.FileDelivery>\n<com.pmease.quickbuild.FileDelivery>\n<srcPath>artifacts/dir2</srcPath>\n<filePatterns>**/\n*\n.\nwar\n<\n/\nfilePatterns\n>\n<\n/\ncom\n.\npmease\n.\nquickbuild\n.\nFileDelivery\n>\n<\n/\ndeliveries\n>\n<\n/\npromotionSource\n>\n<\n/\ncom\n.\npmease\n.\nquickbuild\n.\nBuildRequest\n>\nThe response is of mime type\ntext/plain\nand the content is XML representation of request result including the generated build request id. Http status code 204 (No Content) will be returned if the request is aggregated.\nSince QuickBuild 6.0.14, one can also trigger new build via GET request by accessing below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ntrigger\n?\nconfiguration_id\n=\n<\nconfiguration id\n>\nWhere\n<configuration id>\nshould be replaced with identifier of a configuration. The response is of mime type\ntext/plain\nand the content is XML representation of newly created request result. Note that this approach does not accept variables or promotions information.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have\nRUN_BUILD\npermission for the requested configuration.\nDemo\nâ\nWe use\ncurl\nto demonstrate how to request a build in configuration\nroot/test\n:\nGet configuration id using\nid service\n:\ncurl http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nids\n?\nconfiguration_path\n=\nroot\n/\ntest\nSave the sample build request XML described above to file\ntempfile.xml\n, and modify configuration id to use value returned by the first step.\nPost content of\ntempfile.xml\nto QuickBuild using below command:\ncurl\n-\nX\nPOST\n-\nu admin\n:\nadmin\n-\nd\n@tempfile.xml\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nbuild_requests\n{#InteractwithBuildRequests-deletebuildrequest}\nDelete a Build Request\nâ\nSyntax\nâ\nExisting build request can be deleted using http DELETE method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nbuild_requests\n/\n<\nbuild request id\n>\nwarning\nIf the build associated with the build request is already running, it will be forcibly stopped.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have\nSTOP_BUILD\npermission for the associated configuration.\nDemo\nâ\nWe use\ncurl\nto demonstrate how to delete build request\n0136ed89-d47f-4307-8e69-c8535fae0e84\n:\ncurl\n-\nX\nDELETE\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nbuild_requests\n/\n0136\ned89\n-\nd47f\n-\n4307\n-\n8e69\n-\nc8535fae0e84\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Interact with Build Requests",
        "content": ""
      },
      {
        "header": "List build requestsâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Build requests of a particular configuration can be listed via below url: http://localhost:8810/rest/build_requests?configuration_id=<configuration id>&trigger_user_id=<trigger user id> Where: <configuration id>should be replaced with identifier of a configuration. If this query parameter is missing, QB will return all build requests in the system.<trigger user id>should be replaced with identifier of the user triggering the request. If this query param is missing, QB will return build requests triggered by all users in the system. The response is of mime typetext/plainand the content is XML representation of list of build requests."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have permission to access requested configuration."
      },
      {
        "header": "Demoâ",
        "content": "We usecurlto demonstrate how to list all build requests in configurationroot/testrequested by userrobin: Get configuration id usingid service:curl http://localhost:8810/rest/ids?configuration_path=root/testAssume returned identifier of configurationroot/testis2,Get user id usingid service:curl http://localhost:8810/rest/ids?user_name=robinAssume returned identifier of userrobinis100,execute below command to get all build requests ofroot/testtriggered byrobin:curl-u admin:admin\"http://localhost:8810/rest/build_requests?configuration_id=2&trigger_user_id=100\" {#InteractwithBuildRequests-requestnewbuild}"
      },
      {
        "header": "Request new buildâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "New build can be requested by posting XML representation of the build request object to below url: http://localhost:8810/rest/build_requests A sample XML of build request object is like below (the sample build request can be retrieved via url \"http://localhost:8810/rest/build_requests/sample\"): <com.pmease.quickbuild.BuildRequest><!--Thiselement tellsQuickBuildin what configurationtotriggerbuild.--><configurationId>10</configurationId><!--Thiselement tells whether or nottorespectbuild condition of theconfiguration.Ifthisis settotrue,andifthe build condition evaluatestofalse,build willnot be triggered.--><respectBuildCondition>false</respectBuildCondition><!--Thisoptional element specifies priority of the build request,withvalueranging from1to10.Thebiggerthisvalue is,the higher the priority is--><priority>10</priority><!--Thiselement is optional and is usedtospecifyvariablesforbuildtriggering.Ifspecified,it will override the variablewiththesame name defined in configurationbasic setting.--><variables><entry><string>var_name1</string><string>var_value1</string></entry><entry><string>var_name2</string><string>var_value2</string></entry></variables><!--Thiselement is optional and is usedtospecifycontent of filetobeuploaded.Inbelow example,file content will be attachedtovariable\"var_name1\",andvalue ofthisvariable specified in variables section will be the filename.Onecan access full pathtothefile atQuickBuildside via vars.getValue(\"var_name1\")--><fileContents><entry><string>var_name1</string><string>base64 encoding of file content</string></entry></fileContents><!--Thiselement is optional and is usedtotellQuickBuildtorequesta build promotion.--><promotionSource><!--Thiselement is optional and is usedtotellQuickBuildthat the source build resides on anotherQuickBuildserver.--><server><url>http://another-qb-server:8810</url><userName>admin</userName><password>admin</password></server><!--Identifierof the source buildtopromotefrom--><buildId>697</buildId><!--Thiselement is optional and usedtospecifyfilestopromote--><deliveries><com.pmease.quickbuild.FileDelivery><srcPath>artifacts/dir1</srcPath><filePatterns>**/*.jar</filePatterns></com.pmease.quickbuild.FileDelivery><com.pmease.quickbuild.FileDelivery><srcPath>artifacts/dir2</srcPath><filePatterns>**/*.war</filePatterns></com.pmease.quickbuild.FileDelivery></deliveries></promotionSource></com.pmease.quickbuild.BuildRequest> The response is of mime typetext/plainand the content is XML representation of request result including the generated build request id. Http status code 204 (No Content) will be returned if the request is aggregated. Since QuickBuild 6.0.14, one can also trigger new build via GET request by accessing below url: http://localhost:8810/rest/trigger?configuration_id=<configuration id> Where<configuration id>should be replaced with identifier of a configuration. The response is of mime typetext/plainand the content is XML representation of newly created request result. Note that this approach does not accept variables or promotions information."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not haveRUN_BUILDpermission for the requested configuration."
      },
      {
        "header": "Demoâ",
        "content": "We usecurlto demonstrate how to request a build in configurationroot/test: Get configuration id usingid service:curl http://localhost:8810/rest/ids?configuration_path=root/testSave the sample build request XML described above to filetempfile.xml, and modify configuration id to use value returned by the first step.Post content oftempfile.xmlto QuickBuild using below command:curl-XPOST-u admin:admin-d@tempfile.xmlhttp://localhost:8810/rest/build_requests {#InteractwithBuildRequests-deletebuildrequest}"
      },
      {
        "header": "Delete a Build Requestâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Existing build request can be deleted using http DELETE method through below url: http://localhost:8810/rest/build_requests/<build request id> warningIf the build associated with the build request is already running, it will be forcibly stopped."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not haveSTOP_BUILDpermission for the associated configuration."
      },
      {
        "header": "Demoâ",
        "content": "We usecurlto demonstrate how to delete build request0136ed89-d47f-4307-8e69-c8535fae0e84: curl-XDELETE-u admin:admin http://localhost:8810/rest/build_requests/0136ed89-d47f-4307-8e69-c8535fae0e84"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Trigger+Build+via+GET+Request",
      "https://wiki.pmease.com/display/QB14/Interact+with+Users",
      "https://wiki.pmease.com/display/QB14/Interact+with+Groups",
      "https://wiki.pmease.com/display/QB14/Interact+with+Group+Memberships",
      "https://wiki.pmease.com/display/QB14/Interact+with+Dashboards",
      "https://wiki.pmease.com/display/QB14/Interact+with+Group+Share",
      "https://wiki.pmease.com/display/QB14/Interact+with+User+Share",
      "https://wiki.pmease.com/display/QB14/Interact+with+Cloud+Profiles",
      "https://wiki.pmease.com/display/QB14/Interact+with+Configuration+Authorizations",
      "https://wiki.pmease.com/display/QB14/Interact+with+Resources",
      "https://wiki.pmease.com/display/QB14/Interact+with+Agent+Tokens",
      "https://wiki.pmease.com/display/QB14/Get+System+Attributes+of+Grid+Node",
      "https://wiki.pmease.com/display/QB14/Get+and+Set+User+Attributes+of+Grid+Node",
      "https://wiki.pmease.com/display/QB14/Interact+with+Reports",
      "https://wiki.pmease.com/display/QB14/Interact+with+Changes",
      "https://wiki.pmease.com/display/QB14/Interact+with+Issues",
      "https://wiki.pmease.com/display/QB14/Query+Build+Notifications",
      "https://wiki.pmease.com/display/QB14/Query+Grid+Measurements",
      "https://wiki.pmease.com/display/QB14/Access+Information+of+Published+Files",
      "https://wiki.pmease.com/display/QB14/Interact+with+Build+Agents",
      "https://wiki.pmease.com/display/QB14/Backup+Database",
      "https://wiki.pmease.com/display/QB14/Pause+System",
      "https://wiki.pmease.com/display/QB14/Resume+System",
      "https://wiki.pmease.com/display/QB14/Check+System+Pause+Information",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Trigger+Build+via+GET+Request"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Trigger+Build+via+GET+Request",
    "title": "Trigger Build via GET Request",
    "breadcrumb": [
      "",
      "Developer's Guide",
      "RESTful API"
    ],
    "full_text": "Developer's Guide\nRESTful API\nTrigger Build via GET Request\nVersion: QB14\nTrigger Build via GET Request\nBuild can be triggered by posting build request as described in page\nInteract with Build Requests\n. Sometimes it is useful to trigger build via GET request, and here is how:\nCreate a build request XML file, say\nrequest.xml\nRefer to\nrequest new build\nsection of\nInteract with Build Requests\non how to create build request XML\nBase64 and urlencode the xml file\nbase64 request\n.\nxml\n|\nxargs urlencode\nOn Ubuntu, you will need to call\nsudo apt install gridsite-clients\nif\nurlencode\nis not available\nTrigger build via below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ntrigger\n?\nbuild_request\n=\n<\noutput of above step\n>\nYou will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have RUN_BUILD permission for the requested configuration.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Trigger Build via GET Request",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Interact+with+Users",
      "https://wiki.pmease.com/display/QB14/Interact+with+Groups",
      "https://wiki.pmease.com/display/QB14/Interact+with+Group+Memberships",
      "https://wiki.pmease.com/display/QB14/Interact+with+Dashboards",
      "https://wiki.pmease.com/display/QB14/Interact+with+Group+Share",
      "https://wiki.pmease.com/display/QB14/Interact+with+User+Share",
      "https://wiki.pmease.com/display/QB14/Interact+with+Cloud+Profiles",
      "https://wiki.pmease.com/display/QB14/Interact+with+Configuration+Authorizations",
      "https://wiki.pmease.com/display/QB14/Interact+with+Resources",
      "https://wiki.pmease.com/display/QB14/Interact+with+Agent+Tokens",
      "https://wiki.pmease.com/display/QB14/Get+System+Attributes+of+Grid+Node",
      "https://wiki.pmease.com/display/QB14/Get+and+Set+User+Attributes+of+Grid+Node",
      "https://wiki.pmease.com/display/QB14/Interact+with+Reports",
      "https://wiki.pmease.com/display/QB14/Interact+with+Changes",
      "https://wiki.pmease.com/display/QB14/Interact+with+Issues",
      "https://wiki.pmease.com/display/QB14/Query+Build+Notifications",
      "https://wiki.pmease.com/display/QB14/Query+Grid+Measurements",
      "https://wiki.pmease.com/display/QB14/Access+Information+of+Published+Files",
      "https://wiki.pmease.com/display/QB14/Interact+with+Build+Agents",
      "https://wiki.pmease.com/display/QB14/Backup+Database",
      "https://wiki.pmease.com/display/QB14/Pause+System",
      "https://wiki.pmease.com/display/QB14/Resume+System",
      "https://wiki.pmease.com/display/QB14/Check+System+Pause+Information",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Interact+with+Users"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Interact+with+Users",
    "title": "Interact with Users",
    "breadcrumb": [
      "",
      "Developer's Guide",
      "RESTful API"
    ],
    "full_text": "Developer's Guide\nRESTful API\nInteract with Users\nVersion: QB14\nOn this page\nInteract with Users\nGet all users in the system\nâ\nSyntax\nâ\nUsers in the system can be accessed using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nusers\nThe response is of mime type\napplication/xml\nand the content is XML representation of all users in the system.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have adminstrative right.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get all users:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nusers\nAccess user by id\nâ\nSyntax\nâ\nUser can be accessed by id using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nusers\n/\n<\nuser id\n>\nThe response is of mime type\napplication/xml\nand the content is XML representation of the user.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have adminstrative right.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get user of id\n1\n:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nusers\n/\n1\nGet user display name by id\nâ\nSyntax\nâ\nUser display name can be accessed by id using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nusers\n/\n<\nuser id\n>\n/\ndisplay_name\nThe response is of mime type\ntext/plain\nand the content is string representation of the user.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have adminstrative right.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get display name of user with id\n1\n:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nusers\n/\n1\n/\ndisplay_name\nUpdate user\nâ\nSyntax\nâ\nUser can be updated by posting XML representation of the user to below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nusers\nNormally you do not need to create the xml from scratch: you may retrieve XML representation of the user using http GET method, modify certain parts of the XML and post back to above url.\nThe response is of mime type\ntext/plain\nand the content is string representation of the user id being updated.\nwarning\nIf you want to change user password, please remove the \"secret=hash\" attribute from the password element and replace the element text with a plain text password; otherwise, QuickBuild will think that the supplied password has already been hashed.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as administrator if the anonymous does not have administrative right.\nDemo\nâ\nWe will use\ncurl\nto demonstrate how to modify password of user\nrobin\nto be\n12345\n:\nRetrieve id of user\nrobin\nusing\nid service\n:\ncurl http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nids\n?\nuser_name\n=\nrobin\nAssume returned id is\n2\n.\nRetrieve XML representation of user\nrobin\ninto a temp file using below command:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nusers\n/\n2\n>\ntempfile\n.\nxml\nEdit\ntempfile.xml\nto set content of\npassword\nelement as\n12345\n, and remove attribute\nsecret=\"hash\"\n. The password element should look like below after modification:\n<\npassword\n>\n12345\n<\n/\npassword\n>\nPost back modified content using below command:\ncurl\n-\nX\nPOST\n-\nu admin\n:\nadmin\n-\nd\n@tempfile.xml\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nusers\nCreate user\nâ\nSyntax\nâ\nUser can be created by posting XML representation of the user to below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nusers\nPlease note that the posted XML should NOT contain the\nid\nelement; otherwise, QuickBuild will treat the post as an update to the user with that id.\nNormally you do not need to create the XML from scratch: you may retrieve XML representation of a templating user using http GET method, remove the\nid\nelement, modify certain parts and post back to above url.\nThe response is of mime type\ntext/plain\nand the content is string representation of the newly created user id.\nwarning\nThe password element will contain the attribute \"secret\" when retrieve the XML representation of an existing user. This attribute should be removed when a new user is created. This tells QuickBuild that the password is in plain text form and should be hashed. However, if you are creating user by copying existing one and want to remain the password, the \"secret\" attribute should then be preserved.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as administrator if the anonymous does not have administrative rights.\nDemo\nâ\nWe will use\ncurl\nto demonstrate how to create a new user\nrobin\nby copying the existing user\nadmin\n, and change the password to\n12345\n.\nGet id of user\nadmin\nwith\nid service\ncurl http\n:\n/\n/\nlocalhost\n/\nrest\n/\nids\n?\nuser_name\n=\nadmin\nAssume returned id is\n1\n.\nRetrieve XML representation of user\nadmin\ninto a temp file using below command:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nusers\n/\n1\n>\ntempfile\n.\nxml\nEdit\ntempfile.xml\nto do the following:\nRemove the\nid\nelement.\nChange content of the\nname\nelement to be\nrobin\n.\nChange content of\npassword\nelement to be\n12345\n.\nRemove attribute\nsecret=\"hash\"\nfrom the password element.\nPost back modified content using below command:\ncurl\n-\nX\nPOST\n-\nu admin\n:\nadmin\n-\nd\n@tempfile.xml\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nusers\nDelete user\nâ\nSyntax\nâ\nUser can be deleted using http DELETE method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nusers\n/\n<\nuser id\n>\nHere\n<user id}\nstands for id of the user to be deleted.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as administrator if the anonymous does not have administrative right.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to delete the user with id\n2\n:\ncurl\n-\nX\nDELETE\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nusers\n/\n2\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Interact with Users",
        "content": ""
      },
      {
        "header": "Get all users in the systemâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Users in the system can be accessed using http GET method through below url: http://localhost:8810/rest/users The response is of mime typeapplication/xmland the content is XML representation of all users in the system."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have adminstrative right."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get all users: curl-u admin:admin http://localhost:8810/rest/users"
      },
      {
        "header": "Access user by idâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "User can be accessed by id using http GET method through below url: http://localhost:8810/rest/users/<user id> The response is of mime typeapplication/xmland the content is XML representation of the user."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have adminstrative right."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get user of id1: curl-u admin:admin http://localhost:8810/rest/users/1"
      },
      {
        "header": "Get user display name by idâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "User display name can be accessed by id using http GET method through below url: http://localhost:8810/rest/users/<user id>/display_name The response is of mime typetext/plainand the content is string representation of the user."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have adminstrative right."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get display name of user with id1: curl-u admin:admin http://localhost:8810/rest/users/1/display_name"
      },
      {
        "header": "Update userâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "User can be updated by posting XML representation of the user to below url: http://localhost:8810/rest/users Normally you do not need to create the xml from scratch: you may retrieve XML representation of the user using http GET method, modify certain parts of the XML and post back to above url. The response is of mime typetext/plainand the content is string representation of the user id being updated. warningIf you want to change user password, please remove the \"secret=hash\" attribute from the password element and replace the element text with a plain text password; otherwise, QuickBuild will think that the supplied password has already been hashed."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as administrator if the anonymous does not have administrative right."
      },
      {
        "header": "Demoâ",
        "content": "We will usecurlto demonstrate how to modify password of userrobinto be12345: Retrieve id of userrobinusingid service:curl http://localhost:8810/rest/ids?user_name=robinAssume returned id is2.Retrieve XML representation of userrobininto a temp file using below command:curl-u admin:admin http://localhost:8810/rest/users/2>tempfile.xmlEdittempfile.xmlto set content ofpasswordelement as12345, and remove attributesecret=\"hash\". The password element should look like below after modification:<password>12345</password>Post back modified content using below command:curl-XPOST-u admin:admin-d@tempfile.xmlhttp://localhost:8810/rest/users"
      },
      {
        "header": "Create userâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "User can be created by posting XML representation of the user to below url: http://localhost:8810/rest/users Please note that the posted XML should NOT contain theidelement; otherwise, QuickBuild will treat the post as an update to the user with that id. Normally you do not need to create the XML from scratch: you may retrieve XML representation of a templating user using http GET method, remove theidelement, modify certain parts and post back to above url. The response is of mime typetext/plainand the content is string representation of the newly created user id. warningThe password element will contain the attribute \"secret\" when retrieve the XML representation of an existing user. This attribute should be removed when a new user is created. This tells QuickBuild that the password is in plain text form and should be hashed. However, if you are creating user by copying existing one and want to remain the password, the \"secret\" attribute should then be preserved."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as administrator if the anonymous does not have administrative rights."
      },
      {
        "header": "Demoâ",
        "content": "We will usecurlto demonstrate how to create a new userrobinby copying the existing useradmin, and change the password to12345. Get id of useradminwithid servicecurl http://localhost/rest/ids?user_name=adminAssume returned id is1.Retrieve XML representation of useradmininto a temp file using below command:curl-u admin:admin http://localhost:8810/rest/users/1>tempfile.xmlEdittempfile.xmlto do the following:Remove theidelement.Change content of thenameelement to berobin.Change content ofpasswordelement to be12345.Remove attributesecret=\"hash\"from the password element.Post back modified content using below command:curl-XPOST-u admin:admin-d@tempfile.xmlhttp://localhost:8810/rest/users"
      },
      {
        "header": "Delete userâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "User can be deleted using http DELETE method through below url: http://localhost:8810/rest/users/<user id> Here<user id}stands for id of the user to be deleted."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as administrator if the anonymous does not have administrative right."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to delete the user with id2: curl-XDELETE-u admin:admin http://localhost:8810/rest/users/2"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Interact+with+Groups",
      "https://wiki.pmease.com/display/QB14/Interact+with+Group+Memberships",
      "https://wiki.pmease.com/display/QB14/Interact+with+Dashboards",
      "https://wiki.pmease.com/display/QB14/Interact+with+Group+Share",
      "https://wiki.pmease.com/display/QB14/Interact+with+User+Share",
      "https://wiki.pmease.com/display/QB14/Interact+with+Cloud+Profiles",
      "https://wiki.pmease.com/display/QB14/Interact+with+Configuration+Authorizations",
      "https://wiki.pmease.com/display/QB14/Interact+with+Resources",
      "https://wiki.pmease.com/display/QB14/Interact+with+Agent+Tokens",
      "https://wiki.pmease.com/display/QB14/Get+System+Attributes+of+Grid+Node",
      "https://wiki.pmease.com/display/QB14/Get+and+Set+User+Attributes+of+Grid+Node",
      "https://wiki.pmease.com/display/QB14/Interact+with+Reports",
      "https://wiki.pmease.com/display/QB14/Interact+with+Changes",
      "https://wiki.pmease.com/display/QB14/Interact+with+Issues",
      "https://wiki.pmease.com/display/QB14/Query+Build+Notifications",
      "https://wiki.pmease.com/display/QB14/Query+Grid+Measurements",
      "https://wiki.pmease.com/display/QB14/Access+Information+of+Published+Files",
      "https://wiki.pmease.com/display/QB14/Interact+with+Build+Agents",
      "https://wiki.pmease.com/display/QB14/Backup+Database",
      "https://wiki.pmease.com/display/QB14/Pause+System",
      "https://wiki.pmease.com/display/QB14/Resume+System",
      "https://wiki.pmease.com/display/QB14/Check+System+Pause+Information",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Interact+with+Groups"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Interact+with+Groups",
    "title": "Interact with Groups",
    "breadcrumb": [
      "",
      "Developer's Guide",
      "RESTful API"
    ],
    "full_text": "Developer's Guide\nRESTful API\nInteract with Groups\nVersion: QB14\nOn this page\nInteract with Groups\nGet all groups in the system\nâ\nSyntax\nâ\nGroups in the system can be accessed using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ngroups\nThe response is of mime type\napplication/xml\nand the content is XML representation of all groups in the system.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have adminstrative right.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get all groups:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ngroups\nAccess group by id\nâ\nSyntax\nâ\nGroup can be accessed by id using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ngroups\n/\n<\ngroup id\n>\nThe response is of mime type\napplication/xml\nand the content is XML representation of the group.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have adminstrative right.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get group of id\n1\n:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ngroups\n/\n1\nUpdate group\nâ\nSyntax\nâ\nGroup can be updated by posting xml representation of the group to below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ngroups\nNormally you do not need to create the XML from scratch: you may retrieve XML representation of the group using http GET method, modify certain parts of the XML and post back to above url.\nThe response is of mime type\ntext/plain\nand the content is string representation of the group id being updated.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as administrator if the anonymous does not have administrative right.\nDemo\nâ\nWe will use\ncurl\nto demonstrate how to modify description of group\ndeveloper\n:\nGet id of group\ndeveloper\nwith\nid service\ncurl http\n:\n/\n/\nlocalhost\n/\nrest\n/\nids\n?\ngroup_name\n=\ndeveloper\nAssume returned id is\n1\n.\nRetrieve xml representation of group\ndeveloper\ninto a temp file using below command:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ngroups\n/\n1\n>\ntempfile\n.\nxml\nEdit\ntempfile.xml\nand change\ndescription\nelement to desired value (or add the\ndescription\nelement if it does not already exist).\nPost back modified content using below command:\ncurl\n-\nX\nPOST\n-\nu admin\n:\nadmin\n-\nd\n@tempfile.xml\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ngroups\nCreate group\nâ\nSyntax\nâ\nGroup can be created by posting XML representation of the group to below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ngroups\nPlease note that the posted XML should NOT contain the\nid\nelement; otherwise, QuickBuild will treat the post as an updating to the group with that id.\nNormally you do not need to create the XML from scratch: you may retrieve XML representation of a templating group using http GET method, remove the\nid\nelement, modify certain parts and post back to above url.\nThe response is of mime type\ntext/plain\nand the content is string representation of the newly created group id.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as administrator if the anonymous does not have administrative right.\nDemo\nâ\nWe will use\ncurl\nto demonstrate how to create a new group\ntester\nby copying the existing group\ndeveloper\n.\nGet id of group\ndeveloper\nwith\nid service\ncurl http\n:\n/\n/\nlocalhost\n/\nrest\n/\nids\n?\ngroup_name\n=\ndeveloper\nAssume returned id is\n1\n.\nRetrieve xml representation of group\ndeveloper\ninto a temp file using below command:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ngroups\n/\n1\n>\ntempfile\n.\nxml\nEdit\ntempfile.xml\n, remove the\nid\nelement, and change the\nname\nelement to be\ntester\nPost back modified content using below command:\ncurl\n-\nX\nPOST\n-\nu admin\n:\nadmin\n-\nd\n@tempfile.xml\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ngroups\nDelete group\nâ\nSyntax\nâ\nGroup can be deleted using http DELETE method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ngroups\n/\n<\ngroup id\n>\nHere\n<group id>\nstands for id of the group to be deleted.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as administrator if the anonymous does not have administrative right.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to delete the group with id\n2\n:\ncurl\n-\nX\nDELETE\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ngroups\n/\n2\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Interact with Groups",
        "content": ""
      },
      {
        "header": "Get all groups in the systemâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Groups in the system can be accessed using http GET method through below url: http://localhost:8810/rest/groups The response is of mime typeapplication/xmland the content is XML representation of all groups in the system."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have adminstrative right."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get all groups: curl-u admin:admin http://localhost:8810/rest/groups"
      },
      {
        "header": "Access group by idâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Group can be accessed by id using http GET method through below url: http://localhost:8810/rest/groups/<group id> The response is of mime typeapplication/xmland the content is XML representation of the group."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have adminstrative right."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get group of id1: curl-u admin:admin http://localhost:8810/rest/groups/1"
      },
      {
        "header": "Update groupâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Group can be updated by posting xml representation of the group to below url: http://localhost:8810/rest/groups Normally you do not need to create the XML from scratch: you may retrieve XML representation of the group using http GET method, modify certain parts of the XML and post back to above url. The response is of mime typetext/plainand the content is string representation of the group id being updated."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as administrator if the anonymous does not have administrative right."
      },
      {
        "header": "Demoâ",
        "content": "We will usecurlto demonstrate how to modify description of groupdeveloper: Get id of groupdeveloperwithid servicecurl http://localhost/rest/ids?group_name=developerAssume returned id is1.Retrieve xml representation of groupdeveloperinto a temp file using below command:curl-u admin:admin http://localhost:8810/rest/groups/1>tempfile.xmlEdittempfile.xmland changedescriptionelement to desired value (or add thedescriptionelement if it does not already exist).Post back modified content using below command:curl-XPOST-u admin:admin-d@tempfile.xmlhttp://localhost:8810/rest/groups"
      },
      {
        "header": "Create groupâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Group can be created by posting XML representation of the group to below url: http://localhost:8810/rest/groups Please note that the posted XML should NOT contain theidelement; otherwise, QuickBuild will treat the post as an updating to the group with that id. Normally you do not need to create the XML from scratch: you may retrieve XML representation of a templating group using http GET method, remove theidelement, modify certain parts and post back to above url. The response is of mime typetext/plainand the content is string representation of the newly created group id."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as administrator if the anonymous does not have administrative right."
      },
      {
        "header": "Demoâ",
        "content": "We will usecurlto demonstrate how to create a new grouptesterby copying the existing groupdeveloper. Get id of groupdeveloperwithid servicecurl http://localhost/rest/ids?group_name=developerAssume returned id is1.Retrieve xml representation of groupdeveloperinto a temp file using below command:curl-u admin:admin http://localhost:8810/rest/groups/1>tempfile.xmlEdittempfile.xml, remove theidelement, and change thenameelement to betesterPost back modified content using below command:curl-XPOST-u admin:admin-d@tempfile.xmlhttp://localhost:8810/rest/groups"
      },
      {
        "header": "Delete groupâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Group can be deleted using http DELETE method through below url: http://localhost:8810/rest/groups/<group id> Here<group id>stands for id of the group to be deleted."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as administrator if the anonymous does not have administrative right."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to delete the group with id2: curl-XDELETE-u admin:admin http://localhost:8810/rest/groups/2"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Interact+with+Group+Memberships",
      "https://wiki.pmease.com/display/QB14/Interact+with+Dashboards",
      "https://wiki.pmease.com/display/QB14/Interact+with+Group+Share",
      "https://wiki.pmease.com/display/QB14/Interact+with+User+Share",
      "https://wiki.pmease.com/display/QB14/Interact+with+Cloud+Profiles",
      "https://wiki.pmease.com/display/QB14/Interact+with+Configuration+Authorizations",
      "https://wiki.pmease.com/display/QB14/Interact+with+Resources",
      "https://wiki.pmease.com/display/QB14/Interact+with+Agent+Tokens",
      "https://wiki.pmease.com/display/QB14/Get+System+Attributes+of+Grid+Node",
      "https://wiki.pmease.com/display/QB14/Get+and+Set+User+Attributes+of+Grid+Node",
      "https://wiki.pmease.com/display/QB14/Interact+with+Reports",
      "https://wiki.pmease.com/display/QB14/Interact+with+Changes",
      "https://wiki.pmease.com/display/QB14/Interact+with+Issues",
      "https://wiki.pmease.com/display/QB14/Query+Build+Notifications",
      "https://wiki.pmease.com/display/QB14/Query+Grid+Measurements",
      "https://wiki.pmease.com/display/QB14/Access+Information+of+Published+Files",
      "https://wiki.pmease.com/display/QB14/Interact+with+Build+Agents",
      "https://wiki.pmease.com/display/QB14/Backup+Database",
      "https://wiki.pmease.com/display/QB14/Pause+System",
      "https://wiki.pmease.com/display/QB14/Resume+System",
      "https://wiki.pmease.com/display/QB14/Check+System+Pause+Information",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Interact+with+Group+Memberships"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Interact+with+Group+Memberships",
    "title": "Interact with Group Memberships",
    "breadcrumb": [
      "",
      "Developer's Guide",
      "RESTful API"
    ],
    "full_text": "Developer's Guide\nRESTful API\nInteract with Group Memberships\nVersion: QB14\nOn this page\nInteract with Group Memberships\nGet all memberships in the system\nâ\nSyntax\nâ\nMemberships in the system can be accessed using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nmemberships\nThe response is of mime type\napplication/xml\nand the content is XML representation of all memberships in the system.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have adminstrative right.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get all memberships:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nmemberships\nAccess membership by id\nâ\nSyntax\nâ\nMembership can be accessed by id using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nmemberships\n/\n<\nmembership id\n>\nThe response is of mime type\napplication/xml\nand the content is XML representation of the membership.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have adminstrative right.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get membership of id\n1\n:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nmemberships\n/\n1\nAccess memberships of a particular user\nâ\nSyntax\nâ\nMemberships of particular user can be accessed using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nmemberships\n?\nuser_id\n=\n<\nuser id\n>\nThe response is of mime type\napplication/xml\nand the content is XML representation of all memberships of specified user.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have adminstrative right.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get memberships of user with id\n2\n:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nmemberships\n?\nuser_id\n=\n2\nAccess memberships of a particular group\nâ\nSyntax\nâ\nMemberships of particular group can be accessed using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nmemberships\n?\ngroup_id\n=\n<\ngroup id\n>\nThe response is of mime type\napplication/xml\nand the content is XML representation of all memberships of specified group.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have adminstrative right.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get memberships of group with id\n1\n:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nmemberships\n?\ngroup_id\n=\n1\nUpdate membership\nâ\nSyntax\nâ\nMembership can be updated by posting xml representation of the membership to below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nmemberships\nNormally you do not need to create the XML from scratch: you may retrieve XML representation of the membership using http GET method, modify certain parts of the XML and post back to above url.\nThe response is of mime type\ntext/plain\nand the content is string representation of the membership id being updated.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as administrator if the anonymous does not have administrative right.\nDemo\nâ\nWe will use\ncurl\nto demonstrate how to move user\nrobin\nfrom\ndeveloper\ngroup to\ntester\ngroup:\nAssume id of user\nrobin\nis\n2\n, id of group\ndeveloper\nis\n1\n, and id of group\ntester\nis\n2\n. Ids of these entities can be accessed using\nid service\n.\nRun below command to get memberships of user\nrobin\n:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nmemberships\n?\nuser_id\n=\n2\nAnalyze response of above command to find out the membership with group id\n1\n. Save xml snippet of found membership to a temp file, say\ntempfile.xml\n.\nModify\ntempfile.xml\nand change the\ngroup\nelement to use value of\n2\n.\nPost content of\ntempfile.xml\nback to QuickBuild using below command:\ncurl\n-\nX\nPOST\n-\nu admin\n:\nadmin\n-\nd\n@tempfile.xml\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nmemberships\nCreate membership\nâ\nSyntax\nâ\nMembership can be created by posting XML representation of the membership to below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nmemberships\nA sample membership XML representation is like below:\n<\ncom\n.\npmease\n.\nquickbuild\n.\nmodel\n.\nMembership\n>\n<\n!\n--\nid of associated user of\nthis\nmembership\n.\n--\n>\n<\nuser\n>\n2\n<\n/\nuser\n>\n<\n!\n--\nid of associated group of\nthis\nmembership\n.\n--\n>\n<\ngroup\n>\n1\n<\n/\ngroup\n>\n<\n/\ncom\n.\npmease\n.\nquickbuild\n.\nmodel\n.\nMembership\n>\nThe response is of mime type\ntext/plain\nand the content is string representation of the newly created membership id.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as administrator if the anonymous does not have administrative right.\nDemo\nâ\nWe will use\ncurl\nto demonstrate how to add user\nrobin\n(assume id is\n2\n) to group\ntester\n(assume the id is\n3\n).\nSave below content into file\ntempfile.xml\n:\n<\ncom\n.\npmease\n.\nquickbuild\n.\nmodel\n.\nMembership\n>\n<\nuser\n>\n2\n<\n/\nuser\n>\n<\ngroup\n>\n3\n<\n/\ngroup\n>\n<\n/\ncom\n.\npmease\n.\nquickbuild\n.\nmodel\n.\nMembership\n>\nPost content of\ntempfile.xml\nto QuickBuild using below command:\ncurl\n-\nX\nPOST\n-\nu admin\n:\nadmin\n-\nd\n@tempfile.xml\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nmemberships\nDelete membership\nâ\nSyntax\nâ\nMembership can be deleted using http DELETE method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nmemberships\n/\n<\nmembership id\n>\nHere\n<membership id>\nstands for id of the membership to be deleted.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as administrator if the anonymous does not have administrative right.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to remove user\nrobin\n(assume id is\n2\n) from group\ntester\n(assume the id is\n3\n).\nGet memberships of user\nrobin\nwith below command:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nmemberships\n?\nuser_id\n=\n2\nAnalyze response of above command to find out id of the membership associated with group id\n3\n, assume id of the found membership is\n100\n.\nDelete the found membership with below command:\ncurl\n-\nX\nDELETE\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nmemberships\n/\n100\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Interact with Group Memberships",
        "content": ""
      },
      {
        "header": "Get all memberships in the systemâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Memberships in the system can be accessed using http GET method through below url: http://localhost:8810/rest/memberships The response is of mime typeapplication/xmland the content is XML representation of all memberships in the system."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have adminstrative right."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get all memberships: curl-u admin:admin http://localhost:8810/rest/memberships"
      },
      {
        "header": "Access membership by idâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Membership can be accessed by id using http GET method through below url: http://localhost:8810/rest/memberships/<membership id> The response is of mime typeapplication/xmland the content is XML representation of the membership."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have adminstrative right."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get membership of id1: curl-u admin:admin http://localhost:8810/rest/memberships/1"
      },
      {
        "header": "Access memberships of a particular userâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Memberships of particular user can be accessed using http GET method through below url: http://localhost:8810/rest/memberships?user_id=<user id> The response is of mime typeapplication/xmland the content is XML representation of all memberships of specified user."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have adminstrative right."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get memberships of user with id2: curl-u admin:admin http://localhost:8810/rest/memberships?user_id=2"
      },
      {
        "header": "Access memberships of a particular groupâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Memberships of particular group can be accessed using http GET method through below url: http://localhost:8810/rest/memberships?group_id=<group id> The response is of mime typeapplication/xmland the content is XML representation of all memberships of specified group."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have adminstrative right."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get memberships of group with id1: curl-u admin:admin http://localhost:8810/rest/memberships?group_id=1"
      },
      {
        "header": "Update membershipâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Membership can be updated by posting xml representation of the membership to below url: http://localhost:8810/rest/memberships Normally you do not need to create the XML from scratch: you may retrieve XML representation of the membership using http GET method, modify certain parts of the XML and post back to above url. The response is of mime typetext/plainand the content is string representation of the membership id being updated."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as administrator if the anonymous does not have administrative right."
      },
      {
        "header": "Demoâ",
        "content": "We will usecurlto demonstrate how to move userrobinfromdevelopergroup totestergroup: Assume id of userrobinis2, id of groupdeveloperis1, and id of grouptesteris2. Ids of these entities can be accessed usingid service.Run below command to get memberships of userrobin:curl-u admin:admin http://localhost:8810/rest/memberships?user_id=2Analyze response of above command to find out the membership with group id1. Save xml snippet of found membership to a temp file, saytempfile.xml.Modifytempfile.xmland change thegroupelement to use value of2.Post content oftempfile.xmlback to QuickBuild using below command:curl-XPOST-u admin:admin-d@tempfile.xmlhttp://localhost:8810/rest/memberships"
      },
      {
        "header": "Create membershipâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Membership can be created by posting XML representation of the membership to below url: http://localhost:8810/rest/memberships A sample membership XML representation is like below: <com.pmease.quickbuild.model.Membership><!--id of associated user ofthismembership.--><user>2</user><!--id of associated group ofthismembership.--><group>1</group></com.pmease.quickbuild.model.Membership> The response is of mime typetext/plainand the content is string representation of the newly created membership id."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as administrator if the anonymous does not have administrative right."
      },
      {
        "header": "Demoâ",
        "content": "We will usecurlto demonstrate how to add userrobin(assume id is2) to grouptester(assume the id is3). Save below content into filetempfile.xml:<com.pmease.quickbuild.model.Membership><user>2</user><group>3</group></com.pmease.quickbuild.model.Membership>Post content oftempfile.xmlto QuickBuild using below command:curl-XPOST-u admin:admin-d@tempfile.xmlhttp://localhost:8810/rest/memberships"
      },
      {
        "header": "Delete membershipâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Membership can be deleted using http DELETE method through below url: http://localhost:8810/rest/memberships/<membership id> Here<membership id>stands for id of the membership to be deleted."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as administrator if the anonymous does not have administrative right."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to remove userrobin(assume id is2) from grouptester(assume the id is3). Get memberships of userrobinwith below command:curl-u admin:admin http://localhost:8810/rest/memberships?user_id=2Analyze response of above command to find out id of the membership associated with group id3, assume id of the found membership is100.Delete the found membership with below command:curl-XDELETE-u admin:admin http://localhost:8810/rest/memberships/100"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Interact+with+Dashboards",
      "https://wiki.pmease.com/display/QB14/Interact+with+Group+Share",
      "https://wiki.pmease.com/display/QB14/Interact+with+User+Share",
      "https://wiki.pmease.com/display/QB14/Interact+with+Cloud+Profiles",
      "https://wiki.pmease.com/display/QB14/Interact+with+Configuration+Authorizations",
      "https://wiki.pmease.com/display/QB14/Interact+with+Resources",
      "https://wiki.pmease.com/display/QB14/Interact+with+Agent+Tokens",
      "https://wiki.pmease.com/display/QB14/Get+System+Attributes+of+Grid+Node",
      "https://wiki.pmease.com/display/QB14/Get+and+Set+User+Attributes+of+Grid+Node",
      "https://wiki.pmease.com/display/QB14/Interact+with+Reports",
      "https://wiki.pmease.com/display/QB14/Interact+with+Changes",
      "https://wiki.pmease.com/display/QB14/Interact+with+Issues",
      "https://wiki.pmease.com/display/QB14/Query+Build+Notifications",
      "https://wiki.pmease.com/display/QB14/Query+Grid+Measurements",
      "https://wiki.pmease.com/display/QB14/Access+Information+of+Published+Files",
      "https://wiki.pmease.com/display/QB14/Interact+with+Build+Agents",
      "https://wiki.pmease.com/display/QB14/Backup+Database",
      "https://wiki.pmease.com/display/QB14/Pause+System",
      "https://wiki.pmease.com/display/QB14/Resume+System",
      "https://wiki.pmease.com/display/QB14/Check+System+Pause+Information",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Interact+with+Dashboards"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Interact+with+Dashboards",
    "title": "Interact with Dashboards",
    "breadcrumb": [
      "",
      "Developer's Guide",
      "RESTful API"
    ],
    "full_text": "Developer's Guide\nRESTful API\nInteract with Dashboards\nVersion: QB14\nOn this page\nInteract with Dashboards\nGet all dashboards in the system\nâ\nSyntax\nâ\nDashboards in the system can be accessed using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ndashboards\nThe response is of mime type\napplication/xml\nand the content is XML representation of all dashboards in the system.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as administrator.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get all dashboards:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ndashboards\nAccess dashboard by id\nâ\nSyntax\nâ\nDashboard can be accessed by id using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ndashboards\n/\n<\ndashboard id\n>\nThe response is of mime type\napplication/xml\nand the content is XML representation of the dashboard.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as user able to access the dashboard.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get dashboard of id\n1\n:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ndashboards\n/\n1\nUpdate dashboard\nâ\nSyntax\nâ\nDashboard can be updated by posting xml representation of the dashboard to below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ndashboards\nNormally you do not need to create the XML from scratch: you may retrieve XML representation of the dashboard using http GET method, modify certain parts of the XML and post back to above url.\nThe response is of mime type\ntext/plain\nand the content is string representation of the dashboard id being updated.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as user able to access the dashboard.\nDemo\nâ\nWe will use\ncurl\nto demonstrate how to modify description of dashboard\nproject1\nfor user with id\n5\n:\nGet id of dashboard\nproject1\nwith\nid service\ncurl http\n:\n/\n/\nlocalhost\n/\nrest\n/\nids\n?\ndashboard_fqn\n=\n5.\nproject1\nHere you need to query with dashboard fqn (fully qualified name) which is of form <user id>.<dashboard name>. Assume returned id is\n1\n.\nRetrieve xml representation of group\nproject1\ninto a temp file using below command:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ndashboards\n/\n1\n>\ntempfile\n.\nxml\nEdit\ntempfile.xml\nand change\ndescription\nelement to desired value (or add the\ndescription\nelement if it does not already exist).\nPost back modified content using below command:\ncurl\n-\nX\nPOST\n-\nu admin\n:\nadmin\n-\nd\n@tempfile.xml\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ndashboards\nCreate dashboard\nâ\nSyntax\nâ\nDashboard can be created by posting XML representation of the dashboard to below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ndashboards\nPlease note that the posted XML should NOT contain the\nid\nelement; otherwise, QuickBuild will treat the post as an updating to the dashboard with that id.\nNormally you do not need to create the XML from scratch: you may retrieve XML representation of a templating dashboard using http GET method, remove the\nid\nelement, modify certain parts and post back to above url.\nThe response is of mime type\ntext/plain\nand the content is string representation of the newly created dashboard id.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as administrator or the user owning the dashboard.\nDemo\nâ\nWe will use\ncurl\nto demonstrate how to create a new dashboard\nproject1\nby copying the existing dashboard\nproject2\nunder user with id\n5\n.\nGet id of dashboard\nproject1\nwith\nid service\ncurl http\n:\n/\n/\nlocalhost\n/\nrest\n/\nids\n?\ndashboard_fqn\n=\n5.\nproject1\nAssume returned id is\n1\n.\nRetrieve xml representation of dashboard\nproject1\ninto a temp file using below command:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ndashboards\n/\n1\n>\ntempfile\n.\nxml\nEdit\ntempfile.xml\n, remove the\nid\nelement, and change the\nname\nelement to be\nproject2\nPost back modified content using below command:\ncurl\n-\nX\nPOST\n-\nu admin\n:\nadmin\n-\nd\n@tempfile.xml\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ndashboards\nDelete dashboard\nâ\nSyntax\nâ\nDashboard can be deleted using http DELETE method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ndashboards\n/\n<\ndashboard id\n>\nHere\n<dashboard id>\nstands for id of the dashboard to be deleted.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as administrator or the user owning the dashboard.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to delete the dashboard with id\n2\n:\ncurl\n-\nX\nDELETE\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ndashboards\n/\n2\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Interact with Dashboards",
        "content": ""
      },
      {
        "header": "Get all dashboards in the systemâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Dashboards in the system can be accessed using http GET method through below url: http://localhost:8810/rest/dashboards The response is of mime typeapplication/xmland the content is XML representation of all dashboards in the system."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as administrator."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get all dashboards: curl-u admin:admin http://localhost:8810/rest/dashboards"
      },
      {
        "header": "Access dashboard by idâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Dashboard can be accessed by id using http GET method through below url: http://localhost:8810/rest/dashboards/<dashboard id> The response is of mime typeapplication/xmland the content is XML representation of the dashboard."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as user able to access the dashboard."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get dashboard of id1: curl-u admin:admin http://localhost:8810/rest/dashboards/1"
      },
      {
        "header": "Update dashboardâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Dashboard can be updated by posting xml representation of the dashboard to below url: http://localhost:8810/rest/dashboards Normally you do not need to create the XML from scratch: you may retrieve XML representation of the dashboard using http GET method, modify certain parts of the XML and post back to above url. The response is of mime typetext/plainand the content is string representation of the dashboard id being updated."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as user able to access the dashboard."
      },
      {
        "header": "Demoâ",
        "content": "We will usecurlto demonstrate how to modify description of dashboardproject1for user with id5: Get id of dashboardproject1withid servicecurl http://localhost/rest/ids?dashboard_fqn=5.project1Here you need to query with dashboard fqn (fully qualified name) which is of form <user id>.<dashboard name>. Assume returned id is1.Retrieve xml representation of groupproject1into a temp file using below command:curl-u admin:admin http://localhost:8810/rest/dashboards/1>tempfile.xmlEdittempfile.xmland changedescriptionelement to desired value (or add thedescriptionelement if it does not already exist).Post back modified content using below command:curl-XPOST-u admin:admin-d@tempfile.xmlhttp://localhost:8810/rest/dashboards"
      },
      {
        "header": "Create dashboardâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Dashboard can be created by posting XML representation of the dashboard to below url: http://localhost:8810/rest/dashboards Please note that the posted XML should NOT contain theidelement; otherwise, QuickBuild will treat the post as an updating to the dashboard with that id. Normally you do not need to create the XML from scratch: you may retrieve XML representation of a templating dashboard using http GET method, remove theidelement, modify certain parts and post back to above url. The response is of mime typetext/plainand the content is string representation of the newly created dashboard id."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as administrator or the user owning the dashboard."
      },
      {
        "header": "Demoâ",
        "content": "We will usecurlto demonstrate how to create a new dashboardproject1by copying the existing dashboardproject2under user with id5. Get id of dashboardproject1withid servicecurl http://localhost/rest/ids?dashboard_fqn=5.project1Assume returned id is1.Retrieve xml representation of dashboardproject1into a temp file using below command:curl-u admin:admin http://localhost:8810/rest/dashboards/1>tempfile.xmlEdittempfile.xml, remove theidelement, and change thenameelement to beproject2Post back modified content using below command:curl-XPOST-u admin:admin-d@tempfile.xmlhttp://localhost:8810/rest/dashboards"
      },
      {
        "header": "Delete dashboardâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Dashboard can be deleted using http DELETE method through below url: http://localhost:8810/rest/dashboards/<dashboard id> Here<dashboard id>stands for id of the dashboard to be deleted."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as administrator or the user owning the dashboard."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to delete the dashboard with id2: curl-XDELETE-u admin:admin http://localhost:8810/rest/dashboards/2"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Interact+with+Group+Share",
      "https://wiki.pmease.com/display/QB14/Interact+with+User+Share",
      "https://wiki.pmease.com/display/QB14/Interact+with+Cloud+Profiles",
      "https://wiki.pmease.com/display/QB14/Interact+with+Configuration+Authorizations",
      "https://wiki.pmease.com/display/QB14/Interact+with+Resources",
      "https://wiki.pmease.com/display/QB14/Interact+with+Agent+Tokens",
      "https://wiki.pmease.com/display/QB14/Get+System+Attributes+of+Grid+Node",
      "https://wiki.pmease.com/display/QB14/Get+and+Set+User+Attributes+of+Grid+Node",
      "https://wiki.pmease.com/display/QB14/Interact+with+Reports",
      "https://wiki.pmease.com/display/QB14/Interact+with+Changes",
      "https://wiki.pmease.com/display/QB14/Interact+with+Issues",
      "https://wiki.pmease.com/display/QB14/Query+Build+Notifications",
      "https://wiki.pmease.com/display/QB14/Query+Grid+Measurements",
      "https://wiki.pmease.com/display/QB14/Access+Information+of+Published+Files",
      "https://wiki.pmease.com/display/QB14/Interact+with+Build+Agents",
      "https://wiki.pmease.com/display/QB14/Backup+Database",
      "https://wiki.pmease.com/display/QB14/Pause+System",
      "https://wiki.pmease.com/display/QB14/Resume+System",
      "https://wiki.pmease.com/display/QB14/Check+System+Pause+Information",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Interact+with+Group+Share"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Interact+with+Group+Share",
    "title": "Interact with Group Share",
    "breadcrumb": [
      "",
      "Developer's Guide",
      "RESTful API"
    ],
    "full_text": "Developer's Guide\nRESTful API\nInteract with Group Share\nVersion: QB14\nOn this page\nInteract with Group Share\ninfo\nGroup share is the object used to control dashboard sharing with groups\nGet all group shares in the system\nâ\nSyntax\nâ\nGroup shares in the system can be accessed using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ngroup_shares\nThe response is of mime type\napplication/xml\nand the content is XML representation of all group shares in the system.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as administrator.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get all group shares:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ngroup_shares\ninfo\ngroup share with no group information means to share with everyone\nAccess group share by id\nâ\nSyntax\nâ\nGroup share can be accessed by id using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ngroup_shares\n/\n<\ngroup_share id\n>\nThe response is of mime type\napplication/xml\nand the content is XML representation of the group share.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as administrator or user owning dashboard of the group share.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get group share of id\n1\n:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ngroup_shares\n/\n1\nAccess group shares of a particular dashboard\nâ\nSyntax\nâ\nGroup shares of particular dashboard can be accessed using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ngroup_shares\n?\ndashboard_id\n=\n<\ndashboard id\n>\nThe response is of mime type\napplication/xml\nand the content is XML representation of all group shares of specified dashboard.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as administrator or the user owning queried dashboard.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get group shares of dashboard with id\n2\n:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ngroup_shares\n?\ndashboard_id\n=\n2\nAccess group shares of a particular group\nâ\nSyntax\nâ\nGroup shares of particular group can be accessed using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ngroup_shares\n?\ngroup_id\n=\n<\ngroup id\n>\nHere <group id> represents id of the group to query group share information for. Particularly, use id\n0\nto query group\nshares targeting everyone.\nThe response is of mime type\napplication/xml\nand the content is XML representation of all group shares of specified group.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as administrator.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get group shares of group with id\n1\n:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ngroup_shares\n?\ngroup_id\n=\n1\nUpdate group share\nâ\nSyntax\nâ\nGroup share can be updated by posting xml representation of the group share to below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ngroup_shares\nNormally you do not need to create the XML from scratch: you may retrieve XML representation of the group share using http GET method, modify certain parts of the XML and post back to above url.\nThe response is of mime type\ntext/plain\nand the content is string representation of the group share id being updated.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as administrator or user owning dashboard of the group share.\nDemo\nâ\nWe will use\ncurl\nto demonstrate how to share dashboard\nproject1\nwith\ngroup1\ninstead of\ngroup2\n:\nAssume id of dashboard\nproject1\nis\n2\n, id of group\ngroup1\nis\n1\n, and id of group\ngroup2\nis\n2\n. Ids of these entities can be accessed using\nid service\n.\nRun below command to get group shares of dashboard\nproject1\n:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ngroup_shares\n?\ndashboard_id\n=\n2\nAnalyze response of above command to find out the group share with group id\n1\n. Save xml snippet of found group share to a temp file, say\ntempfile.xml\n.\nModify\ntempfile.xml\nand change the\ngroup\nelement to use value of\n2\n.\nPost content of\ntempfile.xml\nback to QuickBuild using below command:\ncurl\n-\nX\nPOST\n-\nu admin\n:\nadmin\n-\nd\n@tempfile.xml\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ngroup_shares\nCreate group share\nâ\nSyntax\nâ\nGroup share can be created by posting XML representation of the group share to below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ngroup_shares\nA sample group share XML representation is like below:\n<\ncom\n.\npmease\n.\nquickbuild\n.\nmodel\n.\nGroupShare\n>\n<\n!\n--\nid of associated group of\nthis\ngroup\nshare\n.\nIf\ngroup element does not exist\n,\nQuickBuild\nwill share the dashboard\nwith\neveryone\n--\n>\n<\ngroup\n>\n2\n<\n/\ngroup\n>\n<\n!\n--\nid of associated dashboard of\nthis\ngroup share\n.\n--\n>\n<\ndashboard\n>\n1\n<\n/\ndashboard\n>\n<\n/\ncom\n.\npmease\n.\nquickbuild\n.\nmodel\n.\nGroupShare\n>\nThe response is of mime type\ntext/plain\nand the content is string representation of the newly created group share id.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as administrator or user owning dashboard of the group share.\nDemo\nâ\nWe will use\ncurl\nto demonstrate how to share dashboard\nproject1\n(assume id is\n2\n) with group\ngroup1\n(assume the id is\n3\n).\nSave below content into file\ntempfile.xml\n:\n<\ncom\n.\npmease\n.\nquickbuild\n.\nmodel\n.\nGroupShare\n>\n<\ndashboard\n>\n2\n<\n/\ndashboard\n>\n<\ngroup\n>\n3\n<\n/\ngroup\n>\n<\n/\ncom\n.\npmease\n.\nquickbuild\n.\nmodel\n.\nGroupShare\n>\nPost content of\ntempfile.xml\nto QuickBuild using below command:\ncurl\n-\nX\nPOST\n-\nu admin\n:\nadmin\n-\nd\n@tempfile.xml\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ngroup_shares\nDelete group share\nâ\nSyntax\nâ\nGroup share can be deleted using http DELETE method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ngroup_shares\n/\n<\ngroup share id\n>\nHere\n<group share id>\nstands for id of the group share to be deleted.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as administrator or user owning dashboard of the group share.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to remove group\ngroup1\n(assume id is\n3\n) from share list of dashboard\nproject1\n(assume the id is\n2\n).\nGet group shares of dashboard\nproject1\nwith below command:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ngroup_shares\n?\ndashboard_id\n=\n2\nAnalyze response of above command to find out id of the group share associated with group id\n3\n, assume id of the found group share is\n100\n.\nDelete the found group share with below command:\ncurl\n-\nX\nDELETE\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ngroup_shares\n/\n100\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Interact with Group Share",
        "content": ""
      },
      {
        "header": "Get all group shares in the systemâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Group shares in the system can be accessed using http GET method through below url: http://localhost:8810/rest/group_shares The response is of mime typeapplication/xmland the content is XML representation of all group shares in the system."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as administrator."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get all group shares: curl-u admin:admin http://localhost:8810/rest/group_shares infogroup share with no group information means to share with everyone"
      },
      {
        "header": "Access group share by idâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Group share can be accessed by id using http GET method through below url: http://localhost:8810/rest/group_shares/<group_share id> The response is of mime typeapplication/xmland the content is XML representation of the group share."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as administrator or user owning dashboard of the group share."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get group share of id1: curl-u admin:admin http://localhost:8810/rest/group_shares/1"
      },
      {
        "header": "Access group shares of a particular dashboardâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Group shares of particular dashboard can be accessed using http GET method through below url: http://localhost:8810/rest/group_shares?dashboard_id=<dashboard id> The response is of mime typeapplication/xmland the content is XML representation of all group shares of specified dashboard."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as administrator or the user owning queried dashboard."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get group shares of dashboard with id2: curl-u admin:admin http://localhost:8810/rest/group_shares?dashboard_id=2"
      },
      {
        "header": "Access group shares of a particular groupâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Group shares of particular group can be accessed using http GET method through below url: http://localhost:8810/rest/group_shares?group_id=<group id> Here <group id> represents id of the group to query group share information for. Particularly, use id0to query group shares targeting everyone. The response is of mime typeapplication/xmland the content is XML representation of all group shares of specified group."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as administrator."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get group shares of group with id1: curl-u admin:admin http://localhost:8810/rest/group_shares?group_id=1"
      },
      {
        "header": "Update group shareâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Group share can be updated by posting xml representation of the group share to below url: http://localhost:8810/rest/group_shares Normally you do not need to create the XML from scratch: you may retrieve XML representation of the group share using http GET method, modify certain parts of the XML and post back to above url. The response is of mime typetext/plainand the content is string representation of the group share id being updated."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as administrator or user owning dashboard of the group share."
      },
      {
        "header": "Demoâ",
        "content": "We will usecurlto demonstrate how to share dashboardproject1withgroup1instead ofgroup2: Assume id of dashboardproject1is2, id of groupgroup1is1, and id of groupgroup2is2. Ids of these entities can be accessed usingid service.Run below command to get group shares of dashboardproject1:curl-u admin:admin http://localhost:8810/rest/group_shares?dashboard_id=2Analyze response of above command to find out the group share with group id1. Save xml snippet of found group share to a temp file, saytempfile.xml.Modifytempfile.xmland change thegroupelement to use value of2.Post content oftempfile.xmlback to QuickBuild using below command:curl-XPOST-u admin:admin-d@tempfile.xmlhttp://localhost:8810/rest/group_shares"
      },
      {
        "header": "Create group shareâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Group share can be created by posting XML representation of the group share to below url: http://localhost:8810/rest/group_shares A sample group share XML representation is like below: <com.pmease.quickbuild.model.GroupShare><!--id of associated group ofthisgroupshare.Ifgroup element does not exist,QuickBuildwill share the dashboardwitheveryone--><group>2</group><!--id of associated dashboard ofthisgroup share.--><dashboard>1</dashboard></com.pmease.quickbuild.model.GroupShare> The response is of mime typetext/plainand the content is string representation of the newly created group share id."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as administrator or user owning dashboard of the group share."
      },
      {
        "header": "Demoâ",
        "content": "We will usecurlto demonstrate how to share dashboardproject1(assume id is2) with groupgroup1(assume the id is3). Save below content into filetempfile.xml:<com.pmease.quickbuild.model.GroupShare><dashboard>2</dashboard><group>3</group></com.pmease.quickbuild.model.GroupShare>Post content oftempfile.xmlto QuickBuild using below command:curl-XPOST-u admin:admin-d@tempfile.xmlhttp://localhost:8810/rest/group_shares"
      },
      {
        "header": "Delete group shareâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Group share can be deleted using http DELETE method through below url: http://localhost:8810/rest/group_shares/<group share id> Here<group share id>stands for id of the group share to be deleted."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as administrator or user owning dashboard of the group share."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to remove groupgroup1(assume id is3) from share list of dashboardproject1(assume the id is2). Get group shares of dashboardproject1with below command:curl-u admin:admin http://localhost:8810/rest/group_shares?dashboard_id=2Analyze response of above command to find out id of the group share associated with group id3, assume id of the found group share is100.Delete the found group share with below command:curl-XDELETE-u admin:admin http://localhost:8810/rest/group_shares/100"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Interact+with+User+Share",
      "https://wiki.pmease.com/display/QB14/Interact+with+Cloud+Profiles",
      "https://wiki.pmease.com/display/QB14/Interact+with+Configuration+Authorizations",
      "https://wiki.pmease.com/display/QB14/Interact+with+Resources",
      "https://wiki.pmease.com/display/QB14/Interact+with+Agent+Tokens",
      "https://wiki.pmease.com/display/QB14/Get+System+Attributes+of+Grid+Node",
      "https://wiki.pmease.com/display/QB14/Get+and+Set+User+Attributes+of+Grid+Node",
      "https://wiki.pmease.com/display/QB14/Interact+with+Reports",
      "https://wiki.pmease.com/display/QB14/Interact+with+Changes",
      "https://wiki.pmease.com/display/QB14/Interact+with+Issues",
      "https://wiki.pmease.com/display/QB14/Query+Build+Notifications",
      "https://wiki.pmease.com/display/QB14/Query+Grid+Measurements",
      "https://wiki.pmease.com/display/QB14/Access+Information+of+Published+Files",
      "https://wiki.pmease.com/display/QB14/Interact+with+Build+Agents",
      "https://wiki.pmease.com/display/QB14/Backup+Database",
      "https://wiki.pmease.com/display/QB14/Pause+System",
      "https://wiki.pmease.com/display/QB14/Resume+System",
      "https://wiki.pmease.com/display/QB14/Check+System+Pause+Information",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Interact+with+User+Share"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Interact+with+User+Share",
    "title": "Interact with User Share",
    "breadcrumb": [
      "",
      "Developer's Guide",
      "RESTful API"
    ],
    "full_text": "Developer's Guide\nRESTful API\nInteract with User Share\nVersion: QB14\nOn this page\nInteract with User Share\ninfo\nUser share is the object used to control dashboard sharing with users\nGet all user shares in the system\nâ\nSyntax\nâ\nUser shares in the system can be accessed using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nuser_shares\nThe response is of mime type\napplication/xml\nand the content is XML representation of all user shares in the system.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as administrator.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get all user shares:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nuser_shares\nAccess user share by id\nâ\nSyntax\nâ\nUser share can be accessed by id using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nuser_shares\n/\n<\nuser_share id\n>\nThe response is of mime type\napplication/xml\nand the content is XML representation of the user share.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as administrator or user owning dashboard of the user share.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get user share of id\n1\n:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nuser_shares\n/\n1\nAccess user shares of a particular dashboard\nâ\nSyntax\nâ\nUser shares of particular dashboard can be accessed using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nuser_shares\n?\ndashboard_id\n=\n<\ndashboard id\n>\nThe response is of mime type\napplication/xml\nand the content is XML representation of all user shares of specified dashboard.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as administrator or the user owning queried dashboard.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get user shares of dashboard with id\n2\n:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nuser_shares\n?\ndashboard_id\n=\n2\nAccess user shares of a particular user\nâ\nSyntax\nâ\nUser shares of particular user can be accessed using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nuser_shares\n?\nuser_id\n=\n<\nuser id\n>\nThe response is of mime type\napplication/xml\nand the content is XML representation of all user shares of specified user.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as administrator or the user being queried.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get user shares of user with id\n1\n:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nuser_shares\n?\nuser_id\n=\n1\nUpdate user share\nâ\nSyntax\nâ\nUser share can be updated by posting xml representation of the user share to below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nuser_shares\nNormally you do not need to create the XML from scratch: you may retrieve XML representation of the user share using http GET method, modify certain parts of the XML and post back to above url.\nThe response is of mime type\ntext/plain\nand the content is string representation of the user share id being updated.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as administrator or user owning dashboard of the user share.\nDemo\nâ\nWe will use\ncurl\nto demonstrate how to share dashboard\nproject1\nwith\nuser1\ninstead of\nuser2\n:\nAssume id of dashboard\nproject1\nis\n2\n, id of user\nuser1\nis\n1\n, and id of user\nuser2\nis\n2\n. Ids of these entities can be accessed using\nid service\n.\nRun below command to get user shares of dashboard\nproject1\n:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nuser_shares\n?\ndashboard_id\n=\n2\nAnalyze response of above command to find out the user share with user id\n1\n. Save xml snippet of found user share to a temp file, say\ntempfile.xml\n.\nModify\ntempfile.xml\nand change the\nuser\nelement to use value of\n2\n.\nPost content of\ntempfile.xml\nback to QuickBuild using below command:\ncurl\n-\nX\nPOST\n-\nu admin\n:\nadmin\n-\nd\n@tempfile.xml\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nuser_shares\nCreate user share\nâ\nSyntax\nâ\nUser share can be created by posting XML representation of the user share to below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nuser_shares\nA sample user share XML representation is like below:\n<\ncom\n.\npmease\n.\nquickbuild\n.\nmodel\n.\nUserShare\n>\n<\n!\n--\nid of associated user of\nthis\nuser share\n.\n--\n>\n<\nuser\n>\n2\n<\n/\nuser\n>\n<\n!\n--\nid of associated dashboard of\nthis\nuser share\n.\n--\n>\n<\ndashboard\n>\n1\n<\n/\ndashboard\n>\n<\n/\ncom\n.\npmease\n.\nquickbuild\n.\nmodel\n.\nGroupShare\n>\nThe response is of mime type\ntext/plain\nand the content is string representation of the newly created user share id.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as administrator or user owning dashboard of the user share.\nDemo\nâ\nWe will use\ncurl\nto demonstrate how to share dashboard\nproject1\n(assume id is\n2\n) with user\nuser1\n(assume the id is\n3\n).\nSave below content into file\ntempfile.xml\n:\n<\ncom\n.\npmease\n.\nquickbuild\n.\nmodel\n.\nUserShare\n>\n<\ndashboard\n>\n2\n<\n/\ndashboard\n>\n<\nuser\n>\n3\n<\n/\nuser\n>\n<\n/\ncom\n.\npmease\n.\nquickbuild\n.\nmodel\n.\nUserShare\n>\nPost content of\ntempfile.xml\nto QuickBuild using below command:\ncurl\n-\nX\nPOST\n-\nu admin\n:\nadmin\n-\nd\n@tempfile.xml\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nuser_shares\nDelete user share\nâ\nSyntax\nâ\nUser share can be deleted using http DELETE method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nuser_shares\n/\n<\nuser share id\n>\nHere\n<user share id>\nstands for id of the user share to be deleted.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as administrator or user owning dashboard of the user share.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to remove user\nuser1\n(assume id is\n3\n) from share list of dashboard\nproject1\n(assume the id is\n2\n).\nGet user shares of dashboard\nproject1\nwith below command:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nuser_shares\n?\ndashboard_id\n=\n2\nAnalyze response of above command to find out id of the user share associated with user id\n3\n, assume id of the found user share is\n100\n.\nDelete the found user share with below command:\ncurl\n-\nX\nDELETE\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nuser_shares\n/\n100\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Interact with User Share",
        "content": ""
      },
      {
        "header": "Get all user shares in the systemâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "User shares in the system can be accessed using http GET method through below url: http://localhost:8810/rest/user_shares The response is of mime typeapplication/xmland the content is XML representation of all user shares in the system."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as administrator."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get all user shares: curl-u admin:admin http://localhost:8810/rest/user_shares"
      },
      {
        "header": "Access user share by idâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "User share can be accessed by id using http GET method through below url: http://localhost:8810/rest/user_shares/<user_share id> The response is of mime typeapplication/xmland the content is XML representation of the user share."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as administrator or user owning dashboard of the user share."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get user share of id1: curl-u admin:admin http://localhost:8810/rest/user_shares/1"
      },
      {
        "header": "Access user shares of a particular dashboardâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "User shares of particular dashboard can be accessed using http GET method through below url: http://localhost:8810/rest/user_shares?dashboard_id=<dashboard id> The response is of mime typeapplication/xmland the content is XML representation of all user shares of specified dashboard."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as administrator or the user owning queried dashboard."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get user shares of dashboard with id2: curl-u admin:admin http://localhost:8810/rest/user_shares?dashboard_id=2"
      },
      {
        "header": "Access user shares of a particular userâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "User shares of particular user can be accessed using http GET method through below url: http://localhost:8810/rest/user_shares?user_id=<user id> The response is of mime typeapplication/xmland the content is XML representation of all user shares of specified user."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as administrator or the user being queried."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get user shares of user with id1: curl-u admin:admin http://localhost:8810/rest/user_shares?user_id=1"
      },
      {
        "header": "Update user shareâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "User share can be updated by posting xml representation of the user share to below url: http://localhost:8810/rest/user_shares Normally you do not need to create the XML from scratch: you may retrieve XML representation of the user share using http GET method, modify certain parts of the XML and post back to above url. The response is of mime typetext/plainand the content is string representation of the user share id being updated."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as administrator or user owning dashboard of the user share."
      },
      {
        "header": "Demoâ",
        "content": "We will usecurlto demonstrate how to share dashboardproject1withuser1instead ofuser2: Assume id of dashboardproject1is2, id of useruser1is1, and id of useruser2is2. Ids of these entities can be accessed usingid service.Run below command to get user shares of dashboardproject1:curl-u admin:admin http://localhost:8810/rest/user_shares?dashboard_id=2Analyze response of above command to find out the user share with user id1. Save xml snippet of found user share to a temp file, saytempfile.xml.Modifytempfile.xmland change theuserelement to use value of2.Post content oftempfile.xmlback to QuickBuild using below command:curl-XPOST-u admin:admin-d@tempfile.xmlhttp://localhost:8810/rest/user_shares"
      },
      {
        "header": "Create user shareâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "User share can be created by posting XML representation of the user share to below url: http://localhost:8810/rest/user_shares A sample user share XML representation is like below: <com.pmease.quickbuild.model.UserShare><!--id of associated user ofthisuser share.--><user>2</user><!--id of associated dashboard ofthisuser share.--><dashboard>1</dashboard></com.pmease.quickbuild.model.GroupShare> The response is of mime typetext/plainand the content is string representation of the newly created user share id."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as administrator or user owning dashboard of the user share."
      },
      {
        "header": "Demoâ",
        "content": "We will usecurlto demonstrate how to share dashboardproject1(assume id is2) with useruser1(assume the id is3). Save below content into filetempfile.xml:<com.pmease.quickbuild.model.UserShare><dashboard>2</dashboard><user>3</user></com.pmease.quickbuild.model.UserShare>Post content oftempfile.xmlto QuickBuild using below command:curl-XPOST-u admin:admin-d@tempfile.xmlhttp://localhost:8810/rest/user_shares"
      },
      {
        "header": "Delete user shareâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "User share can be deleted using http DELETE method through below url: http://localhost:8810/rest/user_shares/<user share id> Here<user share id>stands for id of the user share to be deleted."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as administrator or user owning dashboard of the user share."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to remove useruser1(assume id is3) from share list of dashboardproject1(assume the id is2). Get user shares of dashboardproject1with below command:curl-u admin:admin http://localhost:8810/rest/user_shares?dashboard_id=2Analyze response of above command to find out id of the user share associated with user id3, assume id of the found user share is100.Delete the found user share with below command:curl-XDELETE-u admin:admin http://localhost:8810/rest/user_shares/100"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Interact+with+Cloud+Profiles",
      "https://wiki.pmease.com/display/QB14/Interact+with+Configuration+Authorizations",
      "https://wiki.pmease.com/display/QB14/Interact+with+Resources",
      "https://wiki.pmease.com/display/QB14/Interact+with+Agent+Tokens",
      "https://wiki.pmease.com/display/QB14/Get+System+Attributes+of+Grid+Node",
      "https://wiki.pmease.com/display/QB14/Get+and+Set+User+Attributes+of+Grid+Node",
      "https://wiki.pmease.com/display/QB14/Interact+with+Reports",
      "https://wiki.pmease.com/display/QB14/Interact+with+Changes",
      "https://wiki.pmease.com/display/QB14/Interact+with+Issues",
      "https://wiki.pmease.com/display/QB14/Query+Build+Notifications",
      "https://wiki.pmease.com/display/QB14/Query+Grid+Measurements",
      "https://wiki.pmease.com/display/QB14/Access+Information+of+Published+Files",
      "https://wiki.pmease.com/display/QB14/Interact+with+Build+Agents",
      "https://wiki.pmease.com/display/QB14/Backup+Database",
      "https://wiki.pmease.com/display/QB14/Pause+System",
      "https://wiki.pmease.com/display/QB14/Resume+System",
      "https://wiki.pmease.com/display/QB14/Check+System+Pause+Information",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Interact+with+Cloud+Profiles"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Interact+with+Cloud+Profiles",
    "title": "Interact with Cloud Profiles",
    "breadcrumb": [
      "",
      "Developer's Guide",
      "RESTful API"
    ],
    "full_text": "Developer's Guide\nRESTful API\nInteract with Cloud Profiles\nVersion: QB14\nOn this page\nInteract with Cloud Profiles\nGet all cloud profiles in the system\nâ\nSyntax\nâ\nCloud profiles in the system can be accessed using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ncloud_profiles\nThe response is of mime type\napplication/xml\nand the content is XML representation of all cloud profiles in the system.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as QuickBuild administrator if the anonymous does not have adminstrative right.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get all cloud profiles:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ncloud_profiles\nAccess cloud profile by id\nâ\nSyntax\nâ\nCloud profile can be accessed by id using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ncloud_profiles\n/\n<\ncloud profile id\n>\nThe response is of mime type\napplication/xml\nand the content is XML representation of the cloud profile.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as QuickBuild administrator if the anonymous does not have adminstrative right.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get cloud profile of id\n1\n:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ncloud_profiles\n/\n1\nUpdate cloud profile\nâ\nSyntax\nâ\nCloud profile can be updated by posting xml representation of the cloud profile to below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ncloud_profiles\nNormally you do not need to create the XML from scratch: you may retrieve XML representation of the cloud profile using http GET method, modify certain parts of the XML and post back to above url.\nThe response is of mime type\ntext/plain\nand the content is string representation of the cloud profile id being updated.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as QuickBuild administrator if the anonymous does not have administrative right.\nDemo\nâ\nWe will use\ncurl\nto demonstrate how to modify description of cloud profile\nprofile1\n:\nGet id of cloud profile\nprofile1\nwith\nid service\ncurl http\n:\n/\n/\nlocalhost\n/\nrest\n/\nids\n?\ncloud_profile_name\n=\nprofile1\nAssume returned id is\n1\n.\nRetrieve xml representation of cloud profile\nprofile1\ninto a temp file using below command:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ncloud_profiles\n/\n1\n>\ntempfile\n.\nxml\nEdit\ntempfile.xml\nand change\ndescription\nelement to desired value (or add the\ndescription\nelement if it does not already exist).\nPost back modified content using below command:\ncurl\n-\nX\nPOST\n-\nu admin\n:\nadmin\n--\ndata\n-\nbinary\n\"@tempfile.xml\"\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ncloud_profiles\nCreate cloud profile\nâ\nSyntax\nâ\nCloud profile can be created by posting XML representation of the cloud profile to below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ncloud_profiles\nPlease note that the posted XML should NOT contain the\nid\nelement; otherwise, QuickBuild will treat the post as an updating to the cloud profile with that id.\nNormally you do not need to create the XML from scratch: you may retrieve XML representation of a templating cloud profile using http GET method, remove the\nid\nelement, modify certain parts and post back to above url.\nThe response is of mime type\ntext/plain\nand the content is string representation of the newly created cloud profile id.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as QuickBuild administrator if the anonymous does not have administrative right.\nDemo\nâ\nWe will use\ncurl\nto demonstrate how to create a new cloud profile\nprofile2\nby copying the existing cloud profile\nprofile1\n.\nGet id of cloud profile\nprofile1\nwith\nid service\ncurl http\n:\n/\n/\nlocalhost\n/\nrest\n/\nids\n?\ncloud_profile_name\n=\nprofile1\nAssume returned id is\n1\n.\nRetrieve xml representation of cloud profile\nprofile1\ninto a temp file using below command:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ncloud_profiles\n/\n1\n>\ntempfile\n.\nxml\nEdit\ntempfile.xml\n, remove the\nid\nelement, and change the\nname\nelement to be\nprofile2\nPost back modified content using below command:\ncurl\n-\nX\nPOST\n-\nu admin\n:\nadmin\n--\ndata\n-\nbinary\n\"@tempfile.xml\"\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ncloud_profiles\nTest cloud profile (added since 11.0.24)\nâ\nSyntax\nâ\nCloud profile can be tested using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ncloud_profiles\n/\n<\ncloud profile id\n>\n/\ntest\nHere\n<cloud profile id>\nstands for id of the cloud profile to be tested.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as QuickBuild administrator if the anonymous does not have administrative right.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to test the cloud profile with id\n2\n:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ncloud_profiles\n/\n2\n/\ntest\nDelete cloud profile\nâ\nSyntax\nâ\nCloud profile can be deleted using http DELETE method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ncloud_profiles\n/\n<\ncloud profile id\n>\nHere\n<cloud profile id>\nstands for id of the cloud profile to be deleted.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as QuickBuild administrator if the anonymous does not have administrative right.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to delete the cloud profile with id\n2\n:\ncurl\n-\nX\nDELETE\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ncloud_profiles\n/\n2\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Interact with Cloud Profiles",
        "content": ""
      },
      {
        "header": "Get all cloud profiles in the systemâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Cloud profiles in the system can be accessed using http GET method through below url: http://localhost:8810/rest/cloud_profiles The response is of mime typeapplication/xmland the content is XML representation of all cloud profiles in the system."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as QuickBuild administrator if the anonymous does not have adminstrative right."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get all cloud profiles: curl-u admin:admin http://localhost:8810/rest/cloud_profiles"
      },
      {
        "header": "Access cloud profile by idâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Cloud profile can be accessed by id using http GET method through below url: http://localhost:8810/rest/cloud_profiles/<cloud profile id> The response is of mime typeapplication/xmland the content is XML representation of the cloud profile."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as QuickBuild administrator if the anonymous does not have adminstrative right."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get cloud profile of id1: curl-u admin:admin http://localhost:8810/rest/cloud_profiles/1"
      },
      {
        "header": "Update cloud profileâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Cloud profile can be updated by posting xml representation of the cloud profile to below url: http://localhost:8810/rest/cloud_profiles Normally you do not need to create the XML from scratch: you may retrieve XML representation of the cloud profile using http GET method, modify certain parts of the XML and post back to above url. The response is of mime typetext/plainand the content is string representation of the cloud profile id being updated."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as QuickBuild administrator if the anonymous does not have administrative right."
      },
      {
        "header": "Demoâ",
        "content": "We will usecurlto demonstrate how to modify description of cloud profileprofile1: Get id of cloud profileprofile1withid servicecurl http://localhost/rest/ids?cloud_profile_name=profile1Assume returned id is1.Retrieve xml representation of cloud profileprofile1into a temp file using below command:curl-u admin:admin http://localhost:8810/rest/cloud_profiles/1>tempfile.xmlEdittempfile.xmland changedescriptionelement to desired value (or add thedescriptionelement if it does not already exist).Post back modified content using below command:curl-XPOST-u admin:admin--data-binary\"@tempfile.xml\"http://localhost:8810/rest/cloud_profiles"
      },
      {
        "header": "Create cloud profileâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Cloud profile can be created by posting XML representation of the cloud profile to below url: http://localhost:8810/rest/cloud_profiles Please note that the posted XML should NOT contain theidelement; otherwise, QuickBuild will treat the post as an updating to the cloud profile with that id. Normally you do not need to create the XML from scratch: you may retrieve XML representation of a templating cloud profile using http GET method, remove theidelement, modify certain parts and post back to above url. The response is of mime typetext/plainand the content is string representation of the newly created cloud profile id."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as QuickBuild administrator if the anonymous does not have administrative right."
      },
      {
        "header": "Demoâ",
        "content": "We will usecurlto demonstrate how to create a new cloud profileprofile2by copying the existing cloud profileprofile1. Get id of cloud profileprofile1withid servicecurl http://localhost/rest/ids?cloud_profile_name=profile1Assume returned id is1.Retrieve xml representation of cloud profileprofile1into a temp file using below command:curl-u admin:admin http://localhost:8810/rest/cloud_profiles/1>tempfile.xmlEdittempfile.xml, remove theidelement, and change thenameelement to beprofile2Post back modified content using below command:curl-XPOST-u admin:admin--data-binary\"@tempfile.xml\"http://localhost:8810/rest/cloud_profiles"
      },
      {
        "header": "Test cloud profile (added since 11.0.24)â",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Cloud profile can be tested using http GET method through below url: http://localhost:8810/rest/cloud_profiles/<cloud profile id>/test Here<cloud profile id>stands for id of the cloud profile to be tested."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as QuickBuild administrator if the anonymous does not have administrative right."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to test the cloud profile with id2: curl-u admin:admin http://localhost:8810/rest/cloud_profiles/2/test"
      },
      {
        "header": "Delete cloud profileâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Cloud profile can be deleted using http DELETE method through below url: http://localhost:8810/rest/cloud_profiles/<cloud profile id> Here<cloud profile id>stands for id of the cloud profile to be deleted."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as QuickBuild administrator if the anonymous does not have administrative right."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to delete the cloud profile with id2: curl-XDELETE-u admin:admin http://localhost:8810/rest/cloud_profiles/2"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Interact+with+Configuration+Authorizations",
      "https://wiki.pmease.com/display/QB14/Interact+with+Resources",
      "https://wiki.pmease.com/display/QB14/Interact+with+Agent+Tokens",
      "https://wiki.pmease.com/display/QB14/Get+System+Attributes+of+Grid+Node",
      "https://wiki.pmease.com/display/QB14/Get+and+Set+User+Attributes+of+Grid+Node",
      "https://wiki.pmease.com/display/QB14/Interact+with+Reports",
      "https://wiki.pmease.com/display/QB14/Interact+with+Changes",
      "https://wiki.pmease.com/display/QB14/Interact+with+Issues",
      "https://wiki.pmease.com/display/QB14/Query+Build+Notifications",
      "https://wiki.pmease.com/display/QB14/Query+Grid+Measurements",
      "https://wiki.pmease.com/display/QB14/Access+Information+of+Published+Files",
      "https://wiki.pmease.com/display/QB14/Interact+with+Build+Agents",
      "https://wiki.pmease.com/display/QB14/Backup+Database",
      "https://wiki.pmease.com/display/QB14/Pause+System",
      "https://wiki.pmease.com/display/QB14/Resume+System",
      "https://wiki.pmease.com/display/QB14/Check+System+Pause+Information",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Interact+with+Configuration+Authorizations"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Interact+with+Configuration+Authorizations",
    "title": "Interact with Configuration Authorizations",
    "breadcrumb": [
      "",
      "Developer's Guide",
      "RESTful API"
    ],
    "full_text": "Developer's Guide\nRESTful API\nInteract with Configuration Authorizations\nVersion: QB14\nOn this page\nInteract with Configuration Authorizations\nGet all authorizations in the system\nâ\nSyntax\nâ\nAuthorizations in the system can be accessed using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nauthorizations\nThe response is of mime type\napplication/xml\nand the content is XML representation of all authorizations in the system.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have adminstrative right.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get all authorizations:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nauthorizations\nAccess authorization by id\nâ\nSyntax\nâ\nAuthorization can be accessed by id using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nauthorizations\n/\n<\nauthorization id\n>\nThe response is of mime type\napplication/xml\nand the content is XML representation of the authorization.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have adminstrative right.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get authorization of id\n1\n:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nauthorizations\n/\n1\nAccess authorizations of a particular group\nâ\nSyntax\nâ\nAuthorizations of particular group can be accessed using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nauthorizations\n?\ngroup_id\n=\n<\ngroup id\n>\nThe response is of mime type\napplication/xml\nand the content is XML representation of all authorizations of specified group.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have adminstrative right.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get authorizations of group with id\n2\n:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nauthorizations\n?\ngroup_id\n=\n2\nAccess authorizations of a particular configuration\nâ\nSyntax\nâ\nAuthorizations of particular configuration can be accessed using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nauthorizations\n?\nconfiguration_id\n=\n<\nconfiguration id\n>\nThe response is of mime type\napplication/xml\nand the content is XML representation of all authorizations of specified configuration.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have adminstrative right.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get authorizations of configuration with id\n1\n:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nauthorizations\n?\nconfiguration_id\n=\n1\nUpdate authorization\nâ\nSyntax\nâ\nAuthorization can be updated by posting xml representation of the authorization to below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nauthorizations\nNormally you do not need to create the XML from scratch: you may retrieve XML representation of the authorization using http GET method, modify certain parts of the XML and post back to above url.\nThe response is of mime type\ntext/plain\nand the content is string representation of the authorization id being updated.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as administrator if the anonymous does not have administrative right.\nDemo\nâ\nWe will use\ncurl\nto demonstrate how to change authorization of group\ndeveloper\nfrom configuration\nroot/project1\nto\nroot/project2\n:\nAssume id of group\ndeveloper\nis\n1\n, id of configuration\nroot/project1\nis\n5\n, and id of configurtion\nroot/project2\nis\n6\n. Ids of these entities can be retrieved with\nid service\n.\nRun below command to get authorizations of group\ndeveloper\n:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nauthorizations\n?\ngroup_id\n=\n1\nAnalyze response of above command to find out the authorization associated with configuration id\n5\n. Save xml snippet of found authorization to a temp file, say\ntempfile.xml\n.\nModify\ntempfile.xml\nand change the\nconfiguration\nelement to take value\n6\n.\nPost content of\ntempfile.xml\nback to QuickBuild using below command:\ncurl\n-\nX\nPOST\n-\nu admin\n:\nadmin\n-\nd\n@tempfile.xml\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nauthorizations\nCreate authorization\nâ\nSyntax\nâ\nAuthorization can be created by posting XML representation of the authorization to below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nauthorizations\nPlease note that the posted XML should NOT contain the id element; otherwise, QuickBuild will treat the post as an updating to the authorization with that id.\nNormally you do not need to create the XML from scratch: you may retrieve XML representation of a templating authorization using http GET method, remove the\nid\nelement, modify certain parts and post back to above url.\nThe response is of mime type\ntext/plain\nand the content is string representation of the newly created authorization id.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as administrator if the anonymous does not have administrative right.\nDemo\nâ\nWe will use\ncurl\nto demonstrate how to authorize group\ntester\n(assume the id is\n3\n) with\nRUN_BUILD\nand\nSTOP_BUILD\npermission in configuration\nroot/test\n(assume the id is\n2\n).\nSave below content into file\ntempfile.xml\n:\n<\ncom\n.\npmease\n.\nquickbuild\n.\nmodel\n.\nAuthorization\n>\n<\ngroup\n>\n3\n<\n/\ngroup\n>\n<\nconfiguration\n>\n3\n<\n/\nconfiguration\n>\n<\npermissions\n>\n<\nstring\n>\nRUN_BUILD\n<\n/\nstring\n>\n<\nstring\n>\nSTOP_BUILD\n<\n/\nstring\n>\n<\n/\npermissions\n>\n<\n/\ncom\n.\npmease\n.\nquickbuild\n.\nmodel\n.\nAuthorization\n>\nPost content of\ntempfile.xml\nto QuickBuild using below command:\ncurl\n-\nX\nPOST\n-\nu admin\n:\nadmin\n-\nd\n@tempfile.xml\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nauthorizations\nDelete authorization\nâ\nSyntax\nâ\nAuthorization can be deleted using http DELETE method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nauthorizations\n/\n<\nauthorization id\n>\nHere\n<authorization id}\nstands for id of the authorization to be deleted.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as administrator if the anonymous does not have administrative right.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to unauthorize configuration\nroot/test\n(assume id is\n2\n) for group\ntester\n(assume the id is\n3\n).\nGet authorizations of group\ntester\nwith below command:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nauthorizations\n?\ngroup_id\n=\n3\nAnalyze response of above command to find out id of the authorization associated with configuration id\n2\n, assume id of the found authorization is\n100\n.\nDelete the found authorization with below command:\ncurl\n-\nX\nDELETE\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nauthorizations\n/\n100\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Interact with Configuration Authorizations",
        "content": ""
      },
      {
        "header": "Get all authorizations in the systemâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Authorizations in the system can be accessed using http GET method through below url: http://localhost:8810/rest/authorizations The response is of mime typeapplication/xmland the content is XML representation of all authorizations in the system."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have adminstrative right."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get all authorizations: curl-u admin:admin http://localhost:8810/rest/authorizations"
      },
      {
        "header": "Access authorization by idâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Authorization can be accessed by id using http GET method through below url: http://localhost:8810/rest/authorizations/<authorization id> The response is of mime typeapplication/xmland the content is XML representation of the authorization."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have adminstrative right."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get authorization of id1: curl-u admin:admin http://localhost:8810/rest/authorizations/1"
      },
      {
        "header": "Access authorizations of a particular groupâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Authorizations of particular group can be accessed using http GET method through below url: http://localhost:8810/rest/authorizations?group_id=<group id> The response is of mime typeapplication/xmland the content is XML representation of all authorizations of specified group."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have adminstrative right."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get authorizations of group with id2: curl-u admin:admin http://localhost:8810/rest/authorizations?group_id=2"
      },
      {
        "header": "Access authorizations of a particular configurationâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Authorizations of particular configuration can be accessed using http GET method through below url: http://localhost:8810/rest/authorizations?configuration_id=<configuration id> The response is of mime typeapplication/xmland the content is XML representation of all authorizations of specified configuration."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have adminstrative right."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get authorizations of configuration with id1: curl-u admin:admin http://localhost:8810/rest/authorizations?configuration_id=1"
      },
      {
        "header": "Update authorizationâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Authorization can be updated by posting xml representation of the authorization to below url: http://localhost:8810/rest/authorizations Normally you do not need to create the XML from scratch: you may retrieve XML representation of the authorization using http GET method, modify certain parts of the XML and post back to above url. The response is of mime typetext/plainand the content is string representation of the authorization id being updated."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as administrator if the anonymous does not have administrative right."
      },
      {
        "header": "Demoâ",
        "content": "We will usecurlto demonstrate how to change authorization of groupdeveloperfrom configurationroot/project1toroot/project2: Assume id of groupdeveloperis1, id of configurationroot/project1is5, and id of configurtionroot/project2is6. Ids of these entities can be retrieved withid service.Run below command to get authorizations of groupdeveloper:curl-u admin:admin http://localhost:8810/rest/authorizations?group_id=1Analyze response of above command to find out the authorization associated with configuration id5. Save xml snippet of found authorization to a temp file, saytempfile.xml.Modifytempfile.xmland change theconfigurationelement to take value6.Post content oftempfile.xmlback to QuickBuild using below command:curl-XPOST-u admin:admin-d@tempfile.xmlhttp://localhost:8810/rest/authorizations"
      },
      {
        "header": "Create authorizationâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Authorization can be created by posting XML representation of the authorization to below url: http://localhost:8810/rest/authorizations Please note that the posted XML should NOT contain the id element; otherwise, QuickBuild will treat the post as an updating to the authorization with that id. Normally you do not need to create the XML from scratch: you may retrieve XML representation of a templating authorization using http GET method, remove theidelement, modify certain parts and post back to above url. The response is of mime typetext/plainand the content is string representation of the newly created authorization id."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as administrator if the anonymous does not have administrative right."
      },
      {
        "header": "Demoâ",
        "content": "We will usecurlto demonstrate how to authorize grouptester(assume the id is3) withRUN_BUILDandSTOP_BUILDpermission in configurationroot/test(assume the id is2). Save below content into filetempfile.xml:<com.pmease.quickbuild.model.Authorization><group>3</group><configuration>3</configuration><permissions><string>RUN_BUILD</string><string>STOP_BUILD</string></permissions></com.pmease.quickbuild.model.Authorization>Post content oftempfile.xmlto QuickBuild using below command:curl-XPOST-u admin:admin-d@tempfile.xmlhttp://localhost:8810/rest/authorizations"
      },
      {
        "header": "Delete authorizationâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Authorization can be deleted using http DELETE method through below url: http://localhost:8810/rest/authorizations/<authorization id> Here<authorization id}stands for id of the authorization to be deleted."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as administrator if the anonymous does not have administrative right."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to unauthorize configurationroot/test(assume id is2) for grouptester(assume the id is3). Get authorizations of grouptesterwith below command:curl-u admin:admin http://localhost:8810/rest/authorizations?group_id=3Analyze response of above command to find out id of the authorization associated with configuration id2, assume id of the found authorization is100.Delete the found authorization with below command:curl-XDELETE-u admin:admin http://localhost:8810/rest/authorizations/100"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Interact+with+Resources",
      "https://wiki.pmease.com/display/QB14/Interact+with+Agent+Tokens",
      "https://wiki.pmease.com/display/QB14/Get+System+Attributes+of+Grid+Node",
      "https://wiki.pmease.com/display/QB14/Get+and+Set+User+Attributes+of+Grid+Node",
      "https://wiki.pmease.com/display/QB14/Interact+with+Reports",
      "https://wiki.pmease.com/display/QB14/Interact+with+Changes",
      "https://wiki.pmease.com/display/QB14/Interact+with+Issues",
      "https://wiki.pmease.com/display/QB14/Query+Build+Notifications",
      "https://wiki.pmease.com/display/QB14/Query+Grid+Measurements",
      "https://wiki.pmease.com/display/QB14/Access+Information+of+Published+Files",
      "https://wiki.pmease.com/display/QB14/Interact+with+Build+Agents",
      "https://wiki.pmease.com/display/QB14/Backup+Database",
      "https://wiki.pmease.com/display/QB14/Pause+System",
      "https://wiki.pmease.com/display/QB14/Resume+System",
      "https://wiki.pmease.com/display/QB14/Check+System+Pause+Information",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Interact+with+Resources"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Interact+with+Resources",
    "title": "Interact with Resources",
    "breadcrumb": [
      "",
      "Developer's Guide",
      "RESTful API"
    ],
    "full_text": "Developer's Guide\nRESTful API\nInteract with Resources\nVersion: QB14\nOn this page\nInteract with Resources\nGet all resources in the system\nâ\nSyntax\nâ\nResources in the system can be accessed using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nresources\nThe response is of mime type\napplication/xml\nand the content is XML representation of all resources in the system.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as administrator.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get all resources:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nresources\nAccess resource by id\nâ\nSyntax\nâ\nResource can be accessed by id using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nresources\n/\n<\nresource id\n>\nThe response is of mime type\napplication/xml\nand the content is XML representation of the resource.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as administrator.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get resource of id\n1\n:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nresources\n/\n1\nGet total resource count across nodes\nâ\nSyntax\nâ\nTotal resource count across different nodes can be retrieved using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nresources\n/\n<\nresource id\n>\n/\ntotal\nHere\n<resource id>\nstands for id of the resource.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as administrator.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get total resource count across different nodes for resource id\n2\n:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nresources\n/\n2\n/\ntotal\nGet available resource count across nodes\nâ\nSyntax\nâ\nAvailable resource count across different nodes can be retrieved using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nresources\n/\n<\nresource id\n>\n/\navailable\nHere\n<resource id>\nstands for id of the resource.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as administrator.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get available resource count across different nodes for resource id\n2\n:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nresources\n/\n2\n/\navailable\nUpdate resource\nâ\nSyntax\nâ\nResource can be updated by posting xml representation of the resource to below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nresources\nNormally you do not need to create the XML from scratch: you may retrieve XML representation of the resource using http GET method, modify certain parts of the XML and post back to above url.\nThe response is of mime type\ntext/plain\nand the content is string representation of the resource id being updated.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as administrator.\nDemo\nâ\nWe will use\ncurl\nto demonstrate how to modify description of resource\nubuntu\n:\nGet id of resource\nubuntu\nwith\nid service\ncurl http\n:\n/\n/\nlocalhost\n/\nrest\n/\nids\n?\nresource_name\n=\nubuntu\nAssume returned id is\n1\n.\nRetrieve xml representation of resource\nubuntu\ninto a temp file using below command:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nresources\n/\n1\n>\ntempfile\n.\nxml\nEdit\ntempfile.xml\nand change\ndescription\nelement to desired value (or add the\ndescription\nelement if it does not already exist).\nPost back modified content using below command:\ncurl\n-\nX\nPOST\n-\nu admin\n:\nadmin\n-\nd\n@tempfile.xml\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nresources\nCreate resource\nâ\nSyntax\nâ\nResource can be created by posting XML representation of the resource to below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nresources\nPlease note that the posted XML should NOT contain the\nid\nelement; otherwise, QuickBuild will treat the post as an updating to the resource with that id.\nNormally you do not need to create the XML from scratch: you may retrieve XML representation of a templating resource using http GET method, remove the\nid\nelement, modify certain parts and post back to above url.\nThe response is of mime type\ntext/plain\nand the content is string representation of the newly created resource id.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as administrator.\nDemo\nâ\nWe will use\ncurl\nto demonstrate how to create a new resource\nsuse\nby copying the existing resource\nubuntu\n.\nGet id of resource\nubuntu\nwith\nid service\ncurl http\n:\n/\n/\nlocalhost\n/\nrest\n/\nids\n?\nresource_name\n=\nubuntu\nAssume returned id is\n1\n.\nRetrieve xml representation of resource\nubuntu\ninto a temp file using below command:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nresources\n/\n1\n>\ntempfile\n.\nxml\nEdit\ntempfile.xml\n, remove the\nid\nelement, and change the\nname\nelement to be\nsuse\nPost back modified content using below command:\ncurl\n-\nX\nPOST\n-\nu admin\n:\nadmin\n-\nd\n@tempfile.xml\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nresources\nDelete resource\nâ\nSyntax\nâ\nResource can be deleted using http DELETE method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nresources\n/\n<\nresource id\n>\nHere\n<resource id>\nstands for id of the resource to be deleted.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as administrator.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to delete the resource with id\n2\n:\ncurl\n-\nX\nDELETE\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nresources\n/\n2\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Interact with Resources",
        "content": ""
      },
      {
        "header": "Get all resources in the systemâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Resources in the system can be accessed using http GET method through below url: http://localhost:8810/rest/resources The response is of mime typeapplication/xmland the content is XML representation of all resources in the system."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as administrator."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get all resources: curl-u admin:admin http://localhost:8810/rest/resources"
      },
      {
        "header": "Access resource by idâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Resource can be accessed by id using http GET method through below url: http://localhost:8810/rest/resources/<resource id> The response is of mime typeapplication/xmland the content is XML representation of the resource."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as administrator."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get resource of id1: curl-u admin:admin http://localhost:8810/rest/resources/1"
      },
      {
        "header": "Get total resource count across nodesâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Total resource count across different nodes can be retrieved using http GET method through below url: http://localhost:8810/rest/resources/<resource id>/total Here<resource id>stands for id of the resource."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as administrator."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get total resource count across different nodes for resource id2: curl-u admin:admin http://localhost:8810/rest/resources/2/total"
      },
      {
        "header": "Get available resource count across nodesâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Available resource count across different nodes can be retrieved using http GET method through below url: http://localhost:8810/rest/resources/<resource id>/available Here<resource id>stands for id of the resource."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as administrator."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get available resource count across different nodes for resource id2: curl-u admin:admin http://localhost:8810/rest/resources/2/available"
      },
      {
        "header": "Update resourceâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Resource can be updated by posting xml representation of the resource to below url: http://localhost:8810/rest/resources Normally you do not need to create the XML from scratch: you may retrieve XML representation of the resource using http GET method, modify certain parts of the XML and post back to above url. The response is of mime typetext/plainand the content is string representation of the resource id being updated."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as administrator."
      },
      {
        "header": "Demoâ",
        "content": "We will usecurlto demonstrate how to modify description of resourceubuntu: Get id of resourceubuntuwithid servicecurl http://localhost/rest/ids?resource_name=ubuntuAssume returned id is1.Retrieve xml representation of resourceubuntuinto a temp file using below command:curl-u admin:admin http://localhost:8810/rest/resources/1>tempfile.xmlEdittempfile.xmland changedescriptionelement to desired value (or add thedescriptionelement if it does not already exist).Post back modified content using below command:curl-XPOST-u admin:admin-d@tempfile.xmlhttp://localhost:8810/rest/resources"
      },
      {
        "header": "Create resourceâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Resource can be created by posting XML representation of the resource to below url: http://localhost:8810/rest/resources Please note that the posted XML should NOT contain theidelement; otherwise, QuickBuild will treat the post as an updating to the resource with that id. Normally you do not need to create the XML from scratch: you may retrieve XML representation of a templating resource using http GET method, remove theidelement, modify certain parts and post back to above url. The response is of mime typetext/plainand the content is string representation of the newly created resource id."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as administrator."
      },
      {
        "header": "Demoâ",
        "content": "We will usecurlto demonstrate how to create a new resourcesuseby copying the existing resourceubuntu. Get id of resourceubuntuwithid servicecurl http://localhost/rest/ids?resource_name=ubuntuAssume returned id is1.Retrieve xml representation of resourceubuntuinto a temp file using below command:curl-u admin:admin http://localhost:8810/rest/resources/1>tempfile.xmlEdittempfile.xml, remove theidelement, and change thenameelement to besusePost back modified content using below command:curl-XPOST-u admin:admin-d@tempfile.xmlhttp://localhost:8810/rest/resources"
      },
      {
        "header": "Delete resourceâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Resource can be deleted using http DELETE method through below url: http://localhost:8810/rest/resources/<resource id> Here<resource id>stands for id of the resource to be deleted."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as administrator."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to delete the resource with id2: curl-XDELETE-u admin:admin http://localhost:8810/rest/resources/2"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Interact+with+Agent+Tokens",
      "https://wiki.pmease.com/display/QB14/Get+System+Attributes+of+Grid+Node",
      "https://wiki.pmease.com/display/QB14/Get+and+Set+User+Attributes+of+Grid+Node",
      "https://wiki.pmease.com/display/QB14/Interact+with+Reports",
      "https://wiki.pmease.com/display/QB14/Interact+with+Changes",
      "https://wiki.pmease.com/display/QB14/Interact+with+Issues",
      "https://wiki.pmease.com/display/QB14/Query+Build+Notifications",
      "https://wiki.pmease.com/display/QB14/Query+Grid+Measurements",
      "https://wiki.pmease.com/display/QB14/Access+Information+of+Published+Files",
      "https://wiki.pmease.com/display/QB14/Interact+with+Build+Agents",
      "https://wiki.pmease.com/display/QB14/Backup+Database",
      "https://wiki.pmease.com/display/QB14/Pause+System",
      "https://wiki.pmease.com/display/QB14/Resume+System",
      "https://wiki.pmease.com/display/QB14/Check+System+Pause+Information",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Interact+with+Agent+Tokens"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Interact+with+Agent+Tokens",
    "title": "Interact with Agent Tokens",
    "breadcrumb": [
      "",
      "Developer's Guide",
      "RESTful API"
    ],
    "full_text": "Developer's Guide\nRESTful API\nInteract with Agent Tokens\nVersion: QB14\nOn this page\nInteract with Agent Tokens\nBy operating tokens, one can authorize/unauthorize agents, or access agent details including token value and latest usage information.\nAuthorize build agent\nâ\nSyntax\nâ\nNew build agent can be authorized to join the build grid by accessing below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ntokens\n/\nauthorize\n?\nip\n=\n<\nip address of build agent\n>\n&\nport\n=\n<\nport of build agent\n>\nThe response is of mime type\ntext/plain\nand the content is identifier of the newly created token for the build agent.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as administrator to authorize the build agent.\nDemo\nâ\nWe use\ncurl\nto demonstrate how to authorize the build agent:\nDownload the build agent package from Grid page and run it from a machine not authorized to join the grid. Assume IP address of the build agent is\n192.168.2.100\nand port is\n8811\n.\nOpen grid page of QuickBuild server and you should see the new build agent appearing in unauthorized agent list.\nNow run below command from anywhere:\ncurl\n-\nu admin\n:\nadmin\n\"http://<QB server>:8810/rest/tokens/authorize?ip=192.168.2.100&port=8811\"\nIf above command succeeds, the newly connected agent will appear in active node list after a while in grid page.\nUnauthorize build agent\nâ\nSyntax\nâ\nAuthorized build agent can be unauthorized by accessing below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ntokens\n/\nunauthorize\n?\nip\n=\n<\nip address of build agent\n>\n&\nport\n=\n<\nport of build agent\n>\nThe response is of mime type\ntext/plain\nand the content is identifier of the removed token representing the build agent.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as administrator to unauthorize the build agent.\nDemo\nâ\nWe use\ncurl\nto demonstrate how to unauthorize the build agent:\nAssume you have an existing active build agent with ip address\n192.168.2.100\nand port\n8811\n.\nNow run below command from anywhere:\ncurl\n-\nu admin\n:\nadmin\n\"http://<QB server>:8810/rest/tokens/unauthorize?ip=192.168.2.100&port=8811\"\nIf above command succeeds, the build agent will be removed from active node list after a while.\nGet token value and latest used information of agents\nâ\nSyntax\nâ\nAgent details can be accessed by accessing below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\ntokens\n?\naddress\n=\n<\naddress of build agent\n>\nIf param\naddress\nis not supplied, details of all agents will be returned.\nThe response is of mime type\ntext/plain\nand the content is XML representation of the agent details.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as administrator to get agent details.\nDemo\nâ\nWe use\ncurl\nto demonstrate how to access details of the build agent:\nAssume you have an active build agent with address\nmatrix:8811\n.\nNow run below command from anywhere:\ncurl\n-\nu admin\n:\nadmin\n\"http://<QB server>:8810/rest/tokens?address=matrix:8811\"\nIf above command succeeds, you will get XML representation of build agent details\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Interact with Agent Tokens",
        "content": ""
      },
      {
        "header": "Authorize build agentâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "New build agent can be authorized to join the build grid by accessing below url: http://localhost:8810/rest/tokens/authorize?ip=<ip address of build agent>&port=<port of build agent> The response is of mime typetext/plainand the content is identifier of the newly created token for the build agent."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as administrator to authorize the build agent."
      },
      {
        "header": "Demoâ",
        "content": "We usecurlto demonstrate how to authorize the build agent: Download the build agent package from Grid page and run it from a machine not authorized to join the grid. Assume IP address of the build agent is192.168.2.100and port is8811.Open grid page of QuickBuild server and you should see the new build agent appearing in unauthorized agent list.Now run below command from anywhere:curl-u admin:admin\"http://<QB server>:8810/rest/tokens/authorize?ip=192.168.2.100&port=8811\"If above command succeeds, the newly connected agent will appear in active node list after a while in grid page."
      },
      {
        "header": "Unauthorize build agentâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Authorized build agent can be unauthorized by accessing below url: http://localhost:8810/rest/tokens/unauthorize?ip=<ip address of build agent>&port=<port of build agent> The response is of mime typetext/plainand the content is identifier of the removed token representing the build agent."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as administrator to unauthorize the build agent."
      },
      {
        "header": "Demoâ",
        "content": "We usecurlto demonstrate how to unauthorize the build agent: Assume you have an existing active build agent with ip address192.168.2.100and port8811.Now run below command from anywhere:curl-u admin:admin\"http://<QB server>:8810/rest/tokens/unauthorize?ip=192.168.2.100&port=8811\"If above command succeeds, the build agent will be removed from active node list after a while."
      },
      {
        "header": "Get token value and latest used information of agentsâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Agent details can be accessed by accessing below url: http://localhost:8810/rest/tokens?address=<address of build agent> If paramaddressis not supplied, details of all agents will be returned. The response is of mime typetext/plainand the content is XML representation of the agent details."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as administrator to get agent details."
      },
      {
        "header": "Demoâ",
        "content": "We usecurlto demonstrate how to access details of the build agent: Assume you have an active build agent with addressmatrix:8811.Now run below command from anywhere:curl-u admin:admin\"http://<QB server>:8810/rest/tokens?address=matrix:8811\"If above command succeeds, you will get XML representation of build agent details"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Get+System+Attributes+of+Grid+Node",
      "https://wiki.pmease.com/display/QB14/Get+and+Set+User+Attributes+of+Grid+Node",
      "https://wiki.pmease.com/display/QB14/Interact+with+Reports",
      "https://wiki.pmease.com/display/QB14/Interact+with+Changes",
      "https://wiki.pmease.com/display/QB14/Interact+with+Issues",
      "https://wiki.pmease.com/display/QB14/Query+Build+Notifications",
      "https://wiki.pmease.com/display/QB14/Query+Grid+Measurements",
      "https://wiki.pmease.com/display/QB14/Access+Information+of+Published+Files",
      "https://wiki.pmease.com/display/QB14/Interact+with+Build+Agents",
      "https://wiki.pmease.com/display/QB14/Backup+Database",
      "https://wiki.pmease.com/display/QB14/Pause+System",
      "https://wiki.pmease.com/display/QB14/Resume+System",
      "https://wiki.pmease.com/display/QB14/Check+System+Pause+Information",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Get+System+Attributes+of+Grid+Node"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Get+System+Attributes+of+Grid+Node",
    "title": "Get System Attributes of Grid Node",
    "breadcrumb": [
      "",
      "Developer's Guide",
      "RESTful API"
    ],
    "full_text": "Developer's Guide\nRESTful API\nGet System Attributes of Grid Node\nVersion: QB14\nOn this page\nGet System Attributes of Grid Node\nSystem attributes of grid node can be fetched via RESTful call.\nwarning\nThis feature is available since QuickBuild 5.1.22\nSyntax\nâ\nSystem attributes can be fetched by accessing below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nsystem_attributes\n/\n<\nnode address\n>\nHere\n<node address>\nshould be replaced with address of the grid node, for instance:\nagent:8811\n. The response is of mime type\ntext/xml\nand the content is XML representation of system attributes for specified grid node.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as user with node attribute access permission to get system attributes of a grid node.\nDemo\nâ\nWe use\ncurl\nto demonstrate how to get system attributes:\nConnect a build agent to your grid and get it authorized. Assume the agent address is\nagent1:8811\n.\nRun below command:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\n<\nQB server\n>\n:\n8810\n/\nrest\n/\nsystem_attributes\n/\nagent1\n:\n8811\nIf above command succeeds, XML representation of the system attributes map will be printed.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Get System Attributes of Grid Node",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "System attributes can be fetched by accessing below url: http://localhost:8810/rest/system_attributes/<node address> Here<node address>should be replaced with address of the grid node, for instance:agent:8811. The response is of mime typetext/xmland the content is XML representation of system attributes for specified grid node."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as user with node attribute access permission to get system attributes of a grid node."
      },
      {
        "header": "Demoâ",
        "content": "We usecurlto demonstrate how to get system attributes: Connect a build agent to your grid and get it authorized. Assume the agent address isagent1:8811.Run below command:curl-u admin:admin http://<QB server>:8810/rest/system_attributes/agent1:8811If above command succeeds, XML representation of the system attributes map will be printed."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Get+and+Set+User+Attributes+of+Grid+Node",
      "https://wiki.pmease.com/display/QB14/Interact+with+Reports",
      "https://wiki.pmease.com/display/QB14/Interact+with+Changes",
      "https://wiki.pmease.com/display/QB14/Interact+with+Issues",
      "https://wiki.pmease.com/display/QB14/Query+Build+Notifications",
      "https://wiki.pmease.com/display/QB14/Query+Grid+Measurements",
      "https://wiki.pmease.com/display/QB14/Access+Information+of+Published+Files",
      "https://wiki.pmease.com/display/QB14/Interact+with+Build+Agents",
      "https://wiki.pmease.com/display/QB14/Backup+Database",
      "https://wiki.pmease.com/display/QB14/Pause+System",
      "https://wiki.pmease.com/display/QB14/Resume+System",
      "https://wiki.pmease.com/display/QB14/Check+System+Pause+Information",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Get+and+Set+User+Attributes+of+Grid+Node"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Get+and+Set+User+Attributes+of+Grid+Node",
    "title": "Get and Set User Attributes of Grid Node",
    "breadcrumb": [
      "",
      "Developer's Guide",
      "RESTful API"
    ],
    "full_text": "Developer's Guide\nRESTful API\nGet and Set User Attributes of Grid Node\nVersion: QB14\nOn this page\nGet and Set User Attributes of Grid Node\nUser attributes of grid node can be fetched/modified via RESTful API.\nwarning\nThis feature is available since QuickBuild 5.0.26\nGet user attributes of a grid node\nâ\nSyntax\nâ\nUser attributes can be fetched by accessing below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nuser_attributes\n/\n<\nnode address\n>\nHere\n<node address>\nshould be replaced with address of the grid node, for instance:\nagent:8811\n. The response is of mime type\ntext/xml\nand the content is XML representation of defined user attributes for specified grid node.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as user with node attribute access permission to get user attributes of a grid node.\nDemo\nâ\nWe use\ncurl\nto demonstrate how to get user attributes:\nConnect a build agent to your grid and get it authorized. Assume the agent address is\nagent1:8811\n.\nEdit user attributes tab of agent\nagent1:8811\nto define some user attributes.\nNow run below command:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\n<\nQB server\n>\n:\n8810\n/\nrest\n/\nuser_attributes\n/\nagent1\n:\n8811\nIf above command succeeds, XML representation of the user attributes map will be printed.\nSet user attributes of a grid node\nâ\nSyntax\nâ\nUser attributes can be specified by posting XML representation of the user attributes map to below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nuser_attributes\n/\n<\nnode address\n>\nHere\n<node address>\nshould be replaced with address of the grid node, for instance:\nagent:8811\n. XML representation of user attributes map should follow below format:\n<\nlinked\n-\nhash\n-\nmap\n>\n<\nentry\n>\n<\nstring\n>\nattribute1\n<\n/\nstring\n>\n<\nstring\n>\nvalue1\n<\n/\nstring\n>\n<\n/\nentry\n>\n<\nentry\n>\n<\nstring\n>\nattribute2\n<\n/\nstring\n>\n<\nstring\n>\nvalue2\n<\n/\nstring\n>\n<\n/\nentry\n>\n.\n.\n.\n<\n/\nlinked\n-\nhash\n-\nmap\n>\nSecurity\nâ\nYou will need to use http BASIC authentication to login as administrator to set user attributes of a grid node.\nDemo\nâ\nWe use\ncurl\nto demonstrate how to set user attributes:\nConnect a build agent to your grid and get it authorized. Assume the agent address is\nagent1:8811\n.\nCreate a file say \"attributes.xml\" with below content:\n<\nlinked\n-\nhash\n-\nmap\n>\n<\nentry\n>\n<\nstring\n>\nattribute1\n<\n/\nstring\n>\n<\nstring\n>\nvalue1\n<\n/\nstring\n>\n<\n/\nentry\n>\n<\nentry\n>\n<\nstring\n>\nattribute2\n<\n/\nstring\n>\n<\nstring\n>\nvalue2\n<\n/\nstring\n>\n<\n/\nentry\n>\n<\n/\nlinked\n-\nhash\n-\nmap\n>\nNow run below command:\ncurl\n-\nu admin\n:\nadmin\n-\nX\nPOST\n-\nd\n@attributes.xml\nhttp\n:\n/\n/\n<\nQB server\n>\n:\n8810\n/\nrest\n/\nuser_attributes\n/\nagent1\n:\n8811\nIf above command succeeds, check user attributes tab of agent1 from QuickBuild web UI to verify if they have been defined correctly.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Get and Set User Attributes of Grid Node",
        "content": ""
      },
      {
        "header": "Get user attributes of a grid nodeâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "User attributes can be fetched by accessing below url: http://localhost:8810/rest/user_attributes/<node address> Here<node address>should be replaced with address of the grid node, for instance:agent:8811. The response is of mime typetext/xmland the content is XML representation of defined user attributes for specified grid node."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as user with node attribute access permission to get user attributes of a grid node."
      },
      {
        "header": "Demoâ",
        "content": "We usecurlto demonstrate how to get user attributes: Connect a build agent to your grid and get it authorized. Assume the agent address isagent1:8811.Edit user attributes tab of agentagent1:8811to define some user attributes.Now run below command:curl-u admin:admin http://<QB server>:8810/rest/user_attributes/agent1:8811If above command succeeds, XML representation of the user attributes map will be printed."
      },
      {
        "header": "Set user attributes of a grid nodeâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "User attributes can be specified by posting XML representation of the user attributes map to below url: http://localhost:8810/rest/user_attributes/<node address> Here<node address>should be replaced with address of the grid node, for instance:agent:8811. XML representation of user attributes map should follow below format: <linked-hash-map><entry><string>attribute1</string><string>value1</string></entry><entry><string>attribute2</string><string>value2</string></entry>...</linked-hash-map>"
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as administrator to set user attributes of a grid node."
      },
      {
        "header": "Demoâ",
        "content": "We usecurlto demonstrate how to set user attributes: Connect a build agent to your grid and get it authorized. Assume the agent address isagent1:8811.Create a file say \"attributes.xml\" with below content:<linked-hash-map><entry><string>attribute1</string><string>value1</string></entry><entry><string>attribute2</string><string>value2</string></entry></linked-hash-map>Now run below command:curl-u admin:admin-XPOST-d@attributes.xmlhttp://<QB server>:8810/rest/user_attributes/agent1:8811If above command succeeds, check user attributes tab of agent1 from QuickBuild web UI to verify if they have been defined correctly."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Interact+with+Reports",
      "https://wiki.pmease.com/display/QB14/Interact+with+Changes",
      "https://wiki.pmease.com/display/QB14/Interact+with+Issues",
      "https://wiki.pmease.com/display/QB14/Query+Build+Notifications",
      "https://wiki.pmease.com/display/QB14/Query+Grid+Measurements",
      "https://wiki.pmease.com/display/QB14/Access+Information+of+Published+Files",
      "https://wiki.pmease.com/display/QB14/Interact+with+Build+Agents",
      "https://wiki.pmease.com/display/QB14/Backup+Database",
      "https://wiki.pmease.com/display/QB14/Pause+System",
      "https://wiki.pmease.com/display/QB14/Resume+System",
      "https://wiki.pmease.com/display/QB14/Check+System+Pause+Information",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Interact+with+Reports"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Interact+with+Reports",
    "title": "Interact with Reports",
    "breadcrumb": [
      "",
      "Developer's Guide",
      "RESTful API"
    ],
    "full_text": "Developer's Guide\nRESTful API\nInteract with Reports\nVersion: QB14\nOn this page\nInteract with Reports\nFor those reports supported by QuickBuild, you can retrieve the report data via RESTful APIs. The supported reports included:\nReport Category\nBase URI\nBuild Stats\n/rest/buildstats\nSCM Changes\n/rest/changes\nCheckStyle\n/rest/checkstyle\nCobertura\n/rest/cobertura\nJaCoCo\n/rest/jacoco\nCPD\n/rest/cpd\nEMMA\n/rest/emma\nFindBugs\n/rest/findbugs\nFxcop\n/rest/fxcop\nJUnit\n/rest/junit\nMBUnit\n/rest/mbunit\nMSTest\n/rest/mstest\nNCover\n/rest/ncover\nNUnit\n/rest/nunit\nPMD\n/rest/pmd\nTestNG\n/rest/testng\nBoost Test\n/rest/boost\nNOTE\nAll report related RESTful APIs use http GET method.\nList all supported APIs\nâ\nURI\nResponse Format\nParams\n$baseURI/help\napplication/html\nfor example, all available RESTful functions for JUnit can be accessed by visiting the following URL:\nhttp\n:\n/\n/\nquickbuild\n:\n8810\n/\nrest\n/\njunit\n/\nhelp\nGet the version of category\nâ\nURI\nResponse Format\nParams\n$baseURI/version\ntext/plain\nFor example, you can get the current data version of the JUnit category.\nhttp\n:\n/\n/\nquickbuild\n:\n8810\n/\nrest\n/\njunit\n/\nversion\nand it will return the data version\n2.1\n(example only) in text/plain format.\nList reports stored in the category\nâ\nURI\nResponse Format\nParams\n$baseURI/reports\ntext/xml\nFor example, visit below URL to list all reports in JUnit category:\nhttp\n:\n/\n/\nquickbuild\n:\n8810\n/\nrest\n/\njunit\n/\nreports\nand the response looks like:\n<\nlist\n>\n<\nstring\n>\nunprocessed\n<\n/\nstring\n>\n<\nstring\n>\ntests\n<\n/\nstring\n>\n<\nstring\n>\ntestsuites\n<\n/\nstring\n>\n<\nstring\n>\npackages\n<\n/\nstring\n>\n<\nstring\n>\nstats\n<\n/\nstring\n>\n<\nstring\n>\nagg_overview\n<\n/\nstring\n>\n<\nstring\n>\nagg_stats\n<\n/\nstring\n>\n<\nstring\n>\ntests_trends\n<\n/\nstring\n>\n<\n/\nlist\n>\nGet the report definition (meta data)\nâ\nURI\nResponse Format\nParams\n$baseURI/meta/{report_name}\ntext/xml\n*\nreport_name\n: Specify the report name you want.\nfor example, when visit:\nhttp\n:\n/\n/\nquickbuild\n:\n8810\n/\nrest\n/\njunit\n/\nmeta\n/\nstats\nthe response looks like:\n<\nmeta name\n=\n\"stats\"\ngroup\n=\n\"STATISTICS\"\n>\n<\ncolumn name\n=\n\"ID\"\nisKey\n=\n\"false\"\nindexed\n=\n\"false\"\nnullable\n=\n\"false\"\nupdatable\n=\n\"false\"\nsqlType\n=\n\"BIGINT\"\ndataType\n=\n\"ID\"\n/\n>\n<\ncolumn name\n=\n\"buildId\"\nisKey\n=\n\"true\"\nindexed\n=\n\"false\"\nnullable\n=\n\"true\"\nupdatable\n=\n\"true\"\nsqlType\n=\n\"BIGINT\"\ndataType\n=\n\"ID\"\n/\n>\n<\ncolumn name\n=\n\"duration\"\nisKey\n=\n\"false\"\nindexed\n=\n\"false\"\nnullable\n=\n\"true\"\nupdatable\n=\n\"true\"\nsqlType\n=\n\"BIGINT\"\ndataType\n=\n\"DURATION\"\n/\n>\n<\ncolumn name\n=\n\"tests\"\nisKey\n=\n\"false\"\nindexed\n=\n\"false\"\nnullable\n=\n\"true\"\nupdatable\n=\n\"true\"\nsqlType\n=\n\"INT\"\ndataType\n=\n\"INTEGER\"\n/\n>\n.\n.\n.\n.\n.\n.\n<\n/\nmeta\n>\nYou may consider the report meta data as the schema of a table in database.\nEach report has an attribute\ngroup\nand in QuickBuild, the following groups are used:\nBUILD\nSTATISTICS\nHISTORY\nAGGREGATION\nthe group attribute tells QuickBuild where to find the report, for example, if a report belongs to BUILD group, then this report is stored in build related directory, otherwise, the report is stored in configuration related directory.\nList all report sets / aggregations\nâ\nIn QuickBuild, the report data are stored by report sets or by aggregations. The report set is specified in the publish step, and the aggregation name is specified in the aggregation definition.\nURI\nResponse Format\nParams\n/rest/junit/reportsets/{report_group}/{configuration_or_build_id}\ntext/xml\n*\nreport_group\n: The report group, can be one of the following: BUILD, STATISTICS, HISTORY, AGGREGATION *\nconfiguration_or_build_id:\nfor BUILD group, the id should be a valid build id, otherwise, the configuration id should be specified.\nfor example, when visit below URL:\nhttp\n:\n/\n/\nquickbuild\n:\n8810\n/\nrest\n/\njunit\n/\nreportsets\n/\nBUILD\n/\n103\nthe response looks like:\n<\nlist\n>\n<\nstring\n>\nDEFAULT\n<\n/\nstring\n>\n<\nstring\n>\nOn\nLinux\n<\n/\nstring\n>\n<\nstring\n>\nOn\nWindows\n<\n/\nstring\n>\n<\n/\nlist\n>\nGet the build stats\nâ\nURI\nResponse Format\nParams\n/rest/junit/buildstats/{build_id}/{reportset}\ntext/xml\n*\nbuild_id\n: Specify the build id. *\nreportset\n: the report set you want\nfor example, when visit:\nhttp\n:\n/\n/\nquickbuild\n:\n8810\n/\nrest\n/\nbuildstats\n/\n103\n/\nDEFAULT\nthe response looks like:\n<\nreport name\n=\n\"stats\"\nversion\n=\n\"0.0.0\"\nlocale\n=\n\"en_US\"\n>\n<\nrow\nID\n=\n\"1\"\nbuildId\n=\n\"103\"\nduration\n=\n\"261466\"\ntests\n=\n\"1006\"\nerrors\n=\n\"5\"\nfailures\n=\n\"7\"\nskips\n=\n\"0\"\nadded\n=\n\"994\"\nnewFailed\n=\n\"12\"\nnotFixed\n=\n\"0\"\nfixed\n=\n\"0\"\nsuccesses\n=\n\"994\"\nsuccess_rate\n=\n\"0.9880715705765407\"\n/\n>\n<\n/\nreport\n>\nGet the report records\nâ\nQuickBuild supply two functions to retrieve the detailed report records:\n/size\n: get number of total records\n/records\n: retrieve the report records by page\nURI\nResponse Format\nParams\n/rest/junit/size/{report_name}/{configuration_or_build_id}/{reportset}\ntext/plain\n*\nreport_name\nSpecify the report name *\nconfiguration_or_build_id\nAccording to the report you specified, supply a valid build id when report belongs to BUILD group, otherwise, configuration id is needed. *\nreportset\nSpecify the report set or aggregation name *\nfilters\n- QUERY_PARAM Specify filters based on SQL to filter the records, for example, duration>5 and duration<10, the fields available can be found in the report meta data definition.\n/rest/junit/records/{report_name}/{configuration_or_build_id}/{reportset}\ntext/xml\n*\nreport name\nSpecify the report name. *\nconfiguration_or_build_id\nAccording to the report you specified, the id is a build id when report belongs to BUILD group, otherwise, configuration id is needed. *\nreportset\nThe report set or aggregation name *\noffset\n- QUERY_PARAM The first record you want to retrieve. By default, the offset is 0, i.e., from the first record. *\nlimit\n- QUERY_PARAM The number of records you want to retrieve. By default, the number of limit is 50. *\nfilters\n- QUERY_PARAM Specify filters based on SQL to filter the records, for example, duration>5 and duration<10, the fields available can be found in the report meta data definition.\nfor example, first we get a total tests in our JUnit for build 103 by visiting below URL:\nhttp\n:\n/\n/\nquickbuild\n:\n8810\n/\nrest\n/\njunit\n/\nsize\n/\ntests\n/\n103\n/\nDEFAULT\nand\n1005\nis returned, that is, there are 1005 records total, and then we retrive the records from 100 to 119 by visiting below URL:\nhttp\n:\n/\n/\nquickbuild\n:\n8810\n/\nrest\n/\njunit\n/\nrecords\n/\ntests\n/\n103\n/\nDEFAULT\n?\noffset\n=\n100\n&\nlimit\n=\n20\nthe response looks like:\n<\nreport name\n=\n\"tests\"\nversion\n=\n\"0.0\"\nlocale\n=\n\"en_US\"\n>\n<\nrow\nID\n=\n\"100\"\npackageName\n=\n\"org.hibernate.test.entitymode.multi\"\nclassName\n=\n\"MultiRepresentationTest\"\ntestName\n=\n\"testPojoRetreival\"\nstatus\n=\n\"PASS\"\nduration\n=\n\"40\"\nhasSysout\n=\n\"true\"\ntotalRuns\n=\n\"2\"\nfailedRuns\n=\n\"0\"\npassedRuns\n=\n\"2\"\ndiffStatus\n=\n\"ADDED\"\n/\n>\n<\nrow\nID\n=\n\"101\"\npackageName\n=\n\"org.hibernate.test.entitymode.multi\"\nclassName\n=\n\"MultiRepresentationTest\"\ntestName\n=\n\"testDom4jRetreival\"\nstatus\n=\n\"PASS\"\nduration\n=\n\"58\"\nhasSysout\n=\n\"true\"\ntotalRuns\n=\n\"2\"\nfailedRuns\n=\n\"0\"\npassedRuns\n=\n\"2\"\ndiffStatus\n=\n\"FIXED\"\n/\n>\n<\nrow\nID\n=\n\"102\"\npackageName\n=\n\"org.hibernate.test.entitymode.multi\"\nclassName\n=\n\"MultiRepresentationTest\"\ntestName\n=\n\"testDom4jSave\"\nstatus\n=\n\"PASS\"\nduration\n=\n\"34\"\nhasSysout\n=\n\"true\"\ntotalRuns\n=\n\"2\"\nfailedRuns\n=\n\"0\"\npassedRuns\n=\n\"2\"\ndiffStatus\n=\n\"FIXED\"\n/\n>\n<\nrow\nID\n=\n\"103\"\npackageName\n=\n\"org.hibernate.test.entitymode.multi\"\nclassName\n=\n\"MultiRepresentationTest\"\ntestName\n=\n\"testDom4jHQL\"\nstatus\n=\n\"PASS\"\nduration\n=\n\"30\"\nhasSysout\n=\n\"true\"\ntotalRuns\n=\n\"2\"\nfailedRuns\n=\n\"0\"\npassedRuns\n=\n\"2\"\ndiffStatus\n=\n\"ADDED\"\n/\n>\n.\n.\n.\n.\n.\n.\n<\n/\nreport\n>\nIf you want to use some filters to filter the records, for example, to retrieve all failed tests, you may:\nhttp\n:\n/\n/\nquickbuild\n:\n8810\n/\nrest\n/\njunit\n/\nsize\n/\ntests\n/\n103\n/\nDEFAULT\n?\nfilters\n=\n(\nstatus\n=\n'ERROR'\n)\nor\n(\nstatus\n=\n'\nFAILURE\n'\n)\nhere, we use filter:\nstatus='ERROR' or status='FAILURE'\n, the response is\n12\n, that is, we have 12 failed tests total, and you can retrieve the records now by visiting:\nhttp\n:\n/\n/\nquickbuild\n:\n8810\n/\nrest\n/\njunit\n/\nrecords\n/\ntests\n/\n103\n/\nDEFAULT\n?\nfilters\n=\n(\nstatus\n=\n'ERROR'\n)\nor\n(\nstatus\n=\n'\nFAILURE\n'\n)\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Interact with Reports",
        "content": ""
      },
      {
        "header": "List all supported APIsâ",
        "content": "URIResponse FormatParams$baseURI/helpapplication/html for example, all available RESTful functions for JUnit can be accessed by visiting the following URL: http://quickbuild:8810/rest/junit/help"
      },
      {
        "header": "Get the version of categoryâ",
        "content": "URIResponse FormatParams$baseURI/versiontext/plain For example, you can get the current data version of the JUnit category. http://quickbuild:8810/rest/junit/version and it will return the data version2.1(example only) in text/plain format."
      },
      {
        "header": "List reports stored in the categoryâ",
        "content": "URIResponse FormatParams$baseURI/reportstext/xml For example, visit below URL to list all reports in JUnit category: http://quickbuild:8810/rest/junit/reports and the response looks like: <list><string>unprocessed</string><string>tests</string><string>testsuites</string><string>packages</string><string>stats</string><string>agg_overview</string><string>agg_stats</string><string>tests_trends</string></list>"
      },
      {
        "header": "Get the report definition (meta data)â",
        "content": "URIResponse FormatParams$baseURI/meta/{report_name}text/xml*report_name: Specify the report name you want. for example, when visit: http://quickbuild:8810/rest/junit/meta/stats the response looks like: <meta name=\"stats\"group=\"STATISTICS\"><column name=\"ID\"isKey=\"false\"indexed=\"false\"nullable=\"false\"updatable=\"false\"sqlType=\"BIGINT\"dataType=\"ID\"/><column name=\"buildId\"isKey=\"true\"indexed=\"false\"nullable=\"true\"updatable=\"true\"sqlType=\"BIGINT\"dataType=\"ID\"/><column name=\"duration\"isKey=\"false\"indexed=\"false\"nullable=\"true\"updatable=\"true\"sqlType=\"BIGINT\"dataType=\"DURATION\"/><column name=\"tests\"isKey=\"false\"indexed=\"false\"nullable=\"true\"updatable=\"true\"sqlType=\"INT\"dataType=\"INTEGER\"/>......</meta> You may consider the report meta data as the schema of a table in database. Each report has an attributegroupand in QuickBuild, the following groups are used: BUILDSTATISTICSHISTORYAGGREGATION the group attribute tells QuickBuild where to find the report, for example, if a report belongs to BUILD group, then this report is stored in build related directory, otherwise, the report is stored in configuration related directory."
      },
      {
        "header": "List all report sets / aggregationsâ",
        "content": "In QuickBuild, the report data are stored by report sets or by aggregations. The report set is specified in the publish step, and the aggregation name is specified in the aggregation definition. URIResponse FormatParams/rest/junit/reportsets/{report_group}/{configuration_or_build_id}text/xml*report_group: The report group, can be one of the following: BUILD, STATISTICS, HISTORY, AGGREGATION *configuration_or_build_id:for BUILD group, the id should be a valid build id, otherwise, the configuration id should be specified. for example, when visit below URL: http://quickbuild:8810/rest/junit/reportsets/BUILD/103 the response looks like: <list><string>DEFAULT</string><string>OnLinux</string><string>OnWindows</string></list>"
      },
      {
        "header": "Get the build statsâ",
        "content": "URIResponse FormatParams/rest/junit/buildstats/{build_id}/{reportset}text/xml*build_id: Specify the build id. *reportset: the report set you want for example, when visit: http://quickbuild:8810/rest/buildstats/103/DEFAULT the response looks like: <report name=\"stats\"version=\"0.0.0\"locale=\"en_US\"><rowID=\"1\"buildId=\"103\"duration=\"261466\"tests=\"1006\"errors=\"5\"failures=\"7\"skips=\"0\"added=\"994\"newFailed=\"12\"notFixed=\"0\"fixed=\"0\"successes=\"994\"success_rate=\"0.9880715705765407\"/></report>"
      },
      {
        "header": "Get the report recordsâ",
        "content": "QuickBuild supply two functions to retrieve the detailed report records: /size: get number of total records/records: retrieve the report records by page URIResponse FormatParams/rest/junit/size/{report_name}/{configuration_or_build_id}/{reportset}text/plain*report_nameSpecify the report name *configuration_or_build_idAccording to the report you specified, supply a valid build id when report belongs to BUILD group, otherwise, configuration id is needed. *reportsetSpecify the report set or aggregation name *filters- QUERY_PARAM Specify filters based on SQL to filter the records, for example, duration>5 and duration<10, the fields available can be found in the report meta data definition./rest/junit/records/{report_name}/{configuration_or_build_id}/{reportset}text/xml*report nameSpecify the report name. *configuration_or_build_idAccording to the report you specified, the id is a build id when report belongs to BUILD group, otherwise, configuration id is needed. *reportsetThe report set or aggregation name *offset- QUERY_PARAM The first record you want to retrieve. By default, the offset is 0, i.e., from the first record. *limit- QUERY_PARAM The number of records you want to retrieve. By default, the number of limit is 50. *filters- QUERY_PARAM Specify filters based on SQL to filter the records, for example, duration>5 and duration<10, the fields available can be found in the report meta data definition. for example, first we get a total tests in our JUnit for build 103 by visiting below URL: http://quickbuild:8810/rest/junit/size/tests/103/DEFAULT and1005is returned, that is, there are 1005 records total, and then we retrive the records from 100 to 119 by visiting below URL: http://quickbuild:8810/rest/junit/records/tests/103/DEFAULT?offset=100&limit=20 the response looks like: <report name=\"tests\"version=\"0.0\"locale=\"en_US\"><rowID=\"100\"packageName=\"org.hibernate.test.entitymode.multi\"className=\"MultiRepresentationTest\"testName=\"testPojoRetreival\"status=\"PASS\"duration=\"40\"hasSysout=\"true\"totalRuns=\"2\"failedRuns=\"0\"passedRuns=\"2\"diffStatus=\"ADDED\"/><rowID=\"101\"packageName=\"org.hibernate.test.entitymode.multi\"className=\"MultiRepresentationTest\"testName=\"testDom4jRetreival\"status=\"PASS\"duration=\"58\"hasSysout=\"true\"totalRuns=\"2\"failedRuns=\"0\"passedRuns=\"2\"diffStatus=\"FIXED\"/><rowID=\"102\"packageName=\"org.hibernate.test.entitymode.multi\"className=\"MultiRepresentationTest\"testName=\"testDom4jSave\"status=\"PASS\"duration=\"34\"hasSysout=\"true\"totalRuns=\"2\"failedRuns=\"0\"passedRuns=\"2\"diffStatus=\"FIXED\"/><rowID=\"103\"packageName=\"org.hibernate.test.entitymode.multi\"className=\"MultiRepresentationTest\"testName=\"testDom4jHQL\"status=\"PASS\"duration=\"30\"hasSysout=\"true\"totalRuns=\"2\"failedRuns=\"0\"passedRuns=\"2\"diffStatus=\"ADDED\"/>......</report> If you want to use some filters to filter the records, for example, to retrieve all failed tests, you may: http://quickbuild:8810/rest/junit/size/tests/103/DEFAULT?filters=(status='ERROR')or(status='FAILURE') here, we use filter:status='ERROR' or status='FAILURE', the response is12, that is, we have 12 failed tests total, and you can retrieve the records now by visiting: http://quickbuild:8810/rest/junit/records/tests/103/DEFAULT?filters=(status='ERROR')or(status='FAILURE')"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Interact+with+Changes",
      "https://wiki.pmease.com/display/QB14/Interact+with+Issues",
      "https://wiki.pmease.com/display/QB14/Query+Build+Notifications",
      "https://wiki.pmease.com/display/QB14/Query+Grid+Measurements",
      "https://wiki.pmease.com/display/QB14/Access+Information+of+Published+Files",
      "https://wiki.pmease.com/display/QB14/Interact+with+Build+Agents",
      "https://wiki.pmease.com/display/QB14/Backup+Database",
      "https://wiki.pmease.com/display/QB14/Pause+System",
      "https://wiki.pmease.com/display/QB14/Resume+System",
      "https://wiki.pmease.com/display/QB14/Check+System+Pause+Information",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Interact+with+Changes"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Interact+with+Changes",
    "title": "Interact with Changes",
    "breadcrumb": [
      "",
      "Developer's Guide",
      "RESTful API"
    ],
    "full_text": "Developer's Guide\nRESTful API\nInteract with Changes\nVersion: QB14\nOn this page\nInteract with Changes\nSince QuickBuild 4.0, you can retrieve changes via RESTful APIs. The base URI for changes RESTful APIs is:\n/\nrest\n/\nchanges\nList all supported APIs\nâ\nURI\nResponse Type\nParams\n/rest/changes/help\ntext/html\nGet the data version of changes\nâ\nURI\nResponse Type\nParams\n/rest/changes/version\ntext/plain\nGet the commit stats\nâ\nURI\nResponse Type\nParams\n/rest/changes/stats/{configuration}\ntext/xml\n*\nconfiguration\nSpecify the configuration. By default, specify configuration id here, also, you can specify the configuration path directly *\nbuild\nSpecify the build id you want. *\nfrom_build\nSpecify the from build when finding changes in a build range. *\nto_build\nSpecify the to build when finding changes in a build range. *\nfrom_date\nSpecify the from date when finding changes in a build range. *\nto_date\nSpecify the to date when finding changes in a build range. *\ndate_pattern\nSpecify the date pattern when query by a date range, by default, the pattern is yyyyMMdd. *\nrepository\nGet the changes only in a specific repository. *\ncommitter\nGet the changes only committed by a specified committer\nQuery stats of a specific build\nhttp\n:\n/\n/\nquickbuild\n:\n8810\n/\nrest\n/\nchanges\n/\nstats\n/\n25\n?\nbuild\n=\n102\nthe response looks like:\n<\nstats commits\n=\n\"5\"\nmodifications\n=\n\"7\"\nadded\n=\n\"2\"\nmodified\n=\n\"3\"\ndeleted\n=\n\"2\"\n/\n>\nQuery commit stats in a build range\nhttp\n:\n/\n/\nquickbuild\n:\n8810\n/\nrest\n/\nchanges\n/\nstats\n/\n25\n?\nfrom_build\n=\n100\n&\nto_build\n=\n120\nQuery commit stats in a date range\nhttp\n:\n/\n/\nquickbuild\n:\n8810\n/\nrest\n/\nchanges\n/\nstats\n/\n25\n?\nfrom_date\n=\n20110501\n&\nto_date\n=\n20110601\nby default, the date pattern is\nyyyyMMdd\n, you can also specify the date pattern by adding parameter\ndate_pattern\n, the valid date pattern can be found\nhere\n, for example:\nhttp\n:\n/\n/\nquickbuild\n:\n8810\n/\nrest\n/\nchanges\n/\nstats\n/\n25\n?\nfrom_date\n=\n2011\n-\n05\n-\n01\n&\nto_date\n=\n2011\n-\n06\n-\n01\n&\ndate_pattern\n=\nyyyy\n-\nMM\n-\ndd\nQuery commit stats of a specific repository or committer\nBy adding\nrepository\nor\ncommitter\nparameter, you can get the stats of a specific repository or committer, for example:\nhttp\n:\n/\n/\nquickbuild\n:\n8810\n/\nrest\n/\nchanges\n/\nstats\n/\n25\n?\nbuild\n=\n102\n&\nrepository\n=\nmysvn\nthis will get the stats data for repository mysvn.\nData structure of the changes\nâ\nIn QuickBuild, we use Changeset and Modification to represent a SCM commit. A changeset is an atomic collection of changes to files in a repository and it usually contains several modifications. A modification means developer made a specific action to a file when committed to a repository. In QuickBuild, the actions include:\nADD\nMODIFY\nDELETE\nThe action in some SCM, for example, git, mercurial, have more actions, like rename, in QuickBuild, it will be speared into two actions, i.e. DELETE first, and then ADD, and maybe there are also other actions, QuickBuild will use MODIFY action to represent.\nBelow is the data structure of Changeset:\nChangeset\n{\nString\nuser\n;\n// committer\nDate\ndate\n;\n// commit date\nString\nid\n;\n// change id\nString\ncomment\n;\n// commit comment\nString\nrepositoryName\n;\n// the repository name defined in QuickBuild\nString\nrepositoryType\n;\n// the repository type, for example, Subversion, Mercurial, Git\nString\nadditional\n;\n// the additional information for a commit, for example, revision number for mercurial\nLong\nbuildId\n;\n// the build this commit belongs to\nprivate\nList\n<\nModification\n>\nmodifications\n;\n}\ndata structure of Modification:\nModification\n{\npublic\nenum\nAction\n{\nADD\n,\nDELETE\n,\nMODIFY\n}\n;\npublic\nenum\nPathType\n{\nTEXT\n,\nBINARY\n,\nDIR\n}\n;\nAction\naction\n;\nString\npath\n;\n// File path\nString\nedition\n;\nString\npreviousEdition\n;\nPathType\npathType\n;\nString\nadditional\n;\n// Additional information of a modificaiton, for example, revision number for mercurial\n}\nRetrieve changesets\nâ\nURI\nResponse Type\nParams\n/rest/changes/{configuration}\ntext/xml\n*\nconfiguration\nSpecify the configuration. By default, specify configuration id here, also, you can specify the configuration path directly. *\nbuild\nSpecify the build id you want. *\nfrom_build\nSpecify the from build when finding changes in a build range, must be specified with to_build. *\nto_build\nSpecify the to build when finding changes in a build range, must be specified with from_build. *\ndate_pattern\nSpecify the date pattern when query by a date range, by default, the pattern is yyyyMMdd. *\nfrom_date\nSpecify the from date when finding changes in a build range. *\nto_date\nSpecify the to date when finding changes in a build range. *\nrepository\nGet the changes only in a specific repository. *\ncommitter\nGet the changes only committed by the specified committer. *\noffset\nSpecify the first record when iterate the records, by default, the offset is 0. *\nlimit\nSpecify the number of total records you want to retrieve, by default, the limit is 50. *\nasc\nBoolean type, specify the order by commit date ascendent or descendent, by default, it is descendent.\nQuery the changesets of a build\nhttp\n:\n/\n/\nquickbuild\n:\n8810\n/\nrest\n/\nchanges\n/\n19\n?\nbuild\n=\n102\n&\noffset\n=\n10\n&\nlimit\n=\n20\nthe response looks like:\n<\nlist\n>\n<\nchangeset\n>\n<\nuser\n>\nsteve\n<\n/\nuser\n>\n<\ndate\n>\n2011\n-\n06\n-\n03\nT15\n:\n11\n:\n40.000\n+\n08\n:\n00\n<\n/\ndate\n>\n<\nid\n>\n913f\ncbcdbe8f80d6c1fe5fce3bb49e1f0040a943\n<\n/\nid\n>\n<\ncomment\n>\nFix\nTST\n-\n23\n:\n2\n-\nphase load components\n<\n/\ncomment\n>\n<\nrepositoryName\n>\nhg\n<\n/\nrepositoryName\n>\n<\nrepositoryType\n>\nMercurial\n<\n/\nrepositoryType\n>\n<\nadditional\n>\n14\n<\n/\nadditional\n>\n<\nbuildId\n>\n321\n<\n/\nbuildId\n>\n<\nmodifications\n>\n<\nmodification\n>\n<\naction\n>\nMODIFY\n<\n/\naction\n>\n<\npath\n>\nTest\n.\njava\n<\n/\npath\n>\n<\nedition\n>\n913f\ncbcdbe8f80d6c1fe5fce3bb49e1f0040a943\n<\n/\nedition\n>\n<\npreviousEdition\n>\nf090cd04725c5551f8a439fe0a53591193ea79c3\n<\n/\npreviousEdition\n>\n<\nadditional\n>\n14\n<\n/\nadditional\n>\n<\n/\nmodification\n>\n<\nmodification\n>\n<\naction\n>\nMODIFY\n<\n/\naction\n>\n<\npath\n>\nbig\n.\njava\n<\n/\npath\n>\n<\nedition\n>\n913f\ncbcdbe8f80d6c1fe5fce3bb49e1f0040a943\n<\n/\nedition\n>\n<\npreviousEdition\n>\nf090cd04725c5551f8a439fe0a53591193ea79c3\n<\n/\npreviousEdition\n>\n<\nadditional\n>\n14\n<\n/\nadditional\n>\n<\n/\nmodification\n>\n<\n/\nmodifications\n>\n<\n/\nchangeset\n>\n.\n.\n.\n.\n.\n.\n<\n/\nlist\n>\nthe format of commit date here is using\nISO8601 standard\n. The\nadditional\ncolumn stores some extra information of the commits. For mercurial (hg) or bazaar, the\nadditional\nstores the revision no.\nQuery the changesets in a build range\nhttp\n:\n/\n/\nquickbuild\n:\n8810\n/\nrest\n/\nchanges\n/\n19\n?\nfrom_build\n=\n10\n&\nto_build\n=\n20\nQuery the changesets in a date range\nhttp\n:\n/\n/\nquickbuild\n:\n8810\n/\nrest\n/\nchanges\n/\n19\n?\nfrom_date\n=\n20110501\n&\nto_date\n=\n20110601\nQuery the changesets of a specific repository or committer\nBy adding\nrepository\nor\ncommitter\nparameter, you can get the commits of a specific repository or committer, for example:\nhttp\n:\n/\n/\nquickbuild\n:\n8810\n/\nrest\n/\nchanges\n/\nroot\n/\nMy\n/\nDEV\n?\nbuild\n=\n102\n&\nrepository\n=\nmysvn\nhere, we use configuration path instead of configuration id.\nwarning\nif you are using URL directly, you may need escape '/' to %2F (this only applied to QuickBuild 5.0.13 or before), since QuickBuild 5.0.14, you needn't escape the slash '/', just specify the configuration path directly.\nGet build changesets (lively)\nâ\nMost of the aforementioned APIs are only callable when build finish. Sometimes, you may want to query the changesets during the build is still running, the following APIs are for this purpose:\nTo query the changesets of this build lively:\nhttp\n:\n/\n/\nquickbuild\n:\n8810\n/\nrest\n/\nchanges\n/\ncommits\n/\nbuild\n/\nbuildId\nTo query the stats of the changesets of this build lively:\nhttp\n:\n/\n/\nquickbuild\n:\n8810\n/\nrest\n/\nchanges\n/\nstats\n/\nbuild\n/\nbuildId\nreplace the QuickBuild server host to your own address.\nreplace the buildId to the actual build id you want to query.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Interact with Changes",
        "content": ""
      },
      {
        "header": "List all supported APIsâ",
        "content": "URIResponse TypeParams/rest/changes/helptext/html"
      },
      {
        "header": "Get the data version of changesâ",
        "content": "URIResponse TypeParams/rest/changes/versiontext/plain"
      },
      {
        "header": "Get the commit statsâ",
        "content": "URIResponse TypeParams/rest/changes/stats/{configuration}text/xml*configurationSpecify the configuration. By default, specify configuration id here, also, you can specify the configuration path directly *buildSpecify the build id you want. *from_buildSpecify the from build when finding changes in a build range. *to_buildSpecify the to build when finding changes in a build range. *from_dateSpecify the from date when finding changes in a build range. *to_dateSpecify the to date when finding changes in a build range. *date_patternSpecify the date pattern when query by a date range, by default, the pattern is yyyyMMdd. *repositoryGet the changes only in a specific repository. *committerGet the changes only committed by a specified committer Query stats of a specific build http://quickbuild:8810/rest/changes/stats/25?build=102 the response looks like: <stats commits=\"5\"modifications=\"7\"added=\"2\"modified=\"3\"deleted=\"2\"/> Query commit stats in a build range http://quickbuild:8810/rest/changes/stats/25?from_build=100&to_build=120 Query commit stats in a date range http://quickbuild:8810/rest/changes/stats/25?from_date=20110501&to_date=20110601 by default, the date pattern isyyyyMMdd, you can also specify the date pattern by adding parameterdate_pattern, the valid date pattern can be foundhere, for example: http://quickbuild:8810/rest/changes/stats/25?from_date=2011-05-01&to_date=2011-06-01&date_pattern=yyyy-MM-dd Query commit stats of a specific repository or committer By addingrepositoryorcommitterparameter, you can get the stats of a specific repository or committer, for example: http://quickbuild:8810/rest/changes/stats/25?build=102&repository=mysvn this will get the stats data for repository mysvn."
      },
      {
        "header": "Data structure of the changesâ",
        "content": "In QuickBuild, we use Changeset and Modification to represent a SCM commit. A changeset is an atomic collection of changes to files in a repository and it usually contains several modifications. A modification means developer made a specific action to a file when committed to a repository. In QuickBuild, the actions include: ADDMODIFYDELETE The action in some SCM, for example, git, mercurial, have more actions, like rename, in QuickBuild, it will be speared into two actions, i.e. DELETE first, and then ADD, and maybe there are also other actions, QuickBuild will use MODIFY action to represent. Below is the data structure of Changeset: Changeset{Stringuser;// committerDatedate;// commit dateStringid;// change idStringcomment;// commit commentStringrepositoryName;// the repository name defined in QuickBuildStringrepositoryType;// the repository type, for example, Subversion, Mercurial, GitStringadditional;// the additional information for a commit, for example, revision number for mercurialLongbuildId;// the build this commit belongs toprivateList<Modification>modifications;} data structure of Modification: Modification{publicenumAction{ADD,DELETE,MODIFY};publicenumPathType{TEXT,BINARY,DIR};Actionaction;Stringpath;// File pathStringedition;StringpreviousEdition;PathTypepathType;Stringadditional;// Additional information of a modificaiton, for example, revision number for mercurial}"
      },
      {
        "header": "Retrieve changesetsâ",
        "content": "URIResponse TypeParams/rest/changes/{configuration}text/xml*configurationSpecify the configuration. By default, specify configuration id here, also, you can specify the configuration path directly. *buildSpecify the build id you want. *from_buildSpecify the from build when finding changes in a build range, must be specified with to_build. *to_buildSpecify the to build when finding changes in a build range, must be specified with from_build. *date_patternSpecify the date pattern when query by a date range, by default, the pattern is yyyyMMdd. *from_dateSpecify the from date when finding changes in a build range. *to_dateSpecify the to date when finding changes in a build range. *repositoryGet the changes only in a specific repository. *committerGet the changes only committed by the specified committer. *offsetSpecify the first record when iterate the records, by default, the offset is 0. *limitSpecify the number of total records you want to retrieve, by default, the limit is 50. *ascBoolean type, specify the order by commit date ascendent or descendent, by default, it is descendent. Query the changesets of a build http://quickbuild:8810/rest/changes/19?build=102&offset=10&limit=20 the response looks like: <list><changeset><user>steve</user><date>2011-06-03T15:11:40.000+08:00</date><id>913fcbcdbe8f80d6c1fe5fce3bb49e1f0040a943</id><comment>FixTST-23:2-phase load components</comment><repositoryName>hg</repositoryName><repositoryType>Mercurial</repositoryType><additional>14</additional><buildId>321</buildId><modifications><modification><action>MODIFY</action><path>Test.java</path><edition>913fcbcdbe8f80d6c1fe5fce3bb49e1f0040a943</edition><previousEdition>f090cd04725c5551f8a439fe0a53591193ea79c3</previousEdition><additional>14</additional></modification><modification><action>MODIFY</action><path>big.java</path><edition>913fcbcdbe8f80d6c1fe5fce3bb49e1f0040a943</edition><previousEdition>f090cd04725c5551f8a439fe0a53591193ea79c3</previousEdition><additional>14</additional></modification></modifications></changeset>......</list> the format of commit date here is usingISO8601 standard. Theadditionalcolumn stores some extra information of the commits. For mercurial (hg) or bazaar, theadditionalstores the revision no. Query the changesets in a build range http://quickbuild:8810/rest/changes/19?from_build=10&to_build=20 Query the changesets in a date range http://quickbuild:8810/rest/changes/19?from_date=20110501&to_date=20110601 Query the changesets of a specific repository or committer By addingrepositoryorcommitterparameter, you can get the commits of a specific repository or committer, for example: http://quickbuild:8810/rest/changes/root/My/DEV?build=102&repository=mysvn here, we use configuration path instead of configuration id. warningif you are using URL directly, you may need escape '/' to %2F (this only applied to QuickBuild 5.0.13 or before), since QuickBuild 5.0.14, you needn't escape the slash '/', just specify the configuration path directly."
      },
      {
        "header": "Get build changesets (lively)â",
        "content": "Most of the aforementioned APIs are only callable when build finish. Sometimes, you may want to query the changesets during the build is still running, the following APIs are for this purpose: To query the changesets of this build lively: http://quickbuild:8810/rest/changes/commits/build/buildId To query the stats of the changesets of this build lively: http://quickbuild:8810/rest/changes/stats/build/buildId replace the QuickBuild server host to your own address.replace the buildId to the actual build id you want to query."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Interact+with+Issues",
      "https://wiki.pmease.com/display/QB14/Query+Build+Notifications",
      "https://wiki.pmease.com/display/QB14/Query+Grid+Measurements",
      "https://wiki.pmease.com/display/QB14/Access+Information+of+Published+Files",
      "https://wiki.pmease.com/display/QB14/Interact+with+Build+Agents",
      "https://wiki.pmease.com/display/QB14/Backup+Database",
      "https://wiki.pmease.com/display/QB14/Pause+System",
      "https://wiki.pmease.com/display/QB14/Resume+System",
      "https://wiki.pmease.com/display/QB14/Check+System+Pause+Information",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Interact+with+Issues"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Interact+with+Issues",
    "title": "Interact with Issues",
    "breadcrumb": [
      "",
      "Developer's Guide",
      "RESTful API"
    ],
    "full_text": "Developer's Guide\nRESTful API\nInteract with Issues\nVersion: QB14\nOn this page\nInteract with Issues\nSince QuickBuild 4.0, you can retrieve issues via RESTful APIs. The base URI for changes RESTful APIs is:\n/\nrest\n/\n{\ntracker\n}\nHere, tracker is the type of your issue tracker, in QuickBuild, includes:\nJira - /rest/jira\nTrac - /rest/trac\nBugzilla - /rest/bugzilla\nbelow, we will use $baseURI to represent the URI: /rest/{tracker}.\nList all supported APIs\nâ\nURI\nResponse Type\nParams\n$baseURI/help\ntext/html\nGet the data version of issues\nâ\nURI\nResponse Type\nParams\n$baseURI/version\ntext/plain\nRetrieve the issues related to a configuration\nâ\nGet the size\nURI\nResponse Type\nParams\n$baseURI/size/{configuration}\ntext/plain\n*\nconfiguration\n- PATH_PARAM Specify the configuration. By default, specify configuration id here, if you want to specify a configuration path, you need add prefix PATH:, for example,\nPATH:root/My/DEV\n.\nSINCE 5.0.14\n, specify the configuration path directly, for example root/My/DEV, no need PATH: prefix anymore. *\nbuild\n- QUERY_PARAM The id of a specific build. *\nfrom_build\n- QUERY_PARAM Specify the from build when finding changes in a build range. *\nto_build\n- QUERY_PARAM Specify the to build when finding changes in a build range.\nfor example, below url will retrieve the count of JIRA issues in a specified build:\nhttp\n:\n/\n/\nquickbuild\n:\n8810\n/\nrest\n/\njira\n/\nsize\n/\nPATH\n:\nroot\n%\n2F\nMy\n%\n2F\nDEV\n?\nbuild\n=\n100\nSince\n5.0\n.14\nhttp\n:\n/\n/\nquickbuild\n:\n8810\n/\nrest\n/\njira\n/\nsize\n/\nroot\n/\nMy\n/\nDEV\n?\nbuild\n=\n100\nor find issue count in a build range:\nhttp\n:\n/\n/\nquickbuild\n:\n8810\n/\nrest\n/\njira\n/\nsize\n/\n19\n?\nfrom_build\n=\n100\n&\nto_build\n=\n200\nRetrieve the issues\nURI\nResponse Type\nParams\nrest/jira/issues/{configuration}\ntext/xml\n*\nconfiguration\n- PATH_PARAM Specify the configuration. By default, specify configuration id here, if you want to specify a configuration path, you need add prefix PATH:, for example, PATH:root/My/DEV.\nSince 5.0.14\n, specify the configuration path directly, no PATH: prefix any more. *\nbuild\n- QUERY_PARAM Specify the build id you want. *\nfrom_build\n- QUERY_PARAM Specify the from build when finding changes in a build range. *\nto_build\n- QUERY_PARAM Specify the to build when finding changes in a build range. *\noffset\n- QUERY_PARAM Specify the first record when iterate the records, by default, the offset is 0 *\nlimit\n- QUERY_PARAM Specify the total records you want to retrieve, by default, the limit is 50 *\nasc\n- QUERY_PARAM Boolean type, specify order by issue key ascendent or descendent, by default, it is ascendent.\nFor example, below example retrieves the first 50 issues of build 100:\nhttp\n:\n/\n/\nquickbuild\n:\n8810\n/\nrest\n/\njira\n/\nissues\n/\n19\n?\nbuild\n=\n100\nthe response looks like:\n<\nreport name\n=\n\"issues\"\nversion\n=\n\"0.0\"\nlocale\n=\n\"en_US\"\n>\n<\nrow\nID\n=\n\"15\"\nissueKey\n=\n\"TST-23\"\nbuildId\n=\n\"321\"\nissueType\n=\n\"New Feature\"\nsummary\n=\n\"2-phase load components\"\nstatus\n=\n\"Resolved\"\npriority\n=\n\"Major\"\ncreated\n=\n\"2011-06-03T14:58:47.445+08:00\"\nupdated\n=\n\"2011-06-03T15:27:39.418+08:00\"\nresolution\n=\n\"Fixed\"\nassignee\n=\n\"admin\"\nreporter\n=\n\"admin\"\nmodifications\n=\n\"3\"\n>\n<\nchangeIds\n>\n913f\ncbcdbe8f80d6c1fe5fce3bb49e1f0040a943\n,\nf090cd04725c5551f8a439fe0a53591193ea79c3\n<\n/\nchangeIds\n>\n<\nrepositories\n>\nhg\n,\nhg\n<\n/\nrepositories\n>\n<\n/\nrow\n>\n.\n.\n.\n.\n.\n.\n<\n/\nreport\n>\nEach row element is a record of an issue related to a specified build, the data structure is:\nclass\nIssue\n{\nLong\nID\n;\n// No use, only used in QuickBuild internally\nString\nissueKey\n;\nLong\nbuildId\n;\nString\nissueType\n;\nString\nsummary\n;\nString\nstatus\n;\nString\npriority\n;\nDate\ncreated\n;\n// Formated in ISO8601\nDate\nupdated\n;\nString\nresolution\n;\nString\nassignee\n;\nString\nreporter\n;\nint\nmodifications\n;\n// related modifications\nString\nchangeIds\n;\n// related change set ids in CSV format\nString\nrepositories\n;\n// related repository names in CSV format\nRetrieve the builds of an issue\nâ\nBefore 5.0.14:\nURI\nResponse Type\nParams\n$baseURI/builds/{configuration}/{issuekey}/\ntext/xml\n*\nconfiguration\n- PATH_PARAM Specify the configuration. By default, specify configuration id here, if you want to specify a configuration path, you need add prefix PATH:, for example,\nPATH:root/My/DEV\n. *\nissuekey\n- PATH PARAM The issue key you want to search. *\ncount\n- QUERY_PARAM Specify at most how many records you want. If not specified, all records found will return.\nhttp\n:\n/\n/\nquickbuild\n:\n8810\n/\nrest\n/\njira\n/\nbuilds\n/\n5\n/\nQB\n-\n123\nSince 5.0.14\nURI\nResponse Type\nParams\n$baseURI//{issuekey}/builds/{configuration}\ntext/xml\n*\nconfiguration\n- PATH_PARAM Specify the configuration. By default, specify configuration id here, or specify the configuration path *\nissuekey\n- PATH PARAM The issue key you want to search. *\ncount\n- QUERY_PARAM Specify at most how many records you want. If not specified, all records found will return.\nhttp\n:\n/\n/\nquickbuild\n:\n8810\n/\nrest\n/\nQB\n-\n123\n/\njira\n/\nbuilds\n/\n5\nor\nhttp\n:\n/\n/\nquickbuild\n:\n8810\n/\nrest\n/\nQB\n-\n123\n/\njira\n/\nbuilds\n/\nroot\n/\nMy\n/\nDEV\nThe response looks like:\n<\nlist\n>\n<\nbuild\n>\n<\nid\n>\n321\n<\n/\nid\n>\n<\nversion\n>\n1.0\n.15\n<\n/\nversion\n>\n<\nstatus\n>\nSUCCESSFUL\n<\n/\nstatus\n>\n<\nbeginDate\n>\n2011\n-\n06\n-\n10\nT17\n:\n11\n:\n35.662\n+\n08\n:\n00\n<\n/\nbeginDate\n>\n<\nduration\n>\n3409\n<\n/\nduration\n>\n<\nscheduled\n>\nfalse\n<\n/\nscheduled\n>\n<\nrequester\n>\nAdministrator\n<\n/\nrequester\n>\n<\ndeleted\n>\nfalse\n<\n/\ndeleted\n>\n<\n/\nbuild\n>\n.\n.\n.\n.\n.\n.\n<\n/\nlist\n>\nHere, the build element is just a fragment of the build object in QuickBuild, if you need more detailed information about the build, please use build RESTful API.\nRetrieve the changes of an issue\nâ\nBefore 5.0.14\nURI\nResponse Type\nParams\n$baseURI/changes/{configuration}/{issuekey}\ntext/xml\n*\nconfiguration\n- PATH_PARAM Specify the configuration. By default, specify configuration id here, if you want to specify a configuration path, you need add prefix PATH:, for example, PATH:root/My/DEV *\nkey\n- PATH_PARAM The issue key you want to search. *\ncount\n- QUERY_PARAM Specify at most how many records you want. If not specified, all records found will return.\nhttp\n:\n/\n/\nquickbuild\n:\n8810\n/\nrest\n/\njira\n/\nchanges\n/\n5\n/\nTST\n-\n123\nor\nhttp\n:\n/\n/\nquickbuild\n:\n8810\n/\nrest\n/\njira\n/\nchanges\n/\nPATH\n:\nroot\n/\nMy\nDev\n/\nTST\n-\n123\nSince 5.0.14\nURI\nResponse Type\nParams\n$baseURI/{key}/changes/{configuration}\ntext/xml\n*\nconfiguration\n- PATH_PARAM Specify the configuration. By default, specify configuration id here. You can also specify the configuration path directly *\nkey\n- PATH_PARAM The issue key you want to search. *\ncount\n- QUERY_PARAM Specify at most how many records you want. If not specified, all records found will return.\nhttp\n:\n/\n/\nquickbuild\n:\n8810\n/\nrest\n/\njira\n/\nTST\n-\n123\n/\nchanges\n/\n5\nor\nhttp\n:\n/\n/\nquickbuild\n:\n8810\n/\nrest\n/\njira\n/\nTST\n-\n123\n/\nchanges\n/\nroot\n/\nMy\n/\nDEV\nThe response looks like:\n<\nlist\n>\n<\nchangeset\n>\n<\nuser\n>\nsteve\n<\n/\nuser\n>\n<\ndate\n>\n2011\n-\n05\n-\n31\nT03\n:\n45\n:\n55.000\n+\n08\n:\n00\n<\n/\ndate\n>\n<\nid\n>\nf090cd04725c5551f8a439fe0a53591193ea79c3\n<\n/\nid\n>\n<\nrepositoryName\n>\nhg\n<\n/\nrepositoryName\n>\n<\nrepositoryType\n>\nMercurial\n<\n/\nrepositoryType\n>\n<\nadditional\n>\n13\n<\n/\nadditional\n>\n<\nbuildId\n>\n321\n<\n/\nbuildId\n>\n<\ncomment\n>\nadd a big file\nto\nrelated\nto\nissue\nTST\n-\n23\n,\nTST\n-\n24\nTST\n-\n25\n<\n/\ncomment\n>\n<\nmodifications\n>\n<\nmodification\n>\n<\naction\n>\nADD\n<\n/\naction\n>\n<\npath\n>\nbig\n.\njava\n<\n/\npath\n>\n<\nedition\n>\nf090cd04725c5551f8a439fe0a53591193ea79c3\n<\n/\nedition\n>\n<\npreviousEdition\n>\nc11a08aa7525a01e35239b8b6f34d4f8f3bf770b\n<\n/\npreviousEdition\n>\n<\nadditional\n>\n13\n<\n/\nadditional\n>\n<\n/\nmodification\n>\n<\n/\nmodifications\n>\n<\n/\nchangeset\n>\n.\n.\n.\n.\n.\n.\n<\n/\nlist\n>\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Interact with Issues",
        "content": ""
      },
      {
        "header": "List all supported APIsâ",
        "content": "URIResponse TypeParams$baseURI/helptext/html"
      },
      {
        "header": "Get the data version of issuesâ",
        "content": "URIResponse TypeParams$baseURI/versiontext/plain"
      },
      {
        "header": "Retrieve the issues related to a configurationâ",
        "content": "Get the size URIResponse TypeParams$baseURI/size/{configuration}text/plain*configuration- PATH_PARAM Specify the configuration. By default, specify configuration id here, if you want to specify a configuration path, you need add prefix PATH:, for example,PATH:root/My/DEV.SINCE 5.0.14, specify the configuration path directly, for example root/My/DEV, no need PATH: prefix anymore. *build- QUERY_PARAM The id of a specific build. *from_build- QUERY_PARAM Specify the from build when finding changes in a build range. *to_build- QUERY_PARAM Specify the to build when finding changes in a build range. for example, below url will retrieve the count of JIRA issues in a specified build: http://quickbuild:8810/rest/jira/size/PATH:root%2FMy%2FDEV?build=100Since5.0.14http://quickbuild:8810/rest/jira/size/root/My/DEV?build=100 or find issue count in a build range: http://quickbuild:8810/rest/jira/size/19?from_build=100&to_build=200 Retrieve the issues URIResponse TypeParamsrest/jira/issues/{configuration}text/xml*configuration- PATH_PARAM Specify the configuration. By default, specify configuration id here, if you want to specify a configuration path, you need add prefix PATH:, for example, PATH:root/My/DEV.Since 5.0.14, specify the configuration path directly, no PATH: prefix any more. *build- QUERY_PARAM Specify the build id you want. *from_build- QUERY_PARAM Specify the from build when finding changes in a build range. *to_build- QUERY_PARAM Specify the to build when finding changes in a build range. *offset- QUERY_PARAM Specify the first record when iterate the records, by default, the offset is 0 *limit- QUERY_PARAM Specify the total records you want to retrieve, by default, the limit is 50 *asc- QUERY_PARAM Boolean type, specify order by issue key ascendent or descendent, by default, it is ascendent. For example, below example retrieves the first 50 issues of build 100: http://quickbuild:8810/rest/jira/issues/19?build=100 the response looks like: <report name=\"issues\"version=\"0.0\"locale=\"en_US\"><rowID=\"15\"issueKey=\"TST-23\"buildId=\"321\"issueType=\"New Feature\"summary=\"2-phase load components\"status=\"Resolved\"priority=\"Major\"created=\"2011-06-03T14:58:47.445+08:00\"updated=\"2011-06-03T15:27:39.418+08:00\"resolution=\"Fixed\"assignee=\"admin\"reporter=\"admin\"modifications=\"3\"><changeIds>913fcbcdbe8f80d6c1fe5fce3bb49e1f0040a943,f090cd04725c5551f8a439fe0a53591193ea79c3</changeIds><repositories>hg,hg</repositories></row>......</report> Each row element is a record of an issue related to a specified build, the data structure is: classIssue{LongID;// No use, only used in QuickBuild internallyStringissueKey;LongbuildId;StringissueType;Stringsummary;Stringstatus;Stringpriority;Datecreated;// Formated in ISO8601Dateupdated;Stringresolution;Stringassignee;Stringreporter;intmodifications;// related modificationsStringchangeIds;// related change set ids in CSV formatStringrepositories;// related repository names in CSV format"
      },
      {
        "header": "Retrieve the builds of an issueâ",
        "content": "Before 5.0.14: URIResponse TypeParams$baseURI/builds/{configuration}/{issuekey}/text/xml*configuration- PATH_PARAM Specify the configuration. By default, specify configuration id here, if you want to specify a configuration path, you need add prefix PATH:, for example,PATH:root/My/DEV. *issuekey- PATH PARAM The issue key you want to search. *count- QUERY_PARAM Specify at most how many records you want. If not specified, all records found will return. http://quickbuild:8810/rest/jira/builds/5/QB-123 Since 5.0.14 URIResponse TypeParams$baseURI//{issuekey}/builds/{configuration}text/xml*configuration- PATH_PARAM Specify the configuration. By default, specify configuration id here, or specify the configuration path *issuekey- PATH PARAM The issue key you want to search. *count- QUERY_PARAM Specify at most how many records you want. If not specified, all records found will return. http://quickbuild:8810/rest/QB-123/jira/builds/5orhttp://quickbuild:8810/rest/QB-123/jira/builds/root/My/DEV The response looks like: <list><build><id>321</id><version>1.0.15</version><status>SUCCESSFUL</status><beginDate>2011-06-10T17:11:35.662+08:00</beginDate><duration>3409</duration><scheduled>false</scheduled><requester>Administrator</requester><deleted>false</deleted></build>......</list> Here, the build element is just a fragment of the build object in QuickBuild, if you need more detailed information about the build, please use build RESTful API."
      },
      {
        "header": "Retrieve the changes of an issueâ",
        "content": "Before 5.0.14 URIResponse TypeParams$baseURI/changes/{configuration}/{issuekey}text/xml*configuration- PATH_PARAM Specify the configuration. By default, specify configuration id here, if you want to specify a configuration path, you need add prefix PATH:, for example, PATH:root/My/DEV *key- PATH_PARAM The issue key you want to search. *count- QUERY_PARAM Specify at most how many records you want. If not specified, all records found will return. http://quickbuild:8810/rest/jira/changes/5/TST-123orhttp://quickbuild:8810/rest/jira/changes/PATH:root/MyDev/TST-123 Since 5.0.14 URIResponse TypeParams$baseURI/{key}/changes/{configuration}text/xml*configuration- PATH_PARAM Specify the configuration. By default, specify configuration id here. You can also specify the configuration path directly *key- PATH_PARAM The issue key you want to search. *count- QUERY_PARAM Specify at most how many records you want. If not specified, all records found will return. http://quickbuild:8810/rest/jira/TST-123/changes/5orhttp://quickbuild:8810/rest/jira/TST-123/changes/root/My/DEV The response looks like: <list><changeset><user>steve</user><date>2011-05-31T03:45:55.000+08:00</date><id>f090cd04725c5551f8a439fe0a53591193ea79c3</id><repositoryName>hg</repositoryName><repositoryType>Mercurial</repositoryType><additional>13</additional><buildId>321</buildId><comment>add a big filetorelatedtoissueTST-23,TST-24TST-25</comment><modifications><modification><action>ADD</action><path>big.java</path><edition>f090cd04725c5551f8a439fe0a53591193ea79c3</edition><previousEdition>c11a08aa7525a01e35239b8b6f34d4f8f3bf770b</previousEdition><additional>13</additional></modification></modifications></changeset>......</list>"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Query+Build+Notifications",
      "https://wiki.pmease.com/display/QB14/Query+Grid+Measurements",
      "https://wiki.pmease.com/display/QB14/Access+Information+of+Published+Files",
      "https://wiki.pmease.com/display/QB14/Interact+with+Build+Agents",
      "https://wiki.pmease.com/display/QB14/Backup+Database",
      "https://wiki.pmease.com/display/QB14/Pause+System",
      "https://wiki.pmease.com/display/QB14/Resume+System",
      "https://wiki.pmease.com/display/QB14/Check+System+Pause+Information",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Query+Build+Notifications"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Query+Build+Notifications",
    "title": "Query Build Notifications",
    "breadcrumb": [
      "",
      "Developer's Guide",
      "RESTful API"
    ],
    "full_text": "Developer's Guide\nRESTful API\nQuery Build Notifications\nVersion: QB14\nOn this page\nQuery Build Notifications\nSyntax\nâ\nBuild notifications can be queried using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nnotifications\n?\nlast_notified_build_id\n=\n<\nlast notified build id\n>\nQuickBuild uses http BASIC authentication information to determine the user who queries the notification, and only returns notifications belonging to that user. The parameter\nlast_notified_build_id\nis optional. If not specified, the most recent notification will be returned; otherwise, all notifications after specified build will be returned. The response is of mime type\napplication/xml\nand the content is xml representation of list of builds to be notified. A sample response is like below:\n<\nlist\n>\n<\ncom\n.\npmease\n.\nquickbuild\n.\nmodel\n.\nBuild\n>\n<\nid\n>\n16\n<\n/\nid\n>\n<\nconfiguration\n>\n2\n<\n/\nconfiguration\n>\n<\nversion\n>\n1.0\n.15\n<\n/\nversion\n>\n<\nrequester\n>\n1\n<\n/\nrequester\n>\n<\nscheduled\n>\nfalse\n<\n/\nscheduled\n>\n<\nstatus\n>\nSUCCESSFUL\n<\n/\nstatus\n>\n<\nstatusDate\n>\n2010\n-\n06\n-\n09\nT21\n:\n46\n:\n11.627\n+\n08\n:\n00\n<\n/\nstatusDate\n>\n<\nbeginDate\n>\n2010\n-\n06\n-\n09\nT21\n:\n46\n:\n11.131\n+\n08\n:\n00\n<\n/\nbeginDate\n>\n<\nduration\n>\n496\n<\n/\nduration\n>\n<\nstepRuntimes\n>\n<\nentry\n>\n<\nstring\n>\nmaster\n<\n/\nstring\n>\n<\ncom\n.\npmease\n.\nquickbuild\n.\nstepsupport\n.\nStepRuntime\n>\n<\nstatus\n>\nSUCCESSFUL\n<\n/\nstatus\n>\n<\nnodeAddress\n>\nmatrix\n:\n8810\n<\n/\nnodeAddress\n>\n<\nduration\n>\n424\n<\n/\nduration\n>\n<\n/\ncom\n.\npmease\n.\nquickbuild\n.\nstepsupport\n.\nStepRuntime\n>\n<\n/\nentry\n>\n<\nentry\n>\n<\nstring\n>\nmaster\n&\ngt\n;\ncheckout\n<\n/\nstring\n>\n<\ncom\n.\npmease\n.\nquickbuild\n.\nstepsupport\n.\nStepRuntime\n>\n<\nstatus\n>\nSUCCESSFUL\n<\n/\nstatus\n>\n<\nnodeAddress\n>\nmatrix\n:\n8810\n<\n/\nnodeAddress\n>\n<\nduration\n>\n380\n<\n/\nduration\n>\n<\n/\ncom\n.\npmease\n.\nquickbuild\n.\nstepsupport\n.\nStepRuntime\n>\n<\n/\nentry\n>\n<\n/\nstepRuntimes\n>\n<\nrepositoryRuntimes\n>\n<\nentry\n>\n<\nstring\n>\nsvn\n<\n/\nstring\n>\n<\ncom\n.\npmease\n.\nquickbuild\n.\nrepositorysupport\n.\nRepositoryRuntime\n>\n<\nrevisionDOM\n>\n<\ncom\n.\npmease\n.\nquickbuild\n.\nplugin\n.\nscm\n.\nsvn\n.\nSvnRevision\nrevision\n=\n\"0.0\"\n>\n<\nvalue\n>\n101\n<\n/\nvalue\n>\n<\n/\ncom\n.\npmease\n.\nquickbuild\n.\nplugin\n.\nscm\n.\nsvn\n.\nSvnRevision\n>\n<\n/\nrevisionDOM\n>\n<\ncheckout\n>\ntrue\n<\n/\ncheckout\n>\n<\n/\ncom\n.\npmease\n.\nquickbuild\n.\nrepositorysupport\n.\nRepositoryRuntime\n>\n<\n/\nentry\n>\n<\n/\nrepositoryRuntimes\n>\n<\nvariableValues\n/\n>\n<\n/\ncom\n.\npmease\n.\nquickbuild\n.\nmodel\n.\nBuild\n>\n<\ncom\n.\npmease\n.\nquickbuild\n.\nmodel\n.\nBuild\n>\n<\nid\n>\n17\n<\n/\nid\n>\n<\nconfiguration\n>\n2\n<\n/\nconfiguration\n>\n<\nversion\n>\n1.0\n.16\n<\n/\nversion\n>\n<\nrequester\n>\n1\n<\n/\nrequester\n>\n<\nscheduled\n>\nfalse\n<\n/\nscheduled\n>\n<\nstatus\n>\nSUCCESSFUL\n<\n/\nstatus\n>\n<\nstatusDate\n>\n2010\n-\n06\n-\n09\nT21\n:\n46\n:\n13.448\n+\n08\n:\n00\n<\n/\nstatusDate\n>\n<\nbeginDate\n>\n2010\n-\n06\n-\n09\nT21\n:\n46\n:\n12.854\n+\n08\n:\n00\n<\n/\nbeginDate\n>\n<\nduration\n>\n594\n<\n/\nduration\n>\n<\nstepRuntimes\n>\n<\nentry\n>\n<\nstring\n>\nmaster\n<\n/\nstring\n>\n<\ncom\n.\npmease\n.\nquickbuild\n.\nstepsupport\n.\nStepRuntime\n>\n<\nstatus\n>\nSUCCESSFUL\n<\n/\nstatus\n>\n<\nnodeAddress\n>\nmatrix\n:\n8810\n<\n/\nnodeAddress\n>\n<\nduration\n>\n535\n<\n/\nduration\n>\n<\n/\ncom\n.\npmease\n.\nquickbuild\n.\nstepsupport\n.\nStepRuntime\n>\n<\n/\nentry\n>\n<\nentry\n>\n<\nstring\n>\nmaster\n&\ngt\n;\ncheckout\n<\n/\nstring\n>\n<\ncom\n.\npmease\n.\nquickbuild\n.\nstepsupport\n.\nStepRuntime\n>\n<\nstatus\n>\nSUCCESSFUL\n<\n/\nstatus\n>\n<\nnodeAddress\n>\nmatrix\n:\n8810\n<\n/\nnodeAddress\n>\n<\nduration\n>\n492\n<\n/\nduration\n>\n<\n/\ncom\n.\npmease\n.\nquickbuild\n.\nstepsupport\n.\nStepRuntime\n>\n<\n/\nentry\n>\n<\n/\nstepRuntimes\n>\n<\nrepositoryRuntimes\n>\n<\nentry\n>\n<\nstring\n>\nsvn\n<\n/\nstring\n>\n<\ncom\n.\npmease\n.\nquickbuild\n.\nrepositorysupport\n.\nRepositoryRuntime\n>\n<\nrevisionDOM\n>\n<\ncom\n.\npmease\n.\nquickbuild\n.\nplugin\n.\nscm\n.\nsvn\n.\nSvnRevision\nrevision\n=\n\"0.0\"\n>\n<\nvalue\n>\n101\n<\n/\nvalue\n>\n<\n/\ncom\n.\npmease\n.\nquickbuild\n.\nplugin\n.\nscm\n.\nsvn\n.\nSvnRevision\n>\n<\n/\nrevisionDOM\n>\n<\ncheckout\n>\ntrue\n<\n/\ncheckout\n>\n<\n/\ncom\n.\npmease\n.\nquickbuild\n.\nrepositorysupport\n.\nRepositoryRuntime\n>\n<\n/\nentry\n>\n<\n/\nrepositoryRuntimes\n>\n<\nvariableValues\n/\n>\n<\n/\ncom\n.\npmease\n.\nquickbuild\n.\nmodel\n.\nBuild\n>\n<\n/\nlist\n>\nSecurity\nâ\nYou will need to use http BASIC authentication to login as authorized QuickBuild user to use this API. QuickBuild only returns notifications belonging to that user.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get notifications for user\nadmin\nafter build with id\n100\n:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nnotifications\n?\nlast_notified_build_id\n=\n100\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Query Build Notifications",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Build notifications can be queried using http GET method through below url: http://localhost:8810/rest/notifications?last_notified_build_id=<last notified build id> QuickBuild uses http BASIC authentication information to determine the user who queries the notification, and only returns notifications belonging to that user. The parameterlast_notified_build_idis optional. If not specified, the most recent notification will be returned; otherwise, all notifications after specified build will be returned. The response is of mime typeapplication/xmland the content is xml representation of list of builds to be notified. A sample response is like below: <list><com.pmease.quickbuild.model.Build><id>16</id><configuration>2</configuration><version>1.0.15</version><requester>1</requester><scheduled>false</scheduled><status>SUCCESSFUL</status><statusDate>2010-06-09T21:46:11.627+08:00</statusDate><beginDate>2010-06-09T21:46:11.131+08:00</beginDate><duration>496</duration><stepRuntimes><entry><string>master</string><com.pmease.quickbuild.stepsupport.StepRuntime><status>SUCCESSFUL</status><nodeAddress>matrix:8810</nodeAddress><duration>424</duration></com.pmease.quickbuild.stepsupport.StepRuntime></entry><entry><string>master&gt;checkout</string><com.pmease.quickbuild.stepsupport.StepRuntime><status>SUCCESSFUL</status><nodeAddress>matrix:8810</nodeAddress><duration>380</duration></com.pmease.quickbuild.stepsupport.StepRuntime></entry></stepRuntimes><repositoryRuntimes><entry><string>svn</string><com.pmease.quickbuild.repositorysupport.RepositoryRuntime><revisionDOM><com.pmease.quickbuild.plugin.scm.svn.SvnRevisionrevision=\"0.0\"><value>101</value></com.pmease.quickbuild.plugin.scm.svn.SvnRevision></revisionDOM><checkout>true</checkout></com.pmease.quickbuild.repositorysupport.RepositoryRuntime></entry></repositoryRuntimes><variableValues/></com.pmease.quickbuild.model.Build><com.pmease.quickbuild.model.Build><id>17</id><configuration>2</configuration><version>1.0.16</version><requester>1</requester><scheduled>false</scheduled><status>SUCCESSFUL</status><statusDate>2010-06-09T21:46:13.448+08:00</statusDate><beginDate>2010-06-09T21:46:12.854+08:00</beginDate><duration>594</duration><stepRuntimes><entry><string>master</string><com.pmease.quickbuild.stepsupport.StepRuntime><status>SUCCESSFUL</status><nodeAddress>matrix:8810</nodeAddress><duration>535</duration></com.pmease.quickbuild.stepsupport.StepRuntime></entry><entry><string>master&gt;checkout</string><com.pmease.quickbuild.stepsupport.StepRuntime><status>SUCCESSFUL</status><nodeAddress>matrix:8810</nodeAddress><duration>492</duration></com.pmease.quickbuild.stepsupport.StepRuntime></entry></stepRuntimes><repositoryRuntimes><entry><string>svn</string><com.pmease.quickbuild.repositorysupport.RepositoryRuntime><revisionDOM><com.pmease.quickbuild.plugin.scm.svn.SvnRevisionrevision=\"0.0\"><value>101</value></com.pmease.quickbuild.plugin.scm.svn.SvnRevision></revisionDOM><checkout>true</checkout></com.pmease.quickbuild.repositorysupport.RepositoryRuntime></entry></repositoryRuntimes><variableValues/></com.pmease.quickbuild.model.Build></list>"
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as authorized QuickBuild user to use this API. QuickBuild only returns notifications belonging to that user."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get notifications for useradminafter build with id100: curl-u admin:admin http://localhost:8810/rest/notifications?last_notified_build_id=100"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Query+Grid+Measurements",
      "https://wiki.pmease.com/display/QB14/Access+Information+of+Published+Files",
      "https://wiki.pmease.com/display/QB14/Interact+with+Build+Agents",
      "https://wiki.pmease.com/display/QB14/Backup+Database",
      "https://wiki.pmease.com/display/QB14/Pause+System",
      "https://wiki.pmease.com/display/QB14/Resume+System",
      "https://wiki.pmease.com/display/QB14/Check+System+Pause+Information",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Query+Grid+Measurements"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Query+Grid+Measurements",
    "title": "Query Grid Measurements",
    "breadcrumb": [
      "",
      "Developer's Guide",
      "RESTful API"
    ],
    "full_text": "Developer's Guide\nRESTful API\nQuery Grid Measurements\nVersion: QB14\nOn this page\nQuery Grid Measurements\nGrid measurements can be fetched from REST API.\nAvailable Functions\nâ\nThe base URI for grid measuremetns REST API is:\n/\nrest\n/\ngrid\n/\nmeasurements\nThe support functions include:\nURI\nDescription\nParams\n/rest/grid/measurements/help\nGet help for all available functions\nNO PARAMS\n/rest/grid/measurements/version\nGet current version for the measurements related REST API\nNO PARAMS\n/rest/grid/measurements\nQuery for the measurements you want\n* source -\nQUERY_PARAM\nSpecify the node you want to query. If not specifed, then all nodes will be used. * period -\nQUERY_PARAM\nSpecify the time range you want to query. by default, period is LAST_HOUR, this param can be one of: LAST_HOUR, LAST_2_HOURS, LAST_4_HOURS, LAST_DAY, LAST_WEEK, LAST_MONTH * start_time -\nQUERY_PARAM\nSpecify the start time you want to query. If not specified, then an hour ago of to_date will be used. * end_time -\nQUERY_PARAM\nSpecify the end time you want to query. If not specified, then current time will be used. * metric -\nQUERY_PARAM\nSpecify the metric name you want to query. See below section for all available metric names * date_pattern -\nQUERY_PARAM\nSpecify the date pattern you are using for from_date and to_date. By default, ISO 8601 is used.\nBelow, we'd like to give some examples for how to query the measurements:\nWith no params\nâ\nIf you call below query, QuickBuild will return all measurements collected from all nodes in the last one hour.\n/\nrest\n/\ngrid\n/\nmeasurements\nQuery for a specified node\nâ\nBelow query will return all measurements from\nmyagent:8811\nin the last one hour.\n/\nrest\n/\ngrid\n/\nmeasurements\n?\nsource\n=\nmyagent\n:\n8811\nQuery for a specified metric\nâ\nBelow query will return measurements of\ndisk usage\nfor all nodes in the last one hour.\n/\nrest\n/\ngrid\n/\nmeasurements\n?\nmetric\n=\ndisk\n.\nusage\nQuery for a specified time range\nâ\nBelow query returns all measurements for all nodes in the last 2 hours.\n/\nrest\n/\ngrid\n/\nmeasurements\n?\nperiod\n=\nLAST_2_HOURS\nBelow query returns all measurements for all nodes from time: 2013-02-25T09:47:00+08:00, note by default, you need format your time in ISO8601 format, that is, in pattern: yyyy-MM-dd'T'HH:mm:ss.SSSZ, we will give a custom date pattern in later sample.\n/\nrest\n/\ngrid\n/\nmeasurements\n?\nstart_time\n=\n2013\n-\n02\n-\n25\nT09\n:\n47\n:\n00.000\n%\n2\nB08\n:\n00\nBelow query returns all measurements for all nodes in a specified time range with a custom date format pattern:\n/\nrest\n/\ngrid\n/\nmeasurements\n?\nstart_time\n=\n2013\n/\n02\n/\n25\n+\n09\n:\n47\n&\nend_time\n=\n2013\n/\n02\n/\n27\n+\n09\n:\n47\n&\ndate_pattern\n=\nyyyy\n/\nMM\n/\ndd\n+\nHH\n:\nmm\nExample return result\nâ\nFor all query above, below is an example return result:\n<\nlist\n>\n<\ncom.pmease.quickbuild.model.MeasurementDataR00\n>\n<\nid\n>\n350\n</\nid\n>\n<\ntimestamp\n>\n1361854800000\n</\ntimestamp\n>\n<\nsource\n>\nZhenyu-MBP.local:8811\n</\nsource\n>\n<\nmetricName\n>\nmemory.usage\n</\nmetricName\n>\n<\nvalue\n>\n0.743398666381836\n</\nvalue\n>\n</\ncom.pmease.quickbuild.model.MeasurementDataR00\n>\n<\ncom.pmease.quickbuild.model.MeasurementDataR00\n>\n<\nid\n>\n335\n</\nid\n>\n<\ntimestamp\n>\n1361854800000\n</\ntimestamp\n>\n<\nsource\n>\nZhenyu-MBP.local:8810\n</\nsource\n>\n<\nmetricName\n>\nweb.rpc.oneMinuteRate\n</\nmetricName\n>\n<\nvalue\n>\n10.3903417298681\n</\nvalue\n>\n</\ncom.pmease.quickbuild.model.MeasurementDataR00\n>\n<\ncom.pmease.quickbuild.model.MeasurementDataR00\n>\n<\nid\n>\n334\n</\nid\n>\n<\ntimestamp\n>\n1361854800000\n</\ntimestamp\n>\n<\nsource\n>\nZhenyu-MBP.local:8810\n</\nsource\n>\n<\nmetricName\n>\nweb.rpc.fiveMinuteRate\n</\nmetricName\n>\n<\nvalue\n>\n8.90793420070343\n</\nvalue\n>\n</\ncom.pmease.quickbuild.model.MeasurementDataR00\n>\n</\nlist\n>\nHere, timestamp is the milliseconds in Java time (the time from midnight, January 1, 1970 UTC.), you can simply create your own Date instance by\nnew Date(timestamp)\nin Java.\nAvailable Measurement Metrics\nâ\nBelow table shows all available measurement metrics:\nVirtual Machine Measurements\nâ\nMetric Id\nMetric Name\nApplied to\njvm.memoryUsage\nVirtual Machine :: Memory Usage\nAll Nodes\njvm.heapUsage\nVirtual Machine :: Heap Usage\nServer Only\njvm.gcRuns\nVirtual Machine :: GC Runs\nServer Only\njvm.gcTime\nVirtual Machine :: GC Time\nServer Only\njvm.threadCount\nVirtual Machine :: Thread Count\nServer Only\nCPU Measurements\nâ\nMetric Id\nMetric Name\nApplied to\ncpu.totalUsage\nCPU :: Total Usage\nAll Nodes\nPhysical Memory Measurements\nâ\nMetric Id\nMetric Name\nApplied to\nmemory.usage\nPhysical Memory :: Memory Usage\nServer Only\nDisk Measurements\nâ\nMetric Id\nMetric Name\nApplied to\ndisk.usage\nDisk :: Usage\nAll Nodes\nNetwork Measurements\nâ\nMetric Id\nMetric Name\nApplied to\nnetwork.txBytes\nNetwork :: txBytes\nServer Only\nnetwork.rxBytes\nNetwork :: rxBytes\nServer Only\nSwap Measurements\nâ\nMetric Id\nMetric Name\nApplied to\nswap.usage\nSwap :: Usage\nServer Only\nResource Measurements\nâ\nMetric Id\nMetric Name\nApplied to\nresources.percentage\nResource :: Used%\nServer Only\nresources.frees\nResource :: Frees\nServer Only\nresources.used\nResource :: Used\nServer Only\nBuild Requests Measurements\nâ\nMetric Id\nMetric Name\nApplied to\nbuildrequests.processingsTotal\nBuild Requests :: Processings Total\nServer Only\nbuildrequests.waitingsTotal\nBuild Requests :: Waitings Total\nServer Only\nbuildrequests.processedTotal\nBuild Requests :: Processed Total\nServer Only\nbuildrequests.processings\nBuild Requests :: Processings on Node\nAll Nodes\nbuildrequests.waitings\nBuild Requests :: Waitings on Node\nAll Nodes\nBuilds Measurements\nâ\nMetric Id\nMetric Name\nApplied to\nbuilds.total\nBuilds :: Total Builds\nServer Only\nbuilds.failed\nBuilds :: Failed Builds\nServer Only\nbuilds.successfulRate\nBuilds :: Successful Rate\nServer Only\nbuilds.averageDuration\nBuilds :: Average Duration\nServer Only\nbuilds.averageWaitingDuration\nBuilds :: Average Waiting Duration\nServer Only\nSteps Measurements\nâ\nMetric Id\nMetric Name\nApplied to\nsteps.runningsTotal\nSteps :: Runnings Total\nServer Only\nsteps.waitingsTotal\nSteps :: Waitings Total\nServer Only\nsteps.runnings\nSteps :: Runnings on Node\nAll Nodes\nDatabase Measurements\nâ\nMetric Id\nMetric Name\nApplied to\ndb.numConnections\nDatabase :: Total Connections\nServer Only\ndb.busyConnections\nDatabase :: Busy Connections\nServer Only\nJetty(web server) Measurements\nâ\nMetric Id\nMetric Name\nApplied to\njetty.totalConnections\nJetty :: Total Connections\nServer Only\njetty.usedConnections\nJetty :: Used Connections\nServer Only\nUI Visits Measurements\nâ\nMetric Id\nMetric Name\nApplied to\nweb.ui.oneMinuteRate\nUI Visits :: One-minute Rate\nServer Only\nweb.ui.fiveMinuteRate\nUI Visits :: Five-minute Rate\nServer Only\nweb.ui.fifteenMinuteRate\nUI Visits :: Fifteen-minute Rate\nServer Only\nweb.ui.requests\nUI Visits :: Requests\nServer Only\nweb.ui.averageDuration\nUI Visits :: Average Duration\nServer Only\nREST Visits Measurements\nâ\nMetric Id\nMetric Name\nApplied to\nweb.rest.oneMinuteRate\nREST Visits :: One-minute Rate\nServer Only\nweb.rest.fiveMinuteRate\nREST Visits :: Five-minute Rate\nServer Only\nweb.rest.fifteenMinuteRate\nREST Visits :: Fifteen-minute Rate\nServer Only\nweb.rest.requests\nREST Visits :: Requests\nServer Only\nweb.rest.averageDuration\nREST Visits :: Average Duration\nServer Only\nRPC Visits Measurements\nâ\nMetric Id\nMetric Name\nApplied to\nweb.rpc.oneMinuteRate\nRPC Visits :: One-minute Rate\nServer Only\nweb.rpc.fiveMinuteRate\nRPC Visits :: Five-minute Rate\nServer Only\nweb.rpc.fifteenMinuteRate\nRPC Visits :: Fifteen-minute Rate\nServer Only\nweb.rpc.requests\nRPC Visits :: Requests\nServer Only\nweb.rpc.averageDuration\nRPC Visits :: Average Duration\nServer Only\nDownload Visits Measurements\nâ\nMetric Id\nMetric Name\nApplied to\nweb.download.oneMinuteRate\nDownload Visits :: One-minute Rate\nServer Only\nweb.download.fiveMinuteRate\nDownload Visits :: Five-minute Rate\nServer Only\nweb.download.fifteenMinuteRate\nDownload Visits :: Fifteen-minute Rate\nServer Only\nweb.download.requests\nDownload Visits :: Requests\nServer Only\nweb.download.averageDuration\nDownload Visits :: Average Duration\nServer Only\nUpload Visits Measurements\nâ\nMetric Id\nMetric Name\nApplied to\nweb.upload.oneMinuteRate\nUpload Visits :: One-minute Rate\nServer Only\nweb.upload.fiveMinuteRate\nUpload Visits :: Five-minute Rate\nServer Only\nweb.upload.fifteenMinuteRate\nUpload Visits :: Fifteen-minute Rate\nServer Only\nweb.upload.requests\nUpload Visits :: Requests\nServer Only\nweb.upload.averageDuration\nUpload Visits :: Average Duration\nServer Only\nSecurity\nâ\nNo, Any user can use the functions.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Query Grid Measurements",
        "content": ""
      },
      {
        "header": "Available Functionsâ",
        "content": "The base URI for grid measuremetns REST API is: /rest/grid/measurements The support functions include: URIDescriptionParams/rest/grid/measurements/helpGet help for all available functionsNO PARAMS/rest/grid/measurements/versionGet current version for the measurements related REST APINO PARAMS/rest/grid/measurementsQuery for the measurements you want* source -QUERY_PARAMSpecify the node you want to query. If not specifed, then all nodes will be used. * period -QUERY_PARAMSpecify the time range you want to query. by default, period is LAST_HOUR, this param can be one of: LAST_HOUR, LAST_2_HOURS, LAST_4_HOURS, LAST_DAY, LAST_WEEK, LAST_MONTH * start_time -QUERY_PARAMSpecify the start time you want to query. If not specified, then an hour ago of to_date will be used. * end_time -QUERY_PARAMSpecify the end time you want to query. If not specified, then current time will be used. * metric -QUERY_PARAMSpecify the metric name you want to query. See below section for all available metric names * date_pattern -QUERY_PARAMSpecify the date pattern you are using for from_date and to_date. By default, ISO 8601 is used. Below, we'd like to give some examples for how to query the measurements:"
      },
      {
        "header": "With no paramsâ",
        "content": "If you call below query, QuickBuild will return all measurements collected from all nodes in the last one hour. /rest/grid/measurements"
      },
      {
        "header": "Query for a specified nodeâ",
        "content": "Below query will return all measurements frommyagent:8811in the last one hour. /rest/grid/measurements?source=myagent:8811"
      },
      {
        "header": "Query for a specified metricâ",
        "content": "Below query will return measurements ofdisk usagefor all nodes in the last one hour. /rest/grid/measurements?metric=disk.usage"
      },
      {
        "header": "Query for a specified time rangeâ",
        "content": "Below query returns all measurements for all nodes in the last 2 hours. /rest/grid/measurements?period=LAST_2_HOURS Below query returns all measurements for all nodes from time: 2013-02-25T09:47:00+08:00, note by default, you need format your time in ISO8601 format, that is, in pattern: yyyy-MM-dd'T'HH:mm:ss.SSSZ, we will give a custom date pattern in later sample. /rest/grid/measurements?start_time=2013-02-25T09:47:00.000%2B08:00 Below query returns all measurements for all nodes in a specified time range with a custom date format pattern: /rest/grid/measurements?start_time=2013/02/25+09:47&end_time=2013/02/27+09:47&date_pattern=yyyy/MM/dd+HH:mm"
      },
      {
        "header": "Example return resultâ",
        "content": "For all query above, below is an example return result: <list><com.pmease.quickbuild.model.MeasurementDataR00><id>350</id><timestamp>1361854800000</timestamp><source>Zhenyu-MBP.local:8811</source><metricName>memory.usage</metricName><value>0.743398666381836</value></com.pmease.quickbuild.model.MeasurementDataR00><com.pmease.quickbuild.model.MeasurementDataR00><id>335</id><timestamp>1361854800000</timestamp><source>Zhenyu-MBP.local:8810</source><metricName>web.rpc.oneMinuteRate</metricName><value>10.3903417298681</value></com.pmease.quickbuild.model.MeasurementDataR00><com.pmease.quickbuild.model.MeasurementDataR00><id>334</id><timestamp>1361854800000</timestamp><source>Zhenyu-MBP.local:8810</source><metricName>web.rpc.fiveMinuteRate</metricName><value>8.90793420070343</value></com.pmease.quickbuild.model.MeasurementDataR00></list> Here, timestamp is the milliseconds in Java time (the time from midnight, January 1, 1970 UTC.), you can simply create your own Date instance bynew Date(timestamp)in Java."
      },
      {
        "header": "Available Measurement Metricsâ",
        "content": "Below table shows all available measurement metrics:"
      },
      {
        "header": "Virtual Machine Measurementsâ",
        "content": "Metric IdMetric NameApplied tojvm.memoryUsageVirtual Machine :: Memory UsageAll Nodesjvm.heapUsageVirtual Machine :: Heap UsageServer Onlyjvm.gcRunsVirtual Machine :: GC RunsServer Onlyjvm.gcTimeVirtual Machine :: GC TimeServer Onlyjvm.threadCountVirtual Machine :: Thread CountServer Only"
      },
      {
        "header": "CPU Measurementsâ",
        "content": "Metric IdMetric NameApplied tocpu.totalUsageCPU :: Total UsageAll Nodes"
      },
      {
        "header": "Physical Memory Measurementsâ",
        "content": "Metric IdMetric NameApplied tomemory.usagePhysical Memory :: Memory UsageServer Only"
      },
      {
        "header": "Disk Measurementsâ",
        "content": "Metric IdMetric NameApplied todisk.usageDisk :: UsageAll Nodes"
      },
      {
        "header": "Network Measurementsâ",
        "content": "Metric IdMetric NameApplied tonetwork.txBytesNetwork :: txBytesServer Onlynetwork.rxBytesNetwork :: rxBytesServer Only"
      },
      {
        "header": "Swap Measurementsâ",
        "content": "Metric IdMetric NameApplied toswap.usageSwap :: UsageServer Only"
      },
      {
        "header": "Resource Measurementsâ",
        "content": "Metric IdMetric NameApplied toresources.percentageResource :: Used%Server Onlyresources.freesResource :: FreesServer Onlyresources.usedResource :: UsedServer Only"
      },
      {
        "header": "Build Requests Measurementsâ",
        "content": "Metric IdMetric NameApplied tobuildrequests.processingsTotalBuild Requests :: Processings TotalServer Onlybuildrequests.waitingsTotalBuild Requests :: Waitings TotalServer Onlybuildrequests.processedTotalBuild Requests :: Processed TotalServer Onlybuildrequests.processingsBuild Requests :: Processings on NodeAll Nodesbuildrequests.waitingsBuild Requests :: Waitings on NodeAll Nodes"
      },
      {
        "header": "Builds Measurementsâ",
        "content": "Metric IdMetric NameApplied tobuilds.totalBuilds :: Total BuildsServer Onlybuilds.failedBuilds :: Failed BuildsServer Onlybuilds.successfulRateBuilds :: Successful RateServer Onlybuilds.averageDurationBuilds :: Average DurationServer Onlybuilds.averageWaitingDurationBuilds :: Average Waiting DurationServer Only"
      },
      {
        "header": "Steps Measurementsâ",
        "content": "Metric IdMetric NameApplied tosteps.runningsTotalSteps :: Runnings TotalServer Onlysteps.waitingsTotalSteps :: Waitings TotalServer Onlysteps.runningsSteps :: Runnings on NodeAll Nodes"
      },
      {
        "header": "Database Measurementsâ",
        "content": "Metric IdMetric NameApplied todb.numConnectionsDatabase :: Total ConnectionsServer Onlydb.busyConnectionsDatabase :: Busy ConnectionsServer Only"
      },
      {
        "header": "Jetty(web server) Measurementsâ",
        "content": "Metric IdMetric NameApplied tojetty.totalConnectionsJetty :: Total ConnectionsServer Onlyjetty.usedConnectionsJetty :: Used ConnectionsServer Only"
      },
      {
        "header": "UI Visits Measurementsâ",
        "content": "Metric IdMetric NameApplied toweb.ui.oneMinuteRateUI Visits :: One-minute RateServer Onlyweb.ui.fiveMinuteRateUI Visits :: Five-minute RateServer Onlyweb.ui.fifteenMinuteRateUI Visits :: Fifteen-minute RateServer Onlyweb.ui.requestsUI Visits :: RequestsServer Onlyweb.ui.averageDurationUI Visits :: Average DurationServer Only"
      },
      {
        "header": "REST Visits Measurementsâ",
        "content": "Metric IdMetric NameApplied toweb.rest.oneMinuteRateREST Visits :: One-minute RateServer Onlyweb.rest.fiveMinuteRateREST Visits :: Five-minute RateServer Onlyweb.rest.fifteenMinuteRateREST Visits :: Fifteen-minute RateServer Onlyweb.rest.requestsREST Visits :: RequestsServer Onlyweb.rest.averageDurationREST Visits :: Average DurationServer Only"
      },
      {
        "header": "RPC Visits Measurementsâ",
        "content": "Metric IdMetric NameApplied toweb.rpc.oneMinuteRateRPC Visits :: One-minute RateServer Onlyweb.rpc.fiveMinuteRateRPC Visits :: Five-minute RateServer Onlyweb.rpc.fifteenMinuteRateRPC Visits :: Fifteen-minute RateServer Onlyweb.rpc.requestsRPC Visits :: RequestsServer Onlyweb.rpc.averageDurationRPC Visits :: Average DurationServer Only"
      },
      {
        "header": "Download Visits Measurementsâ",
        "content": "Metric IdMetric NameApplied toweb.download.oneMinuteRateDownload Visits :: One-minute RateServer Onlyweb.download.fiveMinuteRateDownload Visits :: Five-minute RateServer Onlyweb.download.fifteenMinuteRateDownload Visits :: Fifteen-minute RateServer Onlyweb.download.requestsDownload Visits :: RequestsServer Onlyweb.download.averageDurationDownload Visits :: Average DurationServer Only"
      },
      {
        "header": "Upload Visits Measurementsâ",
        "content": "Metric IdMetric NameApplied toweb.upload.oneMinuteRateUpload Visits :: One-minute RateServer Onlyweb.upload.fiveMinuteRateUpload Visits :: Five-minute RateServer Onlyweb.upload.fifteenMinuteRateUpload Visits :: Fifteen-minute RateServer Onlyweb.upload.requestsUpload Visits :: RequestsServer Onlyweb.upload.averageDurationUpload Visits :: Average DurationServer Only"
      },
      {
        "header": "Securityâ",
        "content": "No, Any user can use the functions."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Access+Information+of+Published+Files",
      "https://wiki.pmease.com/display/QB14/Interact+with+Build+Agents",
      "https://wiki.pmease.com/display/QB14/Backup+Database",
      "https://wiki.pmease.com/display/QB14/Pause+System",
      "https://wiki.pmease.com/display/QB14/Resume+System",
      "https://wiki.pmease.com/display/QB14/Check+System+Pause+Information",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Access+Information+of+Published+Files"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Access+Information+of+Published+Files",
    "title": "Access Information of Published Files",
    "breadcrumb": [
      "",
      "Developer's Guide",
      "RESTful API"
    ],
    "full_text": "Developer's Guide\nRESTful API\nAccess Information of Published Files\nVersion: QB14\nOn this page\nAccess Information of Published Files\nSyntax\nâ\nInformation of published files can be accessed by build id using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nfiles\n?\nbuild_id\n=\n<\nbuild id\n>\n&\npath\n=\n<\npath\n>\nHere\n<path>\nrepresents the relative path under\npublish directory\nof the specified build. The response is of mime type\napplication/xml\nand the content is XML representation of the information about files and directories under the specified path. If specified path does not exist, http status code 204 (no content) will be returned. A sample response is like below:\n<\nlist\n>\n<\ncom\n.\npmease\n.\nquickbuild\n.\nFileInfo\n>\n<\nname\n>\nfile1\n.\nzip\n<\n/\nname\n>\n<\n!\n--\nsize in bytes\n--\n>\n<\nsize\n>\n287111\n<\n/\nsize\n>\n<\n!\n--\nnumber of milliseconds since\nJanuary\n1\n,\n1970\n,\n00\n:\n00\n:\n00\nGMT\n--\n>\n<\nlastModified\n>\n1258091663171\n<\n/\nlastModified\n>\n<\ndirectory\n>\nfalse\n<\n/\ndirectory\n>\n<\n/\ncom\n.\npmease\n.\nquickbuild\n.\nrest\n.\nFileInfo\n>\n<\ncom\n.\npmease\n.\nquickbuild\n.\nrest\n.\nFileInfo\n>\n<\nname\n>\ndir1\n<\n/\nname\n>\n<\nsize\n>\n0\n<\n/\nsize\n>\n<\nlastModified\n>\n1258091663171\n<\n/\nlastModified\n>\n<\ndirectory\n>\ntrue\n<\n/\ndirectory\n>\n<\n/\ncom\n.\npmease\n.\nquickbuild\n.\nrest\n.\nFileInfo\n>\n<\n/\nlist\n>\nSecurity\nâ\nYou will need to use http BASIC authentication to login as an authorized QuickBuild user if the anonymous is not allowed to access artifacts of specified build.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get information of artifacts in build with id\n100\n:\ncurl\n-\nu admin\n:\nadmin\n\"http://localhost:8810/rest/files?build_id=100&path=artifacts\"\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Access Information of Published Files",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Information of published files can be accessed by build id using http GET method through below url: http://localhost:8810/rest/files?build_id=<build id>&path=<path> Here<path>represents the relative path underpublish directoryof the specified build. The response is of mime typeapplication/xmland the content is XML representation of the information about files and directories under the specified path. If specified path does not exist, http status code 204 (no content) will be returned. A sample response is like below: <list><com.pmease.quickbuild.FileInfo><name>file1.zip</name><!--size in bytes--><size>287111</size><!--number of milliseconds sinceJanuary1,1970,00:00:00GMT--><lastModified>1258091663171</lastModified><directory>false</directory></com.pmease.quickbuild.rest.FileInfo><com.pmease.quickbuild.rest.FileInfo><name>dir1</name><size>0</size><lastModified>1258091663171</lastModified><directory>true</directory></com.pmease.quickbuild.rest.FileInfo></list>"
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as an authorized QuickBuild user if the anonymous is not allowed to access artifacts of specified build."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get information of artifacts in build with id100: curl-u admin:admin\"http://localhost:8810/rest/files?build_id=100&path=artifacts\""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Interact+with+Build+Agents",
      "https://wiki.pmease.com/display/QB14/Backup+Database",
      "https://wiki.pmease.com/display/QB14/Pause+System",
      "https://wiki.pmease.com/display/QB14/Resume+System",
      "https://wiki.pmease.com/display/QB14/Check+System+Pause+Information",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Interact+with+Build+Agents"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Interact+with+Build+Agents",
    "title": "Interact with Build Agents",
    "breadcrumb": [
      "",
      "Developer's Guide",
      "RESTful API"
    ],
    "full_text": "Developer's Guide\nRESTful API\nInteract with Build Agents\nVersion: QB14\nOn this page\nInteract with Build Agents\nGet list of active build agents\nâ\nSyntax\nâ\nList of active build agents can be fetched by issuing GET request to below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nbuildagents\n/\nactive\nThe response is of mime type\ntext/plain\nand the content is XML representation of list of active build agents.\nSecurity\nâ\nOnly user with permission\nVIEW GRID PAGE\ncan access list of active build agents.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get list of active build agents:\ncurl http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nbuildagents\n/\nactive\nGet list of inactive build agents\nâ\nSyntax\nâ\nList of inactive build agents can be fetched by issuing GET request to below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nbuildagents\n/\ninactive\nThe response is of mime type\ntext/plain\nand the content is XML representation of list of inactive build agents.\nSecurity\nâ\nOnly user with permission\nVIEW GRID PAGE\ncan access list of active build agents.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get list of active build agents:\ncurl http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nbuildagents\n/\ninactive\nGet list of unauthorized build agents\nâ\nSyntax\nâ\nList of unauthorized build agents can be fetched by issuing GET request to below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nbuildagents\n/\nunauthorized\nThe response is of mime type\ntext/plain\nand the content is XML representation of list of unauthorized build agents.\nSecurity\nâ\nOnly user with permission\nVIEW GRID PAGE\ncan access list of active build agents.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get list of unauthorized build agents:\ncurl http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nbuildagents\n/\nunauthorized\nGet list of running steps on specified build agent (since 5.1.24)\nâ\nSyntax\nâ\nList of running steps can be fetched by issuing GET request to below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nbuildagents\n/\n<\nnode address\n>\n/\nrunning_steps\nThe response is of mime type\ntext/plain\nand the content is XML representation of list of running steps.\nSecurity\nâ\nOnly user with permission\nVIEW GRID PAGE\ncan access list of active build agents.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get list of running steps on agent \"myagent:8811\":\ncurl\n\"http://localhost:8810/rest/buildagents/myagent:8811/running_steps\"\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Interact with Build Agents",
        "content": ""
      },
      {
        "header": "Get list of active build agentsâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "List of active build agents can be fetched by issuing GET request to below url: http://localhost:8810/rest/buildagents/active The response is of mime typetext/plainand the content is XML representation of list of active build agents."
      },
      {
        "header": "Securityâ",
        "content": "Only user with permissionVIEW GRID PAGEcan access list of active build agents."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get list of active build agents: curl http://localhost:8810/rest/buildagents/active"
      },
      {
        "header": "Get list of inactive build agentsâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "List of inactive build agents can be fetched by issuing GET request to below url: http://localhost:8810/rest/buildagents/inactive The response is of mime typetext/plainand the content is XML representation of list of inactive build agents."
      },
      {
        "header": "Securityâ",
        "content": "Only user with permissionVIEW GRID PAGEcan access list of active build agents."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get list of active build agents: curl http://localhost:8810/rest/buildagents/inactive"
      },
      {
        "header": "Get list of unauthorized build agentsâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "List of unauthorized build agents can be fetched by issuing GET request to below url: http://localhost:8810/rest/buildagents/unauthorized The response is of mime typetext/plainand the content is XML representation of list of unauthorized build agents."
      },
      {
        "header": "Securityâ",
        "content": "Only user with permissionVIEW GRID PAGEcan access list of active build agents."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get list of unauthorized build agents: curl http://localhost:8810/rest/buildagents/unauthorized"
      },
      {
        "header": "Get list of running steps on specified build agent (since 5.1.24)â",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "List of running steps can be fetched by issuing GET request to below url: http://localhost:8810/rest/buildagents/<node address>/running_steps The response is of mime typetext/plainand the content is XML representation of list of running steps."
      },
      {
        "header": "Securityâ",
        "content": "Only user with permissionVIEW GRID PAGEcan access list of active build agents."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get list of running steps on agent \"myagent:8811\": curl\"http://localhost:8810/rest/buildagents/myagent:8811/running_steps\""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Backup+Database",
      "https://wiki.pmease.com/display/QB14/Pause+System",
      "https://wiki.pmease.com/display/QB14/Resume+System",
      "https://wiki.pmease.com/display/QB14/Check+System+Pause+Information",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Backup+Database"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Backup+Database",
    "title": "Backup Database",
    "breadcrumb": [
      "",
      "Developer's Guide",
      "RESTful API"
    ],
    "full_text": "Developer's Guide\nRESTful API\nBackup Database\nVersion: QB14\nOn this page\nBackup Database\nQuickBuild database backup can be taken via RESTful call.\nSyntax\nâ\nThe backup can be taken by posting XML representation of the database backup request object to below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nbackup\nA sample XML of backup request object is like below:\n<\ncom\n.\npmease\n.\nquickbuild\n.\nweb\n.\npage\n.\nadministration\n.\nBackupNowOption\n>\n<\n!\n--\nDestination\nfile\nfor\nthe backup\n--\n>\n<\nbackupTo\n>\n/\npath\n/\nto\n/\nbackup\n.\nzip\n<\n/\nbackupTo\n>\n<\n!\n--\nWhether\nor not\nto\nexclude\nbuilds in the backup\n--\n>\n<\nexcludeBuilds\n>\nfalse\n<\n/\nexcludeBuilds\n>\n<\n!\n--\nWhether\nor not\nto\nexclude\nmeasurement data in the backup\n--\n>\n<\nexcludeMeasurements\n>\nfalse\n<\n/\nexcludeMeasurements\n>\n<\n!\n--\nWhether\nor not\nto\nexclude\naudits in the backup\n--\n>\n<\nexcludeAudits\n>\nfalse\n<\n/\nexcludeAudits\n>\n<\n!\n--\nWhether\nor not\nto\nclear\npasswords in the backup\n--\n>\n<\nclearPasswords\n>\nfalse\n<\n/\nclearPasswords\n>\n<\n/\ncom\n.\npmease\n.\nquickbuild\n.\nweb\n.\npage\n.\nadministration\n.\nBackupNowOption\n>\nThe response is of mime type\ntext/plain\nand the content is absolute path to the backup file.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as administrator to do the backup.\nDemo\nâ\nWe use\ncurl\nto demonstrate how to backup the database:\nSave the sample backup request XML described above to file\ntempfile.xml\n.\nPost content of\ntempfile.xml\nto QuickBuild using below command:\ncurl\n-\nX\nPOST\n-\nu admin\n:\nadmin\n-\nd\n@tempfile.xml\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nbackup\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Backup Database",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "The backup can be taken by posting XML representation of the database backup request object to below url: http://localhost:8810/rest/backup A sample XML of backup request object is like below: <com.pmease.quickbuild.web.page.administration.BackupNowOption><!--Destinationfileforthe backup--><backupTo>/path/to/backup.zip</backupTo><!--Whetheror nottoexcludebuilds in the backup--><excludeBuilds>false</excludeBuilds><!--Whetheror nottoexcludemeasurement data in the backup--><excludeMeasurements>false</excludeMeasurements><!--Whetheror nottoexcludeaudits in the backup--><excludeAudits>false</excludeAudits><!--Whetheror nottoclearpasswords in the backup--><clearPasswords>false</clearPasswords></com.pmease.quickbuild.web.page.administration.BackupNowOption> The response is of mime typetext/plainand the content is absolute path to the backup file."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as administrator to do the backup."
      },
      {
        "header": "Demoâ",
        "content": "We usecurlto demonstrate how to backup the database: Save the sample backup request XML described above to filetempfile.xml.Post content oftempfile.xmlto QuickBuild using below command:curl-XPOST-u admin:admin-d@tempfile.xmlhttp://localhost:8810/rest/backup"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Pause+System",
      "https://wiki.pmease.com/display/QB14/Resume+System",
      "https://wiki.pmease.com/display/QB14/Check+System+Pause+Information",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Pause+System"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Pause+System",
    "title": "Pause System",
    "breadcrumb": [
      "",
      "Developer's Guide",
      "RESTful API"
    ],
    "full_text": "Developer's Guide\nRESTful API\nPause System\nVersion: QB14\nOn this page\nPause System\nQuickBuild can be paused to prevent builds from running via RESTful call.\nSyntax\nâ\nQuickBuild can be paused by issuing GET request to below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\npause\nThe response is of mime type\ntext/plain\nand the content is simply\npaused\nif successful.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as administrator to pause the system.\nDemo\nâ\nWe use\ncurl\nto demonstrate how to paused the system:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\npause\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Pause System",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "QuickBuild can be paused by issuing GET request to below url: http://localhost:8810/rest/pause The response is of mime typetext/plainand the content is simplypausedif successful."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as administrator to pause the system."
      },
      {
        "header": "Demoâ",
        "content": "We usecurlto demonstrate how to paused the system: curl-u admin:admin http://localhost:8810/rest/pause"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Resume+System",
      "https://wiki.pmease.com/display/QB14/Check+System+Pause+Information",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Resume+System"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Resume+System",
    "title": "Resume System",
    "breadcrumb": [
      "",
      "Developer's Guide",
      "RESTful API"
    ],
    "full_text": "Developer's Guide\nRESTful API\nResume System\nVersion: QB14\nOn this page\nResume System\nQuickBuild can be resumed to allow builds from running via RESTful call.\nSyntax\nâ\nQuickBuild can be resumed by issuing GET request to below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nresume\nThe response is of mime type\ntext/plain\nand the content is simply\nresumed\nif successful.\nSecurity\nâ\nYou will need to use http BASIC authentication to login as administrator to resume the system.\nDemo\nâ\nWe use\ncurl\nto demonstrate how to resume the system:\ncurl\n-\nu admin\n:\nadmin http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nresume\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Resume System",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "QuickBuild can be resumed by issuing GET request to below url: http://localhost:8810/rest/resume The response is of mime typetext/plainand the content is simplyresumedif successful."
      },
      {
        "header": "Securityâ",
        "content": "You will need to use http BASIC authentication to login as administrator to resume the system."
      },
      {
        "header": "Demoâ",
        "content": "We usecurlto demonstrate how to resume the system: curl-u admin:admin http://localhost:8810/rest/resume"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Check+System+Pause+Information",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Check+System+Pause+Information"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Check+System+Pause+Information",
    "title": "Check System Pause Information",
    "breadcrumb": [
      "",
      "Developer's Guide",
      "RESTful API"
    ],
    "full_text": "Developer's Guide\nRESTful API\nCheck System Pause Information\nVersion: QB14\nOn this page\nCheck System Pause Information\nGet system pause information including pause reason.\nSyntax\nâ\nSystem pause information can be fetched by issuing GET request to below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\npaused\nThe response is of mime type\ntext/xml\nand the content is xml representation of the system pause object if system is paused. Http status code 204 (no content) will be returned if system is not paused.\nSecurity\nâ\nAny one including anonymous user can check the system pause information.\nDemo\nâ\nWe use\ncurl\nto demonstrate how to get system pause information:\ncurl http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\npaused\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Check System Pause Information",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "System pause information can be fetched by issuing GET request to below url: http://localhost:8810/rest/paused The response is of mime typetext/xmland the content is xml representation of the system pause object if system is paused. Http status code 204 (no content) will be returned if system is not paused."
      },
      {
        "header": "Securityâ",
        "content": "Any one including anonymous user can check the system pause information."
      },
      {
        "header": "Demoâ",
        "content": "We usecurlto demonstrate how to get system pause information: curl http://localhost:8810/rest/paused"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
      "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier",
    "title": "Retrieve Object Identifier",
    "breadcrumb": [
      "",
      "Developer's Guide",
      "RESTful API"
    ],
    "full_text": "Developer's Guide\nRESTful API\nRetrieve Object Identifier\nVersion: QB14\nOn this page\nRetrieve Object Identifier\nMost of QuickBuild RESTful API relies on identifier of the object, which can be retrieved with the id service explained here.\nGet configuration id by path\nâ\nSyntax\nâ\nConfiguration id can be retrieved by path name using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nids\n?\nconfiguration_path\n=\n<\nconfiguration path name\n>\nHere\n<configuration path name>\nrepresents full path of a configuration. The response is of mime type\ntext/plain\nand the content is string representation of configuration id. Status code 204 (No Content) will be returned if configuration is not found.\nSecurity\nâ\nAny user including anonymous can use this service.\nGet resource id by name\nâ\nwarning\nThis feature is available since 6.1.35\nSyntax\nâ\nResource id can be retrieved by name using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nids\n?\nresource_name\n=\n<\nresource name\n>\nHere\n<resource name>\nrepresents name of a resource. The response is of mime type\ntext/plain\nand the content is string representation of resource id. Status code 204 (No Content) will be returned if resource is not found.\nSecurity\nâ\nAny user including anonymous can use this service.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get id of configuration\nroot/test\n:\ncurl http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nids\n?\nconfiguration_path\n=\nroot\n/\ntest\nGet user id by name\nâ\nSyntax\nâ\nUser id can be retrieved by user name using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nids\n?\nuser_name\n=\n<\nuser name\n>\nHere\n<user name>\nrepresents name of a QuickBuild user. The response is of mime type\ntext/plain\nand the content is string representation of user id. Status code 204 (No Content) will be returned if user is not found.\nSecurity\nâ\nAny user including anonymous can use this service.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get id of user\nrobin\n:\ncurl http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nids\n?\nuser_name\n=\nrobin\nGet group id by name\nâ\nSyntax\nâ\nGroup id can be retrieved by group name using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nids\n?\ngroup_name\n=\n<\ngroup name\n>\nHere\n<group name>\nrepresents name of a QuickBuild group. The response is of mime type\ntext/plain\nand the content is string representation of group id. Status code 204 (No Content) will be returned if group is not found.\nSecurity\nâ\nAny user including anonymous can use this service.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get id of group\ndevelopers\n:\ncurl http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nids\n?\ngroup_name\n=\ndevelopers\nGet queue id by name\nâ\nSyntax\nâ\nQueue id can be retrieved by queue name using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nids\n?\nqueue_name\n=\n<\nqueue name\n>\nHere\n<queue name>\nrepresents name of a QuickBuild queue. The response is of mime type\ntext/plain\nand the content is string representation of queue id. Status code 204 (No Content) will be returned if queue is not found.\nSecurity\nâ\nAny user including anonymous can use this service.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get id of queue\ndefault\n:\ncurl http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nids\n?\nqueue_name\n=\ndefault\nGet build id by request id\nâ\nSyntax\nâ\nBuild id can be retrieved by request id using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nids\n?\nrequest_id\n=\n<\nrequest id\n>\nHere\n<request id>\nrepresents id of a build request. The response is of mime type\ntext/plain\nand the content is string representation of build id. Status code 204 (No Content) will be returned if build is not generated yet.\nSecurity\nâ\nAny user including anonymous can use this service.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get build id of request\n0136ed89-d47f-4307-8e69-c8535fae0e84\n:\ncurl http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nids\n?\nrequest_id\n=\n0136\ned89\n-\nd47f\n-\n4307\n-\n8e69\n-\nc8535fae0e84\nGet build id by build name\nâ\nSyntax\nâ\nBuild id can be retrieved by\nbuild name\nusing http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nids\n?\nbuild_name\n=\n<\nbuild name\n>\nHere\n<build name>\nrepresents\nname of a build\n. The response is of mime type\ntext/plain\nand the content is string representation of build id. Status code 204 (No Content) will be returned if build of the name is not found.\nSecurity\nâ\nAny user including anonymous can use this service.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get id of latest build in configuration with id\n1\n:\ncurl http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nids\n?\nbuild_name\n=\n1.l\natest\nGet dashboard id by dashboard fqn (fully qualified name)\nâ\nSyntax\nâ\nDashboard id can be retrieved by dashboard fqn using http GET method through below url:\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nids\n?\ndashboard_fqn\n=\n<\ndashboard fqn\n>\n<dashboard fqn>\nis of the form\n<user id>.<dashboard name>\n. The response is of mime type\ntext/plain\nand the content is string representation of dashboard id. Status code 204 (No Content) will be returned if dashboard of the fqn is not found.\nSecurity\nâ\nAny user including anonymous can use this service.\nDemo\nâ\nBelow\ncurl\ncommand demonstrates how to get id of dashboard\nproject1\nbelonging to user with id\n1\n:\ncurl http\n:\n/\n/\nlocalhost\n:\n8810\n/\nrest\n/\nids\n?\ndashboard_fqn\n=\n1.\nproject1\nLast updated\non\nOct 24, 2024",
    "sections": [
      {
        "header": "Retrieve Object Identifier",
        "content": ""
      },
      {
        "header": "Get configuration id by pathâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Configuration id can be retrieved by path name using http GET method through below url: http://localhost:8810/rest/ids?configuration_path=<configuration path name> Here<configuration path name>represents full path of a configuration. The response is of mime typetext/plainand the content is string representation of configuration id. Status code 204 (No Content) will be returned if configuration is not found."
      },
      {
        "header": "Securityâ",
        "content": "Any user including anonymous can use this service."
      },
      {
        "header": "Get resource id by nameâ",
        "content": "warningThis feature is available since 6.1.35"
      },
      {
        "header": "Syntaxâ",
        "content": "Resource id can be retrieved by name using http GET method through below url: http://localhost:8810/rest/ids?resource_name=<resource name> Here<resource name>represents name of a resource. The response is of mime typetext/plainand the content is string representation of resource id. Status code 204 (No Content) will be returned if resource is not found."
      },
      {
        "header": "Securityâ",
        "content": "Any user including anonymous can use this service."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get id of configurationroot/test: curl http://localhost:8810/rest/ids?configuration_path=root/test"
      },
      {
        "header": "Get user id by nameâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "User id can be retrieved by user name using http GET method through below url: http://localhost:8810/rest/ids?user_name=<user name> Here<user name>represents name of a QuickBuild user. The response is of mime typetext/plainand the content is string representation of user id. Status code 204 (No Content) will be returned if user is not found."
      },
      {
        "header": "Securityâ",
        "content": "Any user including anonymous can use this service."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get id of userrobin: curl http://localhost:8810/rest/ids?user_name=robin"
      },
      {
        "header": "Get group id by nameâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Group id can be retrieved by group name using http GET method through below url: http://localhost:8810/rest/ids?group_name=<group name> Here<group name>represents name of a QuickBuild group. The response is of mime typetext/plainand the content is string representation of group id. Status code 204 (No Content) will be returned if group is not found."
      },
      {
        "header": "Securityâ",
        "content": "Any user including anonymous can use this service."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get id of groupdevelopers: curl http://localhost:8810/rest/ids?group_name=developers"
      },
      {
        "header": "Get queue id by nameâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Queue id can be retrieved by queue name using http GET method through below url: http://localhost:8810/rest/ids?queue_name=<queue name> Here<queue name>represents name of a QuickBuild queue. The response is of mime typetext/plainand the content is string representation of queue id. Status code 204 (No Content) will be returned if queue is not found."
      },
      {
        "header": "Securityâ",
        "content": "Any user including anonymous can use this service."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get id of queuedefault: curl http://localhost:8810/rest/ids?queue_name=default"
      },
      {
        "header": "Get build id by request idâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Build id can be retrieved by request id using http GET method through below url: http://localhost:8810/rest/ids?request_id=<request id> Here<request id>represents id of a build request. The response is of mime typetext/plainand the content is string representation of build id. Status code 204 (No Content) will be returned if build is not generated yet."
      },
      {
        "header": "Securityâ",
        "content": "Any user including anonymous can use this service."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get build id of request0136ed89-d47f-4307-8e69-c8535fae0e84: curl http://localhost:8810/rest/ids?request_id=0136ed89-d47f-4307-8e69-c8535fae0e84"
      },
      {
        "header": "Get build id by build nameâ",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Build id can be retrieved bybuild nameusing http GET method through below url: http://localhost:8810/rest/ids?build_name=<build name> Here<build name>representsname of a build. The response is of mime typetext/plainand the content is string representation of build id. Status code 204 (No Content) will be returned if build of the name is not found."
      },
      {
        "header": "Securityâ",
        "content": "Any user including anonymous can use this service."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get id of latest build in configuration with id1: curl http://localhost:8810/rest/ids?build_name=1.latest"
      },
      {
        "header": "Get dashboard id by dashboard fqn (fully qualified name)â",
        "content": ""
      },
      {
        "header": "Syntaxâ",
        "content": "Dashboard id can be retrieved by dashboard fqn using http GET method through below url: http://localhost:8810/rest/ids?dashboard_fqn=<dashboard fqn> <dashboard fqn>is of the form<user id>.<dashboard name>. The response is of mime typetext/plainand the content is string representation of dashboard id. Status code 204 (No Content) will be returned if dashboard of the fqn is not found."
      },
      {
        "header": "Securityâ",
        "content": "Any user including anonymous can use this service."
      },
      {
        "header": "Demoâ",
        "content": "Belowcurlcommand demonstrates how to get id of dashboardproject1belonging to user with id1: curl http://localhost:8810/rest/ids?dashboard_fqn=1.project1"
      }
    ],
    "links": []
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Bean+Editor",
    "title": "Bean Editor",
    "breadcrumb": [
      "",
      "Developer's Guide",
      "Develop Plugins",
      "Development References"
    ],
    "full_text": "Developer's Guide\nDevelop Plugins\nDevelopment References\nBean Editor\nVersion: QB14\nOn this page\nBean Editor\nWe use plugin setting to explain how to use the bean editor to generate plugin UI. As introduced in\nWrite a Simple Plugin\n, user can provide a plugin setting class by overriding\ngetPluginSettingClass()\nmethod in the plugin class. If provided, this class will be used by QuickBuild to generate plugin setting user interface. The setting will be saved as an instance of this class and can be retrieved later through\ngetPluginSetting()\nmethod when this plugin runs. Let's start with a very simple plugin setting class:\nA simple editor\nâ\npublic\nclass\nPluginSetting\n{\npublic\nenum\nFaithType\n{\nCHRISTIANISM\n,\nCATHOLICISM\n,\nBUDDHISM\n,\nISLAMISM\n,\nJUDAISM\n}\n;\nprivate\nString\nname\n;\nprivate\nFaithType\nfaith\n;\nprivate\nboolean\nmarried\n;\nprivate\nDate\nbirthday\n;\nprivate\nint\nworkingYears\n;\n@Editable\n(\norder\n=\n100\n,\ndescription\n=\n\"Specify the name\"\n)\npublic\nString\ngetName\n(\n)\n{\nreturn\nname\n;\n}\npublic\nvoid\nsetName\n(\nString\nname\n)\n{\nthis\n.\nname\n=\nname\n;\n}\n@Editable\n(\norder\n=\n200\n,\ndescription\n=\n\"Choose your faith\"\n)\npublic\nFaithType\ngetFaith\n(\n)\n{\nreturn\nfaith\n;\n}\npublic\nvoid\nsetFaith\n(\nFaithType\nfaith\n)\n{\nthis\n.\nfaith\n=\nfaith\n;\n}\n@Editable\n(\norder\n=\n300\n,\nname\n=\n\"Are You Married?\"\n)\npublic\nboolean\nisMarried\n(\n)\n{\nreturn\nmarried\n;\n}\npublic\nvoid\nsetMarried\n(\nboolean\nmarried\n)\n{\nthis\n.\nmarried\n=\nmarried\n;\n}\n@Editable\n(\norder\n=\n400\n)\npublic\nDate\ngetBirthday\n(\n)\n{\nreturn\nbirthday\n;\n}\npublic\nvoid\nsetBirthday\n(\nDate\nbirthday\n)\n{\nthis\n.\nbirthday\n=\nbirthday\n;\n}\n@Editable\n(\norder\n=\n500\n)\npublic\nint\ngetWorkingYears\n(\n)\n{\nreturn\nworkingYears\n;\n}\npublic\nvoid\nsetWorkingYears\n(\nint\nworkingYears\n)\n{\nthis\n.\nworkingYears\n=\nworkingYears\n;\n}\n}\nBy specifying the\n@Editable\nannotation for getter method, that property will be editable with user interface. The generated interface to edit this plugin setting looks as following:\nPlease note:\nThe bean for which the editor is generated must have a\ndefault constructor.\norder\nattribute need to be specified for\n@Editable\nannotation to make sure that properties are displayed in the correct order.\nThe\nname\nand\ndescription\nattribute of the\n@Editable\nannotation is optional.\nName\nattribute is used to specify the display name of the property and\ndescription\nis used to specify the description of this property which will be displayed when a user hovers the mouse over the question mark icon next to the the property name in the user interface.\nValidation annotations can be applied to the properties in order to put constraint on the values of the certain properties. Refer to Bean Validator for details.\nSome helper annotation can be added to specify how the property should be edited. For example:\n@Editabel\n(\norder\n=\n100\n,\ndescription\n=\n\"Specify the name\"\n)\n@ChoiceProvider\n(\n\"getAvailableNames\"\n)\n@Multiline\n(\nlines\n=\n8\n)\npublic\nString\ngetName\n(\n)\n{\nReturn\nname\n;\n}\nprivate\nList\n<\nString\n>\ngetAvailableNames\n(\n)\n{\nreturn\nArrays\n.\nasList\n(\nnew\nString\n[\n]\n{\n\"Alvin\"\n,\n\"robin\"\n}\n)\n;\n}\nBy specifying\n@Multiline\nannotation for the name property, the editor for the name property will be displayed as textarea with specified number of rows.\nBy specifying\n@ChoiceProvider\nfor the name property, the editor for the name property will have a dropdown icon next to the input box, to help user to choose from the set of predefined values of this property. The predefined values are provided by calling a method specified as\nvalue\nattribute of the\n@ChoiceProvider\nannotation.\nSome other helper annotations are:\n@Password\n: by specifying this annotation, the property will be displayed as a password field.\n@Color\n: by specifying this annotation, a color picker will be displayed next to the input box, and the input value will be validated against color formats, in the form of\nrrggbb\n.\nList editor\nâ\nQuickBuild editor is able to generate user interface to edit list if the list element is of the same type. For example in the above plugin, we add a new property of type List to this class as follows:\npublic\nclass\nPluginSetting\n{\n.\n.\n.\nprivate\nList\n<\nDog\n>\ndogs\n;\n.\n.\n.\n@Editable\n(\norder\n=\n600\n)\npublic\nList\ngetDogs\n(\n)\n{\nreturn\ndogs\n;\n}\npublic\nvoid\nsetDogs\n(\nList\n<\nDog\n>\ndogs\n)\n{\nthis\n.\ndogs\n=\ndogs\n;\n}\n}\nAnd the Dog bean is defined as:\npublic\nclass\nDog\n{\npublic\nenum\nDogType\n{\nHUNTAWAY\n,\nMASTIFF\n,\nCHOWCHOW\n,\nMALAMUTE\n}\n;\nprivate\nString\nname\n;\nprivate\nint\nage\n;\nprivate\nDogType\ntype\n;\n@Editable\n(\norder\n=\n100\n)\npublic\nString\ngetName\n(\n)\n{\nreturn\nname\n;\n}\npublic\nvoid\nsetName\n(\nString\nname\n)\n{\nthis\n.\nname\n=\nname\n;\n}\n@Editable\n(\norder\n=\n200\n)\npublic\nint\ngetAge\n(\n)\n{\nreturn\nage\n;\n}\npublic\nvoid\nsetAge\n(\nint\nage\n)\n{\nthis\n.\nage\n=\nage\n;\n}\n@Editable\n(\norder\n=\n300\n)\npublic\nDogType\ngetType\n(\n)\n{\nreturn\ntype\n;\n}\npublic\nvoid\nsetType\n(\nDogType\ntype\n)\n{\nthis\n.\ntype\n=\ntype\n;\n}\n}\nThe resulting edit page will look like:\nPlease note that:\nElement type of the list needs to be specified. There are two ways to specify the element type: by using Java generics or by specifying\nelementType\nattribute of the\n@Editable\nannotation. For Dogs bean above, we use the Java generics declaration, that is, the return type of\ngetDogs()\nmethod is\nList<Dog>\n. This tells QuickBuild that the element type of the list is\nDog\n. In cases you cannot specify Java generics return type (for example if you are overriding a method whose return type is List), you will need to specify the element type as follows:\nEditable\n(\norder\n=\n600\n,\nelementType\n=\nDog\n.\nclass\n)\nAll elements in the list should be of the same concrete type.\nYou may also attach Hibernate validator annotations to the list, for example you may attach\n@Size\nannotation to the\ngetDogs()\nmethod to limit the list size.\nPolymorphic editor\nâ\nQuickBuild editor is able to generate user interface to edit polymorphic properties. For example, for the plugin setting class above:\npublic\nclass\nPluginSetting\n{\n.\n.\n.\nPrivate\nVehicle\nvehicle\n;\n.\n.\n.\n@Editable\n(\norder\n=\n700\n)\npublic\nVehicle\ngetVehicle\n(\n)\n{\nreturn\nvehicle\n;\n}\npublic\nvoid\nsetVehicle\n(\nVehicle\nvehicle\n)\n{\nthis\n.\nvehicle\n=\nvehicle\n;\n}\n}\nVehicle class is defined as:\npublic\nabstract\nclass\nVehicle\n{\nprivate\nString\nmanufacturer\n;\nprivate\nint\nprice\n;\n@Editable\n(\norder\n=\n100\n)\n@NotEmpty\npublic\nString\ngetManufacturer\n(\n)\n{\nreturn\nmanufacturer\n;\n}\npublic\nvoid\nsetManufacturer\n(\nString\nmanufacturer\n)\n{\nthis\n.\nmanufacturer\n=\nmanufacturer\n;\n}\n@Editable\n(\norder\n=\n200\n)\n@Range\n(\nmin\n=\n100\n,\nmax\n=\n1000000\n)\npublic\nint\ngetPrice\n(\n)\n{\nreturn\nprice\n;\n}\npublic\nvoid\nsetPrice\n(\nint\nprice\n)\n{\nthis\n.\nprice\n=\nprice\n;\n}\n}\nand Vehicle class has two implementations subclasses in the same package as the Vehicle class: SUV and Car:\n@Editable\n(\nname\n=\n\"SUV\"\n)\npublic\nclass\nSUV\nextends\nVehicle\n{\nprivate\nint\nsize\n;\n@Editable\n(\norder\n=\n1000\n)\npublic\nint\ngetSize\n(\n)\n{\nreturn\nsize\n;\n}\npublic\nvoid\nsetSize\n(\nint\nsize\n)\n{\nthis\n.\nsize\n=\nsize\n;\n}\n}\n@Editable\n(\nname\n=\n\"Car\"\n)\npublic\nclass\nCar\nextends\nVehicle\n{\nprivate\nint\nmaxSpeed\n;\n@Editable\n(\norder\n=\n1000\n)\npublic\nint\ngetMaxSpeed\n(\n)\n{\nreturn\nmaxSpeed\n;\n}\npublic\nvoid\nsetMaxSpeed\n(\nint\nmaxSpeed\n)\n{\nthis\n.\nmaxSpeed\n=\nmaxSpeed\n;\n}\n}\nThen the user interface for the plugin will be:\nPlease note that:\nIn order to get the polymorphic editor to work, the return type of the getter method needs to be an abstract class or an interface.\nThe implementation types can be specified\nby elementTypes\nattribute of the Editable annotation. If this attribute does not exist, QuickBuild will load all implementation classes from the package where the abstract class (or interface) resides in.\nThe\n@Editable\nannotation applied to the implementation class provides display name of the implementation.\nWhen you specify\n@Edtiable\nannotation for the properties defined in\nCar\nand\nSUV\nclasses, the order attribute is starts from 1000. This is to make sure that the properties defined in these implementation classes come after the properties defined in the abstract class.\nEdit variables\nâ\nVariables are widely used in QuickBuild to add flexibility. To define variables:\npublic\nclass\nPluginSetting\n{\n.\n.\n.\nprivate\nList\n<\nVariable\n>\nattributes\n;\n.\n.\n.\n@Editable\n(\norder\n=\n800\n,\ndescription\n=\n\"Specify some attributes\"\n)\npublic\nList\n<\nVariable\n>\ngetAttributes\n{\nreturn\nattributes\n;\n}\npublic\nvoid\nsetAttributes\n(\nList\n<\nVariable\n>\nattributes\n)\n{\nthis\n.\nattributes\n=\nattributes\n;\n}\n}\nThe editor recognizes a variable definition automatically and provides following interface to define variables (the last property\nattributes\n):\nExpression edit helper\nâ\nSometimes the bean defines property that expects expressions. Proving some predefined expressions will be convenient for the user. The annotation PresetExpressions serves this purpose. For example:\npublic\nclass\nPluinSetting\n{\n.\n.\n.\nprivate\nString\nrunCondition\n;\n.\n.\n.\n@Editable\n(\norder\n=\n600\n,\nname\n=\n\"Condition to Run\"\n)\n@Expressions\n(\n{\n\"always run\"\n,\n\"true\"\n,\n\"do not run\"\n,\n\"false\"\n}\n)\npublic\nString\ngetRunCondition\n(\n)\n{\nreturn\nrunCondition\n;\n}\npublic\nvoid\nsetRunCondition\n(\nString\nrunCondition\n)\n{\nthis\n.\nrunCondition\n=\nrunCondition\n;\n}\n}\nThe generated user interface will be:\nAs you can see, the preset values provided\nby @PresetExpressions\nappears as a menu next to the input box. Menu items are presented with meaningful text, and selecting these menu items will set corresponding expression in the input box.\nSometimes the expressions cannot be hard-coded inside the annotation, if we want to provide expressions generated dynamically at runtime, for example an input box for users to enter a valid node address in the build grid. In this case, the\n@ExpressionProvider\nannotation can be used as follows:\npublic\nclass\nPluginSetting\n{\n.\n.\n.\nprivate\nString\nrunNode\n;\n.\n.\n.\n@Editable\n(\norder\n=\n700\n,\nname\n=\n\"Node Address to Run\"\n)\n@ExpressionProvider\n(\n\"getAvailableNodes\"\n)\npublic\nString\ngetRunNode\n(\n)\n{\nreturn\nrunNode\n;\n}\npublic\nvoid\nsetRunNode\n(\nString\nrunNode\n)\n{\nthis\n.\nrunNode\n=\nrunNode\n;\n}\nprivate\nMap\n<\nString\n,\nString\n>\ngetAvailableNodes\n(\n)\n{\nMap\n<\nString\n,\nString\n>\navailableNodes\n=\nnew\nLinkedHashMap\n<\nString\n,\nString\n>\n(\n)\n;\nCollection\n<\nBuildGridNode\n>\nallNodes\n=\nQuickbuild\n.\ngetInstance\n(\nBuildGrid\n.\nclass\n)\n.\ngetAllNodes\n(\n)\n;\nfor\n(\nBuildGridNode\nnode\n:\nallNodes\n)\n{\navailableNodes\n.\nput\n(\n\"node '\"\n+\nnode\n.\ngetAddress\n(\n)\n+\n\"'\"\n,\nnode\n.\ngetAddress\n(\n)\n)\n;\n}\nreturn\navailableNodes\n;\n}\n}\nAs the code demonstrates, the\n@ExpressionProvider\nannotation specifies a method in the bean, which QuickBuild can call to get the expressions associated with the menu and the generated user interface looks as follows:\nInput validation\nâ\nValidate single property\nYou may specify validation annotation(s) to the properties to put restraint on values of these properties. For example:\n@Editable\n(\norder\n=\n200\n,\ndescription\n=\n\"Specify the faith\"\n)\n@NotNull\npublic\nFaithType\ngetFaith\n(\n)\n{\nReturn\nfaith\n;\n}\n@Editable\n(\norder\n=\n500\n)\n@Range\n(\n0\n,\n100\n)\npublic\nint\ngetWorkingYears\n(\n)\n{\nreturn\nworkingYears\n;\n}\nThe validation annotations are the annotation validations defined in\nHibernate validation framework\n.\nBesides\nHibernate\nbased validation, QuickBuild also has a facility to validate properties mutually through the\nValidatable\ninterface.\nValidate multiple properties all together\nEnable scripting support\nâ\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Bean Editor",
        "content": ""
      },
      {
        "header": "A simple editorâ",
        "content": "publicclassPluginSetting{publicenumFaithType{CHRISTIANISM,CATHOLICISM,BUDDHISM,ISLAMISM,JUDAISM};privateStringname;privateFaithTypefaith;privatebooleanmarried;privateDatebirthday;privateintworkingYears;@Editable(order=100,description=\"Specify the name\")publicStringgetName(){returnname;}publicvoidsetName(Stringname){this.name=name;}@Editable(order=200,description=\"Choose your faith\")publicFaithTypegetFaith(){returnfaith;}publicvoidsetFaith(FaithTypefaith){this.faith=faith;}@Editable(order=300,name=\"Are You Married?\")publicbooleanisMarried(){returnmarried;}publicvoidsetMarried(booleanmarried){this.married=married;}@Editable(order=400)publicDategetBirthday(){returnbirthday;}publicvoidsetBirthday(Datebirthday){this.birthday=birthday;}@Editable(order=500)publicintgetWorkingYears(){returnworkingYears;}publicvoidsetWorkingYears(intworkingYears){this.workingYears=workingYears;}} By specifying the@Editableannotation for getter method, that property will be editable with user interface. The generated interface to edit this plugin setting looks as following: Please note: The bean for which the editor is generated must have adefault constructor.orderattribute need to be specified for@Editableannotation to make sure that properties are displayed in the correct order.Thenameanddescriptionattribute of the@Editableannotation is optional.Nameattribute is used to specify the display name of the property anddescriptionis used to specify the description of this property which will be displayed when a user hovers the mouse over the question mark icon next to the the property name in the user interface.Validation annotations can be applied to the properties in order to put constraint on the values of the certain properties. Refer to Bean Validator for details.Some helper annotation can be added to specify how the property should be edited. For example:@Editabel(order=100,description=\"Specify the name\")@ChoiceProvider(\"getAvailableNames\")@Multiline(lines=8)publicStringgetName(){Returnname;}privateList<String>getAvailableNames(){returnArrays.asList(newString[]{\"Alvin\",\"robin\"});}By specifying@Multilineannotation for the name property, the editor for the name property will be displayed as textarea with specified number of rows.By specifying@ChoiceProviderfor the name property, the editor for the name property will have a dropdown icon next to the input box, to help user to choose from the set of predefined values of this property. The predefined values are provided by calling a method specified asvalueattribute of the@ChoiceProviderannotation.Some other helper annotations are:@Password: by specifying this annotation, the property will be displayed as a password field.@Color: by specifying this annotation, a color picker will be displayed next to the input box, and the input value will be validated against color formats, in the form ofrrggbb."
      },
      {
        "header": "List editorâ",
        "content": "QuickBuild editor is able to generate user interface to edit list if the list element is of the same type. For example in the above plugin, we add a new property of type List to this class as follows: publicclassPluginSetting{...privateList<Dog>dogs;...@Editable(order=600)publicListgetDogs(){returndogs;}publicvoidsetDogs(List<Dog>dogs){this.dogs=dogs;}} And the Dog bean is defined as: publicclassDog{publicenumDogType{HUNTAWAY,MASTIFF,CHOWCHOW,MALAMUTE};privateStringname;privateintage;privateDogTypetype;@Editable(order=100)publicStringgetName(){returnname;}publicvoidsetName(Stringname){this.name=name;}@Editable(order=200)publicintgetAge(){returnage;}publicvoidsetAge(intage){this.age=age;}@Editable(order=300)publicDogTypegetType(){returntype;}publicvoidsetType(DogTypetype){this.type=type;}} The resulting edit page will look like: Please note that: Element type of the list needs to be specified. There are two ways to specify the element type: by using Java generics or by specifyingelementTypeattribute of the@Editableannotation. For Dogs bean above, we use the Java generics declaration, that is, the return type ofgetDogs()method isList<Dog>. This tells QuickBuild that the element type of the list isDog. In cases you cannot specify Java generics return type (for example if you are overriding a method whose return type is List), you will need to specify the element type as follows:Editable(order=600,elementType=Dog.class)All elements in the list should be of the same concrete type.You may also attach Hibernate validator annotations to the list, for example you may attach@Sizeannotation to thegetDogs()method to limit the list size."
      },
      {
        "header": "Polymorphic editorâ",
        "content": "QuickBuild editor is able to generate user interface to edit polymorphic properties. For example, for the plugin setting class above: publicclassPluginSetting{...PrivateVehiclevehicle;...@Editable(order=700)publicVehiclegetVehicle(){returnvehicle;}publicvoidsetVehicle(Vehiclevehicle){this.vehicle=vehicle;}} Vehicle class is defined as: publicabstractclassVehicle{privateStringmanufacturer;privateintprice;@Editable(order=100)@NotEmptypublicStringgetManufacturer(){returnmanufacturer;}publicvoidsetManufacturer(Stringmanufacturer){this.manufacturer=manufacturer;}@Editable(order=200)@Range(min=100,max=1000000)publicintgetPrice(){returnprice;}publicvoidsetPrice(intprice){this.price=price;}} and Vehicle class has two implementations subclasses in the same package as the Vehicle class: SUV and Car: @Editable(name=\"SUV\")publicclassSUVextendsVehicle{privateintsize;@Editable(order=1000)publicintgetSize(){returnsize;}publicvoidsetSize(intsize){this.size=size;}}@Editable(name=\"Car\")publicclassCarextendsVehicle{privateintmaxSpeed;@Editable(order=1000)publicintgetMaxSpeed(){returnmaxSpeed;}publicvoidsetMaxSpeed(intmaxSpeed){this.maxSpeed=maxSpeed;}} Then the user interface for the plugin will be:Please note that: In order to get the polymorphic editor to work, the return type of the getter method needs to be an abstract class or an interface.The implementation types can be specifiedby elementTypesattribute of the Editable annotation. If this attribute does not exist, QuickBuild will load all implementation classes from the package where the abstract class (or interface) resides in.The@Editableannotation applied to the implementation class provides display name of the implementation.When you specify@Edtiableannotation for the properties defined inCarandSUVclasses, the order attribute is starts from 1000. This is to make sure that the properties defined in these implementation classes come after the properties defined in the abstract class."
      },
      {
        "header": "Edit variablesâ",
        "content": "Variables are widely used in QuickBuild to add flexibility. To define variables: publicclassPluginSetting{...privateList<Variable>attributes;...@Editable(order=800,description=\"Specify some attributes\")publicList<Variable>getAttributes{returnattributes;}publicvoidsetAttributes(List<Variable>attributes){this.attributes=attributes;}} The editor recognizes a variable definition automatically and provides following interface to define variables (the last propertyattributes):"
      },
      {
        "header": "Expression edit helperâ",
        "content": "Sometimes the bean defines property that expects expressions. Proving some predefined expressions will be convenient for the user. The annotation PresetExpressions serves this purpose. For example: publicclassPluinSetting{...privateStringrunCondition;...@Editable(order=600,name=\"Condition to Run\")@Expressions({\"always run\",\"true\",\"do not run\",\"false\"})publicStringgetRunCondition(){returnrunCondition;}publicvoidsetRunCondition(StringrunCondition){this.runCondition=runCondition;}} The generated user interface will be: As you can see, the preset values providedby @PresetExpressionsappears as a menu next to the input box. Menu items are presented with meaningful text, and selecting these menu items will set corresponding expression in the input box. Sometimes the expressions cannot be hard-coded inside the annotation, if we want to provide expressions generated dynamically at runtime, for example an input box for users to enter a valid node address in the build grid. In this case, the@ExpressionProviderannotation can be used as follows: publicclassPluginSetting{...privateStringrunNode;...@Editable(order=700,name=\"Node Address to Run\")@ExpressionProvider(\"getAvailableNodes\")publicStringgetRunNode(){returnrunNode;}publicvoidsetRunNode(StringrunNode){this.runNode=runNode;}privateMap<String,String>getAvailableNodes(){Map<String,String>availableNodes=newLinkedHashMap<String,String>();Collection<BuildGridNode>allNodes=Quickbuild.getInstance(BuildGrid.class).getAllNodes();for(BuildGridNodenode:allNodes){availableNodes.put(\"node '\"+node.getAddress()+\"'\",node.getAddress());}returnavailableNodes;}} As the code demonstrates, the@ExpressionProviderannotation specifies a method in the bean, which QuickBuild can call to get the expressions associated with the menu and the generated user interface looks as follows:"
      },
      {
        "header": "Input validationâ",
        "content": "Validate single property You may specify validation annotation(s) to the properties to put restraint on values of these properties. For example: @Editable(order=200,description=\"Specify the faith\")@NotNullpublicFaithTypegetFaith(){Returnfaith;}@Editable(order=500)@Range(0,100)publicintgetWorkingYears(){returnworkingYears;} The validation annotations are the annotation validations defined inHibernate validation framework. BesidesHibernatebased validation, QuickBuild also has a facility to validate properties mutually through theValidatableinterface. Validate multiple properties all together"
      },
      {
        "header": "Enable scripting supportâ",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Extension+Points",
      "https://wiki.pmease.com/display/QB14/Extension+Points"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Use+Version+Stored+in+Maven+POM",
    "title": "Use Version Stored in Maven POM",
    "breadcrumb": [
      "",
      "Build Setup Tutorials",
      "Control Build Versions"
    ],
    "full_text": "Build Setup Tutorials\nControl Build Versions\nUse Version Stored in Maven POM\nVersion: QB14\nOn this page\nUse Version Stored in Maven POM\nSituation\nâ\nWhen run a Maven build, instruct QuickBuild to use version stored in POM.\nDemonstration\nâ\nRun the\ndemo configuration\n. At start of the build, the version is taking from\nnext build version\nof the configuration, however when the maven build step finishes, build version will be set to\n1.1-SNAPSHOT\n, which is the same as stored in POM.\nResolution\nâ\nCheck\nstep definition of the demo configuration\n, the\nmaven build\nstep is defined with\nsync build version\noption checked. This tells QuickBuild to sync build version to the version stored in POM when this step finishes.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Use Version Stored in Maven POM",
        "content": ""
      },
      {
        "header": "Situationâ",
        "content": "When run a Maven build, instruct QuickBuild to use version stored in POM."
      },
      {
        "header": "Demonstrationâ",
        "content": "Run thedemo configuration. At start of the build, the version is taking fromnext build versionof the configuration, however when the maven build step finishes, build version will be set to1.1-SNAPSHOT, which is the same as stored in POM."
      },
      {
        "header": "Resolutionâ",
        "content": "Checkstep definition of the demo configuration, themaven buildstep is defined withsync build versionoption checked. This tells QuickBuild to sync build version to the version stored in POM when this step finishes."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Read+Version+from+File",
      "https://wiki.pmease.com/display/QB14/Control+Release+Candidate+and+Release+Version",
      "https://wiki.pmease.com/display/QB14/Include+SCM+Revision+in+Build+Version",
      "https://wiki.pmease.com/display/QB14/Prompt+for+Build+Version+when+Manually+Triggered",
      "https://wiki.pmease.com/display/QB14/Use+Same+Version+When+Promote+Builds",
      "https://wiki.pmease.com/display/QB14/Read+Version+from+File"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Read+Version+from+File",
    "title": "Read Version from File",
    "breadcrumb": [
      "",
      "Build Setup Tutorials",
      "Control Build Versions"
    ],
    "full_text": "Build Setup Tutorials\nControl Build Versions\nRead Version from File\nVersion: QB14\nOn this page\nRead Version from File\nSituation\nâ\nControl build version with a text file stored in SCM.\nDemonstration\nâ\nRun the\ndemo configuration\n.\nNavigate to\nworkspace area of the configuration\nand check content of version.txt. Version of the newly generated build will remain the same as content of this file.\nResolution\nâ\nCheck\ngeneral setting of the demo configuration\n, the next version is defined as below:\n$\n{\ngroovy\n:\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nutil\n.\nFileUtils\nFileUtils\n.\ncreateDir\n(\nconfiguration\n.\nworkspaceDir\n)\ndef repo\n=\nrepositories\n.\nget\n(\n\"repo\"\n)\nrepo\n.\ntakeSnapshot\n(\n)\nreturn\nrepo\n.\nsourceViewSupport\n.\nreadSourceAsString\n(\n\"build/version.txt\"\n)\n}\nThis tells QuickBuild to read content of file\n/demos/componentA/trunk/version.txt\nfrom SCM repository and return it as version of next build.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Read Version from File",
        "content": ""
      },
      {
        "header": "Situationâ",
        "content": "Control build version with a text file stored in SCM."
      },
      {
        "header": "Demonstrationâ",
        "content": "Run thedemo configuration.Navigate toworkspace area of the configurationand check content of version.txt. Version of the newly generated build will remain the same as content of this file."
      },
      {
        "header": "Resolutionâ",
        "content": "Checkgeneral setting of the demo configuration, the next version is defined as below: ${groovy:importcom.pmease.quickbuild.util.FileUtilsFileUtils.createDir(configuration.workspaceDir)def repo=repositories.get(\"repo\")repo.takeSnapshot()returnrepo.sourceViewSupport.readSourceAsString(\"build/version.txt\")} This tells QuickBuild to read content of file/demos/componentA/trunk/version.txtfrom SCM repository and return it as version of next build."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Control+Release+Candidate+and+Release+Version",
      "https://wiki.pmease.com/display/QB14/Include+SCM+Revision+in+Build+Version",
      "https://wiki.pmease.com/display/QB14/Prompt+for+Build+Version+when+Manually+Triggered",
      "https://wiki.pmease.com/display/QB14/Use+Same+Version+When+Promote+Builds",
      "https://wiki.pmease.com/display/QB14/Control+Release+Candidate+and+Release+Version"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Control+Release+Candidate+and+Release+Version",
    "title": "Control Release Candidate and Release Version",
    "breadcrumb": [
      "",
      "Build Setup Tutorials",
      "Control Build Versions"
    ],
    "full_text": "Build Setup Tutorials\nControl Build Versions\nControl Release Candidate and Release Version\nVersion: QB14\nOn this page\nControl Release Candidate and Release Version\nSituation\nâ\nAssume we have:\nA release candidate configuration which is used to build release candidates of your software.\nA release configuration which is used to release your software.\nNow we want to control build version of these two configurations so that:\nVersion of builds in release candiciate configuration is composed of the release part and the candidate part, with the release part using the version to be released, and candiciate part increasing automatically for each build. For example, we are going to release\n1.0\n, and candidate builds should use versions in form of:\n1.0-rc1\n,\n1.0-rc2\n,\n1.0-rc3\n, ...\nWhen a release candidate build is promoted as release build, the release version should be automatically increased, and the candidate version should be reset to\n1\n. For example, after\n1.0\nis released, new builds in release candidate configuration should use versions in form of:\n1.1-rc1\n,\n1.1-rc2\n,\n1.1-rc3\n, ...\nDemonstration\nâ\nClick here\nand press the run button to generate new release candidate builds. The\nrc\npart of the build version will be automatically increased.\nAfter the build finishes, switch to\nlatest release candidate build\n, and click the promote button to promote a release candidate build as release build. A new release build will be generated in the\nrelease configuration\n.\nReturn back to\nrelease candidate configuration\nand run it to generate a new build. The\nrelease\npart of the new build version will take value of next release number, and the\nrc\npart will reset to\n1\n.\nResolution\nâ\nDefine three variables in\nvariable setting of project level configuration\n, respectively:\nrc\nThis variable is used control\nrc\npart of release candidate builds.\nmajor\nThis variable is used to control major part of the release version.\nminor\nThis variable is used to control minor part of the release version.\nDefine next build version in\ngeneral setting of release candidate configuration\nlike below:\n$\n{\nvars\n.\nget\n(\n\"major\"\n)\n}\n.\n$\n{\nvars\n.\nget\n(\n\"minor\"\n)\n}\n-\nrc$\n{\nvars\n.\nget\n(\n\"rc\"\n)\n.\nincrease\n(\n)\n}\nThis tells QuickBuild to use current value of variable\nmajor\n,\nminor\n, and\nrc\nto construct release candidate build version, and increase the\nrc\nvariable by one after usage.\nDefine next build version in\ngeneral setting of release configuration\nlike below:\n$\n{\nvars\n.\nget\n(\n\"major\"\n)\n}\n.\n$\n{\nvars\n.\nget\n(\n\"minor\"\n)\n.\nincrease\n(\n)\n}\nThis tells QuickBuild to use current value of variable\nmajor\nand\nminor\nto construct release build version.\nConfigure a step in\nstep setting of release configuration\nto execute below script:\nvars\n.\nget\n(\n\"rc\"\n)\n.\nsetValue\n(\n1\n)\nThis script is executed by the master step in the demo site for simpliticy reasons, and it tells QuickBuild to reset\nrc\nvariable to\n1\nwhen a new release is generated.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Control Release Candidate and Release Version",
        "content": ""
      },
      {
        "header": "Situationâ",
        "content": "Assume we have: A release candidate configuration which is used to build release candidates of your software.A release configuration which is used to release your software. Now we want to control build version of these two configurations so that: Version of builds in release candiciate configuration is composed of the release part and the candidate part, with the release part using the version to be released, and candiciate part increasing automatically for each build. For example, we are going to release1.0, and candidate builds should use versions in form of:1.0-rc1,1.0-rc2,1.0-rc3, ...When a release candidate build is promoted as release build, the release version should be automatically increased, and the candidate version should be reset to1. For example, after1.0is released, new builds in release candidate configuration should use versions in form of:1.1-rc1,1.1-rc2,1.1-rc3, ..."
      },
      {
        "header": "Demonstrationâ",
        "content": "Click hereand press the run button to generate new release candidate builds. Thercpart of the build version will be automatically increased.After the build finishes, switch tolatest release candidate build, and click the promote button to promote a release candidate build as release build. A new release build will be generated in therelease configuration.Return back torelease candidate configurationand run it to generate a new build. Thereleasepart of the new build version will take value of next release number, and thercpart will reset to1."
      },
      {
        "header": "Resolutionâ",
        "content": "Define three variables invariable setting of project level configuration, respectively:rcThis variable is used controlrcpart of release candidate builds.majorThis variable is used to control major part of the release version.minorThis variable is used to control minor part of the release version.Define next build version ingeneral setting of release candidate configurationlike below:${vars.get(\"major\")}.${vars.get(\"minor\")}-rc${vars.get(\"rc\").increase()}This tells QuickBuild to use current value of variablemajor,minor, andrcto construct release candidate build version, and increase thercvariable by one after usage.Define next build version ingeneral setting of release configurationlike below:${vars.get(\"major\")}.${vars.get(\"minor\").increase()}This tells QuickBuild to use current value of variablemajorandminorto construct release build version.Configure a step instep setting of release configurationto execute below script:vars.get(\"rc\").setValue(1)This script is executed by the master step in the demo site for simpliticy reasons, and it tells QuickBuild to resetrcvariable to1when a new release is generated."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Include+SCM+Revision+in+Build+Version",
      "https://wiki.pmease.com/display/QB14/Prompt+for+Build+Version+when+Manually+Triggered",
      "https://wiki.pmease.com/display/QB14/Use+Same+Version+When+Promote+Builds",
      "https://wiki.pmease.com/display/QB14/Include+SCM+Revision+in+Build+Version"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Include+SCM+Revision+in+Build+Version",
    "title": "Include SCM Revision in Build Version",
    "breadcrumb": [
      "",
      "Build Setup Tutorials",
      "Control Build Versions"
    ],
    "full_text": "Build Setup Tutorials\nControl Build Versions\nInclude SCM Revision in Build Version\nVersion: QB14\nOn this page\nInclude SCM Revision in Build Version\nSituation\nâ\nInclude SCM revision of the source code used for checkout into version of generated build.\nDemonstration\nâ\nVisit the\ndemo configuration\n, and trigger a build. Version of the newly generated build will include the SCM revision corresponding to the code being checked out.\nResolution\nâ\nVisit\ngeneral setting of the demo configuration\n. The property\nnext build version\nis defined as:\n4.2\n.\n$\n{\nvars\n.\nget\n(\n\"patch\"\n)\n.\nincrease\n(\n)\n}\n-\ncommit\n-\n$\n{\nrepositories\n.\nget\n(\n\"commons-collections\"\n)\n.\nrevision\n.\nvalue\n.\nsubstring\n(\n0\n,\n6\n)\n}\nThere are two expressions included in the version:\nThe first expression increases the patch part of the version.\nThe second expression retrieves current revision of repository\ncommons-collections\n, which is used to check out source code for the build.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Include SCM Revision in Build Version",
        "content": ""
      },
      {
        "header": "Situationâ",
        "content": "Include SCM revision of the source code used for checkout into version of generated build."
      },
      {
        "header": "Demonstrationâ",
        "content": "Visit thedemo configuration, and trigger a build. Version of the newly generated build will include the SCM revision corresponding to the code being checked out."
      },
      {
        "header": "Resolutionâ",
        "content": "Visitgeneral setting of the demo configuration. The propertynext build versionis defined as: 4.2.${vars.get(\"patch\").increase()}-commit-${repositories.get(\"commons-collections\").revision.value.substring(0,6)} There are two expressions included in the version: The first expression increases the patch part of the version.The second expression retrieves current revision of repositorycommons-collections, which is used to check out source code for the build."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Prompt+for+Build+Version+when+Manually+Triggered",
      "https://wiki.pmease.com/display/QB14/Use+Same+Version+When+Promote+Builds",
      "https://wiki.pmease.com/display/QB14/Prompt+for+Build+Version+when+Manually+Triggered"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Prompt+for+Build+Version+when+Manually+Triggered",
    "title": "Prompt for Build Version when Manually Triggered",
    "breadcrumb": [
      "",
      "Build Setup Tutorials",
      "Control Build Versions"
    ],
    "full_text": "Build Setup Tutorials\nControl Build Versions\nPrompt for Build Version when Manually Triggered\nVersion: QB14\nOn this page\nPrompt for Build Version when Manually Triggered\nSituation\nâ\nPrompt for build version when a configuration is manually triggered.\nDemonstration\nâ\nClick here\nand press the run button, QuickBuild will present a build option window asking for version of the build. Click \"OK\" to continue, and the specified value will be used as version of the newly generated build (please wait a short while before the new build appears).\nResolution\nâ\nEdit\ngeneral setting of the release configuration\n:\nDefine next build version as\n${vars.get(\"version\")}\nThis tells QuickBuild to use value of variable\nversion\nas version of the new build. Please note that the variable name can be arbitrary as long as the same name is defined below.\nAdd a variable named\nversion\nand specify the prompt setting as\nprompt as text input\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Prompt for Build Version when Manually Triggered",
        "content": ""
      },
      {
        "header": "Situationâ",
        "content": "Prompt for build version when a configuration is manually triggered."
      },
      {
        "header": "Demonstrationâ",
        "content": "Click hereand press the run button, QuickBuild will present a build option window asking for version of the build. Click \"OK\" to continue, and the specified value will be used as version of the newly generated build (please wait a short while before the new build appears)."
      },
      {
        "header": "Resolutionâ",
        "content": "Editgeneral setting of the release configuration: Define next build version as${vars.get(\"version\")}This tells QuickBuild to use value of variableversionas version of the new build. Please note that the variable name can be arbitrary as long as the same name is defined below.Add a variable namedversionand specify the prompt setting asprompt as text input"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Use+Same+Version+When+Promote+Builds",
      "https://wiki.pmease.com/display/QB14/Use+Same+Version+When+Promote+Builds"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Use+Same+Version+When+Promote+Builds",
    "title": "Use Same Version When Promote Builds",
    "breadcrumb": [
      "",
      "Build Setup Tutorials",
      "Control Build Versions"
    ],
    "full_text": "Build Setup Tutorials\nControl Build Versions\nUse Same Version When Promote Builds\nVersion: QB14\nOn this page\nUse Same Version When Promote Builds\nSituation\nâ\nDuring a promotion process, make sure that the new build has the same version as the source build.\nDemonstration\nâ\nVisit\nlatest build of QA configuration\n, and click the promote button.\nWait a short while, and refresh the page, a new build will be generated as result of the promotion, and the version will be the same as the source build.\nResolution\nâ\nVisit\npromotion setting of QA configuration\n. A variable named\nversion\nis defined for promotion\nrelease\nwith the value\n${build.version}\n. This tells QuickBuild to pass variable\nversion\nto the release configuration using version of current build during the promotion process.\nVisit\ngeneral setting of Release configuration\n. The property\nnext build version\nis defined as\n${vars.get(\"version\")}\n. This tells QuickBuild to use value of variable as version of the build being generated during promotion process.\ninfo\nThe variable name does not need to be\nversion\n. You may use any other variable name as long as they are consistent in step 1 and step 2.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Use Same Version When Promote Builds",
        "content": ""
      },
      {
        "header": "Situationâ",
        "content": "During a promotion process, make sure that the new build has the same version as the source build."
      },
      {
        "header": "Demonstrationâ",
        "content": "Visitlatest build of QA configuration, and click the promote button.Wait a short while, and refresh the page, a new build will be generated as result of the promotion, and the version will be the same as the source build."
      },
      {
        "header": "Resolutionâ",
        "content": "Visitpromotion setting of QA configuration. A variable namedversionis defined for promotionreleasewith the value${build.version}. This tells QuickBuild to pass variableversionto the release configuration using version of current build during the promotion process.Visitgeneral setting of Release configuration. The propertynext build versionis defined as${vars.get(\"version\")}. This tells QuickBuild to use value of variable as version of the build being generated during promotion process. infoThe variable name does not need to beversion. You may use any other variable name as long as they are consistent in step 1 and step 2."
      }
    ],
    "links": []
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Set+up+Builds+for+Multiple+Branches",
    "title": "Set up Builds for Multiple Branches",
    "breadcrumb": [
      "",
      "Build Setup Tutorials",
      "Inherit and Override"
    ],
    "full_text": "Build Setup Tutorials\nInherit and Override\nSet up Builds for Multiple Branches\nVersion: QB14\nOn this page\nSet up Builds for Multiple Branches\nSituation\nâ\nSet up multiple configurations to build multiple branches of a project. Common settings of these branch configurations such as SCM and step definitions should be shared to reduce build setup work and maintenance headache.\nResolution\nâ\nNavigate to the\ndemo project\n. It has three child configurations:\nConfiguration\n1.x\nbuilds against the 1.0 branch.\nConfiguration\n2.x\nbuilds against the 2.0 branch.\nConfiguration\n3.x\nbuilds against the 3.0 branch.\nAll these child configurations inherit repository and step definitions from the parent configuration. However the property\nUrl to Checkout\nof\nrepository definition in parent configuration\nis parameterized as below:\nhttps\n:\n/\n/\nsvn\n.\npmease\n.\ncom\n/\ndemos\n/\ncomponentA\n/\nbranches\n/\n$\n{\nvars\n.\nget\n(\n\"branch\"\n)\n}\nThis tells QuickBuild to use value of variable\nbranch\nto construct the url at checkout time. This variable is defined in each child configuration to reflect the real branch to build against. For example, for configuration\n1.x\n, the branch variable is defined as\n1.0\nat\nvariable setting of the configuration\n.\nWith this setup, common settings of these branches are maintained at the parent configuration, while different branch configurations can still build against different branches. Modifications of the common settings will affect all child branch configurations.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Set up Builds for Multiple Branches",
        "content": ""
      },
      {
        "header": "Situationâ",
        "content": "Set up multiple configurations to build multiple branches of a project. Common settings of these branch configurations such as SCM and step definitions should be shared to reduce build setup work and maintenance headache."
      },
      {
        "header": "Resolutionâ",
        "content": "Navigate to thedemo project. It has three child configurations: Configuration1.xbuilds against the 1.0 branch.Configuration2.xbuilds against the 2.0 branch.Configuration3.xbuilds against the 3.0 branch. All these child configurations inherit repository and step definitions from the parent configuration. However the propertyUrl to Checkoutofrepository definition in parent configurationis parameterized as below: https://svn.pmease.com/demos/componentA/branches/${vars.get(\"branch\")} This tells QuickBuild to use value of variablebranchto construct the url at checkout time. This variable is defined in each child configuration to reflect the real branch to build against. For example, for configuration1.x, the branch variable is defined as1.0atvariable setting of the configuration. With this setup, common settings of these branches are maintained at the parent configuration, while different branch configurations can still build against different branches. Modifications of the common settings will affect all child branch configurations."
      }
    ],
    "links": []
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Build+Multi-platform+Projects",
    "title": "Build Multi-platform Projects",
    "breadcrumb": [
      "",
      "Build Setup Tutorials",
      "Distributed Builds"
    ],
    "full_text": "Build Setup Tutorials\nDistributed Builds\nBuild Multi-platform Projects\nVersion: QB14\nOn this page\nBuild Multi-platform Projects\nScenario\nâ\nSetup build automation for projects that consist of components which need to be compiled and/or tested on different platforms.\nSolution\nâ\nThis scenario can be solved in QuickBuild by running different component build steps on different agents, and then transferring files between agents by declaring file requirements for appropriate steps. We will use an example to explain the idea. Let's assume that we need to build a project with\ncomponent1\nand\ncomponent2\n.\ncomponent1\nneeds to be compiled on Linux platform with gcc installed, while\ncomponent2\nneeds to be compiled on Windows platform with Visual Studio installed. We will use a following step layout:\nnode match condition of each step is designated as follows:\nâ\nmaster\n: node.isAgent()\nThis tells the master step to run on an agent node.\ncheckout\n: node==current.parent.node\nThis tells the checkout step to run on the same agent as the master step.\ncompile component1\n: (node.getAttribute(\"os.name\").startsWith(\"Linux\") || node.getAttribute(\"os.name\").startsWith(\"LINUX\")) && node.hasAttribute(\"gcc\")\nThis tells the step\ncompile component1\nto run on a Linux node with attribute\ngcc\ndefined. The system attribute\nos.name\nis used to determine operating system of the node, and\ngcc\nis an user attribute which is defined to point to gcc installation path. Refer to [node attributes](Working with Build Grid.html#WorkingwithBuildGrid-nodeattributes) on how to examine system attributes and how to define the user attributes for a node.\ncompile component2\n: node.getAttribute(\"os.name\").startsWith(\"Windows\") && node.hasAttribute(\"visualstudio\")\nThis tells the step\ncompile component2\nto run on a Windows node with attribute\nvisualstudio\ndefined. The system attribute\nos.name\nis used to determine operating system of the node, and\nvisualstudio\nis an user attribute which is defined to point to Visual Studio installation path. Refer to [node attributes](Working with Build Grid.html#WorkingwithBuildGrid-nodeattributes)on how to examine system attributes and how to define user attributes for a node.\npackage\n: node==current.parent.node\nThis tells the package step to run on the same agent as the master step.\npublish\n: node==current.parent.node\nThis tells the publish step to run on the same agent as the master step.\nFile requirements are specified like below:\nâ\nfor step\ncompile component1\nfor step\ncompile component2\nWe assume that:\ncomponent1-src\nis checked out by the step\ncheckout\nto compile compnent1, and the compilation output is placed in the directory\ncomponent1-binary\ncomponent2-src\nis checked out by the step\ncheckout\nto compile compnent2, and the compilation output is placed in the directory\ncomponent2-binary\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Build Multi-platform Projects",
        "content": ""
      },
      {
        "header": "Scenarioâ",
        "content": "Setup build automation for projects that consist of components which need to be compiled and/or tested on different platforms."
      },
      {
        "header": "Solutionâ",
        "content": "This scenario can be solved in QuickBuild by running different component build steps on different agents, and then transferring files between agents by declaring file requirements for appropriate steps. We will use an example to explain the idea. Let's assume that we need to build a project withcomponent1andcomponent2.component1needs to be compiled on Linux platform with gcc installed, whilecomponent2needs to be compiled on Windows platform with Visual Studio installed. We will use a following step layout:"
      },
      {
        "header": "node match condition of each step is designated as follows:â",
        "content": "master: node.isAgent()This tells the master step to run on an agent node.checkout: node==current.parent.nodeThis tells the checkout step to run on the same agent as the master step.compile component1: (node.getAttribute(\"os.name\").startsWith(\"Linux\") || node.getAttribute(\"os.name\").startsWith(\"LINUX\")) && node.hasAttribute(\"gcc\")This tells the stepcompile component1to run on a Linux node with attributegccdefined. The system attributeos.nameis used to determine operating system of the node, andgccis an user attribute which is defined to point to gcc installation path. Refer to [node attributes](Working with Build Grid.html#WorkingwithBuildGrid-nodeattributes) on how to examine system attributes and how to define the user attributes for a node.compile component2: node.getAttribute(\"os.name\").startsWith(\"Windows\") && node.hasAttribute(\"visualstudio\")This tells the stepcompile component2to run on a Windows node with attributevisualstudiodefined. The system attributeos.nameis used to determine operating system of the node, andvisualstudiois an user attribute which is defined to point to Visual Studio installation path. Refer to [node attributes](Working with Build Grid.html#WorkingwithBuildGrid-nodeattributes)on how to examine system attributes and how to define user attributes for a node.package: node==current.parent.nodeThis tells the package step to run on the same agent as the master step.publish: node==current.parent.nodeThis tells the publish step to run on the same agent as the master step."
      },
      {
        "header": "File requirements are specified like below:â",
        "content": "for stepcompile component1for stepcompile component2 We assume that: component1-srcis checked out by the stepcheckoutto compile compnent1, and the compilation output is placed in the directorycomponent1-binarycomponent2-srcis checked out by the stepcheckoutto compile compnent2, and the compilation output is placed in the directorycomponent2-binary"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Reduce+Server+Load",
      "https://wiki.pmease.com/display/QB14/Speed+up+Build+Process",
      "https://wiki.pmease.com/display/QB14/Test+on+All+Applicable+Agents",
      "https://wiki.pmease.com/display/QB14/Reduce+Server+Load"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Reduce+Server+Load",
    "title": "Reduce Server Load",
    "breadcrumb": [
      "",
      "Build Setup Tutorials",
      "Distributed Builds"
    ],
    "full_text": "Build Setup Tutorials\nDistributed Builds\nReduce Server Load\nVersion: QB14\nOn this page\nReduce Server Load\nScenario\nâ\nIn a continuous integration environment, it is important that builds can run as frequently as possible. A server could be configured with dozens of projects, with each project having several branches, with each branch having dozens of developers committing their code and requesting verification builds. This could impose a heavy load on the build server if all builds are executed on the single machine.\nSolution\nâ\nYou can delegate build jobs from server to agents by running build steps only on the agent nodes. Let's take a typical build process for example, it has four steps,\ncheckout\n,\nbuild\n,\npublish\n, and a\ndefault\nstep to execute the other steps sequentially. By default, all three steps have property\nnode match condition\nbeing set to following value:\ncurrent\n.\nparent\n==\nnull\n?\nnode\n.\nisServer\n(\n)\n:\n(\nnode\n==\ncurrent\n.\nparent\n.\nnode\n)\nThis means that if the step does not have parent (in the case of the master step), it should be run on the server node; otherwise, it should be running on the same node as its parent node. The effect is that all steps are by default executed on the server node. To make all steps running on the agent nodes, just set the\nnode match condition\nof the\nmaster\nstep to be:\nnode\n.\nisAgent\n(\n)\nOther steps remain unchanged. When build starts, the master step will try to look for a compatible node available for execution. In this case, all agents are compatible, and one of the agents will be selected based on a load balancing algorithm. All other steps will use the same agent as the\nnode match condition\ntells them to use the same node as their parent step.\nIn a real environment, it is possible that not all agent nodes are compatible with the build, and you can adjust the\nnode match condition\nof the master step to filter off incompatible nodes. For example by using the expression\nnode.isAgent() && (node.getAttribute(\"os.name\").startsWith(\"Linux\") || node.getAttribute(\"os.name\").startsWith(\"LINUX\"))\n, which only accepts Linux agents.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Reduce Server Load",
        "content": ""
      },
      {
        "header": "Scenarioâ",
        "content": "In a continuous integration environment, it is important that builds can run as frequently as possible. A server could be configured with dozens of projects, with each project having several branches, with each branch having dozens of developers committing their code and requesting verification builds. This could impose a heavy load on the build server if all builds are executed on the single machine."
      },
      {
        "header": "Solutionâ",
        "content": "You can delegate build jobs from server to agents by running build steps only on the agent nodes. Let's take a typical build process for example, it has four steps,checkout,build,publish, and adefaultstep to execute the other steps sequentially. By default, all three steps have propertynode match conditionbeing set to following value: current.parent==null?node.isServer():(node==current.parent.node) This means that if the step does not have parent (in the case of the master step), it should be run on the server node; otherwise, it should be running on the same node as its parent node. The effect is that all steps are by default executed on the server node. To make all steps running on the agent nodes, just set thenode match conditionof themasterstep to be: node.isAgent() Other steps remain unchanged. When build starts, the master step will try to look for a compatible node available for execution. In this case, all agents are compatible, and one of the agents will be selected based on a load balancing algorithm. All other steps will use the same agent as thenode match conditiontells them to use the same node as their parent step. In a real environment, it is possible that not all agent nodes are compatible with the build, and you can adjust thenode match conditionof the master step to filter off incompatible nodes. For example by using the expressionnode.isAgent() && (node.getAttribute(\"os.name\").startsWith(\"Linux\") || node.getAttribute(\"os.name\").startsWith(\"LINUX\")), which only accepts Linux agents."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Speed+up+Build+Process",
      "https://wiki.pmease.com/display/QB14/Test+on+All+Applicable+Agents",
      "https://wiki.pmease.com/display/QB14/Speed+up+Build+Process"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Speed+up+Build+Process",
    "title": "Speed up Build Process",
    "breadcrumb": [
      "",
      "Build Setup Tutorials",
      "Distributed Builds"
    ],
    "full_text": "Build Setup Tutorials\nDistributed Builds\nSpeed up Build Process\nVersion: QB14\nOn this page\nSpeed up Build Process\nScenario\nâ\nIn a continuous integration environment, it is very important that a build can complete as quick as possible to provide feedback to developers as early as possible after they submit a build verification request.\nSolution\nâ\nYou can execute CPU intensive build steps in parallel, and run them on different agent nodes. The results from different nodes can be collected back to server for further processing. Let's assume a product comprises of component1 and component2, and both of them take a long time to build. You can build component1 and component2 in parallel as follows:\nThe\nnode match condition\nproperty for these steps can be specified as follows:\nmaster:\nnode.isAgent()\nthis tells the master step to run only on agent node (in order to\nreduce server load\n)\ncheckout:\nnode==current.parent.node\nthis tells the step\ncheckout\nto run on the same agent as the master step\nbuild components:\nnode==current.parent.node\nthis tells the step\nbuild components\nto run on the same agent as the master step\nbuild component1\n: node.isAgent()\nthis tells the step\nbuild component1\nto run on agent node selected by load balancing algorithm\nbuild component2\n: node.isAgent()\nthis tells the step\nbuild component2\nto run on agent node selected by load balancing algorithm\npackage\n: node==current.parent.node\nthis tells the step\npackage\nto run on the same agent as the master step\npublish:\nnode==current.parent.node\nthis tells the step\npublish\nto run on the same agent as the master step\nThe idea here is that step\nbuild component1\nand\nbuild component2\nare designed to run on the least loaded agent nodes, while all other steps are running on the same agent node.\nThere are still a few problems. The nodes running step\nbuild component1\nand\nbuild component2\nare not guaranteed to execute on the same node that executes the step\ncheckout\n. How can we make sure that the necessary files are available when component1 and component2 starts to build? The same issue exists when running step\npackage\n, how can we make sure that build results of component1 and component2 are available for packaging if the build steps and package step do not run on the same agent?\nThis is solved by specifying input files and output files for steps. Let's assume that the agent node to run master step is\nagent1\n, and the\ncheckout\nstep retrieves files into two folders into workspace that resides on\nagent1\n:\ncomponent1-src\n, and\ncomponent2-src\n. Folder\ncomponent1-src\ncontains all files used to build component1, while folder\ncomponent2-src\ncontains all files used to build component2. Build results of comonent1 are saved to folder\ncomponent1-binary\n, and build results of component2 are saved to folder\ncomponent2-binary\n. Now we can specify following file requirements:\nfor step\nbuild component1\nSpecified input files will be transfered from workspace of the node running parent step to workspace of the node running current step. In this case, all source files of component1 will be transfered from\nagent1\nto the node running step\nbuild component1\n. If the same nodes are used for parent and child step, no file transfer will be done.\nSpecified out files will be transfered from workspace of the node running current step to workspace of the node running parent step. In this case, all generated binary files by step\nbuild component1\nwill be put back into workspace of\nagent1\n. In case of same nodes are used for parent and child step, no file transfer will be done.\nfor step\nbuild component2\nRefer to input files and out files explanation of step\nbuild component1\nabove.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Speed up Build Process",
        "content": ""
      },
      {
        "header": "Scenarioâ",
        "content": "In a continuous integration environment, it is very important that a build can complete as quick as possible to provide feedback to developers as early as possible after they submit a build verification request."
      },
      {
        "header": "Solutionâ",
        "content": "You can execute CPU intensive build steps in parallel, and run them on different agent nodes. The results from different nodes can be collected back to server for further processing. Let's assume a product comprises of component1 and component2, and both of them take a long time to build. You can build component1 and component2 in parallel as follows: Thenode match conditionproperty for these steps can be specified as follows: master:node.isAgent()this tells the master step to run only on agent node (in order toreduce server load)checkout:node==current.parent.nodethis tells the stepcheckoutto run on the same agent as the master stepbuild components:node==current.parent.nodethis tells the stepbuild componentsto run on the same agent as the master stepbuild component1: node.isAgent()this tells the stepbuild component1to run on agent node selected by load balancing algorithmbuild component2: node.isAgent()this tells the stepbuild component2to run on agent node selected by load balancing algorithmpackage: node==current.parent.nodethis tells the steppackageto run on the same agent as the master steppublish:node==current.parent.nodethis tells the steppublishto run on the same agent as the master step The idea here is that stepbuild component1andbuild component2are designed to run on the least loaded agent nodes, while all other steps are running on the same agent node. There are still a few problems. The nodes running stepbuild component1andbuild component2are not guaranteed to execute on the same node that executes the stepcheckout. How can we make sure that the necessary files are available when component1 and component2 starts to build? The same issue exists when running steppackage, how can we make sure that build results of component1 and component2 are available for packaging if the build steps and package step do not run on the same agent? This is solved by specifying input files and output files for steps. Let's assume that the agent node to run master step isagent1, and thecheckoutstep retrieves files into two folders into workspace that resides onagent1:component1-src, andcomponent2-src. Foldercomponent1-srccontains all files used to build component1, while foldercomponent2-srccontains all files used to build component2. Build results of comonent1 are saved to foldercomponent1-binary, and build results of component2 are saved to foldercomponent2-binary. Now we can specify following file requirements: for stepbuild component1Specified input files will be transfered from workspace of the node running parent step to workspace of the node running current step. In this case, all source files of component1 will be transfered fromagent1to the node running stepbuild component1. If the same nodes are used for parent and child step, no file transfer will be done.Specified out files will be transfered from workspace of the node running current step to workspace of the node running parent step. In this case, all generated binary files by stepbuild component1will be put back into workspace ofagent1. In case of same nodes are used for parent and child step, no file transfer will be done.for stepbuild component2Refer to input files and out files explanation of stepbuild component1above."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Test+on+All+Applicable+Agents",
      "https://wiki.pmease.com/display/QB14/Test+on+All+Applicable+Agents"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Test+on+All+Applicable+Agents",
    "title": "Test on All Applicable Agents",
    "breadcrumb": [
      "",
      "Build Setup Tutorials",
      "Distributed Builds"
    ],
    "full_text": "Build Setup Tutorials\nDistributed Builds\nTest on All Applicable Agents\nVersion: QB14\nOn this page\nTest on All Applicable Agents\nSituation\nâ\nSend built artifacts to all Linux x86 32bit agents for testing. After test finishes, publish test reports on these agents to QuickBuild server.\nDemonstration\nâ\nTo demonstrate this, two agents are set up at the demo site, with below grid user attributes:\narch\n=\nlinux\n-\nx86\n-\n32\nOur purpose is to run tests on all agents with this attribute. In our demonstration, agents matching this criteria are\nplex.pmease.com:8811\nand\nplex.pmease.com:8812\n.\nSwitch to the\ntest configuration\n, and hit the run button.\nChange to\noverview page of latest build\nafter build finishes, and you will see two set of test reports are published, one is for agent\nplex.pmease.com:8811\n, and another is for agent\nplex.pmease.com:8812\n.\nThe\nstep status page of latest build\nalso indicates that tests have been run on these two agents.\nResolution\nâ\nSwitch to\nsteps page of the test configuration\n:\nThe\ncheckout\nstep pulls project source code out of SCM.\nThe\ncompile\nstep compiles the project to produce class files to be tested\nThe\ntest on all applicable agents\nstep is a parallel composition step, and it will run all contained steps concurrently. It will also repeat child steps in a concurrent way if child steps are configured with repeating params.\nThe\ntest on agent\nstep is a sequential composition step:\nThis step is configured with a repeat param. The param name is set as\nagent\n, and param values is set as addresses of all build agents with attribute\narch\nequals to\nlinux-x86-32\n.\nThis step is set to run on grid node with address equals to param\nagent\n. This is done through property\nnode selection\n.\nThis step is configured to fetch necessary test files from parent node (the node running parent step) to current node (the selected agent) through the property\nfetch input files\n.\nThe above settings effectively makes the\ntest on agent\nstep running on all linux-x86-32 agents, and these agents will run this step concurrently since it is contained in a parallel composition step.\nThe step\ntest on agent\ncontains two child steps, respectively\nrun test\nand\npublish test reports\n. Since step\ntest on agent\nis set to run on all applicable agents, these two child steps will also run on those agents to do the actual work. Specifically, the\npublish test reports\nstep uses\n${params.get(\"agent\").replace(':', '\n')}\nas report set name to group test reports by agents (character ':' is replaced with '' since this character is not allowed in report set name).\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Test on All Applicable Agents",
        "content": ""
      },
      {
        "header": "Situationâ",
        "content": "Send built artifacts to all Linux x86 32bit agents for testing. After test finishes, publish test reports on these agents to QuickBuild server."
      },
      {
        "header": "Demonstrationâ",
        "content": "To demonstrate this, two agents are set up at the demo site, with below grid user attributes: arch=linux-x86-32 Our purpose is to run tests on all agents with this attribute. In our demonstration, agents matching this criteria areplex.pmease.com:8811andplex.pmease.com:8812. Switch to thetest configuration, and hit the run button.Change tooverview page of latest buildafter build finishes, and you will see two set of test reports are published, one is for agentplex.pmease.com:8811, and another is for agentplex.pmease.com:8812.Thestep status page of latest buildalso indicates that tests have been run on these two agents."
      },
      {
        "header": "Resolutionâ",
        "content": "Switch tosteps page of the test configuration: Thecheckoutstep pulls project source code out of SCM.Thecompilestep compiles the project to produce class files to be testedThetest on all applicable agentsstep is a parallel composition step, and it will run all contained steps concurrently. It will also repeat child steps in a concurrent way if child steps are configured with repeating params.Thetest on agentstep is a sequential composition step:This step is configured with a repeat param. The param name is set asagent, and param values is set as addresses of all build agents with attributearchequals tolinux-x86-32.This step is set to run on grid node with address equals to paramagent. This is done through propertynode selection.This step is configured to fetch necessary test files from parent node (the node running parent step) to current node (the selected agent) through the propertyfetch input files.The above settings effectively makes thetest on agentstep running on all linux-x86-32 agents, and these agents will run this step concurrently since it is contained in a parallel composition step.The steptest on agentcontains two child steps, respectivelyrun testandpublish test reports. Since steptest on agentis set to run on all applicable agents, these two child steps will also run on those agents to do the actual work. Specifically, thepublish test reportsstep uses${params.get(\"agent\").replace(':', '')}as report set name to group test reports by agents (character ':' is replaced with '' since this character is not allowed in report set name)."
      }
    ],
    "links": []
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Exclusive+Deployment",
    "title": "Exclusive Deployment",
    "breadcrumb": [
      "",
      "Build Setup Tutorials",
      "Resource Management"
    ],
    "full_text": "Build Setup Tutorials\nResource Management\nExclusive Deployment\nVersion: QB14\nOn this page\nExclusive Deployment\nSituation\nâ\nAssume there are only one machine for deployment. Set up the build so that only one deployment step can run on the deployment machine even if multiple builds try to deploy.\nDemonstration\nâ\nVisit the\ndemo project\n, and hit the run button to trigger all children configurations concurrently.\nCheck latest build of\nchild project1\nand\nchild project2\nrespectively: only\ndeploy\nstep of the one build will run, another will be put into wait state until current running deploy step finishes.\nResolution\nâ\nSwitch to\nresources tab\nand a resource named \"Deployment Environment\" is defined with only one agent providing the resource.\nSwitch to steps definition of\nchild project1\nand\nchild project2\n, and check definition of step\ndeploy\n. The node selection property is set to run on the node with resource\nDeployment Environment\n.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Exclusive Deployment",
        "content": ""
      },
      {
        "header": "Situationâ",
        "content": "Assume there are only one machine for deployment. Set up the build so that only one deployment step can run on the deployment machine even if multiple builds try to deploy."
      },
      {
        "header": "Demonstrationâ",
        "content": "Visit thedemo project, and hit the run button to trigger all children configurations concurrently.Check latest build ofchild project1andchild project2respectively: onlydeploystep of the one build will run, another will be put into wait state until current running deploy step finishes."
      },
      {
        "header": "Resolutionâ",
        "content": "Switch toresources taband a resource named \"Deployment Environment\" is defined with only one agent providing the resource.Switch to steps definition ofchild project1andchild project2, and check definition of stepdeploy. The node selection property is set to run on the node with resourceDeployment Environment."
      }
    ],
    "links": []
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Set+up+Static+Dependency",
    "title": "Set up Static Dependency",
    "breadcrumb": [
      "",
      "Build Setup Tutorials",
      "Build Dependencies"
    ],
    "full_text": "Build Setup Tutorials\nBuild Dependencies\nSet up Static Dependency\nVersion: QB14\nOn this page\nSet up Static Dependency\nSituation\nâ\nProductA and componentA build independently as different projects. During build process of productA, build result of specified version of componentA should be retrieved and used. This specified version will not change even if componentA has a new version.\nDemonstration\nâ\nVisit\nlatest build of productA\n, and hover mouse over the dependencies link in the build summary section, and you will see that current build depends on version\n1.0.10\nof componentA.\nSwitch to\ncomponentA\n, and click the run button to generate a new version of componentA.\nSwitch back to\nproductA\n, and click the run button to build productA. When build finishes, examine dependency of the new build again, and it is still using version\n1.0.10\nof componentA.\nResolution\nâ\nVisit\nrepository setting of productA\n. There are two repositories defined:\ncomponentA\nand\nproductA\n. Repository\nproductA\nis used to retrieve source code of productA from SCM, while repository\ncomponentA\nis used to retrieve build result of componentA. Repository\ncomponentA\nis defined to retrieve all published jars from version\n1.0.10\nof componentA.\nVisit\nstep setting of productA\n. Two checkout steps are defined to checkout repository\nproductA\nand\ncomponentA\nrespectively.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Set up Static Dependency",
        "content": ""
      },
      {
        "header": "Situationâ",
        "content": "ProductA and componentA build independently as different projects. During build process of productA, build result of specified version of componentA should be retrieved and used. This specified version will not change even if componentA has a new version."
      },
      {
        "header": "Demonstrationâ",
        "content": "Visitlatest build of productA, and hover mouse over the dependencies link in the build summary section, and you will see that current build depends on version1.0.10of componentA.Switch tocomponentA, and click the run button to generate a new version of componentA.Switch back toproductA, and click the run button to build productA. When build finishes, examine dependency of the new build again, and it is still using version1.0.10of componentA."
      },
      {
        "header": "Resolutionâ",
        "content": "Visitrepository setting of productA. There are two repositories defined:componentAandproductA. RepositoryproductAis used to retrieve source code of productA from SCM, while repositorycomponentAis used to retrieve build result of componentA. RepositorycomponentAis defined to retrieve all published jars from version1.0.10of componentA.Visitstep setting of productA. Two checkout steps are defined to checkout repositoryproductAandcomponentArespectively."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Set+up+Passive+Dependency",
      "https://wiki.pmease.com/display/QB14/Set+up+Active+Dependency",
      "https://wiki.pmease.com/display/QB14/Auto-Trigger+Dependent+Maven+Builds",
      "https://wiki.pmease.com/display/QB14/Set+up+Passive+Dependency"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Set+up+Passive+Dependency",
    "title": "Set up Passive Dependency",
    "breadcrumb": [
      "",
      "Build Setup Tutorials",
      "Build Dependencies"
    ],
    "full_text": "Build Setup Tutorials\nBuild Dependencies\nSet up Passive Dependency\nVersion: QB14\nOn this page\nSet up Passive Dependency\nSituation\nâ\nComponentA and productA build independently as different projects. During build process of ProductA , build result of latest version of componentA should be retrieved and used.\nDemonstration\nâ\nVisit\nlatest build of productA\n. Hover mouse over the dependencies link in the build summary section, and you will see that current build of productA depends on most recent version of componentA.\nSwitch to\ncomponentA\n, and click the run button to generate a new version of componentA.\nSwitch back to\nproductA\n, and click the run button to build productA. When the new build finishes, examine its dependency again, and it is now dependent on the newly generated version of componentA.\nResolution\nâ\nVisit\nrepository setting of productA\n. There are two repositories defined:\ncomponentA\nand\nproductA\n. Repository\nproductA\nis used to retrieve source code of productA from SCM, while repository\ncomponentA\nis used to retrieve build result of componentA. Repository\ncomponentA\nis defined to retrieve all published jars from latest build of componentA.\nVisit\nstep setting of productA\n. Two checkout steps are defined to checkout repository\nproductA\nand\ncomponentA\nrespectively.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Set up Passive Dependency",
        "content": ""
      },
      {
        "header": "Situationâ",
        "content": "ComponentA and productA build independently as different projects. During build process of ProductA , build result of latest version of componentA should be retrieved and used."
      },
      {
        "header": "Demonstrationâ",
        "content": "Visitlatest build of productA. Hover mouse over the dependencies link in the build summary section, and you will see that current build of productA depends on most recent version of componentA.Switch tocomponentA, and click the run button to generate a new version of componentA.Switch back toproductA, and click the run button to build productA. When the new build finishes, examine its dependency again, and it is now dependent on the newly generated version of componentA."
      },
      {
        "header": "Resolutionâ",
        "content": "Visitrepository setting of productA. There are two repositories defined:componentAandproductA. RepositoryproductAis used to retrieve source code of productA from SCM, while repositorycomponentAis used to retrieve build result of componentA. RepositorycomponentAis defined to retrieve all published jars from latest build of componentA.Visitstep setting of productA. Two checkout steps are defined to checkout repositoryproductAandcomponentArespectively."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Set+up+Active+Dependency",
      "https://wiki.pmease.com/display/QB14/Auto-Trigger+Dependent+Maven+Builds",
      "https://wiki.pmease.com/display/QB14/Set+up+Active+Dependency"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Set+up+Active+Dependency",
    "title": "Set up Active Dependency",
    "breadcrumb": [
      "",
      "Build Setup Tutorials",
      "Build Dependencies"
    ],
    "full_text": "Build Setup Tutorials\nBuild Dependencies\nSet up Active Dependency\nVersion: QB14\nOn this page\nSet up Active Dependency\nSituation\nâ\nComponentA and productA build independently as different projects. During build process of productA, componentA will be checked for changes: if there are new changes in componentA, a new componentA version will be generated, and the new build result will be used to construct productA; otherwise, build result of latest version of componentA will be used instead.\nDemonstration\nâ\nTo simulate new changes in componentA,\nbuild condition\nof the\ndemo componentA configuration\nis set to\nalways build\nso that a new componentA version will be generated whenever it is triggered.\nVisit\nlatest build of productA\n. Hover mouse over the dependencies link in the build summary section, and you will see that current build of productA depends on most recent version of componentA.\nClick the run button to build productA. A new version will be generated in\ncomponentA\nbesides the new version in\nproductA\n. When new build of productA finishes, examine its dependency again, and it is now dependent on the newly generated version of componentA.\nResolution\nâ\nVisit\nrepository setting of productA\n. There are two repositories defined:\ncomponentA\nand\nproductA\n. Repository\nproductA\nis used to retrieve source code of productA from SCM, while repository\ncomponentA\nis used to retrieve build result of componentA. Repository\ncomponentA\nis defined to retrieve all published jars from componentA, with the build defined as\nlatest build (generate new if necessary)\n.\nVisit\nstep setting of productA\n. Two checkout steps are defined to checkout repository\nproductA\nand\ncomponentA\nrespectively.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Set up Active Dependency",
        "content": ""
      },
      {
        "header": "Situationâ",
        "content": "ComponentA and productA build independently as different projects. During build process of productA, componentA will be checked for changes: if there are new changes in componentA, a new componentA version will be generated, and the new build result will be used to construct productA; otherwise, build result of latest version of componentA will be used instead."
      },
      {
        "header": "Demonstrationâ",
        "content": "To simulate new changes in componentA,build conditionof thedemo componentA configurationis set toalways buildso that a new componentA version will be generated whenever it is triggered.Visitlatest build of productA. Hover mouse over the dependencies link in the build summary section, and you will see that current build of productA depends on most recent version of componentA.Click the run button to build productA. A new version will be generated incomponentAbesides the new version inproductA. When new build of productA finishes, examine its dependency again, and it is now dependent on the newly generated version of componentA."
      },
      {
        "header": "Resolutionâ",
        "content": "Visitrepository setting of productA. There are two repositories defined:componentAandproductA. RepositoryproductAis used to retrieve source code of productA from SCM, while repositorycomponentAis used to retrieve build result of componentA. RepositorycomponentAis defined to retrieve all published jars from componentA, with the build defined aslatest build (generate new if necessary).Visitstep setting of productA. Two checkout steps are defined to checkout repositoryproductAandcomponentArespectively."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Auto-Trigger+Dependent+Maven+Builds",
      "https://wiki.pmease.com/display/QB14/Auto-Trigger+Dependent+Maven+Builds"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Auto-Trigger+Dependent+Maven+Builds",
    "title": "Auto-Trigger Dependent Maven Builds",
    "breadcrumb": [
      "",
      "Build Setup Tutorials",
      "Build Dependencies"
    ],
    "full_text": "Build Setup Tutorials\nBuild Dependencies\nAuto-Trigger Dependent Maven Builds\nVersion: QB14\nOn this page\nAuto-Trigger Dependent Maven Builds\nSituation\nâ\nWhen a new snapshot version of a Maven library is generated, triggers all configurations using this snapshot library automatically.\nDemonstration\nâ\nIn the demo set up, configuration\nProduct1\nand\nProduct2\nare maven configurations whose POM declared dependency to the library artifact which is built by configuration\nLibrary\n.\nRun the\nLibrary\nconfiguration to generate a new snapshot of the library artifact.\nAfter the build finishes, new build of\nProduct1\nand\nProduct2\nwill be fired automatically to do the verification.\nResolution\nâ\nCheck maven plugin setting in page\nAdministration/Plugin Management\n, and make sure that the option\nResolve Effective POM\nhas been enabled.\nVisit\ngeneral setting of the Library configuration\n, the\nTrigger Dependents\noption is checked.\nVisit\nstep definition of the Library configuration\n, the\nmaven build\nstep simply calls Maven to build the library artifact. Maven goal does not matter here.\nVisit\nstep definition of the Product1 configuration\n, the\nmaven build\nstep simply calls Maven to build product1. POM file of product1 (brough to workspace by checkout step) contains dependency declaration to library artifact. Maven goal does not matter here.\nVisit\nstep definition of the Product2 configuration\n, the\nmaven build\nstep simply calls Maven to build product2. POM file of product2 (brough to workspace by checkout step) contains dependency declaration to library artifact. Maven goal does not matter here.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Auto-Trigger Dependent Maven Builds",
        "content": ""
      },
      {
        "header": "Situationâ",
        "content": "When a new snapshot version of a Maven library is generated, triggers all configurations using this snapshot library automatically."
      },
      {
        "header": "Demonstrationâ",
        "content": "In the demo set up, configurationProduct1andProduct2are maven configurations whose POM declared dependency to the library artifact which is built by configurationLibrary.Run theLibraryconfiguration to generate a new snapshot of the library artifact.After the build finishes, new build ofProduct1andProduct2will be fired automatically to do the verification."
      },
      {
        "header": "Resolutionâ",
        "content": "Check maven plugin setting in pageAdministration/Plugin Management, and make sure that the optionResolve Effective POMhas been enabled.Visitgeneral setting of the Library configuration, theTrigger Dependentsoption is checked.Visitstep definition of the Library configuration, themaven buildstep simply calls Maven to build the library artifact. Maven goal does not matter here.Visitstep definition of the Product1 configuration, themaven buildstep simply calls Maven to build product1. POM file of product1 (brough to workspace by checkout step) contains dependency declaration to library artifact. Maven goal does not matter here.Visitstep definition of the Product2 configuration, themaven buildstep simply calls Maven to build product2. POM file of product2 (brough to workspace by checkout step) contains dependency declaration to library artifact. Maven goal does not matter here."
      }
    ],
    "links": []
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Plugin+Tutorials",
    "title": "Plugin Tutorials",
    "breadcrumb": [],
    "full_text": "Version: QB14\nPlugin Tutorials\nA set of tutorials are created here demonstrating how to write a plugin. Please go through them one by one and final version of the example plugin used in the tutorial can be found\nhere\n.\nSet up Plugin Development Workspace\nWrite Your First Plugin\nWorking with Plugin UI\nWorking with Plugin Settings\nPlugin Data Storage\nMigrate Plugin Data\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Plugin Tutorials",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/The+Example+Plugin+in+Tutorial",
      "https://wiki.pmease.com/display/QB14/Set+up+Plugin+Development+Workspace",
      "https://wiki.pmease.com/display/QB14/Write+Your+First+Plugin",
      "https://wiki.pmease.com/display/QB14/Working+with+Plugin+UI",
      "https://wiki.pmease.com/display/QB14/Working+with+Plugin+Settings",
      "https://wiki.pmease.com/display/QB14/Plugin+Data+Storage",
      "https://wiki.pmease.com/display/QB14/Migrate+Plugin+Data"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Generate+Release+Build+from+the+Source+Used+by+QA+Build",
    "title": "Generate Release Build from the Source Used by QA Build",
    "breadcrumb": [
      "",
      "Build Setup Tutorials",
      "Promote Builds"
    ],
    "full_text": "Build Setup Tutorials\nPromote Builds\nGenerate Release Build from the Source Used by QA Build\nVersion: QB14\nOn this page\nGenerate Release Build from the Source Used by QA Build\nScenario\nâ\nPromote a QA build as release build. Instead of simply copying the QA artifacts, the release build artifacts should be generated by building from the source used by the QA build.\nDemonstration\nâ\nVisit\nlatest build of QA configuration\n. A jar file is published as artifacts.\nClick the promote button, and refresh the page after a while, a promotion arrow will appear at right side of the QA build version pointing to the newly generated release build.\nClick the newly generated release build. When the build finishes, you will see that a new jar file is generated in the release build.\nResolution\nâ\nEdit\npromotion setting of the QA configuration\nand define a promotion. The property \"destination configuration\" should be defined as the release configuration. We do not need to define property \"files to promote\" since we will not use QA artifacts, instead, we will build artifacts directly from source in the release build.\nMost steps of the QA and release configuration are the same, and we can define them\nat project level\nto avoid duplication. Pay attention to the label step, we changed the step condition so that it only executes when release configuration is running.\ninfo\nPlease make sure that the same repositories are used in QA and release configuration. This makes sure that all repository related steps in the release configuration operate against the repository revision used in the QA build. In our example, we define the repository directly\nat the project level\nand it is inherited by both QA and release configurations.\nOptionally you may set up the release configuration to disallow direct triggering, so that new releases can only be promoted from QA build. This can be done by editing\ngeneral setting of the release configuration\nand set the\nRun Mode\nproperty as\nDISABLED\n.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Generate Release Build from the Source Used by QA Build",
        "content": ""
      },
      {
        "header": "Scenarioâ",
        "content": "Promote a QA build as release build. Instead of simply copying the QA artifacts, the release build artifacts should be generated by building from the source used by the QA build."
      },
      {
        "header": "Demonstrationâ",
        "content": "Visitlatest build of QA configuration. A jar file is published as artifacts.Click the promote button, and refresh the page after a while, a promotion arrow will appear at right side of the QA build version pointing to the newly generated release build.Click the newly generated release build. When the build finishes, you will see that a new jar file is generated in the release build."
      },
      {
        "header": "Resolutionâ",
        "content": "Editpromotion setting of the QA configurationand define a promotion. The property \"destination configuration\" should be defined as the release configuration. We do not need to define property \"files to promote\" since we will not use QA artifacts, instead, we will build artifacts directly from source in the release build.Most steps of the QA and release configuration are the same, and we can define themat project levelto avoid duplication. Pay attention to the label step, we changed the step condition so that it only executes when release configuration is running.infoPlease make sure that the same repositories are used in QA and release configuration. This makes sure that all repository related steps in the release configuration operate against the repository revision used in the QA build. In our example, we define the repository directlyat the project leveland it is inherited by both QA and release configurations.Optionally you may set up the release configuration to disallow direct triggering, so that new releases can only be promoted from QA build. This can be done by editinggeneral setting of the release configurationand set theRun Modeproperty asDISABLED."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Generate+Release+Build+using+Artifacts+of+QA+Build",
      "https://wiki.pmease.com/display/QB14/Generate+Release+Build+using+Artifacts+of+QA+Build"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Generate+Release+Build+using+Artifacts+of+QA+Build",
    "title": "Generate Release Build using Artifacts of QA Build",
    "breadcrumb": [
      "",
      "Build Setup Tutorials",
      "Promote Builds"
    ],
    "full_text": "Build Setup Tutorials\nPromote Builds\nGenerate Release Build using Artifacts of QA Build\nVersion: QB14\nOn this page\nGenerate Release Build using Artifacts of QA Build\nScenario\nâ\nPromote build from QA configuration to release configuration. The release build should use the same artifacts of the QA build being promoted.\nDemonstration\nâ\nVisit\nlatest build of QA configuration\n. A jar file is published as artifacts.\nClick the promote button, and refresh the page after a while, a promotion arrow will appear at right side of the QA build version pointing to the newly generated release build.\nClick the newly generated release build. When the build finishes, you will see that the jar file is now copied from QA build and renamed to reflect the release version.\nResolution\nâ\nEdit\npromotion setting of the QA configuration\nand define a promotion, with property\ndestination configuration\ndefined as release configuration, and property\nfiles to promote\ndefined as desired files need to be promoted. All promoted files will be copied to workspace of node running the master step of destination configuration.\nEdit\nstep setting of the release configuration\nto define desired steps need to be executed during the release process. In this demo, we add steps to change name of promoted artifacts, publish promoted artifacts, and at last create label in the SCM.\ninfo\nPlease make sure that the same repositories are used in QA and release configuration. This makes sure that all repository related steps in the release configuration operate against the repository revision used in the QA build. In our example, we define the repository directly\nat the project level\nand it is inherited by both QA and release configurations.\nOptionally you may set up the release configuration to disallow direct triggering, so that new releases can only be promoted from QA build. This can be done by editing\ngeneral setting of the release configuration\nand set the\nRun Mode\nproperty as\nDISABLED\n.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Generate Release Build using Artifacts of QA Build",
        "content": ""
      },
      {
        "header": "Scenarioâ",
        "content": "Promote build from QA configuration to release configuration. The release build should use the same artifacts of the QA build being promoted."
      },
      {
        "header": "Demonstrationâ",
        "content": "Visitlatest build of QA configuration. A jar file is published as artifacts.Click the promote button, and refresh the page after a while, a promotion arrow will appear at right side of the QA build version pointing to the newly generated release build.Click the newly generated release build. When the build finishes, you will see that the jar file is now copied from QA build and renamed to reflect the release version."
      },
      {
        "header": "Resolutionâ",
        "content": "Editpromotion setting of the QA configurationand define a promotion, with propertydestination configurationdefined as release configuration, and propertyfiles to promotedefined as desired files need to be promoted. All promoted files will be copied to workspace of node running the master step of destination configuration.Editstep setting of the release configurationto define desired steps need to be executed during the release process. In this demo, we add steps to change name of promoted artifacts, publish promoted artifacts, and at last create label in the SCM.infoPlease make sure that the same repositories are used in QA and release configuration. This makes sure that all repository related steps in the release configuration operate against the repository revision used in the QA build. In our example, we define the repository directlyat the project leveland it is inherited by both QA and release configurations.Optionally you may set up the release configuration to disallow direct triggering, so that new releases can only be promoted from QA build. This can be done by editinggeneral setting of the release configurationand set theRun Modeproperty asDISABLED."
      }
    ],
    "links": []
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Authenticate+through+Active+Directory",
    "title": "Authenticate through Active Directory",
    "breadcrumb": [
      "",
      "Build Setup Tutorials",
      "LDAP Authentication"
    ],
    "full_text": "Build Setup Tutorials\nLDAP Authentication\nAuthenticate through Active Directory\nVersion: QB14\nOn this page\nAuthenticate through Active Directory\nScenario\nâ\nAuthenticate users through Active Directory and retrieve associated groups to determine user permission. We assume that:\nDomain of the Active Directory is example.com.\nThis Active Directory can be accessed through address\nldap://ad.example.com:389\nUsers and groups are managed under LDAP entry\ncn=Users,dc=example,dc=com\n.\nUser\nquickbuild\nis used to search user and group information in this Active Directory.\nResolution\nâ\nFor each Active Directory group you want to assign QuickBuild permissions, create a group with the same name in QuickBuild, and set proper permissions.\nLogin as Administrator, switch to menu\nAuthentication->Security Settings\n, and add an authenticator of\nActive Directory\ntype like below:\nYour users should now be able to login to QuickBuild and access to QuickBuild functionalities will be controlled using the group information from Active Directory.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Authenticate through Active Directory",
        "content": ""
      },
      {
        "header": "Scenarioâ",
        "content": "Authenticate users through Active Directory and retrieve associated groups to determine user permission. We assume that: Domain of the Active Directory is example.com.This Active Directory can be accessed through addressldap://ad.example.com:389Users and groups are managed under LDAP entrycn=Users,dc=example,dc=com.Userquickbuildis used to search user and group information in this Active Directory."
      },
      {
        "header": "Resolutionâ",
        "content": "For each Active Directory group you want to assign QuickBuild permissions, create a group with the same name in QuickBuild, and set proper permissions.Login as Administrator, switch to menuAuthentication->Security Settings, and add an authenticator ofActive Directorytype like below:Your users should now be able to login to QuickBuild and access to QuickBuild functionalities will be controlled using the group information from Active Directory."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Authenticate+through+Fedora+Directory+Server",
      "https://wiki.pmease.com/display/QB14/Authenticate+through+Fedora+Directory+Server"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Authenticate+through+Fedora+Directory+Server",
    "title": "Authenticate through Fedora Directory Server",
    "breadcrumb": [
      "",
      "Build Setup Tutorials",
      "LDAP Authentication"
    ],
    "full_text": "Build Setup Tutorials\nLDAP Authentication\nAuthenticate through Fedora Directory Server\nVersion: QB14\nOn this page\nAuthenticate through Fedora Directory Server\nScenario\nâ\nAuthenticate users through Fedora directory server and retrieve associated groups to determine user permission. We assume that:\nThis directory server can be accessed through address\nldaps://ds.example.com:636\nUsers are managed under LDAP entry\nou=people,dc=example,dc=com\n.\nGroups are managed under LDAP entry\nou=groups,dc=example,dc=com\n.\nResolution\nâ\nFor each LDAP group you want to assign QuickBuild permissions, create a group with the same name in QuickBuild, and set proper permissions.\nLogin as Administrator, switch to menu\nAuthentication->Security Settings\n, and add an authenticator of LDAP type like below:\nYour users should now be able to login to QuickBuild and access to QuickBuild functionalities will be controlled using the group information from the fedora directory server.\ninfo\nTo browse directory server user and group information in a LDAP friendly way (that is, be able to browse DN and various attribute names/values), you may need to install a LDAP client (such as\nApache Directory Studio\n), and connect it to your directory server using LDAP url, user and password information listed above.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Authenticate through Fedora Directory Server",
        "content": ""
      },
      {
        "header": "Scenarioâ",
        "content": "Authenticate users through Fedora directory server and retrieve associated groups to determine user permission. We assume that: This directory server can be accessed through addressldaps://ds.example.com:636Users are managed under LDAP entryou=people,dc=example,dc=com.Groups are managed under LDAP entryou=groups,dc=example,dc=com."
      },
      {
        "header": "Resolutionâ",
        "content": "For each LDAP group you want to assign QuickBuild permissions, create a group with the same name in QuickBuild, and set proper permissions.Login as Administrator, switch to menuAuthentication->Security Settings, and add an authenticator of LDAP type like below:Your users should now be able to login to QuickBuild and access to QuickBuild functionalities will be controlled using the group information from the fedora directory server. infoTo browse directory server user and group information in a LDAP friendly way (that is, be able to browse DN and various attribute names/values), you may need to install a LDAP client (such asApache Directory Studio), and connect it to your directory server using LDAP url, user and password information listed above."
      }
    ],
    "links": []
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Single+Sign-On+with+Azure+AD++SAML+",
    "title": "Single Sign-On with Azure AD (SAML)",
    "breadcrumb": [
      "",
      "Build Setup Tutorials",
      "Single Sign-On"
    ],
    "full_text": "Build Setup Tutorials\nSingle Sign-On\nSingle Sign-On with Azure AD (SAML)\nVersion: QB14\nOn this page\nSingle Sign-On with Azure AD (SAML)\nPurpose\nâ\nThis tutorial demonstrates how to set up QuickBuild to authenticate via Azure AD using SAML protocol\nAssumptions\nâ\nQuickBuild is accessed via\nhttps://build.example.com\nSteps\nâ\nCreate an application in Azure AD:\nAssign users/groups to created application\nOpen SAML SSO setup page:\nEdit basic SAML configuration, change\nIdentifier\nas\nhttps://build.example.com/saml_\n, and _Reply URL\nas _\nhttps://build.example.com/sso-login_\n, and then save the setting:\nEdit user attributes and claims to add group claim:\nDownload and save the Idp meta data:\nLogin to QuickBuild, navigate to page\nAdministration/Security Setting\nand select\nSSO via SAML2\nas\nSSO Provider\n. Paste content of downloaded metadata from above step into field\nIdP Metadata\nRun below commands to generate SP private key and self-signed SP certificate:\nopenssl req\n-\nx509\n-\nnodes\n-\ndays\n365\n-\nnewkey rsa\n:\n4096\n-\nkeyout sp\n-\nkey\n.\npem\n-\nout sp\n-\ncert\n.\ncrt\nopenssl pkcs8\n-\ntopk8\n-\ninform\nPEM\n-\noutform\nPEM\n-\nnocrypt\n-\nin sp\n-\nkey\n.\npem\n-\nout sp\n-\nkey\n-\npkcs8\n.\npem\nCopy content of file\nsp-key-pkcs8.pem\ninto field\nSP Private Key\n, and content of file\nsp-cert.crt\ninto field\nSP Cert\nContinue to specify below fields in SAML setting:\nEmail Attribute:\nhttps://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress\nFull Name Attribute:\nhttps://schemas.microsoft.com/identity/claims/displayname\nGroup Names Attribute:\nhttps://schemas.microsoft.com/ws/2008/06/identity/claims/groups\nSpecify a default group if necessary and save the setting\nNavigate to\nGroup Management\npage and define groups with same name as we've defined in Azure AD, and assign appropriate permissions\nNavigate to page\nAdministration/System Setting\n, and make sure property\nUrl to Access QuickBuild\nis specified as _\nhttps://build.example.com_\nNow logout and visit _\nhttps://build.example.com_\n(make sure to visit the url specified in system setting), the sign in page should display a SSO login button\nClick this button and you will be taken to Azure AD for authentication. If authenticated successfully, you will be logged into QuickBuild.\nwarning\nYou can still login to QuickBuild with normal user/password without clicking the SSO button\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Single Sign-On with Azure AD (SAML)",
        "content": ""
      },
      {
        "header": "Purposeâ",
        "content": "This tutorial demonstrates how to set up QuickBuild to authenticate via Azure AD using SAML protocol"
      },
      {
        "header": "Assumptionsâ",
        "content": "QuickBuild is accessed viahttps://build.example.com"
      },
      {
        "header": "Stepsâ",
        "content": "Create an application in Azure AD:Assign users/groups to created applicationOpen SAML SSO setup page:Edit basic SAML configuration, changeIdentifierashttps://build.example.com/saml_, and _Reply URLas _https://build.example.com/sso-login_, and then save the setting:Edit user attributes and claims to add group claim:Download and save the Idp meta data:Login to QuickBuild, navigate to pageAdministration/Security Settingand selectSSO via SAML2asSSO Provider. Paste content of downloaded metadata from above step into fieldIdP MetadataRun below commands to generate SP private key and self-signed SP certificate:openssl req-x509-nodes-days365-newkey rsa:4096-keyout sp-key.pem-out sp-cert.crtopenssl pkcs8-topk8-informPEM-outformPEM-nocrypt-in sp-key.pem-out sp-key-pkcs8.pemCopy content of filesp-key-pkcs8.peminto fieldSP Private Key, and content of filesp-cert.crtinto fieldSP CertContinue to specify below fields in SAML setting:Email Attribute:https://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddressFull Name Attribute:https://schemas.microsoft.com/identity/claims/displaynameGroup Names Attribute:https://schemas.microsoft.com/ws/2008/06/identity/claims/groupsSpecify a default group if necessary and save the settingNavigate toGroup Managementpage and define groups with same name as we've defined in Azure AD, and assign appropriate permissionsNavigate to pageAdministration/System Setting, and make sure propertyUrl to Access QuickBuildis specified as _https://build.example.com_Now logout and visit _https://build.example.com_(make sure to visit the url specified in system setting), the sign in page should display a SSO login buttonClick this button and you will be taken to Azure AD for authentication. If authenticated successfully, you will be logged into QuickBuild.warningYou can still login to QuickBuild with normal user/password without clicking the SSO button"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Single+Sign-On+with+Okta++SAML+",
      "https://wiki.pmease.com/display/QB14/Single+Sign-On+with+Okta++OpenID+",
      "https://wiki.pmease.com/display/QB14/Single+Sign-On+with+Windows+Domain+Account++Trusted+Http+Header+",
      "https://wiki.pmease.com/display/QB14/Single+Sign-On+with+Okta++SAML+"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Single+Sign-On+with+Okta++SAML+",
    "title": "Single Sign-On with Okta (SAML)",
    "breadcrumb": [
      "",
      "Build Setup Tutorials",
      "Single Sign-On"
    ],
    "full_text": "Build Setup Tutorials\nSingle Sign-On\nSingle Sign-On with Okta (SAML)\nVersion: QB14\nOn this page\nSingle Sign-On with Okta (SAML)\nPurpose\nâ\nThis tutorial demonstrates how to set up QuickBuild to authenticate via\nOkta\nusing SAML protocol\nAssumptions\nâ\nQuickBuild is accessed via\nhttps://build.example.com\nSteps\nâ\nLogin to your organization account at Okta, and switch to Classic UI from\nDeveloper Console\nAdd appropriate groups for QuickBuild, for instance qb.developers and qb.testers, and add your current Okta account into these groups\nCreate new application in Okta, with platform being\nWeb\nand sign in method being\nSAML 2.0\n:\nFill in general setting of the application, and click next:\nFill in SAML settings as below and click next:\nSelect appropriate options in feedback page and click finish:\nOkta will bring you to the\nSign On\ntab after clicking finish button above. From here, click the\nIdentity Provider Metadata\nlink to show the content:\nCopy the metadata XML into clipboard\nNavigate to\nAssignments\ntab and make sure you've been assigned to the application:\nNow login to QuickBuild, navigate to page\nAdministration/Security Setting\nand select\nSSO via SAML2\nas\nSSO Provider\n. Paste the copied metadata from above step into field\nIdP Metadata\nRun below commands to generate SP private key and self-signed SP certificate:\nopenssl req\n-\nx509\n-\nnodes\n-\ndays\n365\n-\nnewkey rsa\n:\n4096\n-\nkeyout sp\n-\nkey\n.\npem\n-\nout sp\n-\ncert\n.\ncrt\nopenssl pkcs8\n-\ntopk8\n-\ninform\nPEM\n-\noutform\nPEM\n-\nnocrypt\n-\nin sp\n-\nkey\n.\npem\n-\nout sp\n-\nkey\n-\npkcs8\n.\npem\nCopy content of file\nsp-key-pkcs8.pem\ninto field\nSP Private Key\n, and content of file\nsp-cert.crt\ninto field\nSP Cert\nwarning\nFor Okta SAML integration, SP cert is actually not used as it does not verify authentication request signature. However other SAML integrations may require you to upload the SP cert to verify the signature.\nSpecify\nemail\nfor field\nEmail Attribute\n, and\ngroup\nfor\nGroup Names Attribute\n. Attributes specified here should be the same as you've specified at Okta side\nSpecify a default group if necessary and save the setting\nNavigate to\nGroup Management\npage and define groups with same name as we've defined in Okta, and assign appropriate permissions:\nNavigate to page\nAdministration/System Setting\n, and make sure property\nUrl to Access QuickBuild\nis specified as _\nhttps://build.example.com_\nNow logout and visit _\nhttps://build.example.com_\n(make sure to visit the url specified in system setting), the sign in page should display a SSO login button\nClick this button and you will be taken to Okta site for authentication. If authenticated successfully, you will be logged into QuickBuild.\nwarning\nYou can still login to QuickBuild with normal user/password without clicking the SSO button\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Single Sign-On with Okta (SAML)",
        "content": ""
      },
      {
        "header": "Purposeâ",
        "content": "This tutorial demonstrates how to set up QuickBuild to authenticate viaOktausing SAML protocol"
      },
      {
        "header": "Assumptionsâ",
        "content": "QuickBuild is accessed viahttps://build.example.com"
      },
      {
        "header": "Stepsâ",
        "content": "Login to your organization account at Okta, and switch to Classic UI fromDeveloper ConsoleAdd appropriate groups for QuickBuild, for instance qb.developers and qb.testers, and add your current Okta account into these groupsCreate new application in Okta, with platform beingWeband sign in method beingSAML 2.0:Fill in general setting of the application, and click next:Fill in SAML settings as below and click next:Select appropriate options in feedback page and click finish:Okta will bring you to theSign Ontab after clicking finish button above. From here, click theIdentity Provider Metadatalink to show the content:Copy the metadata XML into clipboardNavigate toAssignmentstab and make sure you've been assigned to the application:Now login to QuickBuild, navigate to pageAdministration/Security Settingand selectSSO via SAML2asSSO Provider. Paste the copied metadata from above step into fieldIdP MetadataRun below commands to generate SP private key and self-signed SP certificate:openssl req-x509-nodes-days365-newkey rsa:4096-keyout sp-key.pem-out sp-cert.crtopenssl pkcs8-topk8-informPEM-outformPEM-nocrypt-in sp-key.pem-out sp-key-pkcs8.pemCopy content of filesp-key-pkcs8.peminto fieldSP Private Key, and content of filesp-cert.crtinto fieldSP CertwarningFor Okta SAML integration, SP cert is actually not used as it does not verify authentication request signature. However other SAML integrations may require you to upload the SP cert to verify the signature.Specifyemailfor fieldEmail Attribute, andgroupforGroup Names Attribute. Attributes specified here should be the same as you've specified at Okta sideSpecify a default group if necessary and save the settingNavigate toGroup Managementpage and define groups with same name as we've defined in Okta, and assign appropriate permissions:Navigate to pageAdministration/System Setting, and make sure propertyUrl to Access QuickBuildis specified as _https://build.example.com_Now logout and visit _https://build.example.com_(make sure to visit the url specified in system setting), the sign in page should display a SSO login buttonClick this button and you will be taken to Okta site for authentication. If authenticated successfully, you will be logged into QuickBuild.warningYou can still login to QuickBuild with normal user/password without clicking the SSO button"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Single+Sign-On+with+Okta++OpenID+",
      "https://wiki.pmease.com/display/QB14/Single+Sign-On+with+Windows+Domain+Account++Trusted+Http+Header+",
      "https://wiki.pmease.com/display/QB14/Single+Sign-On+with+Okta++OpenID+"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Single+Sign-On+with+Okta++OpenID+",
    "title": "Single Sign-On with Okta (OpenID)",
    "breadcrumb": [
      "",
      "Build Setup Tutorials",
      "Single Sign-On"
    ],
    "full_text": "Build Setup Tutorials\nSingle Sign-On\nSingle Sign-On with Okta (OpenID)\nVersion: QB14\nOn this page\nSingle Sign-On with Okta (OpenID)\nPurpose\nâ\nThis tutorial demonstrates how to set up QuickBuild to authenticate via\nOkta\nusing OpenID protocol\nBasic Setup\nâ\nMake sure your QuickBuild instance is publicly accessible, and configure the public server url in system setting:\nLogin to Okta to add an application integration with sign-in method as OIDC and type as web application\nContinue to set up the application and specify sign-in redirect url as below:\nFor assignment option in this page, just use\nAllow everyone in your organization to access\nfor simplicity purpose\nSave the application and copy out the client id and client secret to be used later:\nFrom Okta menu, select Security/Api to display authorization servers. Copy out the issuer url of default server to be used later:\nAt QuickBuild side, setup SSO via OpenID like below. Copy issuer url, client id and client secret from Okta. Specify\nGroups Claim\nas\ngroups\nSave the provider, and sign out QuickBuild. Visit QuickBuild again\nvia the public url\n, and then you should be able to login via Okta\nAuthorize Users Based On Okta Group Membership Information\nâ\nNow we continue to set up Okta to send group membership information so that user can be authorized with appropriate permissions\nVisit detail page of the default authorization server we seen before, switch to scopes tab and add a scope of name\ngroups\nwith default options:\nSwitch to claims tab and add a claim of name\ngroups\nto be included in ID token and groups scope like below:\nAt QuickBuild side, switch to group management page, add necessary Okta groups (same name) and assign appropriate permissions\nNow users signed in via Okta will be authorized with permissions available in corresponding groups\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Single Sign-On with Okta (OpenID)",
        "content": ""
      },
      {
        "header": "Purposeâ",
        "content": "This tutorial demonstrates how to set up QuickBuild to authenticate viaOktausing OpenID protocol"
      },
      {
        "header": "Basic Setupâ",
        "content": "Make sure your QuickBuild instance is publicly accessible, and configure the public server url in system setting:Login to Okta to add an application integration with sign-in method as OIDC and type as web applicationContinue to set up the application and specify sign-in redirect url as below:For assignment option in this page, just useAllow everyone in your organization to accessfor simplicity purposeSave the application and copy out the client id and client secret to be used later:From Okta menu, select Security/Api to display authorization servers. Copy out the issuer url of default server to be used later:At QuickBuild side, setup SSO via OpenID like below. Copy issuer url, client id and client secret from Okta. SpecifyGroups ClaimasgroupsSave the provider, and sign out QuickBuild. Visit QuickBuild againvia the public url, and then you should be able to login via Okta"
      },
      {
        "header": "Authorize Users Based On Okta Group Membership Informationâ",
        "content": "Now we continue to set up Okta to send group membership information so that user can be authorized with appropriate permissions Visit detail page of the default authorization server we seen before, switch to scopes tab and add a scope of namegroupswith default options:Switch to claims tab and add a claim of namegroupsto be included in ID token and groups scope like below:At QuickBuild side, switch to group management page, add necessary Okta groups (same name) and assign appropriate permissions Now users signed in via Okta will be authorized with permissions available in corresponding groups"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Single+Sign-On+with+Windows+Domain+Account++Trusted+Http+Header+",
      "https://wiki.pmease.com/display/QB14/Single+Sign-On+with+Windows+Domain+Account++Trusted+Http+Header+"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Single+Sign-On+with+Windows+Domain+Account++Trusted+Http+Header+",
    "title": "Single Sign-On with Windows Domain Account (Trusted Http Header)",
    "breadcrumb": [
      "",
      "Build Setup Tutorials",
      "Single Sign-On"
    ],
    "full_text": "Build Setup Tutorials\nSingle Sign-On\nSingle Sign-On with Windows Domain Account (Trusted Http Header)\nVersion: QB14\nOn this page\nSingle Sign-On with Windows Domain Account (Trusted Http Header)\nPurpose\nâ\nThis tutorial explains how to set up an environment so that Windows domain user can access QuickBuild without using password.\nAssumptions\nâ\nWindows domain is\nexample.com\nWindows domain controller server is Windows 2012 R2, and can be accessed via LDAP protocol:\nldap://dc.example.com:389\nQuickBuild server is installed at Ubuntu 3.13.0-40-generic, with DNS name\nbuild.example.com\n, and running on port 8810\nSteps\nâ\nLogin to ubuntu server, and make sure below commands work as expected:\n*\n$ nslookup build\n.\nexample\n.\ncom\nThis command should return ip address of the ubuntu server\n*\n$ nslookup\n<\nip address of ubuntu server\n>\nThis command should return\nbuild.example.com\nMake sure\nbuild.example.com\nis the only host record in your DNS pointing to the ubuntu server, and vice versa for the reverse lookup dns records (PTR). Otherwise, single sign-on may not work for some unknown reason.\nCreate a domain user\nquickbuild\nin your domain controller, with following options:\nCreate another domain user\napache\nwith same options as above\nOn domain controller, open powershell as Administrator, and run below command to generate keytab for apache user:\nktpass\n-\nprinc\nHTTP\n/\nbuild\n.\nexample\n.\ncom\n@EXAMPLE.COM\n-\nmapuser apache\n-\ncrypto\nRC4\n-\nHMAC\n-\nNT\n-\nptype\nKRB5_NT_PRINCIPAL\n-\npass\n<\npassword of apache user\n>\n-\nout apache\n.\nkeytab\nThe generated\napache.keytab\nwill be used later.\nLogin to ubuntu server to install and configure kerberos client package:\nsudo apt\n-\nget install krb5\n-\nuser\nInput\nEXAMPLE.COM\nwhen installation procedure asks for default Kerberos realm. After installing Kerberos, modify\n/etc/krb5.conf\n:\nadd below under section\n[realms]\n:\nEXAMPLE\n.\nCOM\n=\n{\nkdc\n=\ndc\n.\nexample\n.\ncom\ndefault_domain\n=\nexample\n.\ncom\n}\nadd below under section\n[domain_realm]\n.\nexample\n.\ncom\n=\nEXAMPLE\n.\nCOM\nexample\n.\ncom\n=\nEXAMPLE\n.\nCOM\nNow test if Kerberos client works by runnig command\nkinit _<your Windows domain logon name>\n. If configured correctly, it should prompt you to input your domain password to get the ticket. Then you should be able to list the ticket by running\nklist\n.\nContinue to configure apache httpd server on the ubuntu server:\nInstall apache httpd server if it is not already installed:\nsudo apt\n-\nget install apache2\nInstall apache kerberos module if it is not already installed:\nsudo apt\n-\nget install libapache2\n-\nmod\n-\nauth\n-\nkerb\nEnable below apache modules:\n$ sudo a2enmod proxy_http rewrite headers\nCopy file\napache.keytab\ngenerated above from your domain controller to ubuntu server and place it under directory\n/etc/apache2\n, and then run below commands against the file:\n$ sudo chown www\n-\ndata apache\n.\nkeytab\n$ sudo chgrp www\n-\ndata apache\n.\nkeytab\n$ sudo chmod\n600\napache\n.\nkeytab\nCreate file\n/etc/apache/sites-available/build.example.com.conf\nwith below content to define virtual host for QuickBuild:\n<\nVirtualHost\n*\n:\n80\n>\n#\nif\nyou are configuring reverse proxy\nwith\nhttps\nenabled\n,\nmake sure\nto\nprepend\nthe\nServerName\n# directive\nwith\n\"https://\"\nschema\n,\nfor\nexample\n:\nhttps\n:\n/\n/\nbuild\n.\nexample\n.\ncom\n:\n443\nServerName\nbuild\n.\nexample\n.\ncom\nProxyRequests\nOff\n# turn off\nthis\noption\n.\nWe\nwill rely on\nProxyPassReverse\nto\ntranslate\n# urls in\nHttp\nresponse\nheaders\n.\nProxyPreserveHost\nOff\n<\nProxy\n*\n>\nOrder\nallow\n,\ndeny\nAllow\nfrom all\n<\n/\nProxy\n>\nProxyPass\n/\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\nProxyPassReverse\n/\nhttp\n:\n/\n/\nlocalhost\n:\n8810\n/\n<\nLocation\n/\n>\nAuthType\nKerberos\nAuthName\n\"Build Server\"\nKrbAuthRealms\nEXAMPLE\n.\nCOM\nKrbServiceName\nHTTP\nKrb5Keytab\n/\netc\n/\napache2\n/\napache\n.\nkeytab\nKrbMethodNegotiate\non\n#\nTurn\non\nthis\noption in\ncase\nthe browser does not support\nKerberos\nauthentication\n,\n# in that\ncase\n,\nit will fall back\nto\nhttp\nbasic authentication\nto\nprompt\nuser\nfor\n#\npassword\n.\nKrbMethodK5Passwd\non\nRequire\nvalid\n-\nuser\n#\nBelow\ndirectives puts logon name of authenticated user into http header _X\n-\nForwarded\n-\nUser_\n# so that\nQuickBuild\ncan use it\nRequestHeader\nunset\nX\n-\nForwarded\n-\nUser\nRewriteEngine\nOn\nRewriteCond\n%\n{\nLA\n-\nU\n:\nREMOTE_USER\n}\n(\n.\n+\n)\nRewriteRule\n.\n*\n-\n[\nE\n=\nRU\n:\n%\n1\n,\nNS\n]\nRequestHeader\nset\nX\n-\nForwarded\n-\nUser\n%\n{\nRU\n}\ne\n#\nRemove\ndomain suffix\nto\nget\nthe simple logon name\nRequestHeader\nedit\nX\n-\nForwarded\n-\nUser\n\"@EXAMPLE.COM$\"\n\"\"\n<\n/\nLocation\n>\n#\nBelow\ndirectives turn off\nKerberos\nauthentication\nfor\nvarious\nQuickBuild\nservices as their clients\n# are not able\nto\nhandle\nKerberos\nauthentication\n.\nQuickBuild\nwill use the traditional http basic\n# authentication in\nthis\ncase\n.\n<\nLocationMatch\n\"/(rest|service|agent_update|file_transfer|download|batch_download)\"\n>\nAuthType\nNone\nOrder\nallow\n,\ndeny\nAllow\nfrom all\nRequestHeader\nunset\nX\n-\nForwarded\n-\nUser\n<\n/\nLocationMatch\n>\nErrorLog\n$\n{\nAPACHE_LOG_DIR\n}\n/\nquickbuild\n-\nerror\n.\nlog\nCustomLog\n$\n{\nAPACHE_LOG_DIR\n}\n/\nquickbuild\n-\naccess\n.\nlog combined\nLogLevel\nwarn\n<\n/\nVirtualHost\n>\nRun below commands to enable virtual host created above and restart Apache:\n$ a2ensite build\n.\nexample\n.\ncom\n.\nconf\n$ sudo service apache2 restart\nLogin to QuickBuild as administrator, switch to page\nAdministration/Security Settings\n, and specify SSO provider as\nSSO via Trusted Http Header\nwith http header set to\nX-Forwarded-User\npassed from Apache reverse proxy like below:\nHere we only trust this header if it originates from ip\n127.0.0.1\nas Apache is installed on the same server\nNow everything has been configured at server side, logon to a Windows workstation with your domain account and open your browser. Before visiting\nbuild.example.com\n, we still need to configure the browser to trust url example.com:\non Internet Explorer, open\nInternet Options/Security /Local intranet\nto add\n.example.com\n:\nChrome internet option is pretty much the same as Internet Explorer\non Firefox, input\nabout:config\non the address bar, and search for\nnegotiate\nin the config. Then add\nexample.com\nto config\nnetwork.negotiate-auth.delegation-uris\nand\nnetwork.negotiate-auth.trusted-uris\nlike below:\nNow visit QuickBuild sign-in page, there should exist a SSO login button to let users login without username/password. Permission of users logged in this way will be determined by default group configured at SSO provider page.\nwarning\nYou can still login to QuickBuild with normal user/password without clicking the SSO button\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Single Sign-On with Windows Domain Account (Trusted Http Header)",
        "content": ""
      },
      {
        "header": "Purposeâ",
        "content": "This tutorial explains how to set up an environment so that Windows domain user can access QuickBuild without using password."
      },
      {
        "header": "Assumptionsâ",
        "content": "Windows domain isexample.comWindows domain controller server is Windows 2012 R2, and can be accessed via LDAP protocol:ldap://dc.example.com:389QuickBuild server is installed at Ubuntu 3.13.0-40-generic, with DNS namebuild.example.com, and running on port 8810"
      },
      {
        "header": "Stepsâ",
        "content": "Login to ubuntu server, and make sure below commands work as expected:\n*$ nslookup build.example.comThis command should return ip address of the ubuntu server\n*$ nslookup<ip address of ubuntu server>This command should returnbuild.example.comMake surebuild.example.comis the only host record in your DNS pointing to the ubuntu server, and vice versa for the reverse lookup dns records (PTR). Otherwise, single sign-on may not work for some unknown reason.Create a domain userquickbuildin your domain controller, with following options:Create another domain userapachewith same options as aboveOn domain controller, open powershell as Administrator, and run below command to generate keytab for apache user:ktpass-princHTTP/build.example.com@EXAMPLE.COM-mapuser apache-cryptoRC4-HMAC-NT-ptypeKRB5_NT_PRINCIPAL-pass<password of apache user>-out apache.keytabThe generatedapache.keytabwill be used later.Login to ubuntu server to install and configure kerberos client package:sudo apt-get install krb5-userInputEXAMPLE.COMwhen installation procedure asks for default Kerberos realm. After installing Kerberos, modify/etc/krb5.conf:add below under section[realms]:EXAMPLE.COM={kdc=dc.example.comdefault_domain=example.com}add below under section[domain_realm].example.com=EXAMPLE.COMexample.com=EXAMPLE.COMNow test if Kerberos client works by runnig commandkinit _<your Windows domain logon name>. If configured correctly, it should prompt you to input your domain password to get the ticket. Then you should be able to list the ticket by runningklist.Continue to configure apache httpd server on the ubuntu server:Install apache httpd server if it is not already installed:sudo apt-get install apache2Install apache kerberos module if it is not already installed:sudo apt-get install libapache2-mod-auth-kerbEnable below apache modules:$ sudo a2enmod proxy_http rewrite headersCopy fileapache.keytabgenerated above from your domain controller to ubuntu server and place it under directory/etc/apache2, and then run below commands against the file:$ sudo chown www-data apache.keytab$ sudo chgrp www-data apache.keytab$ sudo chmod600apache.keytabCreate file/etc/apache/sites-available/build.example.com.confwith below content to define virtual host for QuickBuild:<VirtualHost*:80>#ifyou are configuring reverse proxywithhttpsenabled,make suretoprependtheServerName# directivewith\"https://\"schema,forexample:https://build.example.com:443ServerNamebuild.example.comProxyRequestsOff# turn offthisoption.Wewill rely onProxyPassReversetotranslate# urls inHttpresponseheaders.ProxyPreserveHostOff<Proxy*>Orderallow,denyAllowfrom all</Proxy>ProxyPass/http://localhost:8810/ProxyPassReverse/http://localhost:8810/<Location/>AuthTypeKerberosAuthName\"Build Server\"KrbAuthRealmsEXAMPLE.COMKrbServiceNameHTTPKrb5Keytab/etc/apache2/apache.keytabKrbMethodNegotiateon#Turnonthisoption incasethe browser does not supportKerberosauthentication,# in thatcase,it will fall backtohttpbasic authenticationtopromptuserfor#password.KrbMethodK5PasswdonRequirevalid-user#Belowdirectives puts logon name of authenticated user into http header _X-Forwarded-User_# so thatQuickBuildcan use itRequestHeaderunsetX-Forwarded-UserRewriteEngineOnRewriteCond%{LA-U:REMOTE_USER}(.+)RewriteRule.*-[E=RU:%1,NS]RequestHeadersetX-Forwarded-User%{RU}e#Removedomain suffixtogetthe simple logon nameRequestHeadereditX-Forwarded-User\"@EXAMPLE.COM$\"\"\"</Location>#Belowdirectives turn offKerberosauthenticationforvariousQuickBuildservices as their clients# are not abletohandleKerberosauthentication.QuickBuildwill use the traditional http basic# authentication inthiscase.<LocationMatch\"/(rest|service|agent_update|file_transfer|download|batch_download)\">AuthTypeNoneOrderallow,denyAllowfrom allRequestHeaderunsetX-Forwarded-User</LocationMatch>ErrorLog${APACHE_LOG_DIR}/quickbuild-error.logCustomLog${APACHE_LOG_DIR}/quickbuild-access.log combinedLogLevelwarn</VirtualHost>Run below commands to enable virtual host created above and restart Apache:$ a2ensite build.example.com.conf$ sudo service apache2 restartLogin to QuickBuild as administrator, switch to pageAdministration/Security Settings, and specify SSO provider asSSO via Trusted Http Headerwith http header set toX-Forwarded-Userpassed from Apache reverse proxy like below:Here we only trust this header if it originates from ip127.0.0.1as Apache is installed on the same serverNow everything has been configured at server side, logon to a Windows workstation with your domain account and open your browser. Before visitingbuild.example.com, we still need to configure the browser to trust url example.com:on Internet Explorer, openInternet Options/Security /Local intranetto add.example.com:Chrome internet option is pretty much the same as Internet Exploreron Firefox, inputabout:configon the address bar, and search fornegotiatein the config. Then addexample.comto confignetwork.negotiate-auth.delegation-urisandnetwork.negotiate-auth.trusted-urislike below:Now visit QuickBuild sign-in page, there should exist a SSO login button to let users login without username/password. Permission of users logged in this way will be determined by default group configured at SSO provider page.warningYou can still login to QuickBuild with normal user/password without clicking the SSO button"
      }
    ],
    "links": []
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/LDAP+Authentication",
    "title": "LDAP Authentication",
    "breadcrumb": [],
    "full_text": "Version: QB14\nLDAP Authentication\nTable Of Contents\nAuthenticate through Active Directory\nAuthenticate through Fedora Directory Server\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "LDAP Authentication",
        "content": ""
      }
    ],
    "links": []
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/GCP+Integration",
    "title": "GCP Integration",
    "breadcrumb": [
      "",
      "Build Setup Tutorials",
      "Launch Build Agent On Demand"
    ],
    "full_text": "Build Setup Tutorials\nLaunch Build Agent On Demand\nGCP Integration\nVersion: QB14\nOn this page\nGCP Integration\nSituation\nâ\nSet up QuickBuild the same as tutorial\nOne Build For One Agent\n, except that build agents should be started in GCP as necessary. Launched build agents should be able to be closed if they are idle for specified amount of time to save cost.\nResolution\nâ\nSet up QuickBuild according to resolution section of tutorial\nOne Build For One Agent\n.\nLogin to QuickBuild as administrator and switch to administration menu, then follow the\nplugin management\nlink, and edit plugin setting of\nGCP Plugin\nto provide a json file containing private key of a GCP service account. The GCP service account should have permission to launch/access/delete compute instances in particular GCP projects. Check\nhere\non how to create service account and\nhere\non how to obtain json file containing private key of the service account\nMake sure to\nenable GCP compute engine API\nCreate appropriate build agent instance template following [this guide](Launch Node in GCP.html#LaunchNodeinGCP-createbuildagentinstancetemplate) if necessary.\nSwitch to grid page and follow the\nCloud Profiles\nlink to bring out the cloud profiles page. Add a cloud profile with\nnode launch setting\nspecified as\nLaunch Node into GCP\nand fill relevant GCP node launch options. Specifically the\nGCP instance template\nshould be filled with full name of the build agent instance template you created previously.\nQuickBuild will proceed to do a test launch of your defined cloud profile to grab system/user attribute of node launched by your profile. Grabbed system/user attributes will be used afterwards to match against node matcher setting of build steps to determine which profile has to be used to launch node if no active agents satisfy the criteria. Only after test launch the profile can be used by builds to launch node on demand. Normally the test launch should be done in two or three minutes, if it takes too long, please check instance status as well as agent log at EC2 side.\nNow run the build. If configured correctly, QuickBuild will launch build agent using your defined cloud profile to run the build. By default the launched build agent will stay active for 30 minutes before terminating. If more builds are set to run in the same time, more agents will be launched to accommodate the concurrency. You may check all launched instances by examining the\nactive launched nodes\ntab of certain cloud profile, and may manually terminate them there.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "GCP Integration",
        "content": ""
      },
      {
        "header": "Situationâ",
        "content": "Set up QuickBuild the same as tutorialOne Build For One Agent, except that build agents should be started in GCP as necessary. Launched build agents should be able to be closed if they are idle for specified amount of time to save cost."
      },
      {
        "header": "Resolutionâ",
        "content": "Set up QuickBuild according to resolution section of tutorialOne Build For One Agent.Login to QuickBuild as administrator and switch to administration menu, then follow theplugin managementlink, and edit plugin setting ofGCP Pluginto provide a json file containing private key of a GCP service account. The GCP service account should have permission to launch/access/delete compute instances in particular GCP projects. Checkhereon how to create service account andhereon how to obtain json file containing private key of the service accountMake sure toenable GCP compute engine APICreate appropriate build agent instance template following [this guide](Launch Node in GCP.html#LaunchNodeinGCP-createbuildagentinstancetemplate) if necessary.Switch to grid page and follow theCloud Profileslink to bring out the cloud profiles page. Add a cloud profile withnode launch settingspecified asLaunch Node into GCPand fill relevant GCP node launch options. Specifically theGCP instance templateshould be filled with full name of the build agent instance template you created previously.QuickBuild will proceed to do a test launch of your defined cloud profile to grab system/user attribute of node launched by your profile. Grabbed system/user attributes will be used afterwards to match against node matcher setting of build steps to determine which profile has to be used to launch node if no active agents satisfy the criteria. Only after test launch the profile can be used by builds to launch node on demand. Normally the test launch should be done in two or three minutes, if it takes too long, please check instance status as well as agent log at EC2 side.Now run the build. If configured correctly, QuickBuild will launch build agent using your defined cloud profile to run the build. By default the launched build agent will stay active for 30 minutes before terminating. If more builds are set to run in the same time, more agents will be launched to accommodate the concurrency. You may check all launched instances by examining theactive launched nodestab of certain cloud profile, and may manually terminate them there."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Retry+Step+On+Spot+VM",
      "https://wiki.pmease.com/display/QB14/Amazon+EC2+Integration",
      "https://wiki.pmease.com/display/QB14/Microsoft+Azure+Integration",
      "https://wiki.pmease.com/display/QB14/Retry+Step+On+Spot+VM"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Retry+Step+On+Spot+VM",
    "title": "Retry Step On Spot VM",
    "breadcrumb": [
      "",
      "Build Setup Tutorials",
      "Launch Build Agent On Demand"
    ],
    "full_text": "Build Setup Tutorials\nLaunch Build Agent On Demand\nRetry Step On Spot VM\nVersion: QB14\nOn this page\nRetry Step On Spot VM\nSituation\nâ\nQuickBuild supports to launch Amazon/Azure spot VM on demand to reduce cost. Since spot VM can be terminated at any time, the build should be retried on other nodes upon VM termination.\nResolution\nâ\nQuickBuild steps can be retried via retry setting in advanced section of step definition. However this retry only happens on current node. So if you specify retry setting for the step running on spot VM, it will not work. Instead, we should retry the parent step and the parent step should run on non-spot VM. A\ndemo configuration\nis set up to explain the idea:\nStep\nbuild\nis set up to run on any build agent, and we assume that build agents will be launched on demand using spot VM\nStep\nmaster\nis configured to run on server which is not a spot VM, and master step will be retried 3 times upon step error message\n.*Error testing job.*\nwhich will be reported if node running any child step is terminated\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Retry Step On Spot VM",
        "content": ""
      },
      {
        "header": "Situationâ",
        "content": "QuickBuild supports to launch Amazon/Azure spot VM on demand to reduce cost. Since spot VM can be terminated at any time, the build should be retried on other nodes upon VM termination."
      },
      {
        "header": "Resolutionâ",
        "content": "QuickBuild steps can be retried via retry setting in advanced section of step definition. However this retry only happens on current node. So if you specify retry setting for the step running on spot VM, it will not work. Instead, we should retry the parent step and the parent step should run on non-spot VM. Ademo configurationis set up to explain the idea: Stepbuildis set up to run on any build agent, and we assume that build agents will be launched on demand using spot VMStepmasteris configured to run on server which is not a spot VM, and master step will be retried 3 times upon step error message.*Error testing job.*which will be reported if node running any child step is terminated"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Amazon+EC2+Integration",
      "https://wiki.pmease.com/display/QB14/Microsoft+Azure+Integration",
      "https://wiki.pmease.com/display/QB14/Amazon+EC2+Integration"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Amazon+EC2+Integration",
    "title": "Amazon EC2 Integration",
    "breadcrumb": [
      "",
      "Build Setup Tutorials",
      "Launch Build Agent On Demand"
    ],
    "full_text": "Build Setup Tutorials\nLaunch Build Agent On Demand\nAmazon EC2 Integration\nVersion: QB14\nOn this page\nAmazon EC2 Integration\nSituation\nâ\nSet up QuickBuild the same as tutorial\nOne Build For One Agent\n, except that build agents should be started in EC2 as necessary. Launched build agents should be able to be closed if they are idle for specified amount of time to save cost.\nResolution\nâ\nSet up QuickBuild according to resolution section of tutorial\nOne Build For One Agent\n.\nLogin to QuickBuild as administrator and switch to administration menu, then follow the\nplugin management\nlink, and edit plugin setting of\nAmazon EC2 Plugin\nto provide a file containing your EC2 access keys.\nCreate appropriate build agent AMI following [this guide](Launch Node in EC2.html#LaunchNodeinEC2-createbuildagentAMI) if necessary.\nSwitch to grid page and follow the\nCloud Profiles\nlink to bring out the cloud profiles page. Add a cloud profile with\nnode launch setting\nspecified as\nLaunch Node into Amazon EC2\nand fill relevant EC2 node launch options. Specifically the\nAMI ID\nshould be filled with the identifier of the build agent AMI you created previously.\nQuickBuild will proceed to do a test launch of your defined cloud profile to grab system/user attribute of node launched by your profile. Grabbed system/user attributes will be used afterwards to match against node matcher setting of build steps to determine which profile has to be used to launch node if no active agents satisfy the criteria. Only after test launch the profile can be used by builds to launch node on demand. Normally the test launch should be done in two or three minutes, if it takes too long, please check instance status as well as agent log at EC2 side.\nNow run the build. If configured correctly, QuickBuild will launch build agent using your defined cloud profile to run the build. By default the launched build agent will stay active for 30 minutes before terminating. If more builds are set to run in the same time, more agents will be launched to accommodate the concurrency. You may check all launched instances by examining the\nactive launched nodes\ntab of certain cloud profile, and may manually terminate them there.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Amazon EC2 Integration",
        "content": ""
      },
      {
        "header": "Situationâ",
        "content": "Set up QuickBuild the same as tutorialOne Build For One Agent, except that build agents should be started in EC2 as necessary. Launched build agents should be able to be closed if they are idle for specified amount of time to save cost."
      },
      {
        "header": "Resolutionâ",
        "content": "Set up QuickBuild according to resolution section of tutorialOne Build For One Agent.Login to QuickBuild as administrator and switch to administration menu, then follow theplugin managementlink, and edit plugin setting ofAmazon EC2 Pluginto provide a file containing your EC2 access keys.Create appropriate build agent AMI following [this guide](Launch Node in EC2.html#LaunchNodeinEC2-createbuildagentAMI) if necessary.Switch to grid page and follow theCloud Profileslink to bring out the cloud profiles page. Add a cloud profile withnode launch settingspecified asLaunch Node into Amazon EC2and fill relevant EC2 node launch options. Specifically theAMI IDshould be filled with the identifier of the build agent AMI you created previously.QuickBuild will proceed to do a test launch of your defined cloud profile to grab system/user attribute of node launched by your profile. Grabbed system/user attributes will be used afterwards to match against node matcher setting of build steps to determine which profile has to be used to launch node if no active agents satisfy the criteria. Only after test launch the profile can be used by builds to launch node on demand. Normally the test launch should be done in two or three minutes, if it takes too long, please check instance status as well as agent log at EC2 side.Now run the build. If configured correctly, QuickBuild will launch build agent using your defined cloud profile to run the build. By default the launched build agent will stay active for 30 minutes before terminating. If more builds are set to run in the same time, more agents will be launched to accommodate the concurrency. You may check all launched instances by examining theactive launched nodestab of certain cloud profile, and may manually terminate them there."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Microsoft+Azure+Integration",
      "https://wiki.pmease.com/display/QB14/Microsoft+Azure+Integration"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Microsoft+Azure+Integration",
    "title": "Microsoft Azure Integration",
    "breadcrumb": [
      "",
      "Build Setup Tutorials",
      "Launch Build Agent On Demand"
    ],
    "full_text": "Build Setup Tutorials\nLaunch Build Agent On Demand\nMicrosoft Azure Integration\nVersion: QB14\nOn this page\nMicrosoft Azure Integration\nSituation\nâ\nSet up QuickBuild the same as tutorial\nOne Build For One Agent\n, except that build agents should be started in Azure as necessary. Launched build agents should be able to be closed if they are idle for specified amount of time to save cost.\nResolution\nâ\nSet up QuickBuild according to resolution section of tutorial\nOne Build For One Agent\n.\nLogin to QuickBuild as administrator and switch to administration menu, then follow the\nplugin management\nlink, and edit plugin setting of\nAzure Plugin\nto provide Azure authentication file.\nCreate appropriate build agent custom image following [this guide](Launch Node in Azure.html#LaunchNodeinAzure-createbuildagentimage) if necessary.\nSwitch to grid page and follow the\nCloud Profiles\nlink to bring out the cloud profiles page. Add a cloud profile with\nnode launch setting\nspecified as\nLaunch Windows Node into Azure\nor\nLaunch Linux Node into Azure\nand fill relevant node launch options. Specifically the\ncustom image resource id\nshould be filled with resource id of the build agent image you created previously.\nQuickBuild will proceed to do a test launch of your defined cloud profile to grab system/user attribute of node launched by your profile. Grabbed system/user attributes will be used afterwards to match against node matcher setting of build steps to determine which profile has to be used to launch node if no active agents satisfy the criteria. Only after test launch the profile can be used by builds to launch node on demand. Normally the test launch should be done within five minutes, if it takes too long, please check resource status as well as agent log at Azure side.\nNow run the build. If configured correctly, QuickBuild will launch build agent using your defined cloud profile to run the build. By default the launched build agent will stay active for 30 minutes before terminating. If more builds are set to run in the same time, more agents will be launched to accommodate the concurrency. You may check all launched instances by examining the\nactive launched nodes\ntab of certain cloud profile, and may manually terminate them there.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Microsoft Azure Integration",
        "content": ""
      },
      {
        "header": "Situationâ",
        "content": "Set up QuickBuild the same as tutorialOne Build For One Agent, except that build agents should be started in Azure as necessary. Launched build agents should be able to be closed if they are idle for specified amount of time to save cost."
      },
      {
        "header": "Resolutionâ",
        "content": "Set up QuickBuild according to resolution section of tutorialOne Build For One Agent.Login to QuickBuild as administrator and switch to administration menu, then follow theplugin managementlink, and edit plugin setting ofAzure Pluginto provide Azure authentication file.Create appropriate build agent custom image following [this guide](Launch Node in Azure.html#LaunchNodeinAzure-createbuildagentimage) if necessary.Switch to grid page and follow theCloud Profileslink to bring out the cloud profiles page. Add a cloud profile withnode launch settingspecified asLaunch Windows Node into AzureorLaunch Linux Node into Azureand fill relevant node launch options. Specifically thecustom image resource idshould be filled with resource id of the build agent image you created previously.QuickBuild will proceed to do a test launch of your defined cloud profile to grab system/user attribute of node launched by your profile. Grabbed system/user attributes will be used afterwards to match against node matcher setting of build steps to determine which profile has to be used to launch node if no active agents satisfy the criteria. Only after test launch the profile can be used by builds to launch node on demand. Normally the test launch should be done within five minutes, if it takes too long, please check resource status as well as agent log at Azure side.Now run the build. If configured correctly, QuickBuild will launch build agent using your defined cloud profile to run the build. By default the launched build agent will stay active for 30 minutes before terminating. If more builds are set to run in the same time, more agents will be launched to accommodate the concurrency. You may check all launched instances by examining theactive launched nodestab of certain cloud profile, and may manually terminate them there."
      }
    ],
    "links": []
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Installation+Guide",
    "title": "Installation Guide",
    "breadcrumb": [],
    "full_text": "Version: QB14\nInstallation Guide\nInstallation Guide\nInstall QuickBuild Server\nInstall QuickBuild Build Agent\n(required if you want to configure build grid)\nInstall QuickBuild User Agent\n(required if you want to set up proof build)\nInstall As System Service\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Installation Guide",
        "content": ""
      }
    ],
    "links": []
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Distributed+Builds",
    "title": "Distributed Builds",
    "breadcrumb": [],
    "full_text": "Version: QB14\nDistributed Builds\nTable Of Contents\nBuild Multi-platform Projects\nReduce Server Load\nSpeed up Build Process\nTest on All Applicable Agents\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Distributed Builds",
        "content": ""
      }
    ],
    "links": []
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Publish+Build+Reports",
    "title": "Publish Build Reports",
    "breadcrumb": [],
    "full_text": "Version: QB14\nOn this page\nPublish Build Reports\nIntroduction\nâ\nBuild reports are very important for detecting a project health. By adding your build reports to QuickBuild, the project health can be tracked very easily, and the most importantly QuickBuild can collect the statistics data from those reports. This will help you to analyze the project\nbuild statistics\nlater. You may have a look at this\nquick example\nfor how to publish the reports.\nFollowing screenshot shows a typical Java project overview by adding some reports to QuickBuild:\nSupported Reports\nâ\nFollowing table lists all the reports supported in QuickBuild:\nJava Category\nâ\nReport Name\nVersion\nJUnit Report\n3.8+\nTestNG Report\n5.7\nFindbugs Report\n1.3.5+\nCheckStyle Report\n4.1+\nEMMA Report\n2.1+\nCobertura Report\n1.9.2+\nJaCoCo Report\n0.6.1+\nPMD Report\n4.2.2\nCPD Report\nClover Report\n3.2.2+\nCoverity Report\nJMeter Performance Report\n.NET Category\nâ\nReport Name\nVersion\nMSTest Report\nNUnit Report\n2.0\nMBUnit Report\n2.4+\nFxcop Report\n1.35+\nNCover Report\n3.0+\nCoverity Report\n3rd Party Reports\nâ\nFor reports not directly supported in QuickBuild, you can\npublish HTML reports\n. If you want to collect the statistics data, you can publish your\ncustomized statistics reports\n.\nGeneric Step for Publishing Build Report\nâ\nTo publish a build report in QuickBuild, you just need two steps:\nGenerate the build report by using\nAnt\n,\nMaven\n,\nNAnt\n, etc. When generating the build reports with those tools, the XML format should be used. QuickBuild only recognizes XML reports.\nAdd a publish step for the specific report. For example, for JUnit, add a publish junit step, for TestNG, add a publish TestNG step.\nThat is all you need to do! Both the reports and the statistics data for the reports will be collected automatically, and you can\nview them in QuickBuild\ndirectly instead of generating external HTML report.\nPublish Report Step Attributes\nâ\nBelow lists the specific attributes for publish report step:\nAttribute\nDescription\nSource Directory\nSpecify the directory under which to search xml files containing report data. A non-absolute path is considered to be relative to current workspace directory . If left empty, the workspace directory itself will be used.\nFiles to Process\nUse a\nfile pattern\nto specify the files need be published. Path specified here is relative to specified source directory, for example\nreports/junit/*.xml\nmeans you want to publish all the files with\n.xml\nsuffix under the\nreeports/junit\nsub-directory.\nStep Failure Condition\nA BOOLEAN expression. Used to determine whether this step will be failed or not.\nStep Failure Message\nUsed to display a failure message on build overview tab when step is failed.\nReport Set Name\nSometimes, we need publish reports in different report set. For example, when we run tests with different platforms, such as Windows, Linux, Solaris, we can define several publish steps to collect the reports for each of them, we may define a step named\nPublish Tests On Windows\nand specify the report set name here as\nOn Windows\n, and define another publish step named\nPublish Tests on Linux\nwith the report set name here as\nOn Linux\n, etc. Quickbulid will collect those reports seperately and aggregate them together on Dashboard, report tab and statistics page.\n* The report set name should be unique in one configuration for one kind of publish report step. * One and only one can be empty. For example, if serveral steps for publish junit reports are defined, one can be empty for the report set name this will be recognized as 'default' report set in Quickbuild, and others should have different report set names. * For different kinds of publish step, the report set name can be the same. For example, 'With Tomcat' for Publish JUnit Step, and 'With Tomcat' for Publish TestNG step, this is allowed in QuickBuild.\n::: |\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Publish Build Reports",
        "content": ""
      },
      {
        "header": "Introductionâ",
        "content": "Build reports are very important for detecting a project health. By adding your build reports to QuickBuild, the project health can be tracked very easily, and the most importantly QuickBuild can collect the statistics data from those reports. This will help you to analyze the projectbuild statisticslater. You may have a look at thisquick examplefor how to publish the reports. Following screenshot shows a typical Java project overview by adding some reports to QuickBuild:"
      },
      {
        "header": "Supported Reportsâ",
        "content": "Following table lists all the reports supported in QuickBuild:"
      },
      {
        "header": "Java Categoryâ",
        "content": "Report NameVersionJUnit Report3.8+TestNG Report5.7Findbugs Report1.3.5+CheckStyle Report4.1+EMMA Report2.1+Cobertura Report1.9.2+JaCoCo Report0.6.1+PMD Report4.2.2CPD ReportClover Report3.2.2+Coverity ReportJMeter Performance Report"
      },
      {
        "header": ".NET Categoryâ",
        "content": "Report NameVersionMSTest ReportNUnit Report2.0MBUnit Report2.4+Fxcop Report1.35+NCover Report3.0+Coverity Report"
      },
      {
        "header": "3rd Party Reportsâ",
        "content": "For reports not directly supported in QuickBuild, you canpublish HTML reports. If you want to collect the statistics data, you can publish yourcustomized statistics reports."
      },
      {
        "header": "Generic Step for Publishing Build Reportâ",
        "content": "To publish a build report in QuickBuild, you just need two steps: Generate the build report by usingAnt,Maven,NAnt, etc. When generating the build reports with those tools, the XML format should be used. QuickBuild only recognizes XML reports.Add a publish step for the specific report. For example, for JUnit, add a publish junit step, for TestNG, add a publish TestNG step. That is all you need to do! Both the reports and the statistics data for the reports will be collected automatically, and you canview them in QuickBuilddirectly instead of generating external HTML report."
      },
      {
        "header": "Publish Report Step Attributesâ",
        "content": "Below lists the specific attributes for publish report step: AttributeDescriptionSource DirectorySpecify the directory under which to search xml files containing report data. A non-absolute path is considered to be relative to current workspace directory . If left empty, the workspace directory itself will be used.Files to ProcessUse afile patternto specify the files need be published. Path specified here is relative to specified source directory, for examplereports/junit/*.xmlmeans you want to publish all the files with.xmlsuffix under thereeports/junitsub-directory.Step Failure ConditionA BOOLEAN expression. Used to determine whether this step will be failed or not.Step Failure MessageUsed to display a failure message on build overview tab when step is failed.Report Set NameSometimes, we need publish reports in different report set. For example, when we run tests with different platforms, such as Windows, Linux, Solaris, we can define several publish steps to collect the reports for each of them, we may define a step namedPublish Tests On Windowsand specify the report set name here asOn Windows, and define another publish step namedPublish Tests on Linuxwith the report set name here asOn Linux, etc. Quickbulid will collect those reports seperately and aggregate them together on Dashboard, report tab and statistics page. * The report set name should be unique in one configuration for one kind of publish report step. * One and only one can be empty. For example, if serveral steps for publish junit reports are defined, one can be empty for the report set name this will be recognized as 'default' report set in Quickbuild, and others should have different report set names. * For different kinds of publish step, the report set name can be the same. For example, 'With Tomcat' for Publish JUnit Step, and 'With Tomcat' for Publish TestNG step, this is allowed in QuickBuild.::: |"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Working+with+Reports"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Working+with+Cloud+Profiles",
    "title": "Working with Cloud Profiles",
    "breadcrumb": [],
    "full_text": "Version: QB14\nOn this page\nWorking with Cloud Profiles\nOverview\nâ\nQuickBuild 5.0 introduces the\nCloud Profile\nconcept to support launching build agents on demand into cloud environment. A cloud profile defines characteristics of the build agent and knows how to launch the build agent. Build agents launched by the same cloud profile will have the same characteristics including operating system, installed software,\nenvironments, system and user attributes etc. So if you have builds with different agent requirements, you will need to define multiple cloud profiles. After a cloud profile is defined, QuickBuild will try to launch a temporal agent to grab agent system and user attributes and store them into the profile. Internally QuickBuild treats cloud profiles as virtual agents, and in case there is no existing agents satisfying requirements of a build step, QuickBuild will match these virtual agents against the step. If a match is found, QuickBuild will launch a concrete agent using the profile to run the step. A launched build agent will be terminated automatically if it is idle for certain period of time, and the administrator can also terminate them manually if necessary.\nDefine cloud profile\nâ\nCloud profiles need to be defined by administrators in\nGrid/Cloud Profiles\npage like below:\nAfter pressing the add button, QuickBuild will present the profile definition screen as below:\nThen you can select desired cloud provider via\nNode Launcher Setting\nin the screen and define how to launch agent in that cloud. QuickBuild will do a test launch of the defined cloud profile to grab build agent characteristics including system and user attributes to form the virtual node. The test launch screen is as below:\nThe test launch should normally complete within two or three minutes. If successful, QuickBuild will present below screen to user:\nUse cloud profiles\nâ\nOnce cloud profiles are defined and test launch passed, they will be used as virtual nodes to match node requirement of steps if no existing agents matches. You may also define grid resources to match characteristics of certain cloud profiles, so that agents referenced by these profiles can be launched on demand if the resource is exhausted. For a particular cloud profile, launched nodes will be listed in active nodes tab of the profile like below:\nNodes listed here will be terminated automatically if it is not being used by any steps for the timeout value defined by the profile, and you may also terminate them manually as demonstrated in the screenshot.\nFrom time to time, you might see odd entries in inactive node list like below:\nThese entries are created by cloud profiles in order to auto-authenticate launched nodes and the unknown fields will be filled by info of launched nodes when they are active. So do not remove them in normal cases.\nDiagnose cloud profile issues\nâ\nIf test launch fails, you may check the server log to see detailed message about the launch error.\nIf test launch does not report any error but just sit there never completes, you may follow below steps to examine the status:\nCheck at cloud provider side to see if the test agent has been launched successfully.\nIf test agent has been launched, login to the agent to check QuickBuild agent console log to see if there are any errors being printed. The agent console log can be found in\n<agent install dir>/logs\ndirectory.\nIf no obvious errors found in agent console log, check\nGrid/Active Nodes\npage at QuickBuild server side to see if the launched node appears there. If yes, most probably the node is launched with an image already containing the authentication token, which is NOT suggested. The fix is simple, just unauthorize the launched node and the test launch should be successful shortly.\nIf build step is in WAITING_NODE status, and relevant cloud profile does not launch node as expected, please check if virtual node represented by the profile really matches the step. To verify, you may launch a node manually at cloud provider side to see if it can be picked up by the step.\nIf cloud profile takes too long to launch an agent, please check if the agent tries to update plugins when it starts up. If yes, please re-create the agent image for the profile after plugins have been updated. Note that you should first unauthorize the agent before creating the image; otherwise, test launch for your updated profile will never complete as described above.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Working with Cloud Profiles",
        "content": ""
      },
      {
        "header": "Overviewâ",
        "content": "QuickBuild 5.0 introduces theCloud Profileconcept to support launching build agents on demand into cloud environment. A cloud profile defines characteristics of the build agent and knows how to launch the build agent. Build agents launched by the same cloud profile will have the same characteristics including operating system, installed software, environments, system and user attributes etc. So if you have builds with different agent requirements, you will need to define multiple cloud profiles. After a cloud profile is defined, QuickBuild will try to launch a temporal agent to grab agent system and user attributes and store them into the profile. Internally QuickBuild treats cloud profiles as virtual agents, and in case there is no existing agents satisfying requirements of a build step, QuickBuild will match these virtual agents against the step. If a match is found, QuickBuild will launch a concrete agent using the profile to run the step. A launched build agent will be terminated automatically if it is idle for certain period of time, and the administrator can also terminate them manually if necessary."
      },
      {
        "header": "Define cloud profileâ",
        "content": "Cloud profiles need to be defined by administrators inGrid/Cloud Profilespage like below: After pressing the add button, QuickBuild will present the profile definition screen as below: Then you can select desired cloud provider viaNode Launcher Settingin the screen and define how to launch agent in that cloud. QuickBuild will do a test launch of the defined cloud profile to grab build agent characteristics including system and user attributes to form the virtual node. The test launch screen is as below: The test launch should normally complete within two or three minutes. If successful, QuickBuild will present below screen to user:"
      },
      {
        "header": "Use cloud profilesâ",
        "content": "Once cloud profiles are defined and test launch passed, they will be used as virtual nodes to match node requirement of steps if no existing agents matches. You may also define grid resources to match characteristics of certain cloud profiles, so that agents referenced by these profiles can be launched on demand if the resource is exhausted. For a particular cloud profile, launched nodes will be listed in active nodes tab of the profile like below: Nodes listed here will be terminated automatically if it is not being used by any steps for the timeout value defined by the profile, and you may also terminate them manually as demonstrated in the screenshot. From time to time, you might see odd entries in inactive node list like below: These entries are created by cloud profiles in order to auto-authenticate launched nodes and the unknown fields will be filled by info of launched nodes when they are active. So do not remove them in normal cases."
      },
      {
        "header": "Diagnose cloud profile issuesâ",
        "content": "If test launch fails, you may check the server log to see detailed message about the launch error.If test launch does not report any error but just sit there never completes, you may follow below steps to examine the status:Check at cloud provider side to see if the test agent has been launched successfully.If test agent has been launched, login to the agent to check QuickBuild agent console log to see if there are any errors being printed. The agent console log can be found in<agent install dir>/logsdirectory.If no obvious errors found in agent console log, checkGrid/Active Nodespage at QuickBuild server side to see if the launched node appears there. If yes, most probably the node is launched with an image already containing the authentication token, which is NOT suggested. The fix is simple, just unauthorize the launched node and the test launch should be successful shortly.If build step is in WAITING_NODE status, and relevant cloud profile does not launch node as expected, please check if virtual node represented by the profile really matches the step. To verify, you may launch a node manually at cloud provider side to see if it can be picked up by the step.If cloud profile takes too long to launch an agent, please check if the agent tries to update plugins when it starts up. If yes, please re-create the agent image for the profile after plugins have been updated. Note that you should first unauthorize the agent before creating the image; otherwise, test launch for your updated profile will never complete as described above."
      }
    ],
    "links": []
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/SSO+via+Trusted+Http+Header",
    "title": "SSO via Trusted Http Header",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Security Management",
      "Single Sign On"
    ],
    "full_text": "Administrator's Guide\nSecurity Management\nSingle Sign On\nSSO via Trusted Http Header\nVersion: QB14\nOn this page\nSSO via Trusted Http Header\nHow it works\nâ\nQuickBuild supports single sign-on by trusting specified http header from specified ip address like below:\nIn this case, you should configure a front end such as Apache httpd to actually authenticate users and then forward the request to QuickBuild via mechanisms such as reverse proxy. The front-end should be configured appropriately to contain user logon name in specified http header, and QuickBuild will use that to identify authenticated user.\nExamples\nâ\nCheck here for an\nexample setup\n.\nImpacts on user agent, RESTful API access, and tray monitor\nâ\nSSO only takes effect when visit the web UI. User agent, RESTful API access and tray monitor have to authenticate to QuickBuild with normal user name and password.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "SSO via Trusted Http Header",
        "content": ""
      },
      {
        "header": "How it worksâ",
        "content": "QuickBuild supports single sign-on by trusting specified http header from specified ip address like below: In this case, you should configure a front end such as Apache httpd to actually authenticate users and then forward the request to QuickBuild via mechanisms such as reverse proxy. The front-end should be configured appropriately to contain user logon name in specified http header, and QuickBuild will use that to identify authenticated user."
      },
      {
        "header": "Examplesâ",
        "content": "Check here for anexample setup."
      },
      {
        "header": "Impacts on user agent, RESTful API access, and tray monitorâ",
        "content": "SSO only takes effect when visit the web UI. User agent, RESTful API access and tray monitor have to authenticate to QuickBuild with normal user name and password."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/SSO+via+SAML",
      "https://wiki.pmease.com/display/QB14/SSO+via+OpenID",
      "https://wiki.pmease.com/display/QB14/SSO+via+SAML"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/SSO+via+SAML",
    "title": "SSO via SAML",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Security Management",
      "Single Sign On"
    ],
    "full_text": "Administrator's Guide\nSecurity Management\nSingle Sign On\nSSO via SAML\nVersion: QB14\nOn this page\nSSO via SAML\nHow it works\nâ\nQuickBuild supports single sign-on via SAML2 protocol like below:\nWith this setup, QuickBuild works as SAML service provider, and you should at least configure it with SP private key, SP certificate and metadata from SAML identify provider.\nExamples\nâ\nCheck here for example setup for\nOkta\nor\nAzure AD\nImpacts on user agent, RESTful API access, and tray monitor\nâ\nSSO only takes effect when visit the web UI. User agent, RESTful API access and tray monitor have to authenticate to QuickBuild with normal user name and password.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "SSO via SAML",
        "content": ""
      },
      {
        "header": "How it worksâ",
        "content": "QuickBuild supports single sign-on via SAML2 protocol like below: With this setup, QuickBuild works as SAML service provider, and you should at least configure it with SP private key, SP certificate and metadata from SAML identify provider."
      },
      {
        "header": "Examplesâ",
        "content": "Check here for example setup forOktaorAzure AD"
      },
      {
        "header": "Impacts on user agent, RESTful API access, and tray monitorâ",
        "content": "SSO only takes effect when visit the web UI. User agent, RESTful API access and tray monitor have to authenticate to QuickBuild with normal user name and password."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/SSO+via+OpenID",
      "https://wiki.pmease.com/display/QB14/SSO+via+OpenID"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/SSO+via+OpenID",
    "title": "SSO via OpenID",
    "breadcrumb": [
      "",
      "Administrator's Guide",
      "Security Management",
      "Single Sign On"
    ],
    "full_text": "Administrator's Guide\nSecurity Management\nSingle Sign On\nSSO via OpenID\nVersion: QB14\nOn this page\nSSO via OpenID\nHow it works\nâ\nQuickBuild can be configured to perform single sign on via OpenID like below:\nExamples\nâ\nCheck here for example setup for\nOpenID\nImpacts on user agent, RESTful API access, and tray monitor\nâ\nSSO only takes effect when visit the web UI. User agent, RESTful API access and tray monitor have to authenticate to QuickBuild with normal user name and password.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "SSO via OpenID",
        "content": ""
      },
      {
        "header": "How it worksâ",
        "content": "QuickBuild can be configured to perform single sign on via OpenID like below:"
      },
      {
        "header": "Examplesâ",
        "content": "Check here for example setup forOpenID"
      },
      {
        "header": "Impacts on user agent, RESTful API access, and tray monitorâ",
        "content": "SSO only takes effect when visit the web UI. User agent, RESTful API access and tray monitor have to authenticate to QuickBuild with normal user name and password."
      }
    ],
    "links": []
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Set+up+Plugin+Development+Workspace",
    "title": "Set up Plugin Development Workspace",
    "breadcrumb": [
      "",
      "Developer's Guide",
      "Develop Plugins",
      "Plugin Tutorials"
    ],
    "full_text": "Developer's Guide\nDevelop Plugins\nPlugin Tutorials\nSet up Plugin Development Workspace\nVersion: QB14\nSet up Plugin Development Workspace\nMake sure JDK version 1.8 or higher is installed on your development machine.\nDownload QuickBuild\nfor your platform and extract to a directory, say\nC:\\quickbuild\n. Please note that QuickBuild binary distribution should be used here instead of source distribution.\nMake sure Eclipse Galileo (or higher)\nCLASSIC\nversion is installed.\nCreate a empty workspace directory to hold the plugin projects, and open Eclipse using this workspace.\nOpen Eclipse preference window and select menu\nJava->Installed JRE\n, make sure a JDK 1.8 or higher is available and selected as default JRE like below:\nKeep the preference window open, and switch to menu\nCompiler\n. Make sure the property\nCompiler compliance level\nis set to 1.8 as below:\nFrom Eclipse, select menu\nFile->Import\n, and import window will appear. Select\nPlugins and Fragments\nas import source like below:\nClick next to bring out a dialog with a set of import options. Specify directory\nC:\\quickbuild\\plugins\n(change to other directory as necessary if you've installed QuickBuild to other place in step 3) as import directory, and select the\nBinary projects with linked content\noption like below:\nClick next and a dialog will be presented to let you select plugins to import. Select plugin\ncom.pmease.quickbuild\n,\ncom.pmease.quickbuild.bootstrap\n,\ncom.pmease.quickbuild.equinoxadapter\nand\ncom.pmease.quickbuild.plugin.report.engine\nlike below:\nFour QuickBuild projects will be imported into the workspace, respectively\ncom.pmease.quickbuild\n,\ncom.pmease.quickbuild.bootstrap\n,\ncom.pmease.quickbuild.equinoxadapter\n(only necessary for QuickBuild 4.0.61 or higher), and\ncom.pmease.quickbuild.plugin.report.engine\n. Check Eclipse problems view to make sure it does not report any warnings and errors. If there are errors, the most probable reason is that you've selected to import these plugins as\nbinary projects\ninstead of\nBinary projects with linked content\nin step 8.\nFrom package explorer view, right click the project\ncom.pmease.quickbuild.bootstrap\n, and select menu\nRun As -> Java Application\nfrom the popup menu as below:\nThe\nselect java application\nwindow will appear. From there, select Bootstrap and click OK like below:\nQuickBuild will be launched from Eclipse. Follow printed instructions to set up QuickBuild server if necessary. Make sure there is no any errors printed out in Eclipse console.\nStop QuickBuild server. If you want to launch QuickBuild from Eclipse later, just run the configuration\nBootstrap\nwhich should already be created. Now the plugin development environment has been set up successfully.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Set up Plugin Development Workspace",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Write+Your+First+Plugin",
      "https://wiki.pmease.com/display/QB14/Working+with+Plugin+UI",
      "https://wiki.pmease.com/display/QB14/Working+with+Plugin+Settings",
      "https://wiki.pmease.com/display/QB14/Plugin+Data+Storage",
      "https://wiki.pmease.com/display/QB14/Migrate+Plugin+Data",
      "https://wiki.pmease.com/display/QB14/Write+Your+First+Plugin"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Write+Your+First+Plugin",
    "title": "Write Your First Plugin",
    "breadcrumb": [
      "",
      "Developer's Guide",
      "Develop Plugins",
      "Plugin Tutorials"
    ],
    "full_text": "Developer's Guide\nDevelop Plugins\nPlugin Tutorials\nWrite Your First Plugin\nVersion: QB14\nWrite Your First Plugin\nTo start simple, we will create a plugin adding a \"hello world\" step to the step choice menu. A \"hello world\" message will be printed in the build log if this step is executed.\nOpen the plugin development workspace mentioned in the\nworkspace setup\npage.\nCreate a new plugin project as demonstrated below:\nClick next to bring out the\nPlugin Project\nscreen. Specify project name and select\nEquinox\nas target platform as shown below:\nClick next to bring out plugin content screen. Fill various properties and click finish as below:\nThe plugin overview screen will be presented. Switch to dependencies tab and add plugin\ncom.pmease.quickbuild\nas required plugins like below:\nPress\nCtrl-S\nto save the setting.\nCreate a new class\nMyStep\nlike below:\npackage\ncom\n.\nexample\n.\nmyplugin\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nContext\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nannotation\n.\nEditable\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nstepsupport\n.\nStep\n;\n@Editable\n(\ncategory\n=\n\"examples\"\n,\nname\n=\n\"say hello world\"\n,\ndescription\n=\n\"This step simply prints \\\"hello world\\\" into the build log.\"\n)\npublic\nclass\nMyStep\nextends\nStep\n{\nprivate\nstatic\nfinal\nlong\nserialVersionUID\n=\n1L\n;\n@Override\npublic\nvoid\nrun\n(\n)\n{\nContext\n.\ngetLogger\n(\n)\n.\ninfo\n(\n\"hello world\"\n)\n;\n}\n}\nHere we define a step class and log a \"hello world\" messsage in its\nrun\nmethod. The annotation\n@Editable\nprovides some meta information about the step, such as its category, name and description. Refer to\nWorking with Plugin UI\nfor more information on how to control user interface by annotating classes.\ninfo\nPress\nF1\nover the\nStep\nclass (or any other framework classes defined in QuickBuild) will display its documentation since javadoc is automatically associated with the framework plugins when you set up the plugin workspace.\nOpen the class\nMyPlugin\n, and change it as below:\npackage\ncom\n.\nexample\n.\nmyplugin\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nextensionpoint\n.\nStepProvider\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\npluginsupport\n.\nAbstractPlugin\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nstepsupport\n.\nStep\n;\npublic\nclass\nMyPlugin\nextends\nAbstractPlugin\n{\n@Override\npublic\nObject\n[\n]\ngetExtensions\n(\n)\n{\nreturn\nnew\nObject\n[\n]\n{\nnew\nStepProvider\n(\n)\n{\n@Override\npublic\nClass\n<\n?\nextends\nStep\n>\ngetStepClass\n(\n)\n{\nreturn\nMyStep\n.\nclass\n;\n}\n}\n}\n;\n}\n}\nHere class\nAbstractPlugin\nis defined in project\ncom.pmease.quickbuild\n, and every plugin needs to extend this class. The\ngetExtensions\nmethod returns an array of extensions, and each extension needs to extend an extension point defined in QuickBuild framework or other plugins. Here we extend the extension point\nStepProvider\nto provide a new step type. Open file\n<QuickBuild install dir>/plugins/com.pmease.quickbuild.bootstrap/javadoc.zip/com/pmease/quickbuild/extensionpoint/package-summary.html\nfor all extension points defined in the framework.\n{#WriteYourFirstPlugin-exportpackage} Save above classes, bring up the plugin manifest editing UI by double clicking file\nMETA-INF/MANIFEST.MF\nof the plugin, switch to the runtime tab and export all packages of the plugin like below:\nNow we've finished developing of our first plugin. Let's examine the result by launching QuickBuild through the Bootstrap configuration like below:\nOpen a browser and point to address\nhttp://localhost:8810\n_ (or any other port you've configured in file _<QuickBuild install dir>/conf/node.properties\n). Set up the server if necessary, and select the root configuration in QuickBuild. Switch to\nsteps\ntab and click the\nadd\nicon at right side of the master step, you will be presented with below screen:\nA new category\nexamples\nappears in the step menu containing a new step type\nsay hello world\n. Select this step and click save on the step definition screen.\nClick run button to run\nroot\nconfiguration, a new build will be generated after a while. Select\nlog\ntab of the newly generated build, you will find the logged \"hello world\" message like below:\nAfter you've finished writing and testing the plugin, you can export the plugin to QuickBuild server's installation directory for production use. To do so:\nRight click desired plugin projects and select\nexport\nmenu item from the popup menu like below:\nSelect\nDeployable plugins and fragments\nin the next dialog like below:\nClick next, and specify QuickBuild server's installation directory in the next dialog as below:\nClick the finish button, and the plugin will be exported to the\nplugins\nsub directory under QuickBuild server's installation directory. Now you can run command\nbin/server.(bat|sh) console\nto start QuickBuild outside of Eclipse, and the newly exported plugins will be loaded. The plugin will also be propogated to all connected agents automatically upon server startup.\ninfo\nExporting to QuickBuild server's installation directory is not mandatory, you can also deploy the plugin by exporting it to some other directories, and manually copy exported plugin to\nplugins\nfolder under QuickBuild server's installation directory later.\n{#WriteYourFirstPlugin-headlessbuild}To build plugin in headless mode:\nMake sure you have\nAnt\ninstalled.\nPlace all your plugin projects in a directory, and copy file\n<QuickBuild server install dir>/dev/plugin/samples/build.xml\nto that directory. The directory should then look like this:\nbuild\n.\nxml\ncom\n.\nexample\n.\nmyplugin\ncom\n.\nexample\n.\nanotherplugin\nOpen a command prompt window and change to that directory. Define environment variable\nQUICKBUILD_HOME\nto point to installation directory of QuickBuild.\nRun command\nant\nto build the plugins. If successful, you will find your plugins packaged in sub directory\nstage/plugins\n.\nYou may run command\nant clean\nto optionally clean generated directories and files.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Write Your First Plugin",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Working+with+Plugin+UI",
      "https://wiki.pmease.com/display/QB14/Working+with+Plugin+Settings",
      "https://wiki.pmease.com/display/QB14/Plugin+Data+Storage",
      "https://wiki.pmease.com/display/QB14/Migrate+Plugin+Data",
      "https://wiki.pmease.com/display/QB14/Working+with+Plugin+UI",
      "https://wiki.pmease.com/display/QB14/Working+with+Plugin+UI"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Working+with+Plugin+UI",
    "title": "Working with Plugin UI",
    "breadcrumb": [
      "",
      "Developer's Guide",
      "Develop Plugins",
      "Plugin Tutorials"
    ],
    "full_text": "Developer's Guide\nDevelop Plugins\nPlugin Tutorials\nWorking with Plugin UI\nVersion: QB14\nOn this page\nWorking with Plugin UI\nGenerate UI with annotations\nâ\nQuickBuild has a\nBean Editor\nwhich is able to generate UI through annotations for below situations:\nView or edit steps.\nView or edit repositories.\nView or edit plugin settings.\nLet's demonstrate this by enhancing myplugin to log the message supplied by user instead of just a hard coded \"hello world\". To do so, we create another class\nMyAnotherStep.java\nlike below:\npackage\ncom\n.\nexample\n.\nmyplugin\n;\nimport\norg\n.\nhibernate\n.\nvalidator\n.\nNotEmpty\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nContext\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nannotation\n.\nEditable\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nannotation\n.\nScriptable\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nstepsupport\n.\nStep\n;\n@Editable\n(\ncategory\n=\n\"examples\"\n,\nname\n=\n\"print message\"\n,\ndescription\n=\n\"This step prints an user defined message into the build log.\"\n)\npublic\nclass\nMyAnotherStep\nextends\nStep\n{\nprivate\nstatic\nfinal\nlong\nserialVersionUID\n=\n1L\n;\nprivate\nString\nmessage\n;\n// UI annotations must be applied to the getter method\n@Editable\n(\norder\n=\n100\n,\nname\n=\n\"Your Message\"\n,\ndescription\n=\n\"Specify your message here.\"\n)\n@NotEmpty\n@Scriptable\npublic\nString\ngetMessage\n(\n)\n{\nreturn\nmessage\n;\n}\npublic\nvoid\nsetMessage\n(\nString\nmessage\n)\n{\nthis\n.\nmessage\n=\nmessage\n;\n}\n@Override\npublic\nvoid\nrun\n(\n)\n{\n// Make sure to call getters to access scriptable fields, otherwise,\n// the enclosed script will not be executed\nContext\n.\ngetLogger\n(\n)\n.\ninfo\n(\ngetMessage\n(\n)\n)\n;\n}\n}\nAnd modify\nMyPlugin.java\nto include this newly created step type as another extension:\npackage\ncom\n.\nexample\n.\nmyplugin\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nextensionpoint\n.\nStepProvider\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\npluginsupport\n.\nAbstractPlugin\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nstepsupport\n.\nStep\n;\npublic\nclass\nMyPlugin\nextends\nAbstractPlugin\n{\n@Override\npublic\nObject\n[\n]\ngetExtensions\n(\n)\n{\nreturn\nnew\nObject\n[\n]\n{\nnew\nStepProvider\n(\n)\n{\n@Override\npublic\nClass\n<\n?\nextends\nStep\n>\ngetStepClass\n(\n)\n{\nreturn\nMyStep\n.\nclass\n;\n}\n}\n,\nnew\nStepProvider\n(\n)\n{\n@Override\npublic\nClass\n<\n?\nextends\nStep\n>\ngetStepClass\n(\n)\n{\nreturn\nMyAnotherStep\n.\nclass\n;\n}\n}\n}\n;\n}\n}\nSave these classes, and start QuickBuild from Eclipse. You should now be able to see a new step type\nprint message\nin the\nexamples\ncategory. Edit this step by adding it to build execution sequence. Below UI will be presented:\nRun the build and your supplied message will be printed into build log.\nNow let's look at annotations applied to method\nMyAnotherStep#getMessage()\n:\nUI annotations must be applied to field's getter method.\nThe annotation\n@Editable\nmarks a field as editable and defines display name, order, and description of the field. These attributes are optional:\nIf name is left empty, the field name will be used.\nIf description is left empty, no description will be displayed when you edit the property.\nIf order is left empty, a default value of MAX_INTEGER will be assumed.\n@NotEmpty\nis an optional constraint annotation telling QuickBuild that this field does not accept empty value.\n@Scriptable\nis optional and is normally applied to field of String type. It allows the field to make use of QuickBuild's scripting facility. For example, when define the\nprint message\nstep, you may specify the message as\nhello ${user.name}\nto say hello to current QuickBuild user. Scriptable field needs to be accessed through getter method; otherwise the embedded scripts will not be executed. Method\nMyAnotherStep.java#run()\nobeys this rule by executing\nContext.getLogger().info(getMessage());\ninstead of\nContext.getLogger().info(message);\n.\nFor more information on how to annotate classes to generate customized UI, please refer to\nBean Editor\n.\nCreate UI with Wicket\nâ\nQuickBuild uses\nWicket\nas its presentation layer. If your plugin contributes tabs/panels to QuickBuild, you will need to have some knowledge of this framework. We demonstrate this by adding a new panel to build overview screen printing \"hello world\".\nFirst create a class\nMyPanel.java\nlike below:\npackage\ncom\n.\nexample\n.\nmyplugin\n;\nimport\norg\n.\napache\n.\nwicket\n.\nmarkup\n.\nhtml\n.\nbasic\n.\nLabel\n;\nimport\norg\n.\napache\n.\nwicket\n.\nmarkup\n.\nhtml\n.\npanel\n.\nPanel\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nContext\n;\npublic\nclass\nMyPanel\nextends\nPanel\n{\nprivate\nstatic\nfinal\nlong\nserialVersionUID\n=\n1L\n;\npublic\nMyPanel\n(\nString\nid\n)\n{\nsuper\n(\nid\n)\n;\nString\nuserName\n;\nif\n(\nContext\n.\ngetUser\n(\n)\n!=\nnull\n)\nuserName\n=\nContext\n.\ngetUser\n(\n)\n.\ngetName\n(\n)\n;\nelse\nuserName\n=\n\"guest\"\n;\nadd\n(\nnew\nLabel\n(\n\"message\"\n,\n\"hello \"\n+\nuserName\n)\n)\n;\n}\n}\nAnd add its html template\nMyPanel.html\nlike below:\n<\nwicket\n:\npanel\n>\n<\ndiv wicket\n:\nid\n=\n\"message\"\nclass\n=\n\"round-corner\"\nstyle\n=\n\"padding:16px;\"\n/\n>\n<\n/\nwicket\n:\npanel\n>\nFinally modify\nMyPlugin.java\nto implement extension point\nBuildOverviewContribution\n:\npackage\ncom\n.\nexample\n.\nmyplugin\n;\nimport\njava\n.\nutil\n.\nArrayList\n;\nimport\njava\n.\nutil\n.\nList\n;\nimport\norg\n.\napache\n.\nwicket\n.\nmarkup\n.\nhtml\n.\npanel\n.\nPanel\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nextensionpoint\n.\nBuildOverviewContribution\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nextensionpoint\n.\nStepProvider\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nextensionpoint\n.\nsupport\n.\nPanelCreator\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\npluginsupport\n.\nAbstractPlugin\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nstepsupport\n.\nStep\n;\npublic\nclass\nMyPlugin\nextends\nAbstractPlugin\n{\n@Override\npublic\nObject\n[\n]\ngetExtensions\n(\n)\n{\nreturn\nnew\nObject\n[\n]\n{\nnew\nStepProvider\n(\n)\n{\n@Override\npublic\nClass\n<\n?\nextends\nStep\n>\ngetStepClass\n(\n)\n{\nreturn\nMyStep\n.\nclass\n;\n}\n}\n,\nnew\nStepProvider\n(\n)\n{\n@Override\npublic\nClass\n<\n?\nextends\nStep\n>\ngetStepClass\n(\n)\n{\nreturn\nMyAnotherStep\n.\nclass\n;\n}\n}\n,\nnew\nBuildOverviewContribution\n(\n)\n{\npublic\nList\n<\nPanelCreator\n>\ngetPanelCreators\n(\n)\n{\nList\n<\nPanelCreator\n>\ncreators\n=\nnew\nArrayList\n<\nPanelCreator\n>\n(\n)\n;\ncreators\n.\nadd\n(\nnew\nPanelCreator\n(\n)\n{\npublic\nPanel\ngetPanel\n(\nString\nid\n)\n{\nreturn\nnew\nMyPanel\n(\nid\n)\n;\n}\n}\n)\n;\nreturn\ncreators\n;\n}\npublic\nint\ngetOrder\n(\n)\n{\nreturn\n500\n;\n}\n}\n}\n;\n}\n}\nStart QuickBuild and switch to build overview screen, you will see a new panel saying hello to current user.\nFor more details of creating plugin UI with Wicket, refer to plugin\ncom.pmease.quickbuild.plugin.sample.javancss\nin\nPlugin Examples\n.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Working with Plugin UI",
        "content": ""
      },
      {
        "header": "Generate UI with annotationsâ",
        "content": "QuickBuild has aBean Editorwhich is able to generate UI through annotations for below situations: View or edit steps.View or edit repositories.View or edit plugin settings. Let's demonstrate this by enhancing myplugin to log the message supplied by user instead of just a hard coded \"hello world\". To do so, we create another classMyAnotherStep.javalike below: packagecom.example.myplugin;importorg.hibernate.validator.NotEmpty;importcom.pmease.quickbuild.Context;importcom.pmease.quickbuild.annotation.Editable;importcom.pmease.quickbuild.annotation.Scriptable;importcom.pmease.quickbuild.stepsupport.Step;@Editable(category=\"examples\",name=\"print message\",description=\"This step prints an user defined message into the build log.\")publicclassMyAnotherStepextendsStep{privatestaticfinallongserialVersionUID=1L;privateStringmessage;// UI annotations must be applied to the getter method@Editable(order=100,name=\"Your Message\",description=\"Specify your message here.\")@NotEmpty@ScriptablepublicStringgetMessage(){returnmessage;}publicvoidsetMessage(Stringmessage){this.message=message;}@Overridepublicvoidrun(){// Make sure to call getters to access scriptable fields, otherwise,// the enclosed script will not be executedContext.getLogger().info(getMessage());}} And modifyMyPlugin.javato include this newly created step type as another extension: packagecom.example.myplugin;importcom.pmease.quickbuild.extensionpoint.StepProvider;importcom.pmease.quickbuild.pluginsupport.AbstractPlugin;importcom.pmease.quickbuild.stepsupport.Step;publicclassMyPluginextendsAbstractPlugin{@OverridepublicObject[]getExtensions(){returnnewObject[]{newStepProvider(){@OverridepublicClass<?extendsStep>getStepClass(){returnMyStep.class;}},newStepProvider(){@OverridepublicClass<?extendsStep>getStepClass(){returnMyAnotherStep.class;}}};}} Save these classes, and start QuickBuild from Eclipse. You should now be able to see a new step typeprint messagein theexamplescategory. Edit this step by adding it to build execution sequence. Below UI will be presented: Run the build and your supplied message will be printed into build log. Now let's look at annotations applied to methodMyAnotherStep#getMessage(): UI annotations must be applied to field's getter method.The annotation@Editablemarks a field as editable and defines display name, order, and description of the field. These attributes are optional:If name is left empty, the field name will be used.If description is left empty, no description will be displayed when you edit the property.If order is left empty, a default value of MAX_INTEGER will be assumed.@NotEmptyis an optional constraint annotation telling QuickBuild that this field does not accept empty value.@Scriptableis optional and is normally applied to field of String type. It allows the field to make use of QuickBuild's scripting facility. For example, when define theprint messagestep, you may specify the message ashello ${user.name}to say hello to current QuickBuild user. Scriptable field needs to be accessed through getter method; otherwise the embedded scripts will not be executed. MethodMyAnotherStep.java#run()obeys this rule by executingContext.getLogger().info(getMessage());instead ofContext.getLogger().info(message);. For more information on how to annotate classes to generate customized UI, please refer toBean Editor."
      },
      {
        "header": "Create UI with Wicketâ",
        "content": "QuickBuild usesWicketas its presentation layer. If your plugin contributes tabs/panels to QuickBuild, you will need to have some knowledge of this framework. We demonstrate this by adding a new panel to build overview screen printing \"hello world\". First create a classMyPanel.javalike below: packagecom.example.myplugin;importorg.apache.wicket.markup.html.basic.Label;importorg.apache.wicket.markup.html.panel.Panel;importcom.pmease.quickbuild.Context;publicclassMyPanelextendsPanel{privatestaticfinallongserialVersionUID=1L;publicMyPanel(Stringid){super(id);StringuserName;if(Context.getUser()!=null)userName=Context.getUser().getName();elseuserName=\"guest\";add(newLabel(\"message\",\"hello \"+userName));}} And add its html templateMyPanel.htmllike below: <wicket:panel><div wicket:id=\"message\"class=\"round-corner\"style=\"padding:16px;\"/></wicket:panel> Finally modifyMyPlugin.javato implement extension pointBuildOverviewContribution: packagecom.example.myplugin;importjava.util.ArrayList;importjava.util.List;importorg.apache.wicket.markup.html.panel.Panel;importcom.pmease.quickbuild.extensionpoint.BuildOverviewContribution;importcom.pmease.quickbuild.extensionpoint.StepProvider;importcom.pmease.quickbuild.extensionpoint.support.PanelCreator;importcom.pmease.quickbuild.pluginsupport.AbstractPlugin;importcom.pmease.quickbuild.stepsupport.Step;publicclassMyPluginextendsAbstractPlugin{@OverridepublicObject[]getExtensions(){returnnewObject[]{newStepProvider(){@OverridepublicClass<?extendsStep>getStepClass(){returnMyStep.class;}},newStepProvider(){@OverridepublicClass<?extendsStep>getStepClass(){returnMyAnotherStep.class;}},newBuildOverviewContribution(){publicList<PanelCreator>getPanelCreators(){List<PanelCreator>creators=newArrayList<PanelCreator>();creators.add(newPanelCreator(){publicPanelgetPanel(Stringid){returnnewMyPanel(id);}});returncreators;}publicintgetOrder(){return500;}}};}} Start QuickBuild and switch to build overview screen, you will see a new panel saying hello to current user. For more details of creating plugin UI with Wicket, refer to plugincom.pmease.quickbuild.plugin.sample.javancssinPlugin Examples."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Working+with+Plugin+Settings",
      "https://wiki.pmease.com/display/QB14/Plugin+Data+Storage",
      "https://wiki.pmease.com/display/QB14/Migrate+Plugin+Data",
      "https://wiki.pmease.com/display/QB14/Plugin+Examples",
      "https://wiki.pmease.com/display/QB14/Working+with+Plugin+Settings"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Working+with+Plugin+Settings",
    "title": "Working with Plugin Settings",
    "breadcrumb": [
      "",
      "Developer's Guide",
      "Develop Plugins",
      "Plugin Tutorials"
    ],
    "full_text": "Developer's Guide\nDevelop Plugins\nPlugin Tutorials\nWorking with Plugin Settings\nVersion: QB14\nOn this page\nWorking with Plugin Settings\nGlobal plugin setting\nâ\nPlugin might have settings global to the system. For example, the\nAnt\nplugin defines path to Ant executable in the global plugin setting. In this tutorial, we will continue to evolve myplugin to define a message prefix in the plugin setting so that all user specified messages are automatically prefixed with certain string.\nFirst let's define the plugin setting class\nMyPluginSetting.java\n:\npackage\ncom\n.\nexample\n.\nmyplugin\n;\nimport\norg\n.\nhibernate\n.\nvalidator\n.\nNotEmpty\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nannotation\n.\nEditable\n;\n// Plugin setting class must contains a default constructor and implement Serializable interface\npublic\nclass\nMyPluginSetting\nimplements\nSerializable\n{\nprivate\nString\nprefix\n;\n@Editable\n(\ndescription\n=\n\"Specify a message prefix here.\"\n)\n@NotEmpty\npublic\nString\ngetPrefix\n(\n)\n{\nreturn\nprefix\n;\n}\npublic\nvoid\nsetPrefix\n(\nString\nprefix\n)\n{\nthis\n.\nprefix\n=\nprefix\n;\n}\n}\nAnd then tell QuickBuild about this class by modifying\nMyPlugin.java\nas below:\n.\n.\n.\n// omitted for brevity\npublic\nclass\nMyPlugin\nextends\nAbstractPlugin\n{\n@Override\npublic\nObject\n[\n]\ngetExtensions\n(\n)\n{\n.\n.\n.\n// omitted for brevity\n}\n@Override\npublic\nClass\n<\n?\n>\ngetSettingClass\n(\n)\n{\nreturn\nMyPluginSetting\n.\nclass\n;\n}\n}\nFinally we modify\nMyAnotherStep.java\nto make use of the prefix:\nimport\ncom\n.\npmease\n.\nquickbuild\n.\npluginsupport\n.\nPluginSettingHelper\n;\n.\n.\n.\n// omitted for brevity\npublic\nclass\nMyAnotherStep\nextends\nStep\n{\n.\n.\n.\n// omitted for brevity\n@Override\npublic\nvoid\nrun\n(\n)\n{\nMyPluginSetting\npluginSetting\n=\n(\nMyPluginSetting\n)\nPluginSettingHelper\n.\ngetSetting\n(\nMyPlugin\n.\nclass\n,\ntrue\n)\n;\nContext\n.\ngetLogger\n(\n)\n.\ninfo\n(\npluginSetting\n.\ngetPrefix\n(\n)\n+\n\": \"\n+\ngetMessage\n(\n)\n)\n;\n}\n}\nNow start QuickBuild and it prints a warning message complaining that plugin\ncom.example.myplugin\nneeds to be configured. The plugin will temporarily be disabled if stored plugin setting object vilolates constraints of the plugin class. For newly installed plugins, the plugin setting object is initially created by calling default constructor of the plugin setting class.\nRun the root configuration, and you will see that all messages will start with the specified prefix.\ninfo\nRefer to\nBean Editor\nfor more information of how to annotate plugin setting class to generate appropriate UI.\nConfiguration level plugin setting\nâ\nConfiguration level plugin setting is defined at configuration level. The setting will be inherited from parent configuration if it is not defined. Continue with myplugin, now assume that we need to specify message prefix per configuration, we can then modify\nMyPlugin.java\nas below:\n.\n.\n.\n// omitted for brevity\npublic\nclass\nMyPlugin\nextends\nAbstractPlugin\n{\n@Override\npublic\nObject\n[\n]\ngetExtensions\n(\n)\n{\n.\n.\n.\n// omitted for brevity\n}\n/*\n@Override\npublic Class<?> getSettingClass() {\nreturn MyPluginSetting.class;\n}\n*/\n@Override\npublic\nClass\n<\n?\n>\ngetConfigurationSettingClass\n(\n)\n{\nreturn\nMyPluginSetting\n.\nclass\n;\n}\n}\nAlso please modify\nMyPluginSetting.java\nto provide a description:\n.\n.\n.\n// omitted for brevity\n@Editable\n(\ndescription\n=\n\"Specify plugin setting for myplugin.\"\n)\npublic\nclass\nMyPluginSetting\nimplements\nSerializable\n{\n.\n.\n.\n// omitted for brevity\n}\nFinally modify\nMyAnotherStep.java\nto make use of the configuration level prefix:\nimport\ncom\n.\npmease\n.\nquickbuild\n.\npluginsupport\n.\nPluginSettingHelper\n;\n.\n.\n.\n// omitted for brevity\npublic\nclass\nMyAnotherStep\nextends\nStep\n{\n.\n.\n.\n// omitted for brevity\n@Override\npublic\nvoid\nrun\n(\n)\n{\nMyPluginSetting\npluginSetting\n=\n(\nMyPluginSetting\n)\nPluginSettingHelper\n.\nfindConfigurationSetting\n(\nMyPlugin\n.\nclass\n,\nContext\n.\ngetConfiguration\n(\n)\n,\ntrue\n)\n;\nContext\n.\ngetLogger\n(\n)\n.\ninfo\n(\npluginSetting\n.\ngetPrefix\n(\n)\n+\n\": \"\n+\ngetMessage\n(\n)\n)\n;\n}\n}\nSave above classes, start QuickBuild, and edit advanced setting of the root configuration. You will see that the advanced setting of the configuration includes a section contributed by myplugin as below:\nAll child configurations will by default inherit myplugin setting and can choose to override it by enabling myplugin setting.\nRun the root configuration, and you will see that all messages will start with the prefix specified at root configuration level.\ninfo\nRefer to\nBean Editor\nfor more information of how to annotate plugin configuration setting class to generate appropriate UI.\nUser level plugin setting\nâ\nNow we change the plugin setting from configuration level to user level: users define their own prefixes in the profile and printed message will start with the user specific prefix. To do so, first modify\nMyPlugin.java\nas below:\n.\n.\n.\n// omitted for brevity\npublic\nclass\nMyPlugin\nextends\nAbstractPlugin\n{\n@Override\npublic\nObject\n[\n]\ngetExtensions\n(\n)\n{\n.\n.\n.\n// omitted for brevity\n}\n/*\n@Override\npublic Class<?> getSettingClass() {\nreturn MyPluginSetting.class;\n}\n@Override\npublic Class<?> getConfigurationSettingClass() {\nreturn MyPluginSetting.class;\n}\n*/\n@Override\npublic\nClass\n<\n?\n>\ngetUserSettingClass\n(\n)\n{\nreturn\nMyPluginSetting\n.\nclass\n;\n}\n}\nTo make use of the user level prefix, please modify\nMyAnotherStep.java\nas below:\nimport\ncom\n.\npmease\n.\nquickbuild\n.\npluginsupport\n.\nPluginSettingHelper\n;\n.\n.\n.\n// omitted for brevity\npublic\nclass\nMyAnotherStep\nextends\nStep\n{\n.\n.\n.\n// omitted for brevity\n@Override\npublic\nvoid\nrun\n(\n)\n{\nif\n(\nContext\n.\ngetUser\n(\n)\n!=\nnull\n)\n{\nMyPluginSetting\npluginSetting\n=\n(\nMyPluginSetting\n)\nPluginSettingHelper\n.\ngetUserSetting\n(\nMyPlugin\n.\nclass\n,\nContext\n.\ngetUser\n(\n)\n,\ntrue\n)\n;\nContext\n.\ngetLogger\n(\n)\n.\ninfo\n(\npluginSetting\n.\ngetPrefix\n(\n)\n+\n\": \"\n+\ngetMessage\n(\n)\n)\n;\n}\n}\n}\nSave above modifications, start QuickBuild, and switch to my setting page. It will include a section contributed by myplugin as below:\nRun the root configuration, and you will see that all messages will start with the prefix specified by current user.\ninfo\nRefer to\nBean Editor\nfor more information of how to annotate plugin user setting class to generate appropriate UI.\nGroup level plugin setting\nâ\nGroup level plugin setting is very similar to user level plugin setting, except that:\nIt is attached to each group and will be displayed and edited if you view or edit particular group.\nThe setting class is specified by overriding method\ngetGroupSettingClass\nThe setting object can be retrieved by calling\nPluginSettingHelper.getPluginSetting(<Plugin Main Class>, <group instance>)\ninfo\nRefer to\nBean Editor\nfor more information of how to annotate plugin group setting class to generate appropriate UI.\nCombine different levels of plugin settings\nâ\nDifferent levels of plugin settings can be combined together. The plugin\ncom.pmease.quickbuild.plugin.notifier.msn\nin\nPlugin Examples\ndemonstrates this:\nIt includes a global plugin setting class\nMsnSetting.java\nto define MSN account used to login and send out build notifications through MSN messenger.\nIt includes an user level plugin setting class\nMsnUserSetting.java\nto define MSN account for each user, which will be used to receive build notifications sent out by QuickBuild server through MSN messenger.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Working with Plugin Settings",
        "content": ""
      },
      {
        "header": "Global plugin settingâ",
        "content": "Plugin might have settings global to the system. For example, theAntplugin defines path to Ant executable in the global plugin setting. In this tutorial, we will continue to evolve myplugin to define a message prefix in the plugin setting so that all user specified messages are automatically prefixed with certain string. First let's define the plugin setting classMyPluginSetting.java: packagecom.example.myplugin;importorg.hibernate.validator.NotEmpty;importcom.pmease.quickbuild.annotation.Editable;// Plugin setting class must contains a default constructor and implement Serializable interfacepublicclassMyPluginSettingimplementsSerializable{privateStringprefix;@Editable(description=\"Specify a message prefix here.\")@NotEmptypublicStringgetPrefix(){returnprefix;}publicvoidsetPrefix(Stringprefix){this.prefix=prefix;}} And then tell QuickBuild about this class by modifyingMyPlugin.javaas below: ...// omitted for brevitypublicclassMyPluginextendsAbstractPlugin{@OverridepublicObject[]getExtensions(){...// omitted for brevity}@OverridepublicClass<?>getSettingClass(){returnMyPluginSetting.class;}} Finally we modifyMyAnotherStep.javato make use of the prefix: importcom.pmease.quickbuild.pluginsupport.PluginSettingHelper;...// omitted for brevitypublicclassMyAnotherStepextendsStep{...// omitted for brevity@Overridepublicvoidrun(){MyPluginSettingpluginSetting=(MyPluginSetting)PluginSettingHelper.getSetting(MyPlugin.class,true);Context.getLogger().info(pluginSetting.getPrefix()+\": \"+getMessage());}} Now start QuickBuild and it prints a warning message complaining that plugincom.example.mypluginneeds to be configured. The plugin will temporarily be disabled if stored plugin setting object vilolates constraints of the plugin class. For newly installed plugins, the plugin setting object is initially created by calling default constructor of the plugin setting class. Run the root configuration, and you will see that all messages will start with the specified prefix. infoRefer toBean Editorfor more information of how to annotate plugin setting class to generate appropriate UI."
      },
      {
        "header": "Configuration level plugin settingâ",
        "content": "Configuration level plugin setting is defined at configuration level. The setting will be inherited from parent configuration if it is not defined. Continue with myplugin, now assume that we need to specify message prefix per configuration, we can then modifyMyPlugin.javaas below: ...// omitted for brevitypublicclassMyPluginextendsAbstractPlugin{@OverridepublicObject[]getExtensions(){...// omitted for brevity}/*@Overridepublic Class<?> getSettingClass() {return MyPluginSetting.class;}*/@OverridepublicClass<?>getConfigurationSettingClass(){returnMyPluginSetting.class;}} Also please modifyMyPluginSetting.javato provide a description: ...// omitted for brevity@Editable(description=\"Specify plugin setting for myplugin.\")publicclassMyPluginSettingimplementsSerializable{...// omitted for brevity} Finally modifyMyAnotherStep.javato make use of the configuration level prefix: importcom.pmease.quickbuild.pluginsupport.PluginSettingHelper;...// omitted for brevitypublicclassMyAnotherStepextendsStep{...// omitted for brevity@Overridepublicvoidrun(){MyPluginSettingpluginSetting=(MyPluginSetting)PluginSettingHelper.findConfigurationSetting(MyPlugin.class,Context.getConfiguration(),true);Context.getLogger().info(pluginSetting.getPrefix()+\": \"+getMessage());}} Save above classes, start QuickBuild, and edit advanced setting of the root configuration. You will see that the advanced setting of the configuration includes a section contributed by myplugin as below: All child configurations will by default inherit myplugin setting and can choose to override it by enabling myplugin setting. Run the root configuration, and you will see that all messages will start with the prefix specified at root configuration level. infoRefer toBean Editorfor more information of how to annotate plugin configuration setting class to generate appropriate UI."
      },
      {
        "header": "User level plugin settingâ",
        "content": "Now we change the plugin setting from configuration level to user level: users define their own prefixes in the profile and printed message will start with the user specific prefix. To do so, first modifyMyPlugin.javaas below: ...// omitted for brevitypublicclassMyPluginextendsAbstractPlugin{@OverridepublicObject[]getExtensions(){...// omitted for brevity}/*@Overridepublic Class<?> getSettingClass() {return MyPluginSetting.class;}@Overridepublic Class<?> getConfigurationSettingClass() {return MyPluginSetting.class;}*/@OverridepublicClass<?>getUserSettingClass(){returnMyPluginSetting.class;}} To make use of the user level prefix, please modifyMyAnotherStep.javaas below: importcom.pmease.quickbuild.pluginsupport.PluginSettingHelper;...// omitted for brevitypublicclassMyAnotherStepextendsStep{...// omitted for brevity@Overridepublicvoidrun(){if(Context.getUser()!=null){MyPluginSettingpluginSetting=(MyPluginSetting)PluginSettingHelper.getUserSetting(MyPlugin.class,Context.getUser(),true);Context.getLogger().info(pluginSetting.getPrefix()+\": \"+getMessage());}}} Save above modifications, start QuickBuild, and switch to my setting page. It will include a section contributed by myplugin as below: Run the root configuration, and you will see that all messages will start with the prefix specified by current user. infoRefer toBean Editorfor more information of how to annotate plugin user setting class to generate appropriate UI."
      },
      {
        "header": "Group level plugin settingâ",
        "content": "Group level plugin setting is very similar to user level plugin setting, except that: It is attached to each group and will be displayed and edited if you view or edit particular group.The setting class is specified by overriding methodgetGroupSettingClassThe setting object can be retrieved by callingPluginSettingHelper.getPluginSetting(<Plugin Main Class>, <group instance>) infoRefer toBean Editorfor more information of how to annotate plugin group setting class to generate appropriate UI."
      },
      {
        "header": "Combine different levels of plugin settingsâ",
        "content": "Different levels of plugin settings can be combined together. The plugincom.pmease.quickbuild.plugin.notifier.msninPlugin Examplesdemonstrates this: It includes a global plugin setting classMsnSetting.javato define MSN account used to login and send out build notifications through MSN messenger.It includes an user level plugin setting classMsnUserSetting.javato define MSN account for each user, which will be used to receive build notifications sent out by QuickBuild server through MSN messenger."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Plugin+Data+Storage",
      "https://wiki.pmease.com/display/QB14/Migrate+Plugin+Data",
      "https://wiki.pmease.com/display/QB14/Plugin+Examples",
      "https://wiki.pmease.com/display/QB14/Plugin+Data+Storage"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Plugin+Data+Storage",
    "title": "Plugin Data Storage",
    "breadcrumb": [
      "",
      "Developer's Guide",
      "Develop Plugins",
      "Plugin Tutorials"
    ],
    "full_text": "Developer's Guide\nDevelop Plugins\nPlugin Tutorials\nPlugin Data Storage\nVersion: QB14\nOn this page\nPlugin Data Storage\nStore build related data\nâ\nPlugin might need to have a place on server to store build related data. For example, JUnit plugin stores processed JUnit test data for each build into the build storage area after JUnit publish step runs, and use that data to render JUnit report upon UI access. Normally this place is a directory choosed by plugins under the\nBuild Publish Directory\n, and files can be stored into the place by calling publish method of the build object.\nAgain we demonstrate this by enhancing myplugin to store the user specified message at server when the step runs so that it can be rendered into build overview screen.\nFirst modify\nMyAnotherStep.java\nas below to save message into a file and got it published to server.\npackage\ncom\n.\nexample\n.\nmyplugin\n;\nimport\njava\n.\nio\n.\nFile\n;\nimport\norg\n.\nhibernate\n.\nvalidator\n.\nNotEmpty\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nannotation\n.\nEditable\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nannotation\n.\nScriptable\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nstepsupport\n.\nStep\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nutil\n.\nFileUtils\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nContext\n;\n@Editable\n(\ncategory\n=\n\"examples\"\n,\nname\n=\n\"publish message\"\n,\ndescription\n=\n\"This step publishes an user defined message and render them on build overview screen.\"\n)\npublic\nclass\nMyAnotherStep\nextends\nStep\n{\nprivate\nstatic\nfinal\nlong\nserialVersionUID\n=\n1L\n;\nprivate\nString\nmessage\n;\n@Editable\n@NotEmpty\n@Scriptable\npublic\nString\ngetMessage\n(\n)\n{\nreturn\nmessage\n;\n}\npublic\nvoid\nsetMessage\n(\nString\nmessage\n)\n{\nthis\n.\nmessage\n=\nmessage\n;\n}\n@Override\npublic\nvoid\nrun\n(\n)\n{\nFile\ntempDir\n=\nFileUtils\n.\ncreateTempDir\n(\n)\n;\nFileUtils\n.\nwriteFile\n(\nnew\nFile\n(\ntempDir\n,\n\"message.txt\"\n)\n,\ngetMessage\n(\n)\n)\n;\ntry\n{\n// call publish to transfer files to server node. Do not simply\n// copy files here since the step might be running on an agent\n// node.\nContext\n.\ngetBuild\n(\n)\n.\npublish\n(\ntempDir\n.\ngetAbsolutePath\n(\n)\n,\nnull\n,\n\"myplugin\"\n)\n;\n}\nfinally\n{\nFileUtils\n.\ndeleteDir\n(\ntempDir\n)\n;\n}\n}\n}\nAnd then modify\nMyPanel.java\nlike below to render the message in published file.\npackage\ncom\n.\nexample\n.\nmyplugin\n;\nimport\njava\n.\nio\n.\nFile\n;\nimport\norg\n.\napache\n.\nwicket\n.\nmarkup\n.\nhtml\n.\nbasic\n.\nLabel\n;\nimport\norg\n.\napache\n.\nwicket\n.\nmarkup\n.\nhtml\n.\npanel\n.\nPanel\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nContext\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nutil\n.\nFileUtils\n;\npublic\nclass\nMyPanel\nextends\nPanel\n{\nprivate\nstatic\nfinal\nlong\nserialVersionUID\n=\n1L\n;\npublic\nMyPanel\n(\nString\nid\n)\n{\nsuper\n(\nid\n)\n;\nString\nmessage\n=\nFileUtils\n.\nreadFileAsString\n(\nnew\nFile\n(\nContext\n.\ngetBuild\n(\n)\n.\ngetPublishDir\n(\n)\n,\n\"myplugin/message.txt\"\n)\n)\n;\nadd\n(\nnew\nLabel\n(\n\"message\"\n,\nmessage\n)\n)\n;\n}\n}\nFinally modify\nMyPlugin.java\nto contribute the message panel only when sub directory\nmyplugin\nexists.\npackage\ncom\n.\nexample\n.\nmyplugin\n;\nimport\njava\n.\nio\n.\nFile\n;\nimport\njava\n.\nutil\n.\nArrayList\n;\nimport\njava\n.\nutil\n.\nList\n;\nimport\norg\n.\napache\n.\nwicket\n.\nmarkup\n.\nhtml\n.\npanel\n.\nPanel\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nextensionpoint\n.\nBuildOverviewContribution\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nextensionpoint\n.\nStepProvider\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nextensionpoint\n.\nsupport\n.\nPanelCreator\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\npluginsupport\n.\nAbstractPlugin\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nstepsupport\n.\nStep\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nContext\n;\npublic\nclass\nMyPlugin\nextends\nAbstractPlugin\n{\n@Override\npublic\nObject\n[\n]\ngetExtensions\n(\n)\n{\nreturn\nnew\nObject\n[\n]\n{\nnew\nStepProvider\n(\n)\n{\n@Override\npublic\nClass\n<\n?\nextends\nStep\n>\ngetStepClass\n(\n)\n{\nreturn\nMyStep\n.\nclass\n;\n}\n}\n,\nnew\nStepProvider\n(\n)\n{\n@Override\npublic\nClass\n<\n?\nextends\nStep\n>\ngetStepClass\n(\n)\n{\nreturn\nMyAnotherStep\n.\nclass\n;\n}\n}\n,\nnew\nBuildOverviewContribution\n(\n)\n{\npublic\nList\n<\nPanelCreator\n>\ngetPanelCreators\n(\n)\n{\nList\n<\nPanelCreator\n>\ncreators\n=\nnew\nArrayList\n<\nPanelCreator\n>\n(\n)\n;\nif\n(\nnew\nFile\n(\nContext\n.\ngetBuild\n(\n)\n.\ngetPublishDir\n(\n)\n,\n\"myplugin\"\n)\n.\nexists\n(\n)\n)\n{\ncreators\n.\nadd\n(\nnew\nPanelCreator\n(\n)\n{\npublic\nPanel\ngetPanel\n(\nString\nid\n)\n{\nreturn\nnew\nMyPanel\n(\nid\n)\n;\n}\n}\n)\n;\n}\nreturn\ncreators\n;\n}\npublic\nint\ngetOrder\n(\n)\n{\nreturn\n500\n;\n}\n}\n}\n;\n}\n}\nNow start QuickBuild, and run the root configuration. You will see the published message file under directory\n<global storage directory>/builds/<build id>/myplugin\n, where\n<global storage directory>\nis the directory you specified when set up QuickBuild server, and\n<build id>\nrefers to id of the newly generated build and is displayed at the build overview screen.\nOverview screen of the newly generated build will also contains a panel displaying your specified message when define the step.\nStore configuration related data\nâ\nBesides storing build related data, plugin may also need to store configuation related data to server. Still taking the JUnit plugin for example, it accumulates test statistics information for a configuration overtime and use it to render JUnit statistics chart upon UI access. The\nConfiguration Publish Directory\nis a good place to store such data, and plugins can create sub directories under this place to hold their own data if necessary.\nWe demonstrate this by enhancing myplugin to introduce a new statistics tab displaying a line chart to draw the trend of number of chars in the message across different builds.\nFirst define a new class\nMyStatistics.java\nto hold statistics data as below:\npackage\ncom\n.\nexample\n.\nmyplugin\n;\nimport\njava\n.\nutil\n.\nLinkedHashMap\n;\nimport\njava\n.\nutil\n.\nMap\n;\npublic\nclass\nMyStatistics\n{\n// map build version to message length\nprivate\nMap\n<\nString\n,\nInteger\n>\nmsgLens\n=\nnew\nLinkedHashMap\n<\nString\n,\nInteger\n>\n(\n)\n;\npublic\nMap\n<\nString\n,\nInteger\n>\ngetMsgLens\n(\n)\n{\nreturn\nmsgLens\n;\n}\npublic\nvoid\nsetMsgLens\n(\nMap\n<\nString\n,\nInteger\n>\nmsgLens\n)\n{\nthis\n.\nmsgLens\n=\nmsgLens\n;\n}\n}\nAnd add a new class\nMyMetricsCollector.java\nas below to collect message char count for current build and update the statistics data:\npackage\ncom\n.\nexample\n.\nmyplugin\n;\nimport\njava\n.\nio\n.\nFile\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nextensionpoint\n.\nStatisticsSupport\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nmodel\n.\nBuild\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nutil\n.\nBeanUtils\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nutil\n.\nFileUtils\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nContext\n;\npublic\nclass\nMyMetricsCollector\nimplements\nStatisticsSupport\n{\npublic\nString\ngetStatisticsName\n(\n)\n{\nreturn\n\"My Statistics\"\n;\n}\npublic\nvoid\ncollectStatistics\n(\nBuild\nbuild\n)\n{\n/*\n* This method will be called from server after build finishes. So we can\n* access the message file and statistics file directly.\n*/\nFile\nmsgFile\n=\nnew\nFile\n(\nbuild\n.\ngetPublishDir\n(\n)\n,\n\"myplugin/message.txt\"\n)\n;\n// collect metrics only if message publishing step was executed for this build.\nif\n(\nmsgFile\n.\nexists\n(\n)\n)\n{\nint\nmsgLen\n=\nFileUtils\n.\nreadFileAsString\n(\nmsgFile\n)\n.\nlength\n(\n)\n;\nFile\nstatsFile\n=\nnew\nFile\n(\nbuild\n.\ngetConfiguration\n(\n)\n.\ngetPublishDir\n(\n)\n,\n\"myplugin/statistics.xml\"\n)\n;\nMyStatistics\nstats\n;\nif\n(\nstatsFile\n.\nexists\n(\n)\n)\nstats\n=\n(\nMyStatistics\n)\nBeanUtils\n.\nreadFile\n(\nstatsFile\n)\n;\nelse\nstats\n=\nnew\nMyStatistics\n(\n)\n;\nstats\n.\ngetMsgLens\n(\n)\n.\nput\n(\nbuild\n.\ngetVersion\n(\n)\n,\nmsgLen\n)\n;\nBeanUtils\n.\nwriteFile\n(\nstats\n,\nstatsFile\n)\n;\n}\n}\n/* This method will be called before rebuilding the statistics upon request */\npublic\nvoid\ncleanupStatistics\n(\nConfiguration\nconfiguration\n)\n{\nFile\nstatsFile\n=\nnew\nFile\n(\nbuild\n.\ngetConfiguration\n(\n)\n.\ngetPublishDir\n(\n)\n,\n\"myplugin/statistics.xml\"\n)\n;\nif\n(\nstatsFile\n.\nexists\n(\n)\n)\nstatsFile\n.\ndelete\n(\n)\n;\n}\n}\nThen add\nMyStatisticsPanel.java\nand\nMyStatisticsPanel.html\nto draw the chart using statistics data.\nMyStatisticsPanel.java\npackage\ncom\n.\nexample\n.\nmyplugin\n;\nimport\njava\n.\nio\n.\nFile\n;\nimport\njava\n.\nutil\n.\nMap\n;\nimport\norg\n.\napache\n.\nwicket\n.\nmarkup\n.\nhtml\n.\npanel\n.\nPanel\n;\nimport\norg\n.\njfree\n.\nchart\n.\nChartFactory\n;\nimport\norg\n.\njfree\n.\nchart\n.\nJFreeChart\n;\nimport\norg\n.\njfree\n.\nchart\n.\nplot\n.\nPlotOrientation\n;\nimport\norg\n.\njfree\n.\ndata\n.\ncategory\n.\nDefaultCategoryDataset\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nContext\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nutil\n.\nBeanUtils\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nweb\n.\nchart\n.\nJFreeChartPanel\n;\npublic\nclass\nMyStatisticsPanel\nextends\nPanel\n{\nprivate\nstatic\nfinal\nlong\nserialVersionUID\n=\n1L\n;\npublic\nMyStatisticsPanel\n(\nString\nid\n)\n{\nsuper\n(\nid\n)\n;\nFile\nstatsFile\n=\nnew\nFile\n(\nContext\n.\ngetConfiguration\n(\n)\n.\ngetPublishDir\n(\n)\n,\n\"myplugin/statistics.xml\"\n)\n;\nMyStatistics\nstats\n=\n(\nMyStatistics\n)\nBeanUtils\n.\nreadFile\n(\nstatsFile\n)\n;\nDefaultCategoryDataset\ndataset\n=\nnew\nDefaultCategoryDataset\n(\n)\n;\nfor\n(\nMap\n.\nEntry\n<\nString\n,\nInteger\n>\nentry\n:\nstats\n.\ngetMsgLens\n(\n)\n.\nentrySet\n(\n)\n)\ndataset\n.\naddValue\n(\nentry\n.\ngetValue\n(\n)\n,\n\"\"\n,\nentry\n.\ngetKey\n(\n)\n)\n;\nJFreeChart\nchart\n=\nChartFactory\n.\ncreateLineChart\n(\n\"Message Char Count Statistics\"\n,\n\"build\"\n,\n\"count\"\n,\ndataset\n,\nPlotOrientation\n.\nVERTICAL\n,\nfalse\n,\nfalse\n,\nfalse\n)\n;\nadd\n(\nnew\nJFreeChartPanel\n(\n\"chart\"\n,\n800\n,\n400\n,\nchart\n)\n)\n;\n}\n}\nMyStatisticsPanel.html\n<\nwicket\n:\npanel\n>\n<\ndiv wicket\n:\nid\n=\n\"chart\"\n>\n<\n/\ndiv\n>\n<\n/\nwicket\n:\npanel\n>\nFinally modify\nMyPlugin.java\nto implement extension point\nStatisticsSupport\nand\nStatisticsTabContribution\n:\npackage\ncom\n.\nexample\n.\nmyplugin\n;\nimport\njava\n.\nio\n.\nFile\n;\nimport\njava\n.\nutil\n.\nArrayList\n;\nimport\njava\n.\nutil\n.\nList\n;\nimport\njava\n.\nutil\n.\nMap\n;\nimport\norg\n.\napache\n.\nwicket\n.\nmarkup\n.\nhtml\n.\npanel\n.\nPanel\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nextensionpoint\n.\nBuildOverviewContribution\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nextensionpoint\n.\nStatisticsTabContribution\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nextensionpoint\n.\nStepProvider\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nextensionpoint\n.\nsupport\n.\nPanelCreator\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\npluginsupport\n.\nAbstractPlugin\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nstepsupport\n.\nStep\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nweb\n.\ncomponent\n.\ntabbedpanel\n.\nTab\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nContext\n;\npublic\nclass\nMyPlugin\nextends\nAbstractPlugin\n{\n@Override\npublic\nObject\n[\n]\ngetExtensions\n(\n)\n{\nreturn\nnew\nObject\n[\n]\n{\nnew\nStepProvider\n(\n)\n{\n@Override\npublic\nClass\n<\n?\nextends\nStep\n>\ngetStepClass\n(\n)\n{\nreturn\nMyStep\n.\nclass\n;\n}\n}\n,\nnew\nStepProvider\n(\n)\n{\n@Override\npublic\nClass\n<\n?\nextends\nStep\n>\ngetStepClass\n(\n)\n{\nreturn\nMyAnotherStep\n.\nclass\n;\n}\n}\n,\nnew\nBuildOverviewContribution\n(\n)\n{\npublic\nList\n<\nPanelCreator\n>\ngetPanelCreators\n(\n)\n{\nList\n<\nPanelCreator\n>\ncreators\n=\nnew\nArrayList\n<\nPanelCreator\n>\n(\n)\n;\nif\n(\nnew\nFile\n(\nContext\n.\ngetBuild\n(\n)\n.\ngetPublishDir\n(\n)\n,\n\"myplugin\"\n)\n.\nexists\n(\n)\n)\n{\ncreators\n.\nadd\n(\nnew\nPanelProvider\n(\n)\n{\npublic\nPanel\ngetPanel\n(\nString\nid\n)\n{\nreturn\nnew\nMyPanel\n(\nid\n)\n;\n}\n}\n)\n;\n}\nreturn\ncreators\n;\n}\npublic\nint\ngetOrder\n(\n)\n{\nreturn\n500\n;\n}\n}\n,\nnew\nMyMetricsCollector\n(\n)\n,\nnew\nStatisticsTabContribution\n(\n)\n{\npublic\nList\n<\nTab\n>\ngetTabs\n(\n)\n{\nList\n<\nTab\n>\ntabs\n=\nnew\nArrayList\n<\nTab\n>\n(\n)\n;\nif\n(\nnew\nFile\n(\nContext\n.\ngetConfiguration\n(\n)\n.\ngetPublishDir\n(\n)\n,\n\"myplugin\"\n)\n.\nexists\n(\n)\n)\n{\ntabs\n.\nadd\n(\nnew\nTab\n(\n\"message char count\"\n)\n{\nprivate\nstatic\nfinal\nlong\nserialVersionUID\n=\n1L\n;\n@Override\npublic\nPanel\ngetPanel\n(\nString\nid\n,\nMap\n<\nString\n,\nString\n>\nparams\n)\n{\nreturn\nnew\nMyStatisticsPanel\n(\nid\n)\n;\n}\n}\n)\n;\n}\nreturn\ntabs\n;\n}\npublic\nint\ngetOrder\n(\n)\n{\nreturn\n500\n;\n}\n}\n}\n;\n}\n}\nSave modifications, start QuickBuild, and run the root configuation several times (remember to change the message length a little bit before each run to make the line chart varies). Switch to statistics tab of the root configuration, and you will see the \"message char count\" tab displaying statistics chart of number of message chars.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Plugin Data Storage",
        "content": ""
      },
      {
        "header": "Store build related dataâ",
        "content": "Plugin might need to have a place on server to store build related data. For example, JUnit plugin stores processed JUnit test data for each build into the build storage area after JUnit publish step runs, and use that data to render JUnit report upon UI access. Normally this place is a directory choosed by plugins under theBuild Publish Directory, and files can be stored into the place by calling publish method of the build object. Again we demonstrate this by enhancing myplugin to store the user specified message at server when the step runs so that it can be rendered into build overview screen. First modifyMyAnotherStep.javaas below to save message into a file and got it published to server. packagecom.example.myplugin;importjava.io.File;importorg.hibernate.validator.NotEmpty;importcom.pmease.quickbuild.annotation.Editable;importcom.pmease.quickbuild.annotation.Scriptable;importcom.pmease.quickbuild.stepsupport.Step;importcom.pmease.quickbuild.util.FileUtils;importcom.pmease.quickbuild.Context;@Editable(category=\"examples\",name=\"publish message\",description=\"This step publishes an user defined message and render them on build overview screen.\")publicclassMyAnotherStepextendsStep{privatestaticfinallongserialVersionUID=1L;privateStringmessage;@Editable@NotEmpty@ScriptablepublicStringgetMessage(){returnmessage;}publicvoidsetMessage(Stringmessage){this.message=message;}@Overridepublicvoidrun(){FiletempDir=FileUtils.createTempDir();FileUtils.writeFile(newFile(tempDir,\"message.txt\"),getMessage());try{// call publish to transfer files to server node. Do not simply// copy files here since the step might be running on an agent// node.Context.getBuild().publish(tempDir.getAbsolutePath(),null,\"myplugin\");}finally{FileUtils.deleteDir(tempDir);}}} And then modifyMyPanel.javalike below to render the message in published file. packagecom.example.myplugin;importjava.io.File;importorg.apache.wicket.markup.html.basic.Label;importorg.apache.wicket.markup.html.panel.Panel;importcom.pmease.quickbuild.Context;importcom.pmease.quickbuild.util.FileUtils;publicclassMyPanelextendsPanel{privatestaticfinallongserialVersionUID=1L;publicMyPanel(Stringid){super(id);Stringmessage=FileUtils.readFileAsString(newFile(Context.getBuild().getPublishDir(),\"myplugin/message.txt\"));add(newLabel(\"message\",message));}} Finally modifyMyPlugin.javato contribute the message panel only when sub directorymypluginexists. packagecom.example.myplugin;importjava.io.File;importjava.util.ArrayList;importjava.util.List;importorg.apache.wicket.markup.html.panel.Panel;importcom.pmease.quickbuild.extensionpoint.BuildOverviewContribution;importcom.pmease.quickbuild.extensionpoint.StepProvider;importcom.pmease.quickbuild.extensionpoint.support.PanelCreator;importcom.pmease.quickbuild.pluginsupport.AbstractPlugin;importcom.pmease.quickbuild.stepsupport.Step;importcom.pmease.quickbuild.Context;publicclassMyPluginextendsAbstractPlugin{@OverridepublicObject[]getExtensions(){returnnewObject[]{newStepProvider(){@OverridepublicClass<?extendsStep>getStepClass(){returnMyStep.class;}},newStepProvider(){@OverridepublicClass<?extendsStep>getStepClass(){returnMyAnotherStep.class;}},newBuildOverviewContribution(){publicList<PanelCreator>getPanelCreators(){List<PanelCreator>creators=newArrayList<PanelCreator>();if(newFile(Context.getBuild().getPublishDir(),\"myplugin\").exists()){creators.add(newPanelCreator(){publicPanelgetPanel(Stringid){returnnewMyPanel(id);}});}returncreators;}publicintgetOrder(){return500;}}};}} Now start QuickBuild, and run the root configuration. You will see the published message file under directory<global storage directory>/builds/<build id>/myplugin, where<global storage directory>is the directory you specified when set up QuickBuild server, and<build id>refers to id of the newly generated build and is displayed at the build overview screen. Overview screen of the newly generated build will also contains a panel displaying your specified message when define the step."
      },
      {
        "header": "Store configuration related dataâ",
        "content": "Besides storing build related data, plugin may also need to store configuation related data to server. Still taking the JUnit plugin for example, it accumulates test statistics information for a configuration overtime and use it to render JUnit statistics chart upon UI access. TheConfiguration Publish Directoryis a good place to store such data, and plugins can create sub directories under this place to hold their own data if necessary. We demonstrate this by enhancing myplugin to introduce a new statistics tab displaying a line chart to draw the trend of number of chars in the message across different builds. First define a new classMyStatistics.javato hold statistics data as below: packagecom.example.myplugin;importjava.util.LinkedHashMap;importjava.util.Map;publicclassMyStatistics{// map build version to message lengthprivateMap<String,Integer>msgLens=newLinkedHashMap<String,Integer>();publicMap<String,Integer>getMsgLens(){returnmsgLens;}publicvoidsetMsgLens(Map<String,Integer>msgLens){this.msgLens=msgLens;}} And add a new classMyMetricsCollector.javaas below to collect message char count for current build and update the statistics data: packagecom.example.myplugin;importjava.io.File;importcom.pmease.quickbuild.extensionpoint.StatisticsSupport;importcom.pmease.quickbuild.model.Build;importcom.pmease.quickbuild.util.BeanUtils;importcom.pmease.quickbuild.util.FileUtils;importcom.pmease.quickbuild.Context;publicclassMyMetricsCollectorimplementsStatisticsSupport{publicStringgetStatisticsName(){return\"My Statistics\";}publicvoidcollectStatistics(Buildbuild){/** This method will be called from server after build finishes. So we can* access the message file and statistics file directly.*/FilemsgFile=newFile(build.getPublishDir(),\"myplugin/message.txt\");// collect metrics only if message publishing step was executed for this build.if(msgFile.exists()){intmsgLen=FileUtils.readFileAsString(msgFile).length();FilestatsFile=newFile(build.getConfiguration().getPublishDir(),\"myplugin/statistics.xml\");MyStatisticsstats;if(statsFile.exists())stats=(MyStatistics)BeanUtils.readFile(statsFile);elsestats=newMyStatistics();stats.getMsgLens().put(build.getVersion(),msgLen);BeanUtils.writeFile(stats,statsFile);}}/* This method will be called before rebuilding the statistics upon request */publicvoidcleanupStatistics(Configurationconfiguration){FilestatsFile=newFile(build.getConfiguration().getPublishDir(),\"myplugin/statistics.xml\");if(statsFile.exists())statsFile.delete();}} Then addMyStatisticsPanel.javaandMyStatisticsPanel.htmlto draw the chart using statistics data. MyStatisticsPanel.javapackagecom.example.myplugin;importjava.io.File;importjava.util.Map;importorg.apache.wicket.markup.html.panel.Panel;importorg.jfree.chart.ChartFactory;importorg.jfree.chart.JFreeChart;importorg.jfree.chart.plot.PlotOrientation;importorg.jfree.data.category.DefaultCategoryDataset;importcom.pmease.quickbuild.Context;importcom.pmease.quickbuild.util.BeanUtils;importcom.pmease.quickbuild.web.chart.JFreeChartPanel;publicclassMyStatisticsPanelextendsPanel{privatestaticfinallongserialVersionUID=1L;publicMyStatisticsPanel(Stringid){super(id);FilestatsFile=newFile(Context.getConfiguration().getPublishDir(),\"myplugin/statistics.xml\");MyStatisticsstats=(MyStatistics)BeanUtils.readFile(statsFile);DefaultCategoryDatasetdataset=newDefaultCategoryDataset();for(Map.Entry<String,Integer>entry:stats.getMsgLens().entrySet())dataset.addValue(entry.getValue(),\"\",entry.getKey());JFreeChartchart=ChartFactory.createLineChart(\"Message Char Count Statistics\",\"build\",\"count\",dataset,PlotOrientation.VERTICAL,false,false,false);add(newJFreeChartPanel(\"chart\",800,400,chart));}}MyStatisticsPanel.html<wicket:panel><div wicket:id=\"chart\"></div></wicket:panel> Finally modifyMyPlugin.javato implement extension pointStatisticsSupportandStatisticsTabContribution: packagecom.example.myplugin;importjava.io.File;importjava.util.ArrayList;importjava.util.List;importjava.util.Map;importorg.apache.wicket.markup.html.panel.Panel;importcom.pmease.quickbuild.extensionpoint.BuildOverviewContribution;importcom.pmease.quickbuild.extensionpoint.StatisticsTabContribution;importcom.pmease.quickbuild.extensionpoint.StepProvider;importcom.pmease.quickbuild.extensionpoint.support.PanelCreator;importcom.pmease.quickbuild.pluginsupport.AbstractPlugin;importcom.pmease.quickbuild.stepsupport.Step;importcom.pmease.quickbuild.web.component.tabbedpanel.Tab;importcom.pmease.quickbuild.Context;publicclassMyPluginextendsAbstractPlugin{@OverridepublicObject[]getExtensions(){returnnewObject[]{newStepProvider(){@OverridepublicClass<?extendsStep>getStepClass(){returnMyStep.class;}},newStepProvider(){@OverridepublicClass<?extendsStep>getStepClass(){returnMyAnotherStep.class;}},newBuildOverviewContribution(){publicList<PanelCreator>getPanelCreators(){List<PanelCreator>creators=newArrayList<PanelCreator>();if(newFile(Context.getBuild().getPublishDir(),\"myplugin\").exists()){creators.add(newPanelProvider(){publicPanelgetPanel(Stringid){returnnewMyPanel(id);}});}returncreators;}publicintgetOrder(){return500;}},newMyMetricsCollector(),newStatisticsTabContribution(){publicList<Tab>getTabs(){List<Tab>tabs=newArrayList<Tab>();if(newFile(Context.getConfiguration().getPublishDir(),\"myplugin\").exists()){tabs.add(newTab(\"message char count\"){privatestaticfinallongserialVersionUID=1L;@OverridepublicPanelgetPanel(Stringid,Map<String,String>params){returnnewMyStatisticsPanel(id);}});}returntabs;}publicintgetOrder(){return500;}}};}} Save modifications, start QuickBuild, and run the root configuation several times (remember to change the message length a little bit before each run to make the line chart varies). Switch to statistics tab of the root configuration, and you will see the \"message char count\" tab displaying statistics chart of number of message chars."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Migrate+Plugin+Data",
      "https://wiki.pmease.com/display/QB14/Migrate+Plugin+Data"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Migrate+Plugin+Data",
    "title": "Migrate Plugin Data",
    "breadcrumb": [
      "",
      "Developer's Guide",
      "Develop Plugins",
      "Plugin Tutorials"
    ],
    "full_text": "Developer's Guide\nDevelop Plugins\nPlugin Tutorials\nMigrate Plugin Data\nVersion: QB14\nMigrate Plugin Data\nNow your plugin is used by a lot of users and they've configured your plugin and used steps contributed by your plugin. This leads to a problem: you might need to change fields of plugin setting and step classes in new version of your plugin and the change could be incompatible with existing steps and plugin settings. We certainly do not want to have users re-define their steps and plugin settings.\nTo solve this problem, QuickBuild utilizes\nXMT\nto handle plugin data migration. Taking the plugin setting class in\nWorking with Plugin Settings\nchapter for example, let's assume that we want to introduce a non-empty suffix field in new version of our plugin. The new plugin setting class can be written as:\npackage\ncom\n.\nexample\n.\nmyplugin\n;\nimport\norg\n.\nhibernate\n.\nvalidator\n.\nNotEmpty\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nannotation\n.\nEditable\n;\n// Plugin setting class must contains a default constructor\npublic\nclass\nMyPluginSetting\n{\nprivate\nString\nprefix\n;\nprivate\nString\nsuffix\n;\n@Editable\n(\ndescription\n=\n\"Specify a message prefix here.\"\n)\n@NotEmpty\npublic\nString\ngetPrefix\n(\n)\n{\nreturn\nprefix\n;\n}\npublic\nvoid\nsetPrefix\n(\nString\nprefix\n)\n{\nthis\n.\nprefix\n=\nprefix\n;\n}\n@Editable\n(\ndescription\n=\n\"Specify a message suffix here.\"\n)\n@NotEmpty\npublic\nString\ngetSuffix\n(\n)\n{\nreturn\nsuffix\n;\n}\npublic\nvoid\nsetSuffix\n(\nString\nsuffix\n)\n{\nthis\n.\nsuffix\n=\nsuffix\n;\n}\n@SuppressWarnings\n(\n\"unused\"\n)\nprivate\nvoid\nmigrate1\n(\nVersionedDocument\ndom\n,\nStack\n<\nInteger\n>\nversions\n)\n{\ndom\n.\ngetRootElement\n(\n)\n.\naddElement\n(\n\"suffix\"\n)\n.\nsetText\n(\n\"thanks\"\n)\n;\n}\n}\nThe method\nmigrate1\nhandles migration of the class from version \"0\" to version \"1\", and plugin setting created previously will automatically have the suffix set to \"thanks\". This migration approach also applies for step and repository classes contributed by the plugin. For details of migration, please refer to\nXMT documentation\n.\nAt last, do not forget to increase version of your plugin so that QuickBuild can detect the change and propagate new version of your plugin to all agents. Plugin version can be changed by editing plugin MANIFEST in Eclipse like below:\ndanger\nDuring upgrade of your plugin, the old version also needs to be removed from directory\n<QuickBuild server install dir>/plugins\n.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Migrate Plugin Data",
        "content": ""
      }
    ],
    "links": []
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Write+Custom+Gadget",
    "title": "Write Custom Gadget",
    "breadcrumb": [
      "",
      "Developer's Guide",
      "Develop Plugins",
      "Plugin Examples"
    ],
    "full_text": "Developer's Guide\nDevelop Plugins\nPlugin Examples\nWrite Custom Gadget\nVersion: QB14\nWrite Custom Gadget\nIn this example, we will enhance the plugin in tutorial\nWrite Your First Plugin\nto add a custom gadget to display a specified message. Firstable, we create our gadget class as below:\npackage\ncom\n.\nexample\n.\nmyplugin\n;\nimport\norg\n.\napache\n.\nwicket\n.\nComponent\n;\nimport\norg\n.\napache\n.\nwicket\n.\nbehavior\n.\nAttributeAppender\n;\nimport\norg\n.\napache\n.\nwicket\n.\nmarkup\n.\nhtml\n.\nbasic\n.\nLabel\n;\nimport\norg\n.\nhibernate\n.\nvalidator\n.\nconstraints\n.\nNotEmpty\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nannotation\n.\nEditable\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nextensionpoint\n.\nsupport\n.\nGadget\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nextensionpoint\n.\nsupport\n.\nGadgetCategory\n;\n@Editable\n(\nname\n=\n\"My Message\"\n,\norder\n=\n100001\n,\ncategory\n=\nGadgetCategory\n.\nOTHERS\n)\npublic\nclass\nMyMessageGadget\nextends\nGadget\n{\nprivate\nstatic\nfinal\nlong\nserialVersionUID\n=\n1L\n;\nprivate\nString\nmessage\n;\n@Editable\n(\nname\n=\n\"Message\"\n,\ndescription\n=\n\"Specify a message to display.\"\n)\n@NotEmpty\npublic\nString\ngetMessage\n(\n)\n{\nreturn\nmessage\n;\n}\n@Override\npublic\nString\ngetCssClass\n(\n)\n{\nreturn\n\"window\"\n;\n}\npublic\nvoid\nsetMessage\n(\nString\nmessage\n)\n{\nthis\n.\nmessage\n=\nmessage\n;\n}\n@Override\npublic\nComponent\nrenderBody\n(\nString\ncomponentId\n)\n{\nreturn\nnew\nLabel\n(\ncomponentId\n,\ngetMessage\n(\n)\n)\n.\nadd\n(\nnew\nAttributeAppender\n(\n\"class\"\n,\n\"p8p\"\n)\n)\n;\n}\n}\nThen modify class\nMyPlugin\nto contribute the message gadget:\npackage\ncom\n.\nexample\n.\nmyplugin\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nextensionpoint\n.\nStepProvider\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nextensionpoint\n.\nGadgetProvider\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\npluginsupport\n.\nAbstractPlugin\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nstepsupport\n.\nStep\n;\nimport\ncom\n.\npmease\n.\nquickbuild\n.\nextensionpoint\n.\nsupport\n.\nGadget\n;\npublic\nclass\nMyPlugin\nextends\nAbstractPlugin\n{\n@Override\npublic\nObject\n[\n]\ngetExtensions\n(\n)\n{\nreturn\nnew\nObject\n[\n]\n{\nnew\nStepProvider\n(\n)\n{\n@Override\npublic\nClass\n<\n?\nextends\nStep\n>\ngetStepClass\n(\n)\n{\nreturn\nMyStep\n.\nclass\n;\n}\n}\n,\nnew\nGadgetProvider\n(\n)\n{\n@Override\npublic\nClass\n<\n?\nextends\nGadget\n>\ngetGadgetClass\n(\n)\n{\nreturn\nMyMessageGadget\n.\nclass\n;\n}\n}\n;\n}\n}\nWith this change, the custom gadget will appear in the\nOTHERS\ncategory after running QuickBuild.\nBesides the common gadget class, QuickBuild provides BuildBasedGadget and ConfigurationBasedGadget to facilitate creating gadgets displaying build or configuration info. Refer to the Javadoc for these classes in Eclipse for details.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Write Custom Gadget",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/The+Example+Plugin+in+Tutorial",
      "https://wiki.pmease.com/display/QB14/The+JavaNCSS+Plugin",
      "https://wiki.pmease.com/display/QB14/Creating+a+Test+Report+Plugin",
      "https://wiki.pmease.com/display/QB14/Creating+an+Issue+Tracker+Plugin",
      "https://wiki.pmease.com/display/QB14/The+Example+Plugin+in+Tutorial"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/The+Example+Plugin+in+Tutorial",
    "title": "The Example Plugin in Tutorial",
    "breadcrumb": [
      "",
      "Developer's Guide",
      "Develop Plugins",
      "Plugin Examples"
    ],
    "full_text": "Developer's Guide\nDevelop Plugins\nPlugin Examples\nThe Example Plugin in Tutorial\nVersion: QB14\nThe Example Plugin in Tutorial\nSource code of this plugin can be found in project\ncom.example.myplugin\nafter you\nimport the example plugins\n, and this is the final version of the example plugin used in the\nPlugin Tutorials\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "The Example Plugin in Tutorial",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/The+JavaNCSS+Plugin",
      "https://wiki.pmease.com/display/QB14/Creating+a+Test+Report+Plugin",
      "https://wiki.pmease.com/display/QB14/Creating+an+Issue+Tracker+Plugin",
      "https://wiki.pmease.com/display/QB14/Plugin+Examples",
      "https://wiki.pmease.com/display/QB14/The+JavaNCSS+Plugin"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/The+JavaNCSS+Plugin",
    "title": "The JavaNCSS Plugin",
    "breadcrumb": [
      "",
      "Developer's Guide",
      "Develop Plugins",
      "Plugin Examples"
    ],
    "full_text": "Developer's Guide\nDevelop Plugins\nPlugin Examples\nThe JavaNCSS Plugin\nVersion: QB14\nThe JavaNCSS Plugin\nThis example plugin analyzes\nJavaNCSS\nreport to count source and comment lines of your project and if comment to source ratio is under a specified threshold, it reports a build error. It also adds a pie chart to build overview page displaying source and comment lines, and adds a stack bar chart to statistics page to display trends of comment to source ratio over time.\nBefore diving into the source code, please follow below steps to see how this plugin works:\nMake sure\nApache Ant\nis installed.\nOpen the\nplugin development workspace\nand make sure the example project\ncom.example.javancss\nis imported into the workspace following\nthis guide\n.\nDownload\nthis test project\nand extract it to a directory, say\n/path/to/componentA\n.\nStart QuickBuild by running Eclipse configuration\nBootstrap\n.\nOpen the browser and point to\nhttp://localhost:8810\n_ (or any other port you configured in _<QuickBuild install dir>/conf/node.properties\n), select the\nroot\nconfiguration and switch to steps tab.\nDefine the master step as a sequential composition step, and add below child steps into it:\nA step of type\nBuild/Ant\n. Give this step a name, and specify the property\nAnt build file\nas\n/path/to/componentA/build/build.xml\n.\nA step of type\nPublish/JavaNCSS Report\n. Give this step a name, and specify the property\nJavaNCSS report path\nas\n/path/to/componentA/build/metrics.xml\n.\nSwitch to page\nAdministration->Plugin Management\n, and configure the Ant plugin to specify path to Ant executable if it is not in the system path.\nRun root configuration to build the test project. After the build finishes:\nA pie chart will appear in the build overview screen displaying source and comment lines of the test project.\nA build tab named \"javancss\" will appear. This tab is created only for demonstration purpose, and does not include any content.\nSwitch to dashboard, and hover mouse over\nmore...\nlink of the newly generated build to bring up the build summary. The build summary will include source and comment line information. Clicking on this information will lead to javancss build tab.\nSwitch to menu\nAdministration->Plugin Management\nand configure property\ncomment threshold\nof the JavaNCSS plugin as\n20\n. This tells QuickBuild to fail the build if comment to source ratio is less than 20%.\nEdit file\n/path/to/componentA/src/com/example/componentA/ComponentA.java\nto remove all comments.\nSwitch back to QuickBuild and run the root configuration again. The build will fail with a message\nSource comments are less than 20%\n.\nEdit file\n/path/to/componentA/src/com/example/componentA/ComponentA.java\nto add comments, and run the root configuration again to generate a new build.\nSwitch to menu\nStatistics->JavaNCSS\n, and you will see a stack bar chart displaying trends of source and comment lines for all builds.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "The JavaNCSS Plugin",
        "content": ""
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Creating+a+Test+Report+Plugin",
      "https://wiki.pmease.com/display/QB14/Creating+an+Issue+Tracker+Plugin",
      "https://wiki.pmease.com/display/QB14/Plugin+Examples",
      "https://wiki.pmease.com/display/QB14/Creating+a+Test+Report+Plugin"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Creating+a+Test+Report+Plugin",
    "title": "Creating a Test Report Plugin",
    "breadcrumb": [
      "",
      "Developer's Guide",
      "Develop Plugins",
      "Plugin Examples"
    ],
    "full_text": "Developer's Guide\nDevelop Plugins\nPlugin Examples\nCreating a Test Report Plugin\nVersion: QB14\nOn this page\nCreating a Test Report Plugin\nSince 4.0, you can add your own test report plugin by using report plugin APIs. Normally, a test report plugin contributes below extension-points to QuickBuild:\nPermissionContribution\n(adds a permission to control whether a user/group can access the report or not)\nStep\n(adds publish report step)\nStatisticsSupport\n(collects test statistics)\nBuildTabContribution\n(displays the report to build page)\nBuildOverviewContribution\n(displays the report overview to build overview tab)\nBuildSummaryContribution\n(displays a summary information of the tests in build dropdown)\nStatisticsTabContribution\n(displays the report statistics data in configuration statistics tab)\nGadget\n(displays the report in dashboard)\nAggregationSupport\n(aggregates the test information)\nConfigurationOverviewContribution\n(displays the aggregation data in configuration overview tab)\nRestResourceContribution\n(accesses the report data from RESTful APIs)\nBelow we will use boost test report as an example to show you how simple it is to create a test plugin for QuickBuild. Please first reference\nPlugin Tutorials\npage on how to setup your development environment if you are not familiar with how to create a plugin for QuickBuild.\nIn QuickBuild, plugin com.pmease.quickbuild.plugin.report.xunit has already implemented and encapsulated most of unit test report related functions, so when creating a unit test report plugin, just use this plugin as dependency. Below shows the dependencies in your plugin MANIFEST.MF:\nBasic Functions\nâ\nBelow we will show you how to add the basic functions including:\nAdd a permission to system (PermissionContribution)\nParse the original XML reports to generate test report (Step)\nCollect the test metrics (StatisticsSupport)\nDisplay test overview in build overview (BuildOverviewContribution)\nDisplay test summary in build summary popped up from build dropdown (BuildSummaryContribution)\nDisplay the reports including: failed tests, by suite, by test (BuildTabContribution)\nDisplay the test metrics in configuration statistics page (StatisticsTabContribution)\nActually, plugin com.pmease.quickbuild.plugin.report.xunit already implemented most of them, and you only need inherit from the base class accordingly.\nReport Definition\nâ\nIn QuickBuild, ReportCategory encapsulates the definitions and most of the operations of a specific report. Below is how we define Boost test report:\npublic\nclass\nBoostTestCategory\nextends\nXUnitCategory\n{\n// return the name of your category\npublic\nString\ngetName\n(\n)\n{\nreturn\n\"Boost Report\"\n;\n}\n// return an unique id of your category in QuickBuild\npublic\nString\ngetId\n(\n)\n{\nreturn\n\"boost\"\n;\n}\n// return the order when displaying category\npublic\nint\ngetOrder\n(\n)\n{\nreturn\n500\n;\n}\n// return the processor on how to parse your original XML report\npublic\nAbstractProcessor\ngetTestProcessor\n(\n)\n{\nreturn\nnew\nBoostTestProcessor\n(\nthis\n)\n;\n}\n}\nfor BoostTestProcessor, we implemented like below:\npublic\nclass\nBoostTestProcessor\nextends\nAbstractTestProcessor\n{\npublic\nBoostTestProcessor\n(\nBoostTestCategory\ncategory\n)\n{\nsuper\n(\ncategory\n)\n;\n}\n// return the XPath on how to select your test case nodes\npublic\nString\ngetXPathOfTestCase\n(\n)\n{\nreturn\n\"//TestCase\"\n;\n}\n// return the test suite name\nprotected\nString\ngetSuiteName\n(\nElement\ntestcaseNode\n)\n{\n.\n.\n.\n}\n// return the test name\nprotected\nString\ngetTestName\n(\nElement\ntestcaseNode\n)\n{\n.\n.\n.\n}\n// return the test status, PASS/FAIL/SKIP\nprotected\nTestStatus\ngetStatus\n(\nElement\ntestcaseNode\n)\n{\n.\n.\n.\n}\n// return the duration in milli-seconds\nprotected\nlong\ngetDuration\n(\nElement\ntestcaseNode\n)\n{\n.\n.\n.\n}\n// return the error types if available\nprotected\nList\n<\nString\n>\ngetErrorTypes\n(\nElement\ntestcaseNode\n)\n{\n.\n.\n.\n}\n// return the error messages if available\nprotected\nList\n<\nString\n>\ngetErrorMessages\n(\nElement\ntestcaseNode\n)\n{\n.\n.\n.\n}\n// return the normal messages or outputs if available\nprotected\nList\n<\nString\n>\ngetMessages\n(\nElement\ntestcaseNode\n)\n{\n.\n.\n.\n}\n}\nReport Publish Step\nâ\nBelow class defines the publish boost test step:\n@Editable\n(\ncategory\n=\n\"Publish\"\n,\nname\n=\n\"Boost Test Report\"\n,\ndescription\n=\n\"Publish Boost Test reports\"\n)\n@ScriptApi\n(\n\"This step publishes the original Boost Test XML files.\"\n)\npublic\nclass\nBoostTestPublisher\nextends\nXUnitPublisher\n{\nprivate\nstatic\nfinal\nlong\nserialVersionUID\n=\n1L\n;\n}\nPlugin Activator\nâ\nThe boost plugin activator class, here, for example BoostTestPlugin, should inherit from AbstractTestReportPlugin:\npublic\nclass\nBoostTestPlugin\nextends\nAbstractTestReportPlugin\n{\nprotected\nClass\n<\n?\nextends\nStep\n>\ngetPublishStepClass\n(\n)\n{\nreturn\nBoostTestPublisher\n.\nclass\n;\n}\nprotected\nReportCategory\ncreateCategory\n(\n)\n{\nreturn\nnew\nBoostTestCategory\n(\n)\n;\n}\n}\nOK, now it is the time to package them all and place the plugin to QuickBuild plugins directory, run QuickBuild, in Steps menu, you will find a new publish step named\nBoost Test Report\nis available, and you can add it to your build workflow. After running a build without error, you can find boost test report is displayed in your build overview, and a new tab named\nBoost Report\nis displayed which includes three sub-tabs:\nFailed Test\nBy Suite\nBy Test\njust like what we did for JUnit.\nGo to configuration statistics page, a tab named\nBoost Report\nis also there which displays the trends of your test.\nReport Aggregation\nâ\nFrom QuickBuild 4.0, report can be aggregated from child configurations so that user can easily know the status of child configurations. To support aggregation, the plugin need implements below two extension point:\nAggregationSupport (collect the aggregation data)\nConfigurationOverviewContribution (displays the aggregation data in configuration overview)\nTo implement aggregation support, you just need inherit from XUnitAggregator:\n@Editable\n(\nname\n=\n\"Boost Report\"\n,\ndescription\n=\n\"Aggregate all boost metrics from child configurations.\"\n)\npublic\nclass\nBoostAggregator\nextends\nXUnitAggregator\n{\n}\nand add below definition to your plugin activator:\npublic\nclass\nBoostTestPlugin\nextends\nAbstractTestReportPlugin\n{\n.\n.\n.\n.\n.\n.\n@Override\npublic\nClass\n<\n?\nextends\nAggregation\n>\ngetAggregatorClass\n(\n)\n{\nreturn\nBoostAggregator\n.\nclass\n;\n}\nNow, the aggregation support is added, again, define an aggregation in your configuration and run a build, the aggregated report will be displayed in the configuration overview tab, also, the aggregated report statistics will be displayed in configuration statistics page.\nGadget Support\nâ\nIn plugin com.pmease.quickbuild.plugin.report.xunit, below gadget classes are available:\nXUnitOverviewGadget (displays a pie chart for passed/failed/skipped tests)\nXUnitSummaryGadget (displays a summary for success rate, duration, new failed, fixed, not fixed)\nXUnitAggregatedOverviewGadget (displays a pie chart for aggregated tests)\nXUnitAggregatedSummaryGadget (displays a summary for aggregated tests)\nYou just need inherit from them and add a Editable annotation to illustrate the gadget, for example:\n@Editable\n(\nname\n=\n\"Boost Test Overview\"\n,\ncategory\n=\nGadgetCategory\n.\nUNIT_TEST_REPORTS\n)\npublic\nclass\nBoostOverviewGadget\nextends\nXUnitOverviewGadget\n{\n}\nand add gadget support to your plugin class:\npublic\nclass\nBoostTestPlugin\nextends\nAbstractTestReportPlugin\n{\n.\n.\n.\n.\n.\n.\nprotected\nClass\n<\n?\nextends\nGadget\n>\n[\n]\ngetGadgetClasses\n(\n)\n{\nreturn\nnew\nClass\n[\n]\n{\nBoostOverviewGadget\n.\nclass\n,\nBoostSummaryGadget\n.\nclass\n,\nBoostAggregatedOverviewGadget\n.\nclass\n,\nBoostAggregatedStatsGadget\n.\nclass\n}\n;\n}\n}\nRESTful API Support\nâ\nIf you want to expose the reports by REST, inherit from BaseReportRest like below:\n@Path\n(\n\"/boost\"\n)\npublic\nclass\nBoostTestRest\nextends\nBaseReportRest\n{\n}\nand add your REST support to plugin class:\npublic\nclass\nBoostTestPlugin\nextends\nAbstractTestReportPlugin\n{\n.\n.\n.\n.\n.\n.\nprotected\nClass\n<\n?\n>\n[\n]\ngetRestResourceClasses\n(\n)\n{\nreturn\nnew\nClass\n<\n?\n>\n[\n]\n{\nBoostTestRest\n.\nclass\n}\n;\n}\n}\nAnd now you can access the reports from below url:\nhttp\n:\n/\n/\nyour\n-\nquickbuild\n/\nrest\n/\nboost\nSee\nInteract with Reports\npage for available functions.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Creating a Test Report Plugin",
        "content": ""
      },
      {
        "header": "Basic Functionsâ",
        "content": "Below we will show you how to add the basic functions including: Add a permission to system (PermissionContribution)Parse the original XML reports to generate test report (Step)Collect the test metrics (StatisticsSupport)Display test overview in build overview (BuildOverviewContribution)Display test summary in build summary popped up from build dropdown (BuildSummaryContribution)Display the reports including: failed tests, by suite, by test (BuildTabContribution)Display the test metrics in configuration statistics page (StatisticsTabContribution) Actually, plugin com.pmease.quickbuild.plugin.report.xunit already implemented most of them, and you only need inherit from the base class accordingly."
      },
      {
        "header": "Report Definitionâ",
        "content": "In QuickBuild, ReportCategory encapsulates the definitions and most of the operations of a specific report. Below is how we define Boost test report: publicclassBoostTestCategoryextendsXUnitCategory{// return the name of your categorypublicStringgetName(){return\"Boost Report\";}// return an unique id of your category in QuickBuildpublicStringgetId(){return\"boost\";}// return the order when displaying categorypublicintgetOrder(){return500;}// return the processor on how to parse your original XML reportpublicAbstractProcessorgetTestProcessor(){returnnewBoostTestProcessor(this);}} for BoostTestProcessor, we implemented like below: publicclassBoostTestProcessorextendsAbstractTestProcessor{publicBoostTestProcessor(BoostTestCategorycategory){super(category);}// return the XPath on how to select your test case nodespublicStringgetXPathOfTestCase(){return\"//TestCase\";}// return the test suite nameprotectedStringgetSuiteName(ElementtestcaseNode){...}// return the test nameprotectedStringgetTestName(ElementtestcaseNode){...}// return the test status, PASS/FAIL/SKIPprotectedTestStatusgetStatus(ElementtestcaseNode){...}// return the duration in milli-secondsprotectedlonggetDuration(ElementtestcaseNode){...}// return the error types if availableprotectedList<String>getErrorTypes(ElementtestcaseNode){...}// return the error messages if availableprotectedList<String>getErrorMessages(ElementtestcaseNode){...}// return the normal messages or outputs if availableprotectedList<String>getMessages(ElementtestcaseNode){...}}"
      },
      {
        "header": "Report Publish Stepâ",
        "content": "Below class defines the publish boost test step: @Editable(category=\"Publish\",name=\"Boost Test Report\",description=\"Publish Boost Test reports\")@ScriptApi(\"This step publishes the original Boost Test XML files.\")publicclassBoostTestPublisherextendsXUnitPublisher{privatestaticfinallongserialVersionUID=1L;}"
      },
      {
        "header": "Plugin Activatorâ",
        "content": "The boost plugin activator class, here, for example BoostTestPlugin, should inherit from AbstractTestReportPlugin: publicclassBoostTestPluginextendsAbstractTestReportPlugin{protectedClass<?extendsStep>getPublishStepClass(){returnBoostTestPublisher.class;}protectedReportCategorycreateCategory(){returnnewBoostTestCategory();}} OK, now it is the time to package them all and place the plugin to QuickBuild plugins directory, run QuickBuild, in Steps menu, you will find a new publish step namedBoost Test Reportis available, and you can add it to your build workflow. After running a build without error, you can find boost test report is displayed in your build overview, and a new tab namedBoost Reportis displayed which includes three sub-tabs: Failed TestBy SuiteBy Test just like what we did for JUnit. Go to configuration statistics page, a tab namedBoost Reportis also there which displays the trends of your test."
      },
      {
        "header": "Report Aggregationâ",
        "content": "From QuickBuild 4.0, report can be aggregated from child configurations so that user can easily know the status of child configurations. To support aggregation, the plugin need implements below two extension point: AggregationSupport (collect the aggregation data)ConfigurationOverviewContribution (displays the aggregation data in configuration overview) To implement aggregation support, you just need inherit from XUnitAggregator: @Editable(name=\"Boost Report\",description=\"Aggregate all boost metrics from child configurations.\")publicclassBoostAggregatorextendsXUnitAggregator{} and add below definition to your plugin activator: publicclassBoostTestPluginextendsAbstractTestReportPlugin{......@OverridepublicClass<?extendsAggregation>getAggregatorClass(){returnBoostAggregator.class;} Now, the aggregation support is added, again, define an aggregation in your configuration and run a build, the aggregated report will be displayed in the configuration overview tab, also, the aggregated report statistics will be displayed in configuration statistics page."
      },
      {
        "header": "Gadget Supportâ",
        "content": "In plugin com.pmease.quickbuild.plugin.report.xunit, below gadget classes are available: XUnitOverviewGadget (displays a pie chart for passed/failed/skipped tests)XUnitSummaryGadget (displays a summary for success rate, duration, new failed, fixed, not fixed)XUnitAggregatedOverviewGadget (displays a pie chart for aggregated tests)XUnitAggregatedSummaryGadget (displays a summary for aggregated tests) You just need inherit from them and add a Editable annotation to illustrate the gadget, for example: @Editable(name=\"Boost Test Overview\",category=GadgetCategory.UNIT_TEST_REPORTS)publicclassBoostOverviewGadgetextendsXUnitOverviewGadget{} and add gadget support to your plugin class: publicclassBoostTestPluginextendsAbstractTestReportPlugin{......protectedClass<?extendsGadget>[]getGadgetClasses(){returnnewClass[]{BoostOverviewGadget.class,BoostSummaryGadget.class,BoostAggregatedOverviewGadget.class,BoostAggregatedStatsGadget.class};}}"
      },
      {
        "header": "RESTful API Supportâ",
        "content": "If you want to expose the reports by REST, inherit from BaseReportRest like below: @Path(\"/boost\")publicclassBoostTestRestextendsBaseReportRest{} and add your REST support to plugin class: publicclassBoostTestPluginextendsAbstractTestReportPlugin{......protectedClass<?>[]getRestResourceClasses(){returnnewClass<?>[]{BoostTestRest.class};}} And now you can access the reports from below url: http://your-quickbuild/rest/boost SeeInteract with Reportspage for available functions."
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Creating+an+Issue+Tracker+Plugin",
      "https://wiki.pmease.com/display/QB14/Creating+an+Issue+Tracker+Plugin"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Creating+an+Issue+Tracker+Plugin",
    "title": "Creating an Issue Tracker Plugin",
    "breadcrumb": [
      "",
      "Developer's Guide",
      "Develop Plugins",
      "Plugin Examples"
    ],
    "full_text": "Developer's Guide\nDevelop Plugins\nPlugin Examples\nCreating an Issue Tracker Plugin\nVersion: QB14\nOn this page\nCreating an Issue Tracker Plugin\nSince 4.0, you can add your own test report plugin by using report plugin APIs. Normally, an typical issue tracker plugin contributes below extension points:\nBuildTabContribution\ndisplays a tab in build page to show related issues\nBuildSummaryContribution\ndisplays a summary section to show how many issues are related in a build in build dropdown\nGadget\ndisplays the related issues of a configuration in Dashboard page\nCommentTransformer\nhyperlink the issues occurred in commit comment by a pattern\nStatisticsSupport\ncollects issues by build so that we can compare with a specified build\neven more, contribute some steps to create/update issues.\nYou needn't write the plugin from ground up, plugin com.pmease.quickbuild.tracker.core implements and encapsulates most of them already, just follow below instructions to create an issue tracker plugin. If you are not familiar with how to set up your development environment or how to create and test a plugin, please read plugin tutorials and\nsome plugin examples\nfirst. Or you may read the Redmine plugin source code directly. Below we will show you how to add a Redmine plugin.\nPlugin Activator\nâ\nEvery issue tracker plugin needs a plugin activator. As plugin com.pmease.quickbuild.tracker.core has already done a lot of things, add it to plugin dependencies in MANIFEST.MF, and actually, in most cases, you only need this dependency.\nAnd then, implement the activator by extending AbstractTrackerPlugin:\npublic\nclass\nRedminePlugin\nextends\nAbstractTrackerPlugin\n{\npublic\nIssueTracker\ncreateTracker\n(\n)\n{\nreturn\nnew\nRedmineTracker\n(\n)\n;\n}\nprotected\nIssueCategory\ncreateCategory\n(\n)\n{\nreturn\nnew\nRedmineCategory\n(\n)\n;\n}\npublic\nClass\n<\n?\n>\ngetConfigurationSettingClass\n(\n)\n{\nreturn\nRedmineSetting\n.\nclass\n;\n}\n}\nIt is fairly simple, and we will discuss more detailed below.\nIssueTracker\nâ\nIssueTracker is an interface which tell QuickBuild how to fetch issue related information from remote server:\npublic\ninterface\nIssueTracker\nextends\nCommentTransformer\n{\n/**\n* Return the total issues in a build\n*/\nint\ngetIssueCount\n(\nBuild\nbuild\n)\n;\n/**\n* Get the issue pattern which will be used to match issue key in commit message\n* @return\n*/\nPattern\ngetIssuePattern\n(\n)\n;\n/**\n* Extract the issue key from a matched issue key, for example: extract bug:123 to 123, #456 to 456\n*\n* @param matched\n* @return\n*/\nString\nextractIssueKey\n(\nString\nmatched\n)\n;\n/**\n* Batch fetching issues data from remote.\n*\n* @param keys need be fetched\n* @return a map of fetched issues data\n*/\nMap\n<\nString\n,\nIssue\n>\nfetchIssues\n(\nCollection\n<\nString\n>\nkeys\n)\n;\n/**\n* Get the issue url pattern which will be used to hyperlink the issue key, for example, for JIRA issue,\n* the pattern would be: http://jira-server/browse/$KEY.\n* Note: always use <b>$KEY</b> as we will use it to replace with the actual issue key.\n*\n* The server url can be retrieved from the tracker setting. So, for JIRA, this function can be\n* simply implemented like below:\n* <code>\n* public String getIssueUrlPattern() {\n*     JiraSetting setting = JiraSetting.get(); // Retrieve JIRA setting of current configuration\n*     return StringHelper.normalizeUrl(setting.getHost()) + \"/browse/$KEY\";\n* }\n* </code>\n*\n* @return the pattern of issue url\n*/\nString\ngetIssueUrlPattern\n(\n)\n;\n}\nTo implement IssueTracker, extend\ncom.pmease.quickbuild.plugin.tracker.core.AbstractIssueTracker\nwhich implements most of the functions above:\npublic\nclass\nRedmineTracker\nextends\nAbstractIssueTracker\n{\npublic\nMap\n<\nString\n,\nIssue\n>\nfetchIssues\n(\nCollection\n<\nString\n>\nkeys\n)\n{\n.\n.\n.\n.\n.\n.\n}\npublic\nString\ngetIssueUrlPattern\n(\n)\n{\nRedmineSetting\nsetting\n=\nRedmineSetting\n.\nget\n(\n)\n;\nreturn\nStringHelper\n.\nnormalizeUrl\n(\nsetting\n.\ngetHost\n(\n)\n)\n+\n\"/issues/$KEY\"\n;\n}\n@Override\npublic\nString\nextractIssueKey\n(\nfinal\nString\nmatched\n)\n{\nLong\nid\n=\nTrackerHelper\n.\nextractLong\n(\nmatched\n)\n;\nif\n(\nid\n==\nnull\n)\n{\nreturn\nnull\n;\n}\nelse\n{\nreturn\nid\n.\ntoString\n(\n)\n;\n}\n}\n}\nfetchIssues()\nis tracker related, you need implement according to your issue tracker API.\nClass Issue includes below properties:\npublic\nclass\nIssue\nimplements\nSerializable\n{\nprivate\nString\nissueKey\n;\nprivate\nString\nissueType\n;\nprivate\nString\nsummary\n;\nprivate\nString\nstatus\n;\nprivate\nString\npriority\n;\nprivate\nString\nresolution\n;\nprivate\nCalendar\ncreated\n;\nprivate\nCalendar\nupdated\n;\nprivate\nString\nassignee\n;\nprivate\nString\nreporter\n;\n}\nIssueCategory\nâ\nAll issues report will be saved to your configuration or build reports directory. The IssueCategory encapsulates the issue related operations, like save/load from H2 database, displays to user, etc. So implement your IssueCategory like below:\npublic\nclass\nRedmineCategory\nextends\nIssueCategory\n{\n// return the name of the category\npublic\nString\ngetName\n(\n)\n{\nreturn\n\"Redmine\"\n;\n}\n// return the unique id of category\npublic\nString\ngetId\n(\n)\n{\nreturn\n\"redmine\"\n;\n}\n// return the order which you want to display in QuickBuild\npublic\nint\ngetOrder\n(\n)\n{\nreturn\n150\n;\n}\n}\nConfiguration Setting\nâ\nYou need add a configuration setting class let user define the issue tracker server:\n@Editable\n(\nname\n=\n\"Redmine Server\"\n,\norder\n=\n1000\n,\ncategory\n=\n\"Issue Tracker\"\n)\npublic\nclass\nRedmineSetting\nextends\nAbstractTrackerSetting\n{\npublic\nRedmineSetting\n(\n)\n{\n// default issue pattern\nissuePattern\n=\n\"(?<!\\\\:)(?:#|bug:)\\\\d+\"\n;\n}\n}\nAbstractTrackerSetting\ndefines below properties:\npublic\nabstract\nclass\nAbstractTrackerSetting\nimplements\nTrackerSetting\n{\nString\nhost\n;\nString\nuser\n;\nString\npassword\n;\nString\nissuePattern\n;\n}\nJust add as more fields as you need to the setting class, and apply some annotations to your getter method, QuickBuild will display the form without writing one line for GUI. See this page for details. For example, we add associate project to RedmineSetting:\npublic\nclass\nRedmineSetting\nextends\nAbstractTrackerSetting\n{\nprivate\nString\nassociatedProject\n;\n.\n.\n.\n.\n.\n.\n@Editable\n(\nname\n=\n\"Associated Project\"\n,\norder\n=\n500\n)\n@NotEmpty\n@Scriptable\npublic\nString\ngetAssociatedProject\n(\n)\n{\nreturn\nassociatedProject\n;\n}\n}\nNow, in Redmine setting, a new field\nAssociated Project\nis added which is a required field and also user can use script to provide this property.\nFinally, package the plugin and copy to QuickBuild server plugins directory, restart QuickBuild. To test your plugin, here is Redmine, you need:\nconfigure the Redmine Server in configuration settings\nadd a repository to the configuration\nadd a checkout step\ntrigger a build\nsubmit some modifications to your repository, in the commit message, add some issues you want\ntrigger a build again\nIf you are lucky, you can find all issues mentioned in commit messages are hyperlinked and a tab named Redmine which displays all issues mentioned in commit messages is added in build page.\nExposing Issues Report\nâ\nYou can also expose your issues report via REST:\n@Path\n(\n\"/redmine\"\n)\npublic\nclass\nRedmineRestResource\nextends\nTrackerResource\n{\n}\nand then add this class to the plugin activator so QuickBuild can know you want to expose it:\npublic\nclass\nRedminePlugin\nextends\nAbstractTrackerPlugin\n{\n.\n.\n.\n.\n.\n.\nprotected\nClass\n<\n?\n>\n[\n]\ngetRestResourceClasses\n(\n)\n{\nreturn\nnew\nClass\n[\n]\n{\nRedmineRestResource\n.\nclass\n}\n;\n}\nAnd now you can visit below URL to access your issues report:\nhttp\n:\n/\n/\nyour\n-\nquickbuild\n/\nrest\n/\nredmine\nSee\nInteract with Issues\nfor all RESTful functions.\nContributing to Dashboard\nâ\nIf you want to display your issues report to Dashboard, you can create a Gadget class:\n@Editable\n(\nname\n=\n\"Redmine Issues\"\n,\ncategory\n=\nGadgetCategory\n.\nCHANGES_AND_ISSUES\n)\npublic\nclass\nRedmineGadget\nextends\nAbstractIssueGadget\n{\n}\nand then add to your plugin activator like:\npublic\nclass\nRedminePlugin\nextends\nAbstractTrackerPlugin\n{\n.\n.\n.\n.\n.\n.\nprotected\nClass\n<\n?\nextends\nGadget\n>\n[\n]\ngetGadgetClasses\n(\n)\n{\nreturn\nnew\nClass\n[\n]\n{\nRedmineGadget\n.\nclass\n}\n;\n}\nNow, in Dashboard page, you can find a gadget named\nRedmine Issues\nis available. When add it to your dashboard, you may see the gadget like below:\nCreate/Update Issue\nâ\nIf you want to create/update issues, you can add some step class to do this, and add them to your plugin activator like below:\npublic\nclass\nRedminePlugin\nextends\nAbstractTrackerPlugin\n{\n.\n.\n.\n.\n.\n.\nprotected\nObject\n[\n]\ngetExtraExtensions\n(\n)\n{\nreturn\nnew\nObject\n[\n]\n{\nnew\nStepProvider\n(\n)\n{\npublic\nClass\n<\n?\nextends\nStep\n>\ngetStepClass\n(\n)\n{\nreturn\nCreateIssueStep\n.\nclass\n;\n}\n}\n,\nnew\nStepProvider\n(\n)\n{\npublic\nClass\n<\n?\nextends\nStep\n>\ngetStepClass\n(\n)\n{\nreturn\nUpdateIssueStep\n.\nclass\n;\n}\n}\n}\n;\n}\n}\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Creating an Issue Tracker Plugin",
        "content": ""
      },
      {
        "header": "Plugin Activatorâ",
        "content": "Every issue tracker plugin needs a plugin activator. As plugin com.pmease.quickbuild.tracker.core has already done a lot of things, add it to plugin dependencies in MANIFEST.MF, and actually, in most cases, you only need this dependency. And then, implement the activator by extending AbstractTrackerPlugin: publicclassRedminePluginextendsAbstractTrackerPlugin{publicIssueTrackercreateTracker(){returnnewRedmineTracker();}protectedIssueCategorycreateCategory(){returnnewRedmineCategory();}publicClass<?>getConfigurationSettingClass(){returnRedmineSetting.class;}} It is fairly simple, and we will discuss more detailed below."
      },
      {
        "header": "IssueTrackerâ",
        "content": "IssueTracker is an interface which tell QuickBuild how to fetch issue related information from remote server: publicinterfaceIssueTrackerextendsCommentTransformer{/*** Return the total issues in a build*/intgetIssueCount(Buildbuild);/*** Get the issue pattern which will be used to match issue key in commit message* @return*/PatterngetIssuePattern();/*** Extract the issue key from a matched issue key, for example: extract bug:123 to 123, #456 to 456** @param matched* @return*/StringextractIssueKey(Stringmatched);/*** Batch fetching issues data from remote.** @param keys need be fetched* @return a map of fetched issues data*/Map<String,Issue>fetchIssues(Collection<String>keys);/*** Get the issue url pattern which will be used to hyperlink the issue key, for example, for JIRA issue,* the pattern would be: http://jira-server/browse/$KEY.* Note: always use <b>$KEY</b> as we will use it to replace with the actual issue key.** The server url can be retrieved from the tracker setting. So, for JIRA, this function can be* simply implemented like below:* <code>* public String getIssueUrlPattern() {*     JiraSetting setting = JiraSetting.get(); // Retrieve JIRA setting of current configuration*     return StringHelper.normalizeUrl(setting.getHost()) + \"/browse/$KEY\";* }* </code>** @return the pattern of issue url*/StringgetIssueUrlPattern();} To implement IssueTracker, extendcom.pmease.quickbuild.plugin.tracker.core.AbstractIssueTrackerwhich implements most of the functions above: publicclassRedmineTrackerextendsAbstractIssueTracker{publicMap<String,Issue>fetchIssues(Collection<String>keys){......}publicStringgetIssueUrlPattern(){RedmineSettingsetting=RedmineSetting.get();returnStringHelper.normalizeUrl(setting.getHost())+\"/issues/$KEY\";}@OverridepublicStringextractIssueKey(finalStringmatched){Longid=TrackerHelper.extractLong(matched);if(id==null){returnnull;}else{returnid.toString();}}} fetchIssues()is tracker related, you need implement according to your issue tracker API. Class Issue includes below properties: publicclassIssueimplementsSerializable{privateStringissueKey;privateStringissueType;privateStringsummary;privateStringstatus;privateStringpriority;privateStringresolution;privateCalendarcreated;privateCalendarupdated;privateStringassignee;privateStringreporter;}"
      },
      {
        "header": "IssueCategoryâ",
        "content": "All issues report will be saved to your configuration or build reports directory. The IssueCategory encapsulates the issue related operations, like save/load from H2 database, displays to user, etc. So implement your IssueCategory like below: publicclassRedmineCategoryextendsIssueCategory{// return the name of the categorypublicStringgetName(){return\"Redmine\";}// return the unique id of categorypublicStringgetId(){return\"redmine\";}// return the order which you want to display in QuickBuildpublicintgetOrder(){return150;}}"
      },
      {
        "header": "Configuration Settingâ",
        "content": "You need add a configuration setting class let user define the issue tracker server: @Editable(name=\"Redmine Server\",order=1000,category=\"Issue Tracker\")publicclassRedmineSettingextendsAbstractTrackerSetting{publicRedmineSetting(){// default issue patternissuePattern=\"(?<!\\\\:)(?:#|bug:)\\\\d+\";}} AbstractTrackerSettingdefines below properties: publicabstractclassAbstractTrackerSettingimplementsTrackerSetting{Stringhost;Stringuser;Stringpassword;StringissuePattern;} Just add as more fields as you need to the setting class, and apply some annotations to your getter method, QuickBuild will display the form without writing one line for GUI. See this page for details. For example, we add associate project to RedmineSetting: publicclassRedmineSettingextendsAbstractTrackerSetting{privateStringassociatedProject;......@Editable(name=\"Associated Project\",order=500)@NotEmpty@ScriptablepublicStringgetAssociatedProject(){returnassociatedProject;}} Now, in Redmine setting, a new fieldAssociated Projectis added which is a required field and also user can use script to provide this property. Finally, package the plugin and copy to QuickBuild server plugins directory, restart QuickBuild. To test your plugin, here is Redmine, you need: configure the Redmine Server in configuration settingsadd a repository to the configurationadd a checkout steptrigger a buildsubmit some modifications to your repository, in the commit message, add some issues you wanttrigger a build again If you are lucky, you can find all issues mentioned in commit messages are hyperlinked and a tab named Redmine which displays all issues mentioned in commit messages is added in build page."
      },
      {
        "header": "Exposing Issues Reportâ",
        "content": "You can also expose your issues report via REST: @Path(\"/redmine\")publicclassRedmineRestResourceextendsTrackerResource{} and then add this class to the plugin activator so QuickBuild can know you want to expose it: publicclassRedminePluginextendsAbstractTrackerPlugin{......protectedClass<?>[]getRestResourceClasses(){returnnewClass[]{RedmineRestResource.class};} And now you can visit below URL to access your issues report: http://your-quickbuild/rest/redmine SeeInteract with Issuesfor all RESTful functions."
      },
      {
        "header": "Contributing to Dashboardâ",
        "content": "If you want to display your issues report to Dashboard, you can create a Gadget class: @Editable(name=\"Redmine Issues\",category=GadgetCategory.CHANGES_AND_ISSUES)publicclassRedmineGadgetextendsAbstractIssueGadget{} and then add to your plugin activator like: publicclassRedminePluginextendsAbstractTrackerPlugin{......protectedClass<?extendsGadget>[]getGadgetClasses(){returnnewClass[]{RedmineGadget.class};} Now, in Dashboard page, you can find a gadget namedRedmine Issuesis available. When add it to your dashboard, you may see the gadget like below:"
      },
      {
        "header": "Create/Update Issueâ",
        "content": "If you want to create/update issues, you can add some step class to do this, and add them to your plugin activator like below: publicclassRedminePluginextendsAbstractTrackerPlugin{......protectedObject[]getExtraExtensions(){returnnewObject[]{newStepProvider(){publicClass<?extendsStep>getStepClass(){returnCreateIssueStep.class;}},newStepProvider(){publicClass<?extendsStep>getStepClass(){returnUpdateIssueStep.class;}}};}}"
      }
    ],
    "links": [
      "https://wiki.pmease.com/display/QB14/Plugin+Examples"
    ]
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Extension+Points",
    "title": "Extension Points",
    "breadcrumb": [
      "",
      "Developer's Guide",
      "Develop Plugins",
      "Development References"
    ],
    "full_text": "Developer's Guide\nDevelop Plugins\nDevelopment References\nExtension Points\nVersion: QB14\nExtension Points\nFor documentation of plugin extension points defined in the system, please extract the file\n<QuickBuild server install dir>/plugins/com.pmease.quickbuild.bootstrap/javadoc.zip/com/pmease/quickbuild/extensionpoint/package-summary.html\n.\nLast updated\non\nOct 23, 2024",
    "sections": [
      {
        "header": "Extension Points",
        "content": ""
      }
    ],
    "links": []
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Working+with+Reports",
    "title": "Working with Reports",
    "breadcrumb": [],
    "full_text": "Version: QB14\nOn this page\nWorking with Reports\nOverview\nâ\nThe build reports in QuickBuild are published by using\npublish build reports step\n. The build report will be generated after the build finishes. After the build reports is published, you can:\nView an overview status in\nbuild dashboard\n.\nView the details report by clicking the related category in\nBuild\nTab.\nView the trends of the current report in\nStatistics tab\n.\nQuickBuild also support publishing HTML reports if your reports are not supported directly.\nSupported Reports\nâ\nFollowing table lists all the reports supported in QuickBuild:\nJava Category\nâ\nReport Name\nVersion\nJUnit Report\n3.8+\nTestNG Report\n5.7\nFidbugs Report\n1.3.5+\nCheckStyle Report\n4.1+\nEMMA Report\n2.1+\nCobertura Report\n1.9.2+\nPMD Report\n4.2.2\n.NET Category\nâ\nReport Name\nVersion\nMSTest Report\nNUnit Report\n2.0\nMBUnit Report\n2.4+\nFxcop Report\n1.35+\nNCover Report\n3.0+\nReport Table\nâ\nQuickBuild is using a grid table to display the records of a build report as follows:\nBelow is a fast overview of the actions in the report table:\nRe-order The Report\nâ\nBy clicking the header of the table, you can re-order the report results by selected column.\nDisplay The History Statistics Chart\nâ\nWhen clicking a column with\n, the history statistics of this data will be displayed. This will help you to track your builds more accurately.\nNOTE: Only last 25 builds will be displayed\nFiltering/Navigating The Report\nâ\nAt the top/bottom of the report table, controls are available to filter/navigate the report.\nFilter the records\nâ\nSome reports contains sub reports, for example, in JUnit Packages report, you can click each link of the Package Name, then all the test suites in this packages will be displayed. Or if you are viewing tests report ('By Tests' tab), then click the link(s) will help you to filter the reports.\nYou may also enter any words you want to filter in the input box, and press 'Go' button, the report will be filtered. Clear the filter input field, and press 'Go' button, and all records will be shown again.\nBy selecting 'containing' or 'excluding', the records will include or exclude the word(s) you have entered.\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Working with Reports",
        "content": ""
      },
      {
        "header": "Overviewâ",
        "content": "The build reports in QuickBuild are published by usingpublish build reports step. The build report will be generated after the build finishes. After the build reports is published, you can: View an overview status inbuild dashboard.View the details report by clicking the related category inBuildTab.View the trends of the current report inStatistics tab. QuickBuild also support publishing HTML reports if your reports are not supported directly."
      },
      {
        "header": "Supported Reportsâ",
        "content": "Following table lists all the reports supported in QuickBuild:"
      },
      {
        "header": "Java Categoryâ",
        "content": "Report NameVersionJUnit Report3.8+TestNG Report5.7Fidbugs Report1.3.5+CheckStyle Report4.1+EMMA Report2.1+Cobertura Report1.9.2+PMD Report4.2.2"
      },
      {
        "header": ".NET Categoryâ",
        "content": "Report NameVersionMSTest ReportNUnit Report2.0MBUnit Report2.4+Fxcop Report1.35+NCover Report3.0+"
      },
      {
        "header": "Report Tableâ",
        "content": "QuickBuild is using a grid table to display the records of a build report as follows: Below is a fast overview of the actions in the report table:"
      },
      {
        "header": "Re-order The Reportâ",
        "content": "By clicking the header of the table, you can re-order the report results by selected column."
      },
      {
        "header": "Display The History Statistics Chartâ",
        "content": "When clicking a column with, the history statistics of this data will be displayed. This will help you to track your builds more accurately.NOTE: Only last 25 builds will be displayed"
      },
      {
        "header": "Filtering/Navigating The Reportâ",
        "content": "At the top/bottom of the report table, controls are available to filter/navigate the report."
      },
      {
        "header": "Filter the recordsâ",
        "content": "Some reports contains sub reports, for example, in JUnit Packages report, you can click each link of the Package Name, then all the test suites in this packages will be displayed. Or if you are viewing tests report ('By Tests' tab), then click the link(s) will help you to filter the reports. You may also enter any words you want to filter in the input box, and press 'Go' button, the report will be filtered. Clear the filter input field, and press 'Go' button, and all records will be shown again. By selecting 'containing' or 'excluding', the records will include or exclude the word(s) you have entered."
      }
    ],
    "links": []
  },
  {
    "url": "https://wiki.pmease.com/display/QB14/Plugin+Examples",
    "title": "Plugin Examples",
    "breadcrumb": [],
    "full_text": "Version: QB14\nPlugin Examples\nQuickBuild ships with some plugin examples located in directory\n<QuickBuild install dir>/dev/plugin/samples\n. You may follow below steps to import these example plugin projects into the\nplugin development workspace\nto explore them more easily:\nBring up the import dialog by selecting Eclipse menu item\nFile -> Import\n. Select\nExisting Projects into Workspace\nas import source like below:\nClick next to bring up the import projects dialog. Specify root directory as\n<QuickBuild install dir>/dev/plugin/samples\n, and check the option\nCopy projects into workspace\nlike below:\nClick finish, and all example plugin projects will be imported into the workspace.\nCheck Eclipse problems view to see if there is any errors. If there is, rebuild imported projects by selecting menu item\nProject -> Clean\n, and click OK on the appeared dialog.\nNow let's introduce more plugin concepts and extension points by exploring some of these example projects:\nWrite Custom Gadget\nThe Example Plugin in Tutorial\nThe JavaNCSS Plugin\nCreating a Test Report Plugin\nCreating an Issue Tracker Plugin\nLast updated\non\nOct 28, 2024",
    "sections": [
      {
        "header": "Plugin Examples",
        "content": ""
      }
    ],
    "links": []
  }
]