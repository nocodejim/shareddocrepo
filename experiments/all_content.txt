Title: QuickBuild 14.0 Release Highlights
URL: https://wiki.pmease.com/display/QB14/
Breadcrumb: 

QuickBuild 14.0 Release Highlights
Version: QB14
On this page
QuickBuild 14.0 Release Highlights
New Features and Improvements
â
QB-3918: Audit log for dashboard change
QB-3935: Able to rename overriden variables as well when rename a variable
QB-3941: Add Logging for step type: Execute groovy script from file
QB-3943: Export users/groups as csv with user/group relationship
QB-3956: Able to annotate inactive nodes for offline reason
QB-3969: Able to mark configuration as favorite to show in favorite configurations gadget
QB-3970: Able to search by build description
QB-3971: Able to export build search result as Excel
QB-3978: Improve user restful api to be able to list administrators
QB-3983: Filter out builds not accessible instead of throw AccessDeniedException for build query restful api
QB-3998: Allow the addition of other users to cc on the "Submit Support Request" page
QB-4002: Permission to edit settings of child configurations
QB-4018: Add timeout parameter to Context's methods
QB-4025: Able to customize k8s agent service definition
QB-4027: Add additional columns to scripted build list gadget
QB-4030: Able to save step log as text file via script api
QB-4031: Improve agent heartbeat to check connection fro server to agent also
QB-4040: Add wordcount in ckeditor for various html editor.
QB-4046: Java 21 LTS support
QB-4050: "All open pull request" in "Pull requests" of "Repositories/Github" couldn't filter the 'Draft' PR
QB-4052: Able to launch build agent in EC2 with temporal credentials of IAM role
QB-4053: Able to launch on-demand EC2 build agent with specified IAM instance profile
QB-4054: Able to publish artifacts to AWS S3 with temporal credentials of IAM role
QB-4057: Able to rename overrided steps in descendent configurations when rename a step
QB-4058: Able to rename overrided repositories in descendent configurations when rename a repository
QB-4060: Able to add comment to build
QB-4061: An option to show recent builds triggered by current user in configuration recent builds table
Bugs
â
QB-3955: Variables accessed via configuration.getVarValue() is not masked in build log
QB-4048: Authoriz/Unauthorize build agent API error
QB-4055: UI no response when save a copied dashboard
QB-4056: Dashboard button is disappeared after menu popped up
Last updated
on
Oct 23, 2024

================================================================================

Title: Concepts
URL: https://wiki.pmease.com/display/QB14/category/Concepts
Breadcrumb: 

ðï¸
SCM
SCM refers to Source Code Management system, Example of SCM systems are CVS , Subversion , Visual Sourcesafe , ClearCase , Perforce , and Starteam.
ðï¸
Configuration
Configuration holds all the configuration information needed to generate builds. It includes information about what to build, how to build, and when to build, etc. Configurations are organized in a hierarchical structure. To refer to a configuration, the names of all its ancestor configurations should be chained together and concatenated with forward slash, for example: root/department1/project1/nightly. This is called configuration path. Child configurations can inherit build settings from its parent, and they can selectively override some of the parent settings. This behavior is referred as inherit and override rule, which simplifies the build management of multiple projects.
ðï¸
Configuration Hierarchy
For a particular configuration, the configuration hierarchy refers to the configuration and all its parent configurations (direct and non-direct).
ðï¸
Configuration Subtree
For a particular configuration, the configuration subtree refers to current configuration and all its child configurations (direct and non-direct).
ðï¸
Build
Build is generated by running a configuration. When a particular configuration is triggered (either by user or by the scheduling system), the build condition of the configuration is evaluated. If the result of the evaluation is true, the configuration will be run to generate a new build.
ðï¸
Build Pipeline
Build pipeline is a set of builds connected with promotions, visualizing different stages in a build or deployment process with commit information displayed on each stage. Defined promotion actions can be taken directly on the pipeline to push commits going through different stages.
ðï¸
Repository
Repository is the place, where the files used to generate builds are stored. It normally refers to various SCM systems which holds source files to generate the build. It is used by QuickBuild to checkout/update files from various SCM as part of the build process. Repository definition follows the inherit and override rule: repositories defined in descendant configurations with the same name will override those defined in ancestor configuration.
ðï¸
QuickBuild Repository
QuickBuild repository is a special repository which holds published artifacts of a build. By checking out from this repository, artifacts of upstream builds (normally library projects) can be retrieved and used by downstream builds. This is how dependency handled in QuickBuild: the downstream builds depends on upstream builds and it uses QuickBuild repository to resolve the dependency.
ðï¸
Step
QuickBuild uses steps to control how a build should be performed. Multiple steps can be chained sequentially or in parallel to define the build process of a configuration, and they can be configured to run on different build nodes (see the Build Node definition below) to perform remote builds. Step definition follows the inherit and override rule: steps defined in descendant configurations with the same name will override those defined in ancestor configuration.
ðï¸
Composite Step
Composite step is a special step which may be used to execute other steps sequentially or in parallel. It can recursively contain other composite steps which can be overridden in descendant configurations.
ðï¸
Master Step
Master step acts as the entry point for build execution and it is always named master . When a build is started, it looks for master step and executes it. The master step is normally defined as a composite step to exuecute other steps.
ðï¸
Step Path
Step path can be used to reference an executed step. Since QuickBuild 3.0, the same step can be reused in a single build, therefore it is not sufficient to reference an executed step simply with a step name. Path of a particular step instance can be constructed by concatenating names of all its container steps with character "\>", from outer-most to inner-most, with the last element being name of the step itself. Below screen explains how to construct step path of various steps:
ðï¸
Build Grid
QuickBuild 2.0 introduces the concept of a build grid to serve purposes including but not limited to:
ðï¸
Build Server
Build server represents the QuickBuild instance configured to run as a server. It is responsible for overall central management of build tasks, and it distributes steps to the connected build agents based on defined rules.
ðï¸
Build Agent
Build agents connect to build server to form a build grid. Since a grid node (server node and agent node) can only run one build at a time, multiple build agents means the ability to run multiple builds concurrently, which is important to a busy build system. It also make multi-platform build/test possible as a build can distribute different steps to different agents for execution. Build agent can be upgraded automatically when the build server upgrades to a new version.
ðï¸
User Agent
User agent is installed on user's desktop and is mainly used for the purpose of Proof Build. It responsible for collecting uncommitted changes from user's desktop and send to build grid for verification. It can be upgraded automatically when server upgrades to a new version.
ðï¸
Grid Node
Grid node represents a member of the build grid, it is either a build server, a build agent or a user agent. It is identified by the node address in the form of \:\ , where \ represents the host name of the machine running the build node instance, and \ represents the port number the build node instance uses.
ðï¸
Resource
Resource means any physical or virtual component of limited availability within the grid, and is provided by grid nodes. A build step can declare to require certain resources to run. If some nodes are found with desired resources, the step will run on the fastest node; otherwise, the step will wait until a node with free resource is available. This way, the resource contention problem between builds and steps can be solved efficiently.
ðï¸
Cloud Profile
Cloud profile exists to support launch build agent on demand in cloud environment. It defines how to launch build agents as well as describing characteristics of the build agents. Build agents launched by the same cloud profile will have same characteristics. Often you need to define multiple cloud profiles to satisfy different build requirements.
ðï¸
Proof Build
QuickBuild 2.0 introduces concept of proof build to build and test your uncommitted changes at server side. With proof build, the risk of polluting SCM with bad code will be reduced to minimum as developer can submit a proof build and only commit their changes if the proof build is successful.
ðï¸
Build Promotion
Build promotion is a process of generating new build based on information or artifacts of another build. It is used by QuickBuild to implement build life cycle management. For example, a gold QA build can be promoted as a release build. Arbitrary custom actions can be configured for the promotion process so that you can deploy the build to test servers, create tags on SCMs for release builds, or send notifications to interesting parts.
ðï¸
Local Change
Local change refers to uncommitted changes collected from project work area at user's desktop when running a proof build. It is called local from user's perspective, as they've not submitted to SCM. For distributed version control systems, local change refers to local commits which will be pushed to a central repository.
ðï¸
Configuration Workspace
Configuration workspace is the place to build your projects. It is used to hold files used during a build such as source files checked out from SCM, intermediate files generated during the build etc. In a grid environment, each node has a separate workspace for each configuration. By default, workspace for a particular configuration on a particular node points to the directory named by configuration path under QuickBuild's installation directory on that node.
ðï¸
Storage Directory
Storage directory is a place on build server or agent to store below contents:
ðï¸
Configuration Publish Directory
Configuration publish directory is a place on build server to hold published materials of the configuration such as various statistics reports. Each configuration will create its own publish directory named by configuration id under the configurations sub directory of storage directory.
ðï¸
Build Publish Directory
Build publish directory is a place on build server to hold published materials of the build such as build artifacts and various build reports. Each build will create its own publish directory named by build id under the builds sub directory of storage directory.

================================================================================

Title: Installation Guide
URL: https://wiki.pmease.com/display/QB14/category/Installation+Guide
Breadcrumb: 

ðï¸
Server Installation Guide
Supported operating systems
ðï¸
Build Agent Installation Guide
Supported operating systems
ðï¸
User Agent Installation Guide
Supported operating systems
ðï¸
Install As System Service
This document explains how to configure QuickBuild programs (server, build agent, and user agent) to run as system service.

================================================================================

Title: Upgrade Guide
URL: https://wiki.pmease.com/display/QB14/category/Upgrade+Guide
Breadcrumb: 

ðï¸
Upgrade to 14.0.x
QB9 or higher requires Java 1.8 or higher both for server and agent
ðï¸
Upgrade to 13.0.x
QB9 or higher requires Java 1.8 or higher both for server and agent
ðï¸
Upgrade to 12.0.x
QB9 or higher requires Java 1.8 or higher both for server and agent
ðï¸
Upgrade to 11.0.x
QB9 or higher requires Java 1.8 or higher both for server and agent
ðï¸
Upgrade to 10.0.x
QB9 or higher requires Java 1.8 or higher both for server and agent
ðï¸
Upgrade to 9.0.x
9.0.x now requires Java 1.8 or higher both for server and agent
ðï¸
Upgrade to 8.0.x
Upgrade procedures
ðï¸
Upgrade to 7.0.x
Upgrade procedures
ðï¸
Upgrade to 6.1.x
Upgrade Procedures
ðï¸
Upgrade to 6.0.x
Upgrade Procedures
ðï¸
Upgrade to 5.1.x
Upgrade Procedures
ðï¸
Upgrade to 5.0.x
Upgrade Procedures
ðï¸
Upgrade to 4.0.x
Upgrade Procedures
ðï¸
Upgrade to 3.1.x
Upgrade procedures
ðï¸
Upgrade to 3.0.x
Upgrade procedures
ðï¸
Upgrade to 2.1.x
Upgrade procedures
ðï¸
Upgrade to 2.0.x
Upgrade procedures
ðï¸
Procedures
9 items

================================================================================

Title: User's Guide
URL: https://wiki.pmease.com/display/QB14/category/User's+Guide
Breadcrumb: 

ðï¸
Badge for build status
QuickBuild can generate a badge image for build status, report stats, so you can add the badge image to markdown, or anywhere you want.
ðï¸
Working with Dashboard
Dashboard can be used to access interesting information in system quickly. If no dashboard is defined, QuickBuild will display a default dashboard displaying the configuration tree. The default dashboard will saved as your own dashboard once it is edited (change layout, edit gadget, change name, etc).
ðï¸
Working with Configurations
10 items
ðï¸
Working with Builds
11 items
ðï¸
Working with Changes
When a build takes place, SCM changes will be calculated against previous build. Changes will not be calculated for the first build in a configuration since there is no base build to calculate changes against. If you've changed name of the repository, changes of that repository will not be calculated for the first build after the name change, since QuickBuild uses repository name as the key to look up repository revision in previous build.
ðï¸
Working with Build Pipeline
Build pipeline in QuickBuild is series of builds connected via build promotions, with commits information attached. It pushes commits going through different phases of the build workflow, either automaticly or manually. The build pipeline page can be accessed from the build pipeline link in configuration tab, and can be added as a gadget to user dashboards. A typical pipeline is like below:
ðï¸
Working with Issues
If you defined issue tracker in the configuration, QuickBuild can generate the issues report based on your commit comments or update issue step. Below is a sample of the issue report displayed in the build page:
ðï¸
Working with Artifacts
Access build artifacts
ðï¸
Working with Reports
3 items
ðï¸
Working with Statistics
All statistics data of a configuration can be viewed in Statistics Tab.
ðï¸
Manage User Profile
For logged in user, user profile can be managed through My tab like below:
ðï¸
Manage Build Subscriptions
User can subscribe to get build notifications for one or more configurations through the My tab like below:
ðï¸
Manage User Agent
Install user agent
ðï¸
Working with Proof Build
Introduction
ðï¸
Working With Addons
1 item
ðï¸
Working with Grid Measurements
From QuickBuild v5, grid measurements are collected every 5 minutes from all action nodes. All measurement are separated into below group:
ðï¸
Working with Alerts
From QuickBuild v5, all alerts reported by the QuickBuild system can be viewed in Grid tab like below and all alerts can be subscribed by email, tray monitor, Jabber and MSN messenger.

================================================================================

Title: Administrator's Guide
URL: https://wiki.pmease.com/display/QB14/category/Administrator's+Guide
Breadcrumb: 

ðï¸
CSS Customization
Since QB 13.0, dark theme is introduced. And now, it is easy to do some customization for both light mode and dark mode.
ðï¸
Working with Steps
Step is the key concept in QuickBuild. A build process is actually the execution of sequence of steps. Steps can be defined in step setting page of a configuration like below:
ðï¸
Working with SCM systems
20 items
ðï¸
Working with Build Tools
9 items
ðï¸
Working with Issue Tracker
10 items
ðï¸
Artifact Management
4 items
ðï¸
Publish Build Reports
24 items
ðï¸
Publish HTML Reports
QuickBuild is able to publish and display some commonly used build reports, such as JUnit, Checkstyle, NUnit, EMMA, etc. For reports that QuickBuild does not have native support, if it generates reports in html format, you can instruct QuickBuild to create a report tab in build detail page displaying this html report. This is done by adding the step Publish -\> Html Report from the step menu. We will demonstrate its usage through an example:
ðï¸
Set Up Build Dependency
It is quite common that a product is comprised of different components, and a component is used by different products. We suggest to set up builds for these components and products separately in this case, and utilize QuickBuild's dependency mechanism to use result of component builds in product builds.
ðï¸
Set Up Build Promotion
Define promomotions
ðï¸
Build Notifications
Users can subscribe to configurations to get build notifications if they are willing to do so. On the other hand, you can set up the configuration to forcibly send build notifications to users under certain conditions even if they do not choose to subscribe. This can be done by editing notification setting of corresponding configuration like below:
ðï¸
Customize Notification Templates
Build notification templates can be customized following below steps:
ðï¸
Set Up Proof Build
Proof build support is enabled per SCM. Refer to below links on how to set up proof build for different SCMs:
ðï¸
Working with Resources
What is Resource
ðï¸
Build Concurrency and Deadlock
Control Build Concurrency with Resources
ðï¸
Working with Build Grid
Grid overview
ðï¸
Working with Cloud Profiles
4 items
ðï¸
Diagnose Build Issues
Investigate build failure
ðï¸
Running Behind Apache
Introduction
ðï¸
Data Management
Data backup and restore
ðï¸
License Management
ðï¸
Security Management
9 items
ðï¸
Auditing User Activities
QuickBuild audits all user activities in the system such as configuration modification, build triggering/cancelling. Authorized users may open the audit log to find out what has been changed in the system during a certain time period, and can compare the changes if necessary as demonstrated by below screenshot:
ðï¸
Plugin Management
QuickBuild is designed around OSGi, a plugin framework. This enables QuickBuild to be extended easily by just installing new plugins. In fact many of its features are provided by plugins out of the box, such as steps, repositories, reports, etc. All QuickBuild plugins are kept in the plugins folder under QuickBuild's installation directory, with each file representing a single plugin.
ðï¸
Configuring System Alerts
Alert Definition
ðï¸
Configuring Disk Monitoring
By default, QuickBuild will only monitor the disk where node storage directory is on. You may want to specify the disks yourself, so you need:
ðï¸
Webhooks
Since 8.0.12

================================================================================

Title: Developer's Guide
URL: https://wiki.pmease.com/display/QB14/category/Developer's+Guide
Breadcrumb: 

ðï¸
Develop Plugins
3 items
ðï¸
RESTful API
32 items
ðï¸
RESTful API (JSON Edition)
Starting from QuickBuild 10, A JSON based RESTful api is supported. It works exactly the same as the traditional XML based api, except that one has to specify http header Accept application/json when posting json content back to server.

================================================================================

Title: Build Setup Tutorials
URL: https://wiki.pmease.com/display/QB14/category/Build+Setup+Tutorials
Breadcrumb: 

ðï¸
Build Against Specific Gerrit Change
Situation
ðï¸
Set up Your First Build
Situation
ðï¸
Control Build Versions
6 items
ðï¸
Build Against Specified Tag
Situation
ðï¸
Re-run Build Using Same SCM Revision
Situation
ðï¸
Inherit and Override
1 item
ðï¸
Chained Build Options
Situation
ðï¸
Distributed Builds
4 items
ðï¸
Resource Management
2 items
ðï¸
Build Dependencies
4 items
ðï¸
Clean and Incremental Build
Situation
ðï¸
Complicated Build Options
Situation
ðï¸
Complicated Build Cleanup Strategy
Situation
ðï¸
Promote Builds
2 items
ðï¸
Set up Build Pipeline
Situation
ðï¸
LDAP Authentication
2 items
ðï¸
Single Sign-On
4 items
ðï¸
Trigger Builds
Situation
ðï¸
Publish Reports
In Quickbuild (from Version 2.0), if we want to publish reports, we need add a publish step. Below gives an example for publishing JUnit reports, for other reports supported by Quickbuild, they are almost the same.
ðï¸
JIRA Integration
Situation
ðï¸
Reports Aggregation
Scenario
ðï¸
Launch Build Agent On Demand
5 items

================================================================================

Title: References
URL: https://wiki.pmease.com/display/QB14/category/References
Breadcrumb: 

ðï¸
Repository Path
Repository path is used to refer to file in SCM systems. Example repository urls for different SCM systems:
ðï¸
File Pattern Reference
Definition

================================================================================

Title: SCM
URL: https://wiki.pmease.com/display/QB14/SCM
Breadcrumb:  > Concepts

Concepts
SCM
Version: QB14
SCM
SCM refers to
Source Code Management
system, Example of SCM systems are
CVS
,
Subversion
,
Visual Sourcesafe
,
ClearCase
,
Perforce
, and
Starteam
.
Last updated
on
Oct 23, 2024

================================================================================

Title: Configuration
URL: https://wiki.pmease.com/display/QB14/Configuration
Breadcrumb:  > Concepts

Concepts
Configuration
Version: QB14
Configuration
Configuration holds all the configuration information needed to generate builds. It includes information about what to build, how to build, and when to build, etc. Configurations are organized in a hierarchical structure. To refer to a configuration, the names of all its ancestor configurations should be chained together and concatenated with forward slash, for example:
root/department1/project1/nightly
. This is called configuration path. Child configurations can inherit build settings from its parent, and they can selectively override some of the parent settings. This behavior is referred as inherit and override rule, which simplifies the build management of multiple projects.
Last updated
on
Oct 23, 2024

================================================================================

Title: Configuration Hierarchy
URL: https://wiki.pmease.com/display/QB14/Configuration+Hierarchy
Breadcrumb:  > Concepts

Concepts
Configuration Hierarchy
Version: QB14
Configuration Hierarchy
For a particular configuration, the configuration hierarchy refers to the configuration and all its parent configurations (direct and non-direct).
Last updated
on
Oct 23, 2024

================================================================================

Title: Configuration Subtree
URL: https://wiki.pmease.com/display/QB14/Configuration+Subtree
Breadcrumb:  > Concepts

Concepts
Configuration Subtree
Version: QB14
Configuration Subtree
For a particular configuration, the configuration subtree refers to current configuration and all its child configurations (direct and non-direct).
Last updated
on
Oct 23, 2024

================================================================================

Title: Build
URL: https://wiki.pmease.com/display/QB14/Build
Breadcrumb:  > Concepts

Concepts
Build
Version: QB14
Build
Build is generated by running a configuration. When a particular configuration is triggered (either by user or by the scheduling system), the
build condition
of the configuration is evaluated. If the result of the evaluation is
true
, the configuration will be run to generate a new build.
{#Build-version}
Build version can be used to identify a build inside a configuration, for example:
1.0.0
. Some special version can be used to identify latest build of different status:
Version
Explanation
latest
represents latest build of a configuration
latest_finished
represents latest finished build of a configuration
latest_successful
represents latest successful build of a configuration
latest_recommended
represents latest recommended build of a configuration
latest_failed
represents latest failed build of a configuration
latest_cancelled
represents latest cancelled build of a configuration
latest_running
represents latest running build of a configuration
{#Build-name}
Build name can be used to uniquely identify a build inside the system. It is in the format of
<configuration id>.<build version>
, where
<configuration id>
represents id of a configuration, and
<build version>
represents version of a build (including special version as introduced above). Some examples:
Name
Explanation
1.1.0.0
represents build
1.0.0
in configuration with id
1
2.latest
represents latest build in configuration with id
2
2.latest_successful
represents latest successful build in configuration with id
2
Last updated
on
Oct 23, 2024

================================================================================

Title: Build Pipeline
URL: https://wiki.pmease.com/display/QB14/Build+Pipeline
Breadcrumb:  > Concepts

Concepts
Build Pipeline
Version: QB14
Build Pipeline
Build pipeline is a set of builds connected with promotions, visualizing different stages in a build or deployment process with commit information displayed on each stage. Defined promotion actions can be taken directly on the pipeline to push commits going through different stages.
Last updated
on
Oct 23, 2024

================================================================================

Title: Repository
URL: https://wiki.pmease.com/display/QB14/Repository
Breadcrumb:  > Concepts

Concepts
Repository
Version: QB14
Repository
Repository is the place, where the files used to generate builds are stored. It normally refers to various SCM systems which holds source files to generate the build. It is used by QuickBuild to checkout/update files from various SCM as part of the build process. Repository definition follows the
inherit and override
rule: repositories defined in descendant configurations with the same name will override those defined in ancestor configuration.
Last updated
on
Oct 23, 2024

================================================================================

Title: QuickBuild Repository
URL: https://wiki.pmease.com/display/QB14/QuickBuild+Repository
Breadcrumb:  > Concepts

Concepts
QuickBuild Repository
Version: QB14
QuickBuild Repository
QuickBuild repository is a special repository which holds published artifacts of a build. By checking out from this repository, artifacts of upstream builds (normally library projects) can be retrieved and used by downstream builds. This is how dependency handled in QuickBuild: the downstream builds depends on upstream builds and it uses QuickBuild repository to resolve the dependency.
Last updated
on
Oct 23, 2024

================================================================================

Title: Step
URL: https://wiki.pmease.com/display/QB14/Step
Breadcrumb:  > Concepts

Concepts
Step
Version: QB14
Step
QuickBuild uses steps to control how a build should be performed. Multiple steps can be chained sequentially or in parallel to define the build process of a configuration, and they can be configured to run on different build nodes (see the Build Node definition below) to perform remote builds. Step definition follows the
inherit and override
rule: steps defined in descendant configurations with the same name will override those defined in ancestor configuration.
Last updated
on
Oct 23, 2024

================================================================================

Title: Composite Step
URL: https://wiki.pmease.com/display/QB14/Composite+Step
Breadcrumb:  > Concepts

Concepts
Composite Step
Version: QB14
Composite Step
Composite step is a special step which may be used to execute other steps sequentially or in parallel. It can recursively contain other composite steps which can be overridden in descendant configurations.
Last updated
on
Oct 23, 2024

================================================================================

Title: Master Step
URL: https://wiki.pmease.com/display/QB14/Master+Step
Breadcrumb:  > Concepts

Concepts
Master Step
Version: QB14
Master Step
Master step acts as the entry point for build execution and it is always named
master
. When a build is started, it looks for
master
step and executes it. The master step is normally defined as a composite step to exuecute other steps.
Last updated
on
Oct 23, 2024

================================================================================

Title: Step Path
URL: https://wiki.pmease.com/display/QB14/Step+Path
Breadcrumb:  > Concepts

Concepts
Step Path
Version: QB14
Step Path
Step path can be used to reference an executed step. Since QuickBuild 3.0, the same step can be reused in a single build, therefore it is not sufficient to reference an executed step simply with a step name. Path of a particular step instance can be constructed by concatenating names of all its container steps with character ">", from outer-most to inner-most, with the last element being name of the step itself. Below screen explains how to construct step path of various steps:
Last updated
on
Oct 28, 2024

================================================================================

Title: Build Grid
URL: https://wiki.pmease.com/display/QB14/Build+Grid
Breadcrumb:  > Concepts

Concepts
Build Grid
Version: QB14
Build Grid
QuickBuild 2.0 introduces the concept of a build grid to serve purposes including but not limited to:
Accelerate the build process of a single build. As described earlier (see step definition), build process is defined by steps and they can be configured to run in parallel on different grid nodes (grid node represents a build machine with QuickBuild installed) based on load balancing algorithm.
Run build tasks on build agents to reduce load of central build server. Steps can be configured to run on server or agent, however you should configure CPU and I/O intensive steps to run on agent nodes.
Build, test or package multiple platform products. It is not unusual that a product contains components that need to be build or tested on different platforms. In QuickBuild, this can be easily achieved by specifying proper
node match condition
of the corresponding steps. For example, you can specify that a step compiling Linux components runs only on Linux nodes with GCC 4.0 installed, or it runs only on a node with the specified IP address or with the specified host name, while another step compiles Windows components and runs only on Windows nodes with Visual Studio 2008 installed.
Build grid consists of build nodes, where one build node is always the build server. Other build nodes are build agents connected to the build server.
Last updated
on
Oct 23, 2024

================================================================================

Title: Build Server
URL: https://wiki.pmease.com/display/QB14/Build+Server
Breadcrumb:  > Concepts

Concepts
Build Server
Version: QB14
Build Server
Build server represents the QuickBuild instance configured to run as a server. It is responsible for overall central management of build tasks, and it distributes steps to the connected build agents based on defined rules.
Last updated
on
Oct 23, 2024

================================================================================

Title: Build Agent
URL: https://wiki.pmease.com/display/QB14/Build+Agent
Breadcrumb:  > Concepts

Concepts
Build Agent
Version: QB14
Build Agent
Build agents connect to build server to form a build grid. Since a grid node (server node and agent node) can only run one build at a time, multiple build agents means the ability to run multiple builds concurrently, which is important to a busy build system. It also make multi-platform build/test possible as a build can distribute different steps to different agents for execution. Build agent can be upgraded automatically when the build server upgrades to a new version.
Last updated
on
Oct 23, 2024

================================================================================

Title: User Agent
URL: https://wiki.pmease.com/display/QB14/User+Agent
Breadcrumb:  > Concepts

Concepts
User Agent
Version: QB14
User Agent
User agent is installed on user's desktop and is mainly used for the purpose of
Proof Build
. It responsible for collecting uncommitted changes from user's desktop and send to build grid for verification. It can be upgraded automatically when server upgrades to a new version.
Last updated
on
Oct 23, 2024

================================================================================

Title: Grid Node
URL: https://wiki.pmease.com/display/QB14/Grid+Node
Breadcrumb:  > Concepts

Concepts
Grid Node
Version: QB14
Grid Node
Grid node represents a member of the build grid, it is either a build server, a build agent or a user agent. It is identified by the node address in the form of
<node host>:<node port>
, where
<node host>
represents the host name of the machine running the build node instance, and
<node port>
represents the port number the build node instance uses.
Last updated
on
Oct 23, 2024

================================================================================

Title: Resource
URL: https://wiki.pmease.com/display/QB14/Resource
Breadcrumb:  > Concepts

Concepts
Resource
Version: QB14
Resource
Resource means any physical or virtual component of limited availability within the grid, and is provided by grid nodes. A build step can declare to require certain resources to run. If some nodes are found with desired resources, the step will run on the fastest node; otherwise, the step will wait until a node with free resource is available. This way, the resource contention problem between builds and steps can be solved efficiently.
Last updated
on
Oct 23, 2024

================================================================================

Title: Cloud Profile
URL: https://wiki.pmease.com/display/QB14/Cloud+Profile
Breadcrumb:  > Concepts

Concepts
Cloud Profile
Version: QB14
Cloud Profile
Cloud profile exists to support launch build agent on demand in cloud environment. It defines how to launch build agents as well as describing characteristics of the build agents. Build agents launched by the same cloud profile will have same characteristics. Often you need to define multiple cloud profiles to satisfy different build requirements.
Last updated
on
Oct 23, 2024

================================================================================

Title: Proof Build
URL: https://wiki.pmease.com/display/QB14/Proof+Build
Breadcrumb:  > Concepts

Concepts
Proof Build
Version: QB14
Proof Build
QuickBuild 2.0 introduces concept of proof build to build and test your uncommitted changes at server side. With proof build, the risk of polluting SCM with bad code will be reduced to minimum as developer can submit a proof build and only commit their changes if the proof build is successful.
The source code used to generate a proof build is first checked out from trunk of the SCM, and then patched with uncommitted changes collected from project work area at user's desktop (with the help of user agent which will be mentioned later).
For distributed version control systems, instead of verifying uncommitted changes, proof build is used to verify local commits which will be pushed to central repository.
Last updated
on
Oct 23, 2024

================================================================================

Title: Build Promotion
URL: https://wiki.pmease.com/display/QB14/Build+Promotion
Breadcrumb:  > Concepts

Concepts
Build Promotion
Version: QB14
Build Promotion
Build promotion is a process of generating new build based on information or artifacts of another build. It is used by QuickBuild to implement build life cycle management. For example, a gold QA build can be promoted as a release build. Arbitrary custom actions can be configured for the promotion process so that you can deploy the build to test servers, create tags on SCMs for release builds, or send notifications to interesting parts.
Last updated
on
Oct 23, 2024

================================================================================

Title: Local Change
URL: https://wiki.pmease.com/display/QB14/Local+Change
Breadcrumb:  > Concepts

Concepts
Local Change
Version: QB14
Local Change
Local change refers to uncommitted changes collected from project work area at user's desktop when running a proof build. It is called
local
from user's perspective, as they've not submitted to SCM. For distributed version control systems, local change refers to local commits which will be pushed to a central repository.
Last updated
on
Oct 23, 2024

================================================================================

Title: Configuration Workspace
URL: https://wiki.pmease.com/display/QB14/Configuration+Workspace
Breadcrumb:  > Concepts

Concepts
Configuration Workspace
Version: QB14
Configuration Workspace
Configuration workspace is the place to build your projects. It is used to hold files used during a build such as source files checked out from SCM, intermediate files generated during the build etc. In a grid environment, each node has a separate workspace for each configuration. By default, workspace for a particular configuration on a particular node points to the directory named by configuration path under QuickBuild's installation directory on that node.
For a particular configuraiton, the workspace directory is configurable through the configuration property
workspace path
. Once it is defined, it will be inherited by the descendent configurations if it is not overwritten. For the same configuration, you can define different workspace path on different node with the help of scripting and grid node user attribute.
Last updated
on
Oct 23, 2024

================================================================================

Title: Storage Directory
URL: https://wiki.pmease.com/display/QB14/Storage+Directory
Breadcrumb:  > Concepts

Concepts
Storage Directory
Version: QB14
Storage Directory
Storage directory is a place on build server or agent to store below contents:
published build materials
Published build materials includes build artifacts and various build reports. These materials are stored under the
build publish directory
, which is a directory named by build id under
builds
sub directory of the storage area. For example, if the storage directory is
/storage
, the publish directory for build with identifier
100
will be
/storage/builds/100
.
published configuration materials
Published configuration materials includes various configuration level statistics reports. These materials are stored under the
configuration publish directory
, which is a directory named by configuration id under
configurations
sub directory of the storage area. For example, if the storage directory is
/storage
, the publish directory for configuration with identifier
100
will be
/storage/configurations/100
.
By default, all configurations and builds use the same storage directory identified by system setting
storage directory
. However, each configuration can define its own storage directory through configuration property
storage path
. Once this configuration property is set, all descendent configurations will inherit this storage path if they've not overwritten this property, and this takes effect on both server and agent.
Last updated
on
Oct 23, 2024

================================================================================

Title: Configuration Publish Directory
URL: https://wiki.pmease.com/display/QB14/Configuration+Publish+Directory
Breadcrumb:  > Concepts

Concepts
Configuration Publish Directory
Version: QB14
Configuration Publish Directory
Configuration publish directory is a place on build server to hold published materials of the configuration such as various statistics reports. Each configuration will create its own publish directory named by configuration id under the
configurations
sub directory of
storage directory
.
Last updated
on
Oct 23, 2024

================================================================================

Title: Build Publish Directory
URL: https://wiki.pmease.com/display/QB14/Build+Publish+Directory
Breadcrumb:  > Concepts

Concepts
Build Publish Directory
Version: QB14
Build Publish Directory
Build publish directory is a place on build server to hold published materials of the build such as build artifacts and various build reports. Each build will create its own publish directory named by build id under the
builds
sub directory of
storage directory
.
Last updated
on
Oct 23, 2024

================================================================================

Title: Server Installation Guide
URL: https://wiki.pmease.com/display/QB14/Server+Installation+Guide
Breadcrumb:  > Installation Guide

Installation Guide
Server Installation Guide
Version: QB14
On this page
Server Installation Guide
Supported operating systems
â
Windows 2000/XP/Vista/7/10/11, Windows server 2003-2025, 32 bit and 64 bit, amd64 and arm64 architecture
Linux, 32 bit and 64 bit, amd64 and arm64 architecture
Mac OS X, 32 bit and 64 bit, amd64 and arm64 architecture
Solaris, 32 bit and 64 bit, Sparc and x86 architecture
AIX, 32 bit and 64 bit, PowerPC architecture
HP-UX, 32 bit and 64 bit, IA and PARISC architecture
FreeBSD, 32 bit and 64 bit, x86 architecture
Memory requirement
â
512M minimum, 1G recommended
Installation Steps
â
Download QuickBuild distribution from
https://www.pmease.com/downloads
.
Extract the downloaded file into the selected installation directory. Make sure the user running the server has
full access rights
to the installation directory.
Make sure you have
JDK8 or higher version
installed. Download the appropriate JDK version from
https://java.sun.com
if necessary.
Make sure the
java
command exists in the system path; if not, you will need to modify the file
<QuickBuild install dir>/conf/wrapper.conf
, and point the entry
wrapper.java.command
to path of the java command.
Optionally run command
<server install dir>/bin/config.(bat|sh)
to configure port number and SSL setting of the server.
Open a command window, switch to folder
<server install dir>/bin
, and run command
server.(bat|sh) console
to start the server.
warning
Follow
this guide
on how to install the server as system service so that it auto-starts when machine reboots.
Monitor the console window for any error or warning messages. You may ignore warning message
plugin xxxxx is not enabled as it needs to be configured
, if you don't use these plugins; otherwise, please refer to
plugin management
on how to configure a plugin after server starts up.
After the server starts up, follow the instruction in the console to open a browser window and connect to the server. Following browsers are supported:
Internet Explorer 9.0 or higher
Firefox 3.0 or higher
Safari 3.0 or higher
Chrome 4.0 or higher
By default, QuickBuild uses embedded database for demonstration purpose. For production usage, please switch to other serious database following guide in
data management section
.
Last updated
on
Jul 11, 2025

================================================================================

Title: Build Agent Installation Guide
URL: https://wiki.pmease.com/display/QB14/Build+Agent+Installation+Guide
Breadcrumb:  > Installation Guide

Installation Guide
Build Agent Installation Guide
Version: QB14
On this page
Build Agent Installation Guide
Supported operating systems
â
Windows 2000/XP/Vista/7/10/11, Windows server 2003-2025, 32 bit and 64 bit, amd64 and arm64 architecture
Linux, 32 bit and 64 bit, amd64 and arm64 architecture
Mac OS X, 32 bit and 64 bit, amd64 and arm64 architecture
Solaris, 32 bit and 64 bit, Sparc and x86 architecture
AIX, 32 bit and 64 bit, PowerPC architecture
HP-UX, 32 bit and 64 bit, IA and PARISC architecture
FreeBSD, 32 bit and 64 bit, x86 architecture
Memory requirement
â
64M minimum, 256M recommended
Installation Steps
â
Make sure QuickBuild server is up and running,
login to QuickBuild as administrator
and navigate to
Grid
tab, follow the
download build agent
link to download the build agent. Extract downloaded file into the directory where the build agent should be installed. Make sure the user running user agent has
full access rights
to the installation directory.
Make sure you have
JDK8 or higher version
installed. Download the appropriate JDK version from
https://java.sun.com
if needed.
Make sure the
java
command exists in the system path; if not, you will need to modify the file
conf/wrapper.conf
under the build agent's installation directory, and point the entry
wrapper.java.command
to path of the java command.
Optionally run
<agent install dir>/bin/config.bat|sh)
to configure build agent properties such as IP address, port number, SSL setting, etc.
Open a command prompt window, switch to folder
<agent install dir>/bin
, and run command
agent.(bat|sh) console
to start the agent.
warning
Follow
this guide
on how to install the agent as system service so that it auto-starts when machine reboots.
After the agent starts up, it may complain with the message "This build agent is not authorized to join the grid". Upon this, you need to login to QuickBuild server and authorize the agent to join the grid. Refer to
Working with Build Grid
for how to authorize build agents to join grid.
If the build agent is connected to QuickBuild server correctly, you will see its entry in active node list of the build grid like below by logging in as administrator:
Trouble Shooting
â
If your agent does not connect with server, please make sure that:
You can telnet to server port from agent machine with below command:
telnet _
<
server host name
>
_ _
<
server port
>
_
Here
<server host name>
and
<server port>
has to be extracted from
serverUrl
in file
conf/node.properties
of under agent directory.
You can telnet to agent port from server machine with below command:
telnet
<agent ip address>
<agent port>
If auto-detected agent ip reported in server console log is incorrect, specify it explicitly by editing
conf/node.properties
of the agent to add below property:
ip
=
_
<
agent ip address
>
_
Recently we found a case where QB agent from other subnets connects to server but then times out during initialization (agents from same subnet works fine), and it turns out that server response package is dropped for some reason (maybe the package content matches some pre-set drop rule) across the gateway, and the problem is solved by connecting to server via ssl port so that server response package is encrypted.
Last updated
on
Jul 11, 2025

================================================================================

Title: User Agent Installation Guide
URL: https://wiki.pmease.com/display/QB14/User+Agent+Installation+Guide
Breadcrumb:  > Installation Guide

Installation Guide
User Agent Installation Guide
Version: QB14
On this page
User Agent Installation Guide
Supported operating systems
â
Windows 2000/XP/Vista/7/10/11, Windows server 2003-2025, 32 bit and 64 bit, amd64 and arm64 architecture
Linux, 32 bit and 64 bit, amd64 and arm64 architecture
Mac OS X, 32 bit and 64 bit, amd64 and arm64 architecture
Solaris, 32 bit and 64 bit, Sparc and x86 architecture
AIX, 32 bit and 64 bit, PowerPC architecture
HP-UX, 32 bit and 64 bit, IA and PARISC architecture
FreeBSD, 32 bit and 64 bit, x86 architecture
Memory requirement
â
16M minimum, 64M recommended
Installation Steps
â
Make sure QuickBuild server is up and running, login to QuickBuild using your own account (the account who wants to run user agent on his/her desktop), and navigate to
My
tab, follow the
download user agent
link to download the user agent. Please note that
this link will not be available
if the account do not have [permission to run user agent](Other permissions.html#Otherpermissions-allowuseragent). Extract downloaded file into the directory where the user agent should be installed. Make sure the user running the user agent has
full access rights
to the installation directory.
Make sure you have
JDK8 or higher version
installed. Download the appropriate JDK version from
https://java.sun.com
if needed.
Make sure the
java
command exists in the system path; if not, you will need to modify the file
conf/wrapper.conf
under the build agent's installation directory, and point the entry
wrapper.java.command
to path of the java command.
Run command
<agent install dir>bin/config.(bat|sh)
to configure agent properties such as user name, password, IP address, port number, SSL setting, etc.
Open a command prompt window, switch to folder
<agent install dir>/bin
, and run command
agent.(bat|sh) console
to start the agent.
warning
Follow
this guide
on how to install the agent as system service so that it auto-starts when machine reboots.
If user agent starts and connects to server correctly, you will see
My Agent
tab is displaying information of the user agent by logging to QuickBuild using your account:
Last updated
on
Jul 11, 2025

================================================================================

Title: Install As System Service
URL: https://wiki.pmease.com/display/QB14/Install+As+System+Service
Breadcrumb:  > Installation Guide

Installation Guide
Install As System Service
Version: QB14
On this page
Install As System Service
This document explains how to configure QuickBuild programs (server, build agent, and user agent) to run as system service.
On Windows Platform
â
If necessary, edit file
<QuickBuild server (or agent) install dir>/conf/wrapper.conf
to specify service account via below properties:
wrapper
.
ntservice
.
account
=
wrapper
.
ntservice
.
password
=
The service will run under local system account if these properties are not specified.
If necessary, edit above file to specify desired display name and description of the service via property
wrapper.displayname
and
wrapper.description
.
warning
Make sure to modify these properties to use different service name and description if you want to install multiple QuickBuild servers or agents in the same machine.
Open a command prompt window and switch to folder
<QuickBuild server (or agent) install dir>/bin
. On Windows system with UAC enabled, you will need to
open the command prompt window as Administrator
.
Run command
server.bat install
(or
agent.bat install
) from command prompt window, and a Windows service with the name
QuickBuild Server
will be installed.
If you want to uninstall the service later, just run command
server.bat remove
(or
agent.bat remove
) in the command prompt window (make sure the command prompt window is
opened with administrative right
on Windows system with UAC enabled).
On Unix family Platforms (including MacOS X and Linux)
â
Open a command shell and switch to folder
<QuickBuild server (or agent) install dir>/bin
.
Edit file
server.sh
(or
agent.sh
) to uncomment below line to specify the OS user to run the service as. Make sure the user has full permission against QuickBuild installation directory including all sub directories and files.
#
RUN_AS_USER
=
The service will be run under root account if this line is commented out.
If necessary, edit above file to specify desired display name and description of the service via property
APP_NAME
and
APP_LONG_NAME
.
warning
Make sure to modify these properties to use different service name and description if you want to install multiple QuickBuild servers or agents in the same machine.
Run command
server.sh install
(or
agent.sh install
) to install the service.
If you want to uninstall the service later, just run command
server.sh remove
(or
agent.sh remove
) in the command shell.
Last updated
on
Oct 23, 2024

================================================================================

Title: Upgrade to 14.0.x
URL: https://wiki.pmease.com/display/QB14/Upgrade+to+14.0.x
Breadcrumb:  > Upgrade Guide

Upgrade Guide
Upgrade to 14.0.x
Version: QB14
On this page
Upgrade to 14.0.x
warning
QB9 or higher requires Java 1.8 or higher both for server and agent
Upgrade procedures
â
from 14.0.x
from 13.0.x
from 12.0.x
from 11.0.x
from 10.0.x
from 9.0.x
from 8.0.x
from 7.0.x
from 6.1.x
from 6.0.x
from 5.1.x
from 5.0.x
from 4.0.x (except 4.0.61 and 4.0.62)
from 4.0.61 or 4.0.62
from 3.1.x
from 3.0.x
from 2.1.x
from 2.0.x
from 1.x
from Luntbuild
Typical errors when upgrade to 9.0 with Java 11
Resolution
JDBC driver related errors
Update JDBC driver in current QuickBuild installation to latest version
Class format related errors
Use Java 11.0.2 instead of 11.0.1
Important changes affecting versions before 7.0
â
Publish directory of new build will be stored into a sub directory using last three digits of build id to avoid too many files issue. Old builds still remains in old place and can be recognized by QuickBuild. If you need to get path to build publish directory, please call build.getPublishDir() as it handles the change transparently
Bean editor annotation
@FileInput
now populates related field with below format instead of a single file name:
<
original upload file name
>
/
<
Base64
encoding of upload file content
>
This only affects users using the annotation @FileInput while writing their QuickBuild plugins
Important changes affecting 4.0.x Users
â
QuickBuild server, user agent and build agent now requires at least Java 6.
As mentioned in the upgrade guide, the first upgrade to 5.0.x from 4.0.x may require the user and build agent to be started manually due to introducing of the new bootstrap update mechanism. This manually start will not be necessary for subsequent upgrades.
Users will not be able to share dashboards to groups unless they are authorized with permission
Share Dashboard Allowed
.
Permanent link to a set of published artifacts have been changed. Refer to below link for details:
https://wiki.pmease.com/display/QB50/Working+with+Artifacts#WorkingwithArtifacts-Permanentlinkstoasetofartifactfiles
Last updated
on
Oct 23, 2024

================================================================================

Title: Upgrade to 13.0.x
URL: https://wiki.pmease.com/display/QB14/Upgrade+to+13.0.x
Breadcrumb:  > Upgrade Guide

Upgrade Guide
Upgrade to 13.0.x
Version: QB14
On this page
Upgrade to 13.0.x
warning
QB9 or higher requires Java 1.8 or higher both for server and agent
Upgrade procedures
â
from 13.0.x
from 12.0.x
from 11.0.x
from 10.0.x
from 9.0.x
from 8.0.x
from 7.0.x
from 6.1.x
from 6.0.x
from 5.1.x
from 5.0.x
from 4.0.x (except 4.0.61 and 4.0.62)
from 4.0.61 or 4.0.62
from 3.1.x
from 3.0.x
from 2.1.x
from 2.0.x
from 1.x
from Luntbuild
Typical errors when upgrade to 9.0 with Java 11
Resolution
JDBC driver related errors
Update JDBC driver in current QuickBuild installation to latest version
Class format related errors
Use Java 11.0.2 instead of 11.0.1
Important changes affecting versions before 7.0
â
Publish directory of new build will be stored into a sub directory using last three digits of build id to avoid too many files issue. Old builds still remains in old place and can be recognized by QuickBuild. If you need to get path to build publish directory, please call build.getPublishDir() as it handles the change transparently
Bean editor annotation
@FileInput
now populates related field with below format instead of a single file name:
<
original upload file name
>
/
<
Base64
encoding of upload file content
>
This only affects users using the annotation @FileInput while writing their QuickBuild plugins
Important changes affecting 4.0.x Users
â
QuickBuild server, user agent and build agent now requires at least Java 6.
As mentioned in the upgrade guide, the first upgrade to 5.0.x from 4.0.x may require the user and build agent to be started manually due to introducing of the new bootstrap update mechanism. This manually start will not be necessary for subsequent upgrades.
Users will not be able to share dashboards to groups unless they are authorized with permission
Share Dashboard Allowed
.
Permanent link to a set of published artifacts have been changed. Refer to below link for details:
https://wiki.pmease.com/display/QB50/Working+with+Artifacts#WorkingwithArtifacts-Permanentlinkstoasetofartifactfiles
Last updated
on
Oct 23, 2024

================================================================================

Title: Upgrade to 12.0.x
URL: https://wiki.pmease.com/display/QB14/Upgrade+to+12.0.x
Breadcrumb:  > Upgrade Guide

Upgrade Guide
Upgrade to 12.0.x
Version: QB14
On this page
Upgrade to 12.0.x
warning
QB9 or higher requires Java 1.8 or higher both for server and agent
Upgrade procedures
â
from 12.0.x
from 11.0.x
from 10.0.x
from 9.0.x
from 8.0.x
from 7.0.x
from 6.1.x
from 6.0.x
from 5.1.x
from 5.0.x
from 4.0.x (except 4.0.61 and 4.0.62)
from 4.0.61 or 4.0.62
from 3.1.x
from 3.0.x
from 2.1.x
from 2.0.x
from 1.x
from Luntbuild
Typical errors when upgrade to 9.0 with Java 11
Resolution
JDBC driver related errors
Update JDBC driver in current QuickBuild installation to latest version
Class format related errors
Use Java 11.0.2 instead of 11.0.1
Important changes affecting versions before 7.0
â
Publish directory of new build will be stored into a sub directory using last three digits of build id to avoid too many files issue. Old builds still remains in old place and can be recognized by QuickBuild. If you need to get path to build publish directory, please call build.getPublishDir() as it handles the change transparently
Bean editor annotation
@FileInput
now populates related field with below format instead of a single file name:
<
original upload file name
>
/
<
Base64
encoding of upload file content
>
This only affects users using the annotation @FileInput while writing their QuickBuild plugins
Important changes affecting 4.0.x Users
â
QuickBuild server, user agent and build agent now requires at least Java 6.
As mentioned in the upgrade guide, the first upgrade to 5.0.x from 4.0.x may require the user and build agent to be started manually due to introducing of the new bootstrap update mechanism. This manually start will not be necessary for subsequent upgrades.
Users will not be able to share dashboards to groups unless they are authorized with permission
Share Dashboard Allowed
.
Permanent link to a set of published artifacts have been changed. Refer to below link for details:
https://wiki.pmease.com/display/QB50/Working+with+Artifacts#WorkingwithArtifacts-Permanentlinkstoasetofartifactfiles
Last updated
on
Oct 23, 2024

================================================================================

Title: Upgrade to 11.0.x
URL: https://wiki.pmease.com/display/QB14/Upgrade+to+11.0.x
Breadcrumb:  > Upgrade Guide

Upgrade Guide
Upgrade to 11.0.x
Version: QB14
On this page
Upgrade to 11.0.x
warning
QB9 or higher requires Java 1.8 or higher both for server and agent
Upgrade procedures
â
from 11.0.x
from 10.0.x
from 9.0.x
from 8.0.x
from 7.0.x
from 6.1.x
from 6.0.x
from 5.1.x
from 5.0.x
from 4.0.x (except 4.0.61 and 4.0.62)
from 4.0.61 or 4.0.62
from 3.1.x
from 3.0.x
from 2.1.x
from 2.0.x
from 1.x
from Luntbuild
Typical errors when upgrade to 9.0 with Java 11
Resolution
JDBC driver related errors
Update JDBC driver in current QuickBuild installation to latest version
Class format related errors
Use Java 11.0.2 instead of 11.0.1
Important changes affecting versions before 7.0
â
Publish directory of new build will be stored into a sub directory using last three digits of build id to avoid too many files issue. Old builds still remains in old place and can be recognized by QuickBuild. If you need to get path to build publish directory, please call build.getPublishDir() as it handles the change transparently
Bean editor annotation
@FileInput
now populates related field with below format instead of a single file name:
<
original upload file name
>
/
<
Base64
encoding of upload file content
>
This only affects users using the annotation @FileInput while writing their QuickBuild plugins
Important changes affecting 4.0.x Users
â
QuickBuild server, user agent and build agent now requires at least Java 6.
As mentioned in the upgrade guide, the first upgrade to 5.0.x from 4.0.x may require the user and build agent to be started manually due to introducing of the new bootstrap update mechanism. This manually start will not be necessary for subsequent upgrades.
Users will not be able to share dashboards to groups unless they are authorized with permission
Share Dashboard Allowed
.
Permanent link to a set of published artifacts have been changed. Refer to below link for details:
https://wiki.pmease.com/display/QB50/Working+with+Artifacts#WorkingwithArtifacts-Permanentlinkstoasetofartifactfiles
Last updated
on
Oct 23, 2024

================================================================================

Title: Upgrade to 10.0.x
URL: https://wiki.pmease.com/display/QB14/Upgrade+to+10.0.x
Breadcrumb:  > Upgrade Guide

Upgrade Guide
Upgrade to 10.0.x
Version: QB14
On this page
Upgrade to 10.0.x
warning
QB9 or higher requires Java 1.8 or higher both for server and agent
Upgrade procedures
â
from 10.0.x
from 9.0.x
from 8.0.x
from 7.0.x
from 6.1.x
from 6.0.x
from 5.1.x
from 5.0.x
from 4.0.x (except 4.0.61 and 4.0.62)
from 4.0.61 or 4.0.62
from 3.1.x
from 3.0.x
from 2.1.x
from 2.0.x
from 1.x
from Luntbuild
Typical errors when upgrade to 9.0 with Java 11
Resolution
JDBC driver related errors
Update JDBC driver in current QuickBuild installation to latest version
Class format related errors
Use Java 11.0.2 instead of 11.0.1
Important changes affecting versions before 7.0
â
Publish directory of new build will be stored into a sub directory using last three digits of build id to avoid too many files issue. Old builds still remains in old place and can be recognized by QuickBuild. If you need to get path to build publish directory, please call build.getPublishDir() as it handles the change transparently
Bean editor annotation
@FileInput
now populates related field with below format instead of a single file name:
<
original upload file name
>
/
<
Base64
encoding of upload file content
>
This only affects users using the annotation @FileInput while writing their QuickBuild plugins
Important changes affecting 4.0.x Users
â
QuickBuild server, user agent and build agent now requires at least Java 6.
As mentioned in the upgrade guide, the first upgrade to 5.0.x from 4.0.x may require the user and build agent to be started manually due to introducing of the new bootstrap update mechanism. This manually start will not be necessary for subsequent upgrades.
Users will not be able to share dashboards to groups unless they are authorized with permission
Share Dashboard Allowed
.
Permanent link to a set of published artifacts have been changed. Refer to below link for details:
https://wiki.pmease.com/display/QB50/Working+with+Artifacts#WorkingwithArtifacts-Permanentlinkstoasetofartifactfiles
Last updated
on
Oct 23, 2024

================================================================================

Title: Upgrade to 9.0.x
URL: https://wiki.pmease.com/display/QB14/Upgrade+to+9.0.x
Breadcrumb:  > Upgrade Guide

Upgrade Guide
Upgrade to 9.0.x
Version: QB14
On this page
Upgrade to 9.0.x
warning
9.0.x now requires Java 1.8 or higher both for server and agent
Upgrade procedures
â
from 9.0.x
from 8.0.x
from 7.0.x
from 6.1.x
from 6.0.x
from 5.1.x
from 5.0.x
from 4.0.x (except 4.0.61 and 4.0.62)
from 4.0.61 or 4.0.62
from 3.1.x
from 3.0.x
from 2.1.x
from 2.0.x
from 1.x
from Luntbuild
Typical errors when upgrade to 9.0 with Java 11
Resolution
JDBC driver related errors
Update JDBC driver in current QuickBuild installation to latest version
Class format related errors
Use Java 11.0.2 instead of 11.0.1
Important changes affecting versions before 7.0
â
Publish directory of new build will be stored into a sub directory using last three digits of build id to avoid too many files issue. Old builds still remains in old place and can be recognized by QuickBuild. If you need to get path to build publish directory, please call build.getPublishDir() as it handles the change transparently
Bean editor annotation
@FileInput
now populates related field with below format instead of a single file name:
<
original upload file name
>
/
<
Base64
encoding of upload file content
>
This only affects users using the annotation @FileInput while writing their QuickBuild plugins
Important changes affecting 4.0.x Users
â
QuickBuild server, user agent and build agent now requires at least Java 6.
As mentioned in the upgrade guide, the first upgrade to 5.0.x from 4.0.x may require the user and build agent to be started manually due to introducing of the new bootstrap update mechanism. This manually start will not be necessary for subsequent upgrades.
Users will not be able to share dashboards to groups unless they are authorized with permission
Share Dashboard Allowed
.
Permanent link to a set of published artifacts have been changed. Refer to below link for details:
https://wiki.pmease.com/display/QB50/Working+with+Artifacts#WorkingwithArtifacts-Permanentlinkstoasetofartifactfiles
Last updated
on
Oct 23, 2024

================================================================================

Title: Upgrade to 8.0.x
URL: https://wiki.pmease.com/display/QB14/Upgrade+to+8.0.x
Breadcrumb:  > Upgrade Guide

Upgrade Guide
Upgrade to 8.0.x
Version: QB14
On this page
Upgrade to 8.0.x
Upgrade procedures
â
from 8.0.x
from 7.0.x
from 6.1.x
from 6.0.x
from 5.1.x
from 5.0.x
from 4.0.x (except 4.0.61 and 4.0.62)
from 4.0.61 or 4.0.62
from 3.1.x
from 3.0.x
from 2.1.x
from 2.0.x
from 1.x
from Luntbuild
Important changes affecting versions before 7.0
â
Publish directory of new build will be stored into a sub directory using last three digits of build id to avoid too many files issue. Old builds still remains in old place and can be recognized by QuickBuild. If you need to get path to build publish directory, please call build.getPublishDir() as it handles the change transparently
Bean editor annotation
@FileInput
now populates related field with below format instead of a single file name:
<
original upload file name
>
/
<
Base64
encoding of upload file content
>
This only affects users using the annotation @FileInput while writing their QuickBuild plugins
Important changes affecting 4.0.x Users
â
QuickBuild server, user agent and build agent now requires at least Java 6.
As mentioned in the upgrade guide, the first upgrade to 5.0.x from 4.0.x may require the user and build agent to be started manually due to introducing of the new bootstrap update mechanism. This manually start will not be necessary for subsequent upgrades.
Users will not be able to share dashboards to groups unless they are authorized with permission
Share Dashboard Allowed
.
Permanent link to a set of published artifacts have been changed. Refer to below link for details:
https://wiki.pmease.com/display/QB50/Working+with+Artifacts#WorkingwithArtifacts-Permanentlinkstoasetofartifactfiles
Last updated
on
Oct 23, 2024

================================================================================

Title: Upgrade to 7.0.x
URL: https://wiki.pmease.com/display/QB14/Upgrade+to+7.0.x
Breadcrumb:  > Upgrade Guide

Upgrade Guide
Upgrade to 7.0.x
Version: QB14
On this page
Upgrade to 7.0.x
Upgrade procedures
â
from 7.0.x
from 6.1.x
from 6.0.x
from 5.1.x
from 5.0.x
from 4.0.x (except 4.0.61 and 4.0.62)
from 4.0.61 or 4.0.62
from 3.1.x
from 3.0.x
from 2.1.x
from 2.0.x
from 1.x
from Luntbuild
Important changes affecting versions before 7.0
â
Publish directory of new build will be stored into a sub directory using last three digits of build id to avoid too many files issue. Old builds still remains in old place and can be recognized by QuickBuild. If you need to get path to build publish directory, please call build.getPublishDir() as it handles the change transparently
Bean editor annotation
@FileInput
now populates related field with below format instead of a single file name:
<
original upload file name
>
/
<
Base64
encoding of upload file content
>
This only affects users using the annotation @FileInput while writing their QuickBuild plugins
Important changes affecting 4.0.x Users
â
QuickBuild server, user agent and build agent now requires at least Java 6.
As mentioned in the upgrade guide, the first upgrade to 5.0.x from 4.0.x may require the user and build agent to be started manually due to introducing of the new bootstrap update mechanism. This manually start will not be necessary for subsequent upgrades.
Users will not be able to share dashboards to groups unless they are authorized with permission
Share Dashboard Allowed
.
Permanent link to a set of published artifacts have been changed. Refer to below link for details:
https://wiki.pmease.com/display/QB50/Working+with+Artifacts#WorkingwithArtifacts-Permanentlinkstoasetofartifactfiles
Last updated
on
Oct 23, 2024

================================================================================

Title: Upgrade to 6.1.x
URL: https://wiki.pmease.com/display/QB14/Upgrade+to+6.1.x
Breadcrumb:  > Upgrade Guide

Upgrade Guide
Upgrade to 6.1.x
Version: QB14
On this page
Upgrade to 6.1.x
Upgrade Procedures
â
from 6.1.x
from 6.0.x
from 5.1.x
from 5.0.x
from 4.0.x (except 4.0.61 and 4.0.62)
from 4.0.61 or 4.0.62
from 3.1.x
from 3.0.x
from 2.1.x
from 2.0.x
from 1.x
from Luntbuild
Important Changes Affecting 4.0.x Users
â
QuickBuild server, user agent and build agent now requires at least Java 6.
As mentioned in the upgrade guide, the first upgrade to 5.0.x from 4.0.x may require the user and build agent to be started manually due to introducing of the new bootstrap update mechanism. This manually start will not be necessary for subsequent upgrades.
Users will not be able to share dashboards to groups unless they are authorized with permission
Share Dashboard Allowed
.
Permanent link to a set of published artifacts have been changed. Refer to below link for details:
https://wiki.pmease.com/display/QB50/Working+with+Artifacts#WorkingwithArtifacts-Permanentlinkstoasetofartifactfiles
Last updated
on
Oct 23, 2024

================================================================================

Title: Upgrade to 6.0.x
URL: https://wiki.pmease.com/display/QB14/Upgrade+to+6.0.x
Breadcrumb:  > Upgrade Guide

Upgrade Guide
Upgrade to 6.0.x
Version: QB14
On this page
Upgrade to 6.0.x
Upgrade Procedures
â
from 6.0.x
from 5.1.x
from 5.0.x
from 4.0.x (except 4.0.61 and 4.0.62)
from 4.0.61 or 4.0.62
from 3.1.x
from 3.0.x
from 2.1.x
from 2.0.x
from 1.x
from Luntbuild
Important Changes Affecting 4.0.x Users
â
QuickBuild server, user agent and build agent now requires at least Java 6.
As mentioned in the upgrade guide, the first upgrade to 5.0.x from 4.0.x may require the user and build agent to be started manually due to introducing of the new bootstrap update mechanism. This manually start will not be necessary for subsequent upgrades.
Users will not be able to share dashboards to groups unless they are authorized with permission
Share Dashboard Allowed
.
Permanent link to a set of published artifacts have been changed. Refer to below link for details:
https://wiki.pmease.com/display/QB50/Working+with+Artifacts#WorkingwithArtifacts-Permanentlinkstoasetofartifactfiles
Last updated
on
Oct 23, 2024

================================================================================

Title: Upgrade to 5.1.x
URL: https://wiki.pmease.com/display/QB14/Upgrade+to+5.1.x
Breadcrumb:  > Upgrade Guide

Upgrade Guide
Upgrade to 5.1.x
Version: QB14
On this page
Upgrade to 5.1.x
Upgrade Procedures
â
from 5.1.x
from 5.0.x
from 4.0.x (except 4.0.61 and 4.0.62)
from 4.0.61 or 4.0.62
from 3.1.x
from 3.0.x
from 2.1.x
from 2.0.x
from 1.x
from Luntbuild
Important Changes Affecting 4.0.x Users
â
QuickBuild server, user agent and build agent now requires at least Java 6.
As mentioned in the upgrade guide, the first upgrade to 5.0.x from 4.0.x may require the user and build agent to be started manually due to introducing of the new bootstrap update mechanism. This manually start will not be necessary for subsequent upgrades.
Users will not be able to share dashboards to groups unless they are authorized with permission
Share Dashboard Allowed
.
Permanent link to a set of published artifacts have been changed. Refer to below link for details:
https://wiki.pmease.com/display/QB50/Working+with+Artifacts#WorkingwithArtifacts-Permanentlinkstoasetofartifactfiles
Last updated
on
Oct 23, 2024

================================================================================

Title: Upgrade to 5.0.x
URL: https://wiki.pmease.com/display/QB14/Upgrade+to+5.0.x
Breadcrumb:  > Upgrade Guide

Upgrade Guide
Upgrade to 5.0.x
Version: QB14
On this page
Upgrade to 5.0.x
Upgrade Procedures
â
from 5.0.x
from 4.0.x (except 4.0.61 and 4.0.62)
from 4.0.61 or 4.0.62
from 3.1.x
from 3.0.x
from 2.1.x
from 2.0.x
from 1.x
from Luntbuild
Important Changes Affecting 4.0.x Users
â
QuickBuild server, user agent and build agent now requires at least Java 6.
As mentioned in the upgrade guide, the first upgrade to 5.0.x from 4.0.x may require the user and build agent to be started manually due to introducing of the new bootstrap update mechanism. This manually start will not be necessary for subsequent upgrades.
Users will not be able to share dashboards to groups unless they are authorized with permission
Share Dashboard Allowed
.
Permanent link to a set of published artifacts have been changed. Refer to below link for details:
https://wiki.pmease.com/display/QB50/Working+with+Artifacts#WorkingwithArtifacts-Permanentlinkstoasetofartifactfiles
Last updated
on
Oct 23, 2024

================================================================================

Title: Upgrade to 4.0.x
URL: https://wiki.pmease.com/display/QB14/Upgrade+to+4.0.x
Breadcrumb:  > Upgrade Guide

Upgrade Guide
Upgrade to 4.0.x
Version: QB14
On this page
Upgrade to 4.0.x
Upgrade Procedures
â
from 4.0.x
from 3.1.x
from 3.0.x
from 2.1.x
from 2.0.x
from 1.x
from Luntbuild
Important Changes Affecting 1.x, 2.x and 3.x Users
â
The queue concept in previous versions has a major drawback that it does not tie with agents, therefore, it is hard to tune concurrent builds based on available agents. Therefore we replaced queue with resource which can be configured to play the role of queue and can be more powerful. However since queue and resource are different concepts, we can not migrate previous queue settings. Users migrated from previous versions will see that the grid allows all builds to happen immediately without queuing. Refer to
Resource Management
on how to queue your builds by configuring appropriate resources.
Changes for builds generated by QuickBuild 2.x will not be displayed, as we changed the storage mechanism in 4.x to disclose more commit information, and this mechanism is not compatible with the one used in 2.x. Changes information for builds generated by QuickBuild 3.x can still be displayed.
Existing test history of TestNG will be dropped. The reason is that previously we used method name as key, which is not accurate due to method overloads. In 4.0.x, we use method signature instead to avoid this issue and unfortunately this is not compatible with test history generated by previous versions.
Changes detection is now happens on the node running master step in order to reduce server load. So please make sure that relevant SCM tools are installed on the master node if necessary.
The step pre/post action
Cancel sibling steps if current is failed
has been removed. To fail other steps if one step fails, please edit the parallel composition step, and check the
Cancel On Error
option.
The notation to reference latest build with a configuration id has been changed from
<configuration id>:latest
to
<configuration id>.latest
, and the same applies for latest successful/finished/failed builds. Refer to
build name
for details.
If you have custom plugins, make sure to [export all packages of the plugin](Write Your First Plugin.html#WriteYourFirstPlugin-exportpackage), and then rebuild and redeploy your plugins.
Last updated
on
Oct 23, 2024

================================================================================

Title: Upgrade to 3.1.x
URL: https://wiki.pmease.com/display/QB14/Upgrade+to+3.1.x
Breadcrumb:  > Upgrade Guide

Upgrade Guide
Upgrade to 3.1.x
Version: QB14
On this page
Upgrade to 3.1.x
Upgrade procedures
â
from 3.1.x
from 3.0.x
from 2.1.x
from 2.0.x
from 1.x
from Luntbuild
Incompatibilities with previous versions
â
Custom plugins created for 3.0.x or 2.x versions need to be re-compiled and re-exported.
Last updated
on
Oct 23, 2024

================================================================================

Title: Upgrade to 3.0.x
URL: https://wiki.pmease.com/display/QB14/Upgrade+to+3.0.x
Breadcrumb:  > Upgrade Guide

Upgrade Guide
Upgrade to 3.0.x
Version: QB14
On this page
Upgrade to 3.0.x
Upgrade procedures
â
from 3.0.x
from 2.1.x
from 2.0.x
from 1.x
from Luntbuild
Incompatibilities with 2.x
â
If empty value is specified for a prompted variable, the variable will get value of
null
. In 2.x, the default value will be used when prompted value is left empty.
View log by step is not possible for migrated builds.
Executed steps should be referenced by
Step Path
instead of step name.
RESTful API is not compatible with 2.x. Existing programs needs to be changed to use the
new API
in order to interact with 3.x server.
QuickBuild tray monitor needs to be reinstalled in order to interact with 3.x server.
The method
isScheduled()
of configuration object is now removed. Call
request.scheduled
instead to check for scheduled build.
The
current
object used in next build version field needs to be replaced with
configuration
as
current
now points to the version manager object itself.
Builds can not be moved from one configuration to another; otherwise, change and issue comparison will not be accurate.
To build in a future time, define a variable prompting for date or time input, and specify pre-queue script as below:
request
.
setRequestDate
(
vars
.
get
(
"name_of_the_date_var"
)
.
asDate
(
)
)
The method
build.getSteps()
is removed. If a custom email notification template is used (other than using
default_html_notification.vm
), please change error message rendering part of the template as below:
#
if
(
$build
.
hasErrors
(
)
)
<
h3
>
Error
Messages
<
/
h3
>
<
table
class
=
"error-messages"
>
#
if
(
$build
.
errorMessage
)
<
tr
>
<
td colspan
=
"2"
valign
=
"top"
>
$util
.
formatString
(
$build
.
errorMessage
)
<
/
td
>
<
td valign
=
"top"
>
<
a href
=
"$build.logUrl"
>
build log
<
/
a
>
<
/
td
>
<
/
tr
>
#end
#foreach
(
$stepPathName in $build
.
stepRuntimes
.
keySet
(
)
)
#
set
(
$step
=
$build
.
stepRuntimes
.
get
(
$stepPathName
)
)
#
if
(
$step
.
errorMessage
)
<
tr
>
<
td valign
=
"top"
>
$stepPathName
<
/
td
>
<
td valign
=
"top"
>
$util
.
formatString
(
$step
.
errorMessage
)
<
/
td
>
<
td valign
=
"top"
>
<
a href
=
"$build.getLogUrl($stepPathName)"
>
step log
<
/
a
>
<
/
td
>
<
/
tr
>
#end
#end
<
/
table
>
#end
Custom plugins for 2.x need to be re-compiled and re-exported. Below changes may affect your plugin:
Class
com.pmease.quickbuild.web.component.editor
is renamed to
com.pmease.quickbuild.web.component.editor.BeanEditor
.
Read only mode of BeanEditor is removed, and a separate class
com.pmease.quickbuild.web.component.BeanViewer
is added for display bean properties.
Last updated
on
Oct 23, 2024

================================================================================

Title: Upgrade to 2.1.x
URL: https://wiki.pmease.com/display/QB14/Upgrade+to+2.1.x
Breadcrumb:  > Upgrade Guide

Upgrade Guide
Upgrade to 2.1.x
Version: QB14
On this page
Upgrade to 2.1.x
Upgrade procedures
â
from 2.1.x
from 2.0.x
from 1.x
from Luntbuild
Last updated
on
Oct 23, 2024

================================================================================

Title: Upgrade to 2.0.x
URL: https://wiki.pmease.com/display/QB14/Upgrade+to+2.0.x
Breadcrumb:  > Upgrade Guide

Upgrade Guide
Upgrade to 2.0.x
Version: QB14
On this page
Upgrade to 2.0.x
Upgrade procedures
â
from 2.0.x
from 1.x
from Luntbuild
Last updated
on
Oct 23, 2024

================================================================================

Title: Procedures
URL: https://wiki.pmease.com/display/QB14/category/Procedures
Breadcrumb:  > Upgrade Guide

ðï¸
Backup and Restore Data
In this procedure, we assume that installation directory of 4.0.61 or 4.0.61 server is /quickbuild-old , and new version of QuickBuild is extracted to directory /quickbuild-new.
ðï¸
In-place upgrade
1. Stop your QuickBuild server. You do not need to stop agents since they will be auto-upgraded after server is upgraded.
ðï¸
Reinstall Agents
Reinstall build agents
ðï¸
Upgrade 2.0.x
In this procedure, we assume that installation directory of 2.0.x server is /quickbuild-old , and new version of QuickBuild is extracted to directory /quickbuild-new.
ðï¸
Upgrade Data and Start Agent
1. Stop QuickBuild server of previous version, you do not need to stop agents since they will be auto-upgraded after server is upgraded.
ðï¸
Upgrade Luntbuild
Please follow below procedure to migrate from Luntbuild:
ðï¸
Upgrade QuickBuild 1.x
Upgrade procedure
ðï¸
Upgrade Data
1. Stop QuickBuild server of previous version, you do not need to stop agents since they will be auto-upgraded after server is upgraded.
ðï¸
Upgrade Data And Agent
1. Stop QuickBuild server of previous version.

================================================================================

Title: Badge for build status
URL: https://wiki.pmease.com/display/QB14/Badge+for+build+status
Breadcrumb:  > User's Guide

User's Guide
Badge for build status
Version: QB14
On this page
Badge for build status
QuickBuild can generate a badge image for build status, report stats, so you can add the badge image to markdown, or anywhere you want.
URL syntax
â
The badge url can be located at:
http
:
/
/
your
-
server
/
rest
/
badge
/
build
/
{
buildIdOrName
}
/
{
type
}
.
svg
buildIdOrName
â
buildIdOrName
is a build id or a name, the name is in the following format:
{
configurationId
}
.
{
buildName
}
buildName can be one of the following value:
latest
latest_successful
latest_failed
latest_timeout
latest_cancelled
type
â
type
can be one of the following value:
status
build status
boost
Boost test report
bullseye
Bullseye report
busted
Busted report
checkstyle
CheckStyle report
clover
Clover report
cobertura
Cobertura report
codenarc
Codenarc report
coverity
Coverity report
cpd
CPD report
cppcheck
CPPCheck report
emma
EMMA report
findbugs
FindBugs report
fxcop
Fxcop report
Jacoco
Jacoco report
junit
JUnit report
mbunit
MBUnit report
mstest
MSTest report
ncover
NCover report
pmd
PMD report
tap
TAP report
testng
TestNG report
valgrind
Valgrind report
Example
â
Below is an example that shows how to add a badge to GitHub README in markdown:
[
!
[
Build
status
]
(
http
:
/
/
demo
.
pmease
.
com
/
rest
/
badge
/
build
/
25.l
atest
/
status
.
svg
)
]
(
http
:
/
/
demo
.
pmease
.
com
)
See it in action in below url:
https://github.com/steveluo/qb
Last updated
on
Oct 23, 2024

================================================================================

Title: Working with Dashboard
URL: https://wiki.pmease.com/display/QB14/Working+with+Dashboard
Breadcrumb:  > User's Guide

User's Guide
Working with Dashboard
Version: QB14
On this page
Working with Dashboard
Dashboard can be used to access interesting information in system quickly. If no dashboard is defined, QuickBuild will display a default dashboard displaying the configuration tree. The default dashboard will saved as your own dashboard once it is edited (change layout, edit gadget, change name, etc).
Create and edit dashboard
â
Every user can create multiple self-defined dashboards and can switch between them. To create a dashboard, login to QuickBuild and hit the add dashboard link from the operations menu:
Change dashboard layout
â
The dashboard layout by default includes two columns, and you can change to use different layout from the layout menu:
Manage gadgets in dashboard
â
Gadgets can be added into a dashboard from the gadget menu:
When a gadget is selected from the gadget menu, a gadget setting window will popup to ask for settings of the gadget. Specify proper settings and save the setting, then the gadget will be added to the dashboard. Please note that the gadget will be initially added to the left-most column, and you can drag them to desired place if necessary. For an existing gadget, the setting menu allows one to refresh, delete, or edit the gadget like below:
Share the dashboard with other groups
â
Dashboard can be shared to other groups by editing the dashboard and select the groups to share with if one of your belonging groups has the permission of sharing dashboards.
Once a dashboard is shared, other users (of course in the shared groups) will be able to use this dashboard from the dashboard menu.
info
Useful Information
You may create a public dashboard (will be displayed to all anonymous users) by sharing with the anonymous group.
Last updated
on
Oct 28, 2024

================================================================================

Title: Working with Configurations
URL: https://wiki.pmease.com/display/QB14/category/Working+with+Configurations
Breadcrumb:  > User's Guide

ðï¸
Configuration Dashboard
A configuration specific dashboard to display brief information of a configuration, including description, next build version, overall build success rate, average build duration, error messages, recent builds, and pending build requests.
ðï¸
Configuration Navigation
There are several ways to navigate between configurations in QuickBuild:
ðï¸
Run Configuration
Configuration can be triggered manually through configuration dashboard or through the configuration toolbar.
ðï¸
Add configuration
To add child configuration, please login as administrator, select the configuration under which you want to add a child, and click the add button as demonstrated below:
ðï¸
Copy Configurations
New configurations can also be added by copying an existing configuration shown as below:
ðï¸
Delete Configurations
Configuration can be deleted by selecting the configuration and click the delete button as shown below:
ðï¸
Move Configurations
To move configurations to be under another parent, please do the following:
ðï¸
Configuration Settings
Configuation setting menu will be available if current user is allowed to view configuration settings:
ðï¸
Workspace Tab
Workspace tab will be visible to users who have permission to access workspace of current configuration. Each node has its own workspace for each configuration as demonstrated below:
ðï¸
Storage tab
Storage tab displays Storage Directory of current configuration. Please note that multiple configurations may share the same storage directory.

================================================================================

Title: Working with Builds
URL: https://wiki.pmease.com/display/QB14/category/Working+with+Builds
Breadcrumb:  > User's Guide

ðï¸
Display Custom Build Info
Custom build info can be displayed in build summary section and build history table by defining custom fields in advanced setting of the configuration like below:
ðï¸
Build Navigation
1. Navigate to latest build from dashboard
ðï¸
Build Dashboard
Build dashboard page gives an overview of current build.
ðï¸
Run Build
Build can be manually triggered by running configuration. After a build is triggered, it will be put into the queue. If there are no idle threads in the queue, the build will wait until a free thread is available as demonstrated below:
ðï¸
Recommend Build
Successful builds can be recommended by clicking the recommend button. After recommendation, a star icon will appear beside the build version. This functionality can be used to suggest good build.
ðï¸
Promote Build
Build promotion can be used to manage build life cycle in QuickBuild. A build can be promoted to another build if all below conditions are satisfied:
ðï¸
Stop Build Forcibly
Build can be forcibly stopped by clicking the stop button as below:
ðï¸
Delete Build
Delete builds manually
ðï¸
RSS Feeds
RSS link will be displayed in build history page. Clicking this link will get a RSS feed for all builds matching specified status. The filter options are ignored for RSS feeds. For example, to get RSS feed of failed builds, just select the Failed Builds from the build chooser, and then click the RSS link button in the result page as demonstrated below:
ðï¸
Dependent and Dependency Builds
Build dependency is handled in QuickBuild through QuickBuild repository. If build A uses artifacts of build B to accomplish its build, the following statement will hold to true:
ðï¸
Diagnose Build Failures
1. Access build failure message from dashboard

================================================================================

Title: Working with Changes
URL: https://wiki.pmease.com/display/QB14/Working+with+Changes
Breadcrumb:  > User's Guide

User's Guide
Working with Changes
Version: QB14
Working with Changes
When a build takes place, SCM changes will be calculated against previous build. Changes will not be calculated for the first build in a configuration since there is no base build to calculate changes against. If you've changed name of the repository, changes of that repository will not be calculated for the first build after the name change, since QuickBuild uses repository name as the key to look up repository revision in previous build.
In build overview tab, the latest
10
commits and the commit statistics (include the count of commits, modifications, and the number of add/modify/delete actions) will be displayed:
The changes tab contains two child tabs, respectively
By Changeset
and
By File
.
The
By Changeset
tab displays all changes by commits as demonstrated below:
By default, changes are grouped by day. If you want to show changes since a specified version(the changes of the specified build are excluded), just input or select the build version from the input box in the right, and the changes will be grouped by build as below:
You can hover the number block to see the modifications in the changeset like:
When issue tracker is configured, the issue key will be hyperlinked and when you hover the issue key, QuickBuild will display the issue summary, see below:
For each modification/file, there are two links:
View
and
Diff
which can help you to view the source code or diff with previous editor/previous build. See a sample diff page below:
The
By File
tab displays all modifications grouped by file so that you can easily tracking your changes for a specified file.
To search a specified changeset or modification, you just need input your change id, or committer, or even part of your commit message in the search box, or you can just click the committer name, change id, repository directly.
Moreover, you can view all your changes in the
Statistics
page, there, you can view changes by day, by build and by committer
You can also add a gadget of your latest commits of a specific configuration to the dashboard:
Last updated
on
Oct 28, 2024

================================================================================

Title: Working with Build Pipeline
URL: https://wiki.pmease.com/display/QB14/Working+with+Build+Pipeline
Breadcrumb:  > User's Guide

User's Guide
Working with Build Pipeline
Version: QB14
Working with Build Pipeline
Build pipeline
in QuickBuild is series of builds connected via build promotions, with commits information attached. It pushes commits going through different phases of the build workflow, either automaticly or manually. The build pipeline page can be accessed from the build pipeline link in configuration tab, and can be added as a gadget to user dashboards. A typical pipeline is like below:
Here is explanation of different areas of this screenshot:
Blue block without right arrow
: no further promotions are defined for the build.
Blue block with right arrow
: promotions are defined for the build and promote conditions of some of them are satisifed. User can hover mouse over the block to bring out the promotion menu.
Two blocks connected with arrow
: right build is promoted from left build. If a build is promoted multiple times, only the latest promotion will be displayed in the pipeline.
Gray block
: promotions are defined for this build they are not allowed to run either because the condition is not satisfied or the user does not have permission to run promotion.
Build link
: this displays name of configuration together with the build version. User can follow this link to check the build details. If current user does not have permission to access the associated configuration, the link will be disabled.
Commit information
: this displays revision of the commits of the SCM repository used by the build. If multiple SCM repositories are used in the build, a dropdown box will be displayed to let user choose the repository to display commits. Generally commits through a single pipeline will always remain the same.
Build filtering toolbar
: one can filter the left most builds by its status, version, or date.
Page navigation area
: this navigates the user to elder pipelines of current configuration.
To see the build pipeline in action, please check the tutorial
set up build pipeline
.
Last updated
on
Oct 28, 2024

================================================================================

Title: Working with Issues
URL: https://wiki.pmease.com/display/QB14/Working+with+Issues
Breadcrumb:  > User's Guide

User's Guide
Working with Issues
Version: QB14
On this page
Working with Issues
If you
defined issue tracker
in the configuration, QuickBuild can generate the issues report based on your commit comments or update issue step. Below is a sample of the issue report displayed in the
build page
:
Related issues in a specific build
â
Show issues since a specified version
â
You can list all issues since a specified version by inputing the build version in the right top
and the related issues will be grouped by build.
warning
The issues in comparison build are excluded.
Edit related issues of a build
â
You may also edit the issues in a build by click the link
Link issues to this build
where you can specify a filter or specify the issues key directly, also you can remove the issues by filtering or by click the icon
in each row.
warning
You need LINK_ISSUES permission to edit the issues
Show related commits of an issue
â
If the issues are mentioned in the commit message, QuickBuild can also display the related changes like below:
Last updated
on
Oct 28, 2024

================================================================================

Title: Working with Artifacts
URL: https://wiki.pmease.com/display/QB14/Working+with+Artifacts
Breadcrumb:  > User's Guide

User's Guide
Working with Artifacts
Version: QB14
On this page
Working with Artifacts
Access build artifacts
â
If published, build artifacts will be available for download from build overview page as below:
Build artifacts can also be accessed from dashboard by hovering mouse over the
more
link of a build.
Permanent links to single artifact file
â
Permanent links to a single artifact file are constructed in the form of:
http
:
/
/
<
host
>
:
<
port
>
/
download
/
<
build id
>
/
artifacts
/
<
relative path
to
artifact file
>
Take the above screenshot for example, assume the host and port to be
build_server:8810
, the permanent link to file
productA-1.0.3.jar
will be:
http
:
/
/
build_server
:
8810
/
download
/
42
/
artifacts
/
distribute
/
productA
-
1.0
.3
.
jar
The
<build id>
can also be written as below:
Build Id
Description
<configuration id>.latest
refer to latest build of specified configuration
<configuration id>.latest_successful
refer to latest successful build of specified configuration
<configuration id>.latest_finished
refers to latest finished build of specified configuration
<configuration id>.latest_failed
refers to latest failed build of specified configuration
<configuration id>.latest_recommended
refers to latest recommended build of specified configuration
Below are some example permanent links using this form of build id:
Permanent Links
Description
http://build_server:8810/download/2.latest/artifacts/distribute/productA.jar
This url refers to artifact
distribute/productA.jar
in latest build of configuration 2 (identifier).
http://build_server:8810/download/5.latest_successful/artifacts/distribute/productA.jar
This url refers to artifact
distribute/productA.jar
in latest successful build of configuration 5 (identifier).
Permanent links to a set of artifact files
â
Permanent links to a set of artifact files are constructed in the form of:
http
:
/
/
<
host
>
:
<
port
>
/
batch_download
?
build_id
=
<
build id
>
&
src_path
=
<
relative path
to
src directory
>
&
file_patterns
=
<
file patterns
>
Here
<file patterns>
refers to
Ant file pattern
Take the above screenshot for example, assume the host and port to be
build_server:8810
, the permanent link to all .txt files will be:
http
:
/
/
build_server
:
8810
/
batch_download
?
build_id
=
42
&
src_path
=
artifacts
&
file_patterns
=
*
.
txt
Just as permanent link to single artifact file, the
<build id>
can also be written as below:
Build Id
Description
<configuration id>.latest
refer to latest build of specified configuration
<configuration id>.latest_successful
refer to latest successful build of specified configuration
<configuration id>.latest_finished
refers to latest finished build of specified configuration
<configuration id>.latest_failed
refers to latest failed build of specified configuration
<configuration id>.latest_recommended
refers to latest recommended build of specified configuration
Below are some example permanent links using this form of build id:
Permanent Links
Description
http://build_server:8810/batch_download?build_id=5.latest&src_path=artifacts&file_patterns=**/*.jar
This url refers to all jar files recursively under artifacts directory in latest build of configuration 5 (identifier).
http://build_server:8810/batch_download?build_id=5.latest_successful&src_path=artifacts/libs&file_patterns=*.dll
This url refers to all dll files under artifacts/libs directory in latest successful build of configuration 5 (identifier).
Last updated
on
Oct 28, 2024

================================================================================

Title: Working with Reports
URL: https://wiki.pmease.com/display/QB14/category/Working+with+Reports
Breadcrumb:  > User's Guide

ðï¸
Working with Coverage Report
After publishing the coverage report, QuickBuild can display the coverage report in build page and statistics page. Below we will use Cobertura as an example. Different coverage tool may have different view, but in most cases, they have the same look-and-feel.
ðï¸
Working with Inspection Report
After publishing the inspection report, QuickBuild can display the inspection report in build page and statistics page. Below we will use Fxcop as an example. Different inspection tool may have different view, but in most cases, they have the same look-and-feel.
ðï¸
Working with Test Report
After publishing the test report successfully, QuickBuild will display the tests information in the build overview:

================================================================================

Title: Working with Statistics
URL: https://wiki.pmease.com/display/QB14/Working+with+Statistics
Breadcrumb:  > User's Guide

User's Guide
Working with Statistics
Version: QB14
On this page
Working with Statistics
All statistics data of a
configuration
can be viewed in Statistics Tab.
++Screenshot: Statistics Tab++
The statistics page includes:
Date Range Viewer/Selector
Report sets toolbar (If multiple report sets have been defined)
Graph Mode Viewer/Selector
Statistics Chart
Statistics Summary
Statistics Details
Date Range Viewer/Selector
â
By clicking (1), the date range selector will be shown as displayed below and you can choose the date range for the statistics data of the specific indicator. By checking the 'Compare To', you can compare with a different date range of the current indicator. But when another indicator has been chosen or another configuration has been chosen to compare with, then the compared date range will have no effect. That is, the comparing date range will only has effect when One Metric is active in the Graph Mode Selector.
Graph Mode Viewer/Selector
â
By clicking (2), the comparison graph mode selector will be shown as displayed below and you can choose a different comparison mode.
The graph mode includes:
Group By Selector
Comparison Mode Selector
1. Group By Selector
The statistics can be grouped by different mode, including:
By Version
By Day
By Week
By Month
2. Comparison Mode Selector
In statistics page, several comparison modes can be chosen:
One Metric
In this mode, you can select the different primary indicator to view its statistics data. Only in this mode, the compared data range can be used to compare the same indicator with different date range.
Compare Two Metrics
In this mode, you can select two indicators in this report to compare.
Compare Another Configuration
Sometimes, it is useful to compare the same report with another configuration, so you can select this mode, and you can choose a configuration by clicking the configuration tree icon or enter the path of another configuration, and then click the compare button. You can compare with the different indicator in the report of that configuration.
Excluding Failed Builds
By checking excluding failed builds, the builds that failed will not be included in the statistics data. This may influence the statistics summary data.
Statistics Chart
â
This chart displays the trends of specific indicator(s) based on the graph mode and the date range you selected.
Statistics Summary
â
The statistics summary displays the
average
data for the indicator. The result is an average data of all builds in the date range, (with optionally excluding the failed builds).
Statistics Details
â
The detailed statistics data will be shown in this section.
When group by version, the result is the actual data for each version.
When group by day, the result is the average data in a day per build.
When group by week, the result is the average data in a week per build.
When group by month, the result is the average data in a month per build.
Customizing The Statistics
â
Please see
how to customize the report
for details.
Last updated
on
Oct 28, 2024

================================================================================

Title: Manage User Profile
URL: https://wiki.pmease.com/display/QB14/Manage+User+Profile
Breadcrumb:  > User's Guide

User's Guide
Manage User Profile
Version: QB14
Manage User Profile
For logged in user, user profile can be managed through
My
tab like below:
Do not forget to click the update button after you make changes.
Last updated
on
Oct 28, 2024

================================================================================

Title: Manage Build Subscriptions
URL: https://wiki.pmease.com/display/QB14/Manage+Build+Subscriptions
Breadcrumb:  > User's Guide

User's Guide
Manage Build Subscriptions
Version: QB14
Manage Build Subscriptions
User can subscribe to get build notifications for one or more configurations through the
My
tab like below:
Please note that you can only subscribe to accessible configurations.
Last updated
on
Oct 28, 2024

================================================================================

Title: Manage User Agent
URL: https://wiki.pmease.com/display/QB14/Manage+User+Agent
Breadcrumb:  > User's Guide

User's Guide
Manage User Agent
Version: QB14
On this page
Manage User Agent
Install user agent
â
User agent
can be installed following the
user agent installation guide
.
Config user agent
â
Normally user agent does not need to be configured since it has been auto-configured when you download using your own account. However, you will need to do this for below reasons:
You want to change port number of the user agent.
You want to specify IP address of the user agent and have QuickBuild server communicates with the user agent via this IP address.
Address of QuickBuild server has been changed.
You've changed your user name/password at QuickBuild server.
You want to configure performance factor of your user agent.
To configure user agent, please run the file
bin/config.bat
on Windows, or
bin/config.sh
on Unix.
Define user attributes
â
User attributes can be defined in the user agent to reflect your desktop environment, and these attributes can be referenced in the build process. To define user attributes, please make sure the user agent is connected to QuickBuild server, and then follow below screenshot to define user attributes:
Do not forget to click the update button after you've defined user attributes.
Last updated
on
Oct 28, 2024

================================================================================

Title: Working with Proof Build
URL: https://wiki.pmease.com/display/QB14/Working+with+Proof+Build
Breadcrumb:  > User's Guide

User's Guide
Working with Proof Build
Version: QB14
On this page
Working with Proof Build
Introduction
â
Usually developers commit their code after they build and unit test their code successfully in their IDE. However, this has some limitations:
Developer's computer may not have the same environment as the test server. The new code works well on developer's computer, but may fail on the test server.
Tests on the server might be more thoroughly, for example automated GUI tests may be executed and all dependent components might be tested as well. The developer's computer may not have such tool(s) installed.
The product may consists of components that need to be built and tested on different platforms.
The test server might be much more powerful, or it may utilize build grid feature to run tests in parallel on multiple agents.
QuickBuild introduces the concept of proof build to remove such limitations:
The developer runs a proof build before committing their changes to SCM.
QuickBuild collects uncommitted changes from developer's computer to patch code checked out from SCM, and builds/tests them on test server.
If the build/test is successful, QuickBuild can optionally checkin the changes on behalf of the developer automatically.
If the build/test fails, developer fixes the error locally and re-runs the proof build until the build is successful.
For distributed version control systems, the process will be:
The developer runs a proof build before pushing local commits to the central repository.
QuickBuild collects local commits from developer's local repository to patch code pulled from central repository, and builds/tests them on test server.
If the build/test is successful, QuickBuild can optionally push the local commits on behalf of the developer automatically.
If the build/test fails, developer fixes the error locally and re-runs the proof build until the build is successful.
Run proof build
â
Proof build support needs to be enabled at repository level before you can run a proof build. Refer
here
on how to set up proof build.
Local changes
â
A local changes tab will appear after a proof build finishes. It is used to display uncommited changes collected from user's desktop. Just like in
build changes
tab, you can view and diff source files.
Local change tab can be a good place to do code review: you submit your uncommited changes to QuickBuild to do a proof build. If the proof build is successful, it means that your change has at least passed the build process, then you send link of the proof build to other people for review before commit your changes.
For distributed version control systems, the local changes tab displays local commits picked up for proof build.
Last updated
on
Oct 28, 2024

================================================================================

Title: Working With Addons
URL: https://wiki.pmease.com/display/QB14/category/Working+With+Addons
Breadcrumb:  > User's Guide

ðï¸
Tray Monitor
The tray monitor is an addon for QuickBuild (2.1 or higher) to enable user monitoring build, triggering build, and receiving build notifications from desktop without opening the web browser. It requires JRE 1.5 and currently supports below platforms:

================================================================================

Title: Working with Grid Measurements
URL: https://wiki.pmease.com/display/QB14/Working+with+Grid+Measurements
Breadcrumb:  > User's Guide

User's Guide
Working with Grid Measurements
Version: QB14
On this page
Working with Grid Measurements
From QuickBuild v5, grid measurements are collected every 5 minutes from all action nodes. All measurement are separated into below group:
Virtual Machine
CPU
Disk
Physical Memory
Build Request
Builds
Steps
Web UI
REST
Download
Upload
RPC
Network
Database Connection
Jetty Connection
SWAP
Resources
Heatmap for Active Nodes
â
Heatmap is basically a table that has colors in place of numbers. Colors correspond to the level of the measurement. It's useful for finding highs and lows and sometimes, patterns. From the heatmap view for those active nodes, you may easily know which node/nodes is/are in problem.
So far, two metrics can be chosen to display the heatmap, one for JVM memory usage, and the other is CPU total usage.
Build Measurements
â
Build measurements for the system including:
Build Requests: processings total, waitings total and processed total
Builds: total builds, failed builds, successful rate, build average duration and average waiting duration
Steps: runnings total and waitings total
Node Measurements
â
For each node, below measurements are collected:
Virtual Machine: memory usage
CPU: total usage
Build Requests: processings on node and waitings on node
Steps: runnings on node
Disk: disk usage
By default, QuickBuild will only monitor the disk where the storage directory defined. But you can specify any disks you want to monitor from the measurement plugin setting. Please go to
this page
for more details.
Server Measurements
â
Beside the measurements for all node above, the server measurements also including:
Virtual Machine: Heap usage, GC runs, GC time and thread counts
Network: rxBytes and txBytes
SWAP: total usage
Database: total connections and busy connections
Jetty server: total connections in thread pool and used connections
Web UI visits
REST visists
RPC visits
Download visits
Upload visits
For Web UI visits, REST visits, RPC visits, Download visits and Upload visits, QuickBuild will collect below metrics:
One-minute rate
Five-minute rate
Fifteen-minute rate
Requests number
Average duration for each request
One-minute rate, Five-minute rate and Fifteen-minute rate are requests rate in requests per minute. If you want to know more about what they are, you may refer to below page for more details:
https://en.wikipedia.org/wiki/Moving_average#Exponential_moving_average
Resource Measurements
â
Resource measurements including:
Used percentage
Used by name
Frees by name
You may show the heatmap for all resources:
or you can view one resource's measurements, or compare to another resource:
Last updated
on
Oct 28, 2024

================================================================================

Title: Working with Alerts
URL: https://wiki.pmease.com/display/QB14/Working+with+Alerts
Breadcrumb:  > User's Guide

User's Guide
Working with Alerts
Version: QB14
Working with Alerts
From QuickBuild v5, all alerts reported by the QuickBuild system can be viewed in Grid tab like below and all alerts can be subscribed by email, tray monitor, Jabber and MSN messenger.
You can filter the alerts by different source, priority and definition. You can define your own alerts by adding some condition set in alert plugin setting page. See
Configuring System Alerts
for more details.
You may also subscribe the alerts via email, tray monitor, Jabber client and MSN messenger, see
how to subscribe system alerts
.
Below are screen shots for tray monitor alerts and email alerts
Tray Monitor:
Email:
Last updated
on
Oct 28, 2024

================================================================================

Title: Upgrade Data And Agent
URL: https://wiki.pmease.com/display/QB14/Upgrade+Data+And+Agent
Breadcrumb:  > Upgrade Guide > Procedures

Upgrade Guide
Procedures
Upgrade Data And Agent
Version: QB14
Upgrade Data And Agent
Stop QuickBuild server of previous version.
Extract installation package of new version to a new directory.
Open a command line window, and switch to the
bin
sub directory under the
new version
's installation directory. Run the migrate command to migrate from previous QuickBuild version. On Windows platform, the command is
migrate.bat <install directory of previous QuickBuild version>
, and on unix platforms, it will be
migrate.sh <install directory of previous QuickBuild version>
.
Start QuickBuild server in new installation directory.
Follow
this guide
to reinstall build and user agents if necessary.
Verify the server and agent installation by running some builds.
Last updated
on
Oct 23, 2024

================================================================================

Title: CSS Customization
URL: https://wiki.pmease.com/display/QB14/CSS+Customization
Breadcrumb:  > Administrator's Guide

Administrator's Guide
CSS Customization
Version: QB14
CSS Customization
Since QB 13.0, dark theme is introduced. And now, it is easy to do some customization for both light mode and dark mode.
The CSS framework in QB 13.0 is largely based on
Tailwind CSS
, you can use most of the utility classes as long as QuickBuild has already included, otherwise, you have to provide the css by yourself.
CSS Variables and Color Palette
Since QB 13, add your CSS customization from QuickBuild Administration page, where you can find a tab "Css Customization" like below where you can add your css customization:
The color scheme or font system in QuickBuild is using
CSS variables
. So you can override a color or font by setting the CSS variables, for example, if you want to change the background to stone in dark mode, you can add the customization like below:
.dark
{
--qb-body-bg
:
var
(
--qb-color-stone-800
)
;
}
Here,
--qb-body-bg
is a variable and
--qb-color-stone-800
is another variable which has been defined in QB system. The default color palette can be found in Tailwind site below:
https://tailwindcss.com/docs/customizing-colors
note
Please note that in most cases, colors in QuickBuild is in format:
rgb(R G B / OPACITY)
, for example:
rgb(255 255 255 / 0.8)
and we define the color variable like
--qb-color-stone-800
only the RGB part like below:
--qb-color-stone-800
:
41 37 36
;
We'll specify the opacity value according to the element context.
In QuickBuild, almost every component in the GUI uses CSS variables, if you want to know what kind of variables it used, it is very important to inspect the element from browser developer tools. For example, if you're using Google Chrome, you can press F12, or just right click the element and select "Inspect", then it will show you all CSS related stuff. See more detailed on
Chrome Developer Tools
or developer tools document of your browser.
Below code list all variables (mostly are colors) we override the light theme in dark mode:
.dark
{
/* GLOBAL STATE COLORS */
--qb-color-success
:
var
(
--qb-color-green-500
)
;
--qb-color-danger
:
var
(
--qb-color-red-500
)
;
--qb-color-warning
:
var
(
--qb-color-yellow-500
)
;
--qb-color-primary-focus
:
var
(
--qb-color-blue-400
)
;
--qb-color-danger-focus
:
var
(
--qb-color-red-400
)
;
--qb-color-secondary-focus
:
var
(
--qb-color-gray-400
)
;
--qb-color-neutral-focus
:
var
(
--qb-color-neutral-400
)
;
--qb-color-accent-focus
:
var
(
--qb-color-purple-400
)
;
--qb-color-success-focus
:
var
(
--qb-color-green-400
)
;
--qb-color-info-focus
:
var
(
--qb-color-cyan-400
)
;
--qb-color-warning-focus
:
var
(
--qb-color-yellow-400
)
;
--qb-color-primary-ring
:
var
(
--qb-color-blue-700
)
;
--qb-color-danger-ring
:
var
(
--qb-color-red-700
)
;
--qb-color-secondary-ring
:
var
(
--qb-color-gray-700
)
;
--qb-color-neutral-ring
:
var
(
--qb-color-neutral-700
)
;
--qb-color-accent-ring
:
var
(
--qb-color-purple-700
)
;
--qb-color-success-ring
:
var
(
--qb-color-green-700
)
;
--qb-color-info-ring
:
var
(
--qb-color-cyan-700
)
;
--qb-color-warning-ring
:
var
(
--qb-color-yellow-700
)
;
--qb-color-primary-light
:
var
(
--qb-color-blue-800
)
;
--qb-color-accent-dark
:
var
(
--qb-color-purple-100
)
;
--qb-color-accent-muted
:
var
(
--qb-color-purple-900
)
;
--qb-color-accent-light
:
var
(
--qb-color-purple-800
)
;
/* BACKGROUND COLORS */
--qb-color-bg-muted
:
var
(
--qb-color-neutral-800
)
;
--qb-color-bg-base
:
var
(
--qb-color-neutral-700
)
;
--qb-color-bg-dim
:
var
(
--qb-color-neutral-600
)
;
--qb-color-bg-dark
:
var
(
--qb-color-neutral-500
)
;
--qb-color-bg-default
:
var
(
--qb-color-neutral-900
)
;
--qb-color-bg-darker
:
var
(
--qb-color-neutral-600
)
;
--qb-color-bg-black
:
var
(
--qb-color-neutral-50
)
;
--qb-color-bg-dialog
:
var
(
--qb-color-neutral-700
)
;
/* TEXT COLORS */
--qb-color-text-dark
:
var
(
--qb-color-neutral-50
)
;
--qb-color-text-emphasis
:
var
(
--qb-color-neutral-50
)
;
--qb-color-text-default
:
var
(
--qb-color-neutral-400
)
;
--qb-color-text-muted
:
var
(
--qb-color-neutral-500
)
;
--qb-color-text-focus
:
var
(
--qb-color-neutral-50
)
;
--qb-color-text-light
:
var
(
--qb-color-neutral-500
)
;
--qb-color-text-neglected
:
var
(
--qb-color-neutral-700
)
;
--qb-color-text-placeholder
:
var
(
--qb-color-neutral-600
)
;
/* BORDER COLORS */
--qb-color-border-disabled
:
var
(
--qb-color-neutral-800
)
;
--qb-color-border-light
:
var
(
--qb-color-neutral-800
)
;
--qb-color-border-default
:
var
(
--qb-color-neutral-700
)
;
--qb-color-border-dim
:
var
(
--qb-color-neutral-600
)
;
--qb-color-border-dark
:
var
(
--qb-color-neutral-500
)
;
--qb-color-border-darker
:
var
(
--qb-color-neutral-300
)
;
--qb-color-border-black
:
var
(
--qb-color-neutral-50
)
;
--qb-body-fg
:
var
(
--qb-color-text-default
)
;
--qb-body-bg
:
var
(
--qb-color-neutral-900
)
;
/* TYPOGRAPH */
--qb-headings-color
:
var
(
--qb-color-neutral-100
)
;
--qb-link-color
:
var
(
--qb-color-blue-400
)
;
--qb-color-link-hover
:
var
(
--qb-color-white
)
;
/* BUTTON */
--qb-input-btn-disabled-border-color
:
var
(
--qb-color-gray-600
)
;
/* TABLE */
--qb-table-th-bg
:
var
(
--qb-color-stone-800
)
;
--qb-table-th-fg
:
var
(
--qb-color-stone-300
)
;
--qb-table-th-hover-bg
:
var
(
--qb-color-stone-500
)
;
--qb-table-th-hover-fg
:
var
(
--qb-color-stone-100
)
;
--qb-table-th-ordered-bg
:
var
(
--qb-color-stone-600
)
;
--qb-table-th-ordered-fg
:
var
(
--qb-color-white
)
;
--qb-table-td-ordered-bg
:
var
(
--qb-color-neutral-700
)
;
--qb-table-striped-bg
:
var
(
--qb-color-neutral-800
)
;
--qb-scorecard-primary-fg
:
var
(
--qb-color-neutral-100
)
;
--qb-table-settings-td-name-bg
:
var
(
--qb-color-stone-800
)
;
/* ATTEIBUTES TABLE */
--qb-table-attributes-name-bg
:
var
(
--qb-color-stone-800
)
;
--qb-table-attributes-border-color
:
var
(
--qb-color-border-default
)
;
--qb-table-attributes-on-left-bg
:
var
(
--qb-color-blue
)
;
--qb-table-attributes-on-right-bg
:
var
(
--qb-color-green
)
;
--qb-table-attributes-differing-bg
:
var
(
--qb-color-yellow
)
;
/* TREE */
--qb-tree-th-bg
:
var
(
--qb-color-black
)
;
--qb-tree-tr-hover-bg
:
var
(
--qb-color-bg-base
)
;
/* BOX */
--qb-box-head-bg
:
var
(
--qb-color-stone-600
)
;
--qb-box-head-border-color
:
var
(
--qb-color-stone-600
)
;
--qb-box-head-fg
:
var
(
--qb-color-neutral-200
)
;
/* GADGET */
--qb-gadget-module-footer-bg
:
var
(
--qb-color-bg
)
;
--qb-gadget-placeholder-bg
:
var
(
--qb-color-bg-muted
)
;
--qb-gadget-placeholder-fg
:
var
(
--qb-color-text-default
)
;
--qb-gadget-placeholder-border-color
:
var
(
--qb-color-border-dark
)
;
/* SOURCE VIEW / DIFF */
--qb-table-sources-line-num-fg
:
var
(
--qb-color-red-600
)
;
--qb-diff-insert-bg-color
:
var
(
--qb-color-green-900
)
;
--qb-diff-insert-fg-color
:
var
(
--qb-color-green-50
)
;
--qb-diff-delete-bg-color
:
var
(
--qb-color-red-900
)
;
--qb-diff-delete-fg-color
:
var
(
--qb-color-red-50
)
;
/* STEP GRAPH */
--qb-step-head-fg
:
var
(
--qb-color-gray-200
)
;
--qb-step-placeholder-bg
:
47 27 8
;
--qb-step-head-muted-opacity
:
0.3
;
--qb-step-timeout-icon-color
:
var
(
--qb-color-white
)
;
--qb-step-timeout-head-bg-opacity
:
0.5
;
--qb-step-idle-icon-color
:
var
(
--qb-color-gray-300
)
;
--qb-step-hover-bg-opacity
:
0.12
;
/* COMMIT BLOCK */
--qb-num-block-info-bg
:
var
(
--qb-color-stone-700
)
;
--qb-num-block-info-fg
:
var
(
--qb-color-stone-100
)
;
--qb-num-block-add-bg
:
var
(
--qb-color-green-600
)
;
--qb-num-block-add-fg
:
var
(
--qb-color-green-100
)
;
--qb-num-block-modify-bg
:
var
(
--qb-color-yellow-600
)
;
--qb-num-block-modify-fg
:
var
(
--qb-color-yellow-100
)
;
--qb-num-block-delete-bg
:
var
(
--qb-color-red-600
)
;
--qb-num-block-delete-fg
:
var
(
--qb-color-red-100
)
;
--qb-swagger-opblock-bg-opacity
:
0.2
;
/* POPUP */
--qb-popup-bg
:
var
(
--qb-color-bg-muted
)
;
/* JQUERY UI */
--qb-ui-dialog-titlebar-gradient-from
:
var
(
--qb-color-bg-dim
)
;
--qb-ui-dialog-titlebar-gradient-to
:
var
(
--qb-color-bg-muted
)
;
--qb-ui-widget-overlay-bg
:
var
(
--qb-color-neutral-600
)
;
--qb-ui-draggable-dragging-fg
:
var
(
--qb-color-gray-800
)
;
--qb-ui-draggable-dragging-border-color
:
var
(
--qb-color-gray-600
)
;
/* FORM */
--qb-form-check-input-bg
:
var
(
--qb-body-bg
)
;
--qb-form-check-input-border-color
:
var
(
--qb-color-neutral-500
)
;
/* STATISTICS */
--qb-stats-gradient-from
:
var
(
--qb-color-neutral-700
)
;
--qb-stats-gradient-to
:
var
(
--qb-color-neutral-800
)
;
/* MISC COLORS */
--qb-blankslate-fg
:
var
(
--qb-color-yellow-200
)
;
--qb-color-attention-muted
:
var
(
--qb-color-neutral-800
)
;
}
Last updated
on
Dec 4, 2024

================================================================================

Title: Working with Steps
URL: https://wiki.pmease.com/display/QB14/Working+with+Steps
Breadcrumb:  > Administrator's Guide

Administrator's Guide
Working with Steps
Version: QB14
Working with Steps
Step is the key concept in QuickBuild. A build process is actually the execution of sequence of steps. Steps can be defined in step setting page of a configuration like below:
Step setting page is composed of two parts: available steps and workflow. Available steps includes all steps defined in current configuration and inherited from ancestor configurations, while workflow defines which steps will be executed in current configuration and how they will be executed. Details of this page:
Click this icon to define a new step in current configuration. The newly defined step will not be executed in workflow unless you drag it into workflow (or edit relevant composite step in workflow to contain it).
Click this icon to define a new step and at the same time add the newly defined step as a child of current step.
Click these two icons to define new steps before or after current step.
Drag this to move an available step into workflow. The step can be dropped on an existing step to replace it, or can be dropped in blank area of a composite step to add as new child.
Drag this to another place to re-organize the workflow, or drag it into available steps to remove it from workflow.
This arrow indicates that the step is inherited from ancestor steps. Following this arrow will bring you to the configuration defined the step.
Click this icon will override definition of the step.
Dashed border means inherited step, while solid border means step defined in current configuration.
Click this icon to delete the step. This will not only remove the step from workflow, but also delete the step from available steps. If you only want to remove it from workflow, just drag it into available steps.
Hover mouse over the link to view step definition.
In the above screenshot, steps are organized from top to down in the workflow, and this means sequential execution. For parallel execution, steps will be organized from left to right like below:
info
Steps can only be edited by users with EDIT_SETTINGS permission.
Last updated
on
Oct 28, 2024

================================================================================

Title: Working with SCM systems
URL: https://wiki.pmease.com/display/QB14/category/Working+with+SCM+systems
Breadcrumb:  > Administrator's Guide

ðï¸
SCM Support Overview
Introduction
ðï¸
Working with Accurev
Accurev relies heavily on accurate system clock to perform its operations. Please make sure clock of the build server and all build agents interacting with Accurev repository are synced with Accurev server.
ðï¸
Working with Azure Devops
QuickBuild integrates with Azure Devops via the Azure repository. This repository has all features of a normal Git repository, but add the ability to build against pull requests, and update the status based on build result for commits or pull requests.
ðï¸
Working with Bazaar
Prerequisites
ðï¸
Working with ClearCase
Specify cleartool command location
ðï¸
Working with CVS
Specify cvs command location
ðï¸
Working with Git
Prerequisites
ðï¸
Working with GitHub
QuickBuild integrates with GitHub via the GitHub repository. This repository has all features of a normal Git repository, but add the ability to build against pull requests, and update pull request status based on build result.
ðï¸
Working with GitLab
QuickBuild integrates with GitLab via the GitLab repository. This repository has all features of a normal Git repository, but add the ability to build against merge requests, and update merge request status based on build result.
ðï¸
Working with Bitbucket Server
QuickBuild integrates with Bitbucket server via the Bitbucket server repository. This repository has all features of a normal Git repository, but add the ability to build against open pull requests, and update pull request status based on build result.
ðï¸
Working with Bitbucket Cloud
QuickBuild integrates with Bitbucket cloud via the Bitbucket Cloud repository. This repository has all features of a normal Git repository, but add the ability to build against open pull requests, and update pull request status based on build result.
ðï¸
Working with Gerrit
QuickBuild integrates with Gerrit via the Gerrit repository to verify gerrit changes.
ðï¸
Working with Google git-repo
Prerequisites
ðï¸
Working with Mercurial
Prerequisites
ðï¸
Working with Perforce
Specify p4 command location
ðï¸
Working with StarTeam
Please make sure clock of the build server and all build agents interacting with StarTeam repository are synced with the StarTeam server.
ðï¸
Working with Subversion
Specify svn command location
ðï¸
Working with Team Foundation Server
Prerequisites
ðï¸
Working with Visual SourceSafe
Specify sourcesafe command location
ðï¸
Aggregate SCM Changes
Aggregate SCM Changes

================================================================================

Title: Working with Build Tools
URL: https://wiki.pmease.com/display/QB14/category/Working+with+Build+Tools
Breadcrumb:  > Administrator's Guide

ðï¸
Build with Xcode
Since QuickBuild version 5.1.16, Xcode plugin is bundled. This plugin can help to build Xcode project by calling command xcodebuild.
ðï¸
Build with Ant
QuickBuild supports Ant based build through the Ant build step. Ant build step can be added by selecting menu item Build -\> Ant from the step menu.
ðï¸
Build with Maven
QuickBuild is able to integrate with the popular build tool - Maven. A Maven build step can be added by selecting menu item Build -\> Maven from the step menu.
ðï¸
Build with Devenv
Most Visual Studio projects can be built from command line with devenv command. QuickBuild supports this method now. You just need add a devenv step in your configuration steps definition.
ðï¸
Build with MSBuild
QuickBuild is able to integrate with the popular build tool - MSBuild for .NET platform. You just need simply add a MSBuild step in the configuration steps definition.
ðï¸
Build with NAnt
QuickBuild supports NAnt based build through the NAnt build step. NAnt build step can be added by selecting menu item Build -\> NAnt from the step menu.
ðï¸
Build with Rake
QuickBuild supports Ruby Rake based build through the Rake build step. Rake build step can be added by selecting menu item Build -\> Rake from the step menu.
ðï¸
Build with Arbitrary Command
If your build tool is not directly supported by QuickBuild, you may utilize the command build step to run your builds as long as your build can be performed from command line non-interactively. To add a command build step, choose Build -\> Shell/Batch Command from the step menu.
ðï¸
Scan code with SonarQube
Since QuickBuild 10, SonarQube, a continuous code inspection solution, can be added to your continuous integration workflow.

================================================================================

Title: Working with Issue Tracker
URL: https://wiki.pmease.com/display/QB14/category/Working+with+Issue+Tracker
Breadcrumb:  > Administrator's Guide

ðï¸
Integrating QuickBuild with JIRA
Since QuickBuild 3, a two-way solution is provided to integrate with Atlassian JIRA. The integration features:
ðï¸
Integrating JIRA with QuickBuild
Since QuickBuild 3, a two-way solution is provided to integrate with Atlassian JIRA. The integration features:
ðï¸
Integrating QuickBuild with JIRA Cloud
Since QuickBuild 10, a two-way solution is provided to integrate with Atlassian JIRA Cloud. The integration features:
ðï¸
Integrate QuickBuild with GitHub Issue
Since QuickBuild 5.1.0, QuickBuild integrates with GitHub by featuring:
ðï¸
Integrating QuickBuild with TeamForge
The integration features:
ðï¸
Integrating QuickBuild with Trac
QuickBuild now integrate with Trac natively. The integration features:
ðï¸
Integrating QuickBuild with Bugzilla
Since QuickBuild 3, QuickBuild can integrate with Bugzilla, it features:
ðï¸
Integrating QuickBuild with Redmine
The integration features:
ðï¸
Integrating QuickBuild with Other Issue Tracker
For those issue trackers QuickBuild not support, you can define a search pattern and a replace pattern in Comments Transformer. For example, we want to hyperlink all issue keys mentioned in commit messages to corresponding Bugzilla issue page, we can define search pattern as:
ðï¸
Commit Command
Commit command is used in commit message to update or progress issues. It has below syntax:

================================================================================

Title: Artifact Management
URL: https://wiki.pmease.com/display/QB14/category/Artifact+Management
Breadcrumb:  > Administrator's Guide

ðï¸
Publish Build Artifacts
Artifacts can be published to build server during the build process. These artifacts can be manually downloaded by user from QuickBuild web interface, or can be used as dependency while building other projects. To publish artifacts, just add the step Publish -\> Artifacts from the step menu.
ðï¸
Store Build Artifacts on Agent
Since QuickBuild 5.0, build artifacts can be stored on one or more agents to reduce load of publishing and serving artifacts from QuickBuild server. For instance, one can edit advanced setting of a configuration to store artifacts of all its builds on desired agent as below:
ðï¸
Artifactory Integration
JFrog's Artifactory is a popular artifact management server. Integration with Artifactory enables QuickBuild to publish artifacts to Artifactory server as well as using published artifacts as build dependencies.
ðï¸
Amazon S3 Integration
Since QuickBuild 10, artifacts can be published to Amazon S3 (Amazon Simple Storage Service), artifacts can also be checked out from Amazon S3.

================================================================================

Title: Publish Build Reports
URL: https://wiki.pmease.com/display/QB14/category/Publish+Build+Reports
Breadcrumb:  > Administrator's Guide

ðï¸
Publish Boost Test Report
To publish Boost Test report, you only need two steps:
ðï¸
Publish Busted Report
Busted is a Lua unit testing framework. Since QuickBuild 6.0.9, Busted generated test reports can be published. To publish the report:
ðï¸
Publish CheckStyle Report
To publish CheckStyle report, you only need two steps:
ðï¸
Publish Clover Report
Since QuickBuild 5.1.22, you can generate and publish Clover XML report by:
ðï¸
Publish Cobertura Report
To publish Cobertura report, you only need two steps:
ðï¸
Publish Coverity Report
To publish coverity report, you need:
ðï¸
Publish CPD Report
To publish CPD report, you only need two steps:
ðï¸
Publish CppCheck Report
To publish CppCheck report, first you need:
ðï¸
Publish EMMA Report
To publish EMMA report, you only need two steps:
ðï¸
Publish Findbugs Report
To publish Findbugs report, you only need two steps:
ðï¸
Publish Fxcop Report
To publish Fxcop reports, you need:
ðï¸
Publish JaCoCo Report
To publish JaCoCo report, you only need two steps:
ðï¸
Publish JMeter Report
To publish JMeter report, you only need two steps:
ðï¸
Publish JUnit Report
To publish JUnit report, you only need two steps:
ðï¸
Publish MBUnit Report
MbUnit is an advanced, extensible unit testing framework originally developed by Jonathon 'Peli' de Halleux and Jamie Cansdale. It is a free and open source unit testing tool for the .NET Framework. To publish the MBUnit reports to QuickBuild, first, the XML reports should be generated by nant or by msbuild which is freely available as part of the .NET 2.0 Framework.
ðï¸
Publish MSTest Report
To publish MSTest report, the following two steps are required:
ðï¸
Publish NCover Report
To publish NCover reports, you need:
ðï¸
Publish NUnit Report
To publish NUnit report, you only need two steps:
ðï¸
Publish PMD Report
To publish PMD report, you only need two steps:
ðï¸
Publish TAP Report
TAP, the Test Anything Protocol, is a text-based interface between testing modules in a test harness. See more details in its website below:
ðï¸
Publish TestNG Report
To publish TestNG report, you only need two steps:
ðï¸
Add Custom Statistics Data
QuickBuild support add your custom statistics data and will generate the statistics chart and build overview automatically. For example, we use a test framework named rubyunit and want QuickBuild to collect the following indicators
ðï¸
Report Aggregation
What is report aggregation
ðï¸
Rebuild statistics and aggregation data
Sometimes, the statistics data and aggregation data don't seem to be synced after you delete some builds. Then, you can rebuild the statistics data and/or aggregation data.

================================================================================

Title: Publish HTML Reports
URL: https://wiki.pmease.com/display/QB14/Publish+HTML+Reports
Breadcrumb:  > Administrator's Guide

Administrator's Guide
Publish HTML Reports
Version: QB14
Publish HTML Reports
QuickBuild is able to publish and display some commonly used build reports, such as JUnit, Checkstyle, NUnit, EMMA, etc. For reports that QuickBuild does not have native support, if it generates reports in html format, you can instruct QuickBuild to create a report tab in build detail page displaying this html report. This is done by adding the step
Publish -> Html Report
from the step menu. We will demonstrate its usage through an example:
Let's assume you have the directory
myreport
in the
workspace
that contains html files of the report with the start page being index.html. You can add the html report publish step with below properties:
Name: <give a name of the step>
Report Name: my report
Source Path: myreport
Start Page: index.html
After build finishes, a report tab named
my report
will be available to display the html report.
Last updated
on
Oct 24, 2024

================================================================================

Title: Set Up Build Dependency
URL: https://wiki.pmease.com/display/QB14/Set+Up+Build+Dependency
Breadcrumb:  > Administrator's Guide

Administrator's Guide
Set Up Build Dependency
Version: QB14
On this page
Set Up Build Dependency
It is quite common that a product is comprised of different components, and a component is used by different products. We suggest to set up builds for these components and products separately in this case, and utilize QuickBuild's dependency mechanism to use result of component builds in product builds.
Dependency mechanism
â
QuickBuild implements build dependency through a special repository type -
QuickBuild Repository
. Assume we have two configurations:
root/product
and
root/component
. Configuration
root/product
is created to build the product, and configuration
root/component
is created to build component. To use component artifacts, you will need to:
Switch to
repositories
tab of
root/product
, and define a QuickBuild repository there retrieving desired files from desired build of
root/component
.
Switch to
steps
tab of
root/product
, and add a checkout step into step execution graph to check out from the repository defined above.
If the product depends on multiple components, you will just need to define multiple QuickBuild repositories corresponding to these components, and add multiple checkout steps to check out from these repositories in the product configuration. You can even arrange these checkout steps in a parallel composition step to resolve and retrieve multiple dependencies simultaneously.
Dependency resolution and change detection
â
Taking the example used in the above section, before retrieving artifacts from configuration
root/component
, QuickBuild needs to determine which build in
root/componentA
to be used. The process of resolving dependency build is called dependency resolution in QuickBuild, and is controlled by the property
build
when define the QuickBuild repository as shown below:
Currently this property can take one of below value:
latest finished build (generate new if necessary)
If this value is selected, QuickBuild will check if a new build is necessary in the dependency configuration (
root/component
in this case) when resolve the dependency build. If the build is necessary, the newly generated build will be used as the actual dependency build; otherwise, the current latest finished build will be resolved.
Variables can be specified to control the dependency build process in this case.
latest finished build
If this value is selected, QuickBuild will directly resolve the dependency build as the latest finished build without attempting to generate a new build in the dependency configuration even if build condition is satisfied.
latest recommended build
If this value is selected, QuickBuild will resolve the dependency build as the latest recommended build. This is very useful to make sure that the product builds always use good and approved builds from component configurations. Newly introduced features in component builds will not affect product builds unless they are approved.
latest successful build
If this value is selected, QuickBuild will resolve the dependency build as latest successful build.
specify a build version
If this option is choosed, you will need to specify a particular build version to be used as dependency build.
The dependency resolution process is recursive if the dependency configuration itself uses other dependencies. In this case, other dependency resolution processes will be triggered before current resolution finishes.
Like other repository types, changes will be detected in the QuickBuild repository when configuration
root/product
is triggered. When detecting changes, the dependency resolution process will run to get the actual dependency build. If the resulted dependency build is different from the dependency build used in previous build, QuickBuild will think that the dependency has changed and new build will be generated if the configuration is triggered by scheduler or by a recursive dependency resolution process.
Dependency types
â
Different dependency types are defined based on different resolution processes introduced above:
{#SetUpBuildDependency-activedependency}
Active dependency
This dependency refers to the dependency setup with resolution process set to "latest finished build (generate new if necessary)". It is called active since the resolution process can trigger new build in dependency configuration. We call configuration
project1
actively depends on configuration
project2
if
project1
has an active dependency on
project2
.
{#SetUpBuildDependency-passivedependency}
Passive dependency
This dependency refers to the dependency setup with resolution process set to "latest finished build", "latest recommended build", and "latest successful build". It is called passive since the resolution process itself will never trigger a build actively. However, if there is a new build generated matching the criteria, it will be used as the new dependency. We call configuration
project1
passively depends on configuration
project2
if
project1
has a passive dependency on
project2
.
{#SetUpBuildDependency-staticdependency}
Static dependency
This dependency refers to the dependency setup with resolution process set to "specify a build version". It is called static since the dependency build will remain unchanged unless another build is specified by the user.
Having explained dependency types, let is assume that configuration
project1
actively depends on
project2
, and
project2
actively depends on
project3
. If
project3
has new source commits since last build, triggering of
project1
will generate new build in
project3
,
project2
and
project1
in turn.
Check dependent builds
â
In a continuous integration environment, when build/test a configuration, it is sometimes desirable to check if configurations depending on current build are successful or not. If dependent builds are failed, the dependency build will be marked as failed to indicate that it breaks the dependents. To achieve this, you will need to:
Make sure the dependent configurations you want to check have an active dependency on the current configuration.
Add an additional step
Trigger Other Builds
into step execution graph of the dependency configuration, and configure it to trigger desired dependent configurations. Dependent configurations specified here will be triggered parallely.
Future versions will add a dependent trigger step to find out configurations actively depending on current configuration automatically, and trigger them parallely.
Track build dependencies
â
Used dependencies in a particular build can be examined from the build overview page as explained
here
.
Last updated
on
Oct 28, 2024

================================================================================

Title: Set Up Build Promotion
URL: https://wiki.pmease.com/display/QB14/Set+Up+Build+Promotion
Breadcrumb:  > Administrator's Guide

Administrator's Guide
Set Up Build Promotion
Version: QB14
On this page
Set Up Build Promotion
Define promomotions
â
Build Promotion
can be defined in promotion setting page of a configuration like below:
The promote condition controls whether or not the promote action appears on the build page. Taking above screenshot for example:
if a build is successful, the promote action
deploy
will be visible while promote action
release
will not be visible like below:
if a build is recommended, the promote action
deploy
and
release
will both be visible like below:
if a build is failed, no promote actions will be visible.
Revision promotion and file promotion
â
During a promotion, QuickBuild will remember the repository revision used in source build, and use it to build destination configuration. This is called revision promotion, and it guarantees that the source build and destination build use the same set of source code. Please note that revision promotion only happens for repositories of the same name. For example, if source build is generated using source code from repository "A" and "B", and destination build is generated using source code from repository "B" and "C", only revision of repository "B" will be passed from source build to destination build.
In many cases, you may want to reuse artifacts generated in source build instead of build it from scratch when do the promotion. This is called file promotion and QuickBuild supports this via
file to promote
setting in a promotion definition:
Specified promote files will be retrieved from source path under
publish directory
of the source build, and send to destination path under
workspace
of the node running master step in destination configuration. Then you can define various build steps in destination configuration to further process the artifacts, for example to deploy them to test/production servers.
Control promotion process with variables
â
Variables can be defined in promotion definition to control the promotion process. For example, you may have the destination build using the same version as source build following below steps:
Specify
next build version
of destination configuration in general setting as
${vars.get("promoteVersion")}
.
Define variable
promoteVersion
in promotion definition and set the value to
${build.version}
.
If you would like version of destination build being prompted in the above example, you may leave value of the variable
promoteVersion
empty, and specify its prompt setting as
prompt as text input
.
At last, if you want to make sure that certain variables in destination build use the same value as in source build, you may define these variables in promotion definition to use the value
\${build.getVarValue("<name of the variable>")}
. Assume below case:
Variable
branch
is set to prompt for user input in source build, and it is specified as
1.0 bugfix
when source build is triggered. At promotion time, you do not want this variable to prompt for input again, instead, you want the destination build to use the variable value already specified for source build. You can achieve this by defining variable
branch
in promotion destination, and specify the value as
${build.getVarValue("branch")}
.
Permission control
â
Promotion permission can be controlled by promote condition. For example, if you want that the release promote action is only visible to release managers on recommended builds, you may define the promote condition like below:
warning
Please make sure that the
Release Manager
group is assigned with
PROMOTE_BUILD
permission over the configuration; otherwise, all promotion actions will not visible to the group. Refer to
Configuration Visibility and Permissions
for details.
Auto promotion
â
Promotion can be marked as "auto promote" as below if you want it to take place automatically when specified condition is satisfied after current build finishes.
If you have a big workflow taking considerable time to run, it is suggested that you divide them into smaller parts and connect them with auto-promotions to achieve below benefits:
You can get build feedback as soon as possible.
In case of a build failure, the workflow will cease at the failure point, and you may later restart the workflow from the failure point.
Change detection during promotion
â
In a build promotion process, changes of destination build are calculated by comparing repository revision of current destination build against previous destination build, instead of previous source build. This is well explained [here](Promote Build.html#PromoteBuild-buildchanges).
Last updated
on
Oct 28, 2024

================================================================================

Title: Build Notifications
URL: https://wiki.pmease.com/display/QB14/Build+Notifications
Breadcrumb:  > Administrator's Guide

Administrator's Guide
Build Notifications
Version: QB14
Build Notifications
Users can
subscribe to configurations
to get build notifications if they are willing to do so. On the other hand, you can set up the configuration to forcibly send build notifications to users under certain conditions even if they do not choose to subscribe. This can be done by editing notification setting of corresponding configuration like below:
Please note that only one notification will be sent if the user is eligible for both forced notification and subscribed notification.
Last updated
on
Oct 23, 2024

================================================================================

Title: Customize Notification Templates
URL: https://wiki.pmease.com/display/QB14/Customize+Notification+Templates
Breadcrumb:  > Administrator's Guide

Administrator's Guide
Customize Notification Templates
Version: QB14
Customize Notification Templates
Build notification templates can be customized following below steps:
Copy default notification template under
<QuickBuild server install dir>/asset
to another file, and modify the copied template.
default_html_notification.vm
is the default template for email notification, while
default_plain_notification.vm
is the default template for various instant messengers. Please note that you should not modify default templates directly, as they will be overwritten when QuickBuild is upgraded.
Edit notification template setting of corresponding configuration to reference your customized template like below:
Last updated
on
Oct 28, 2024

================================================================================

Title: Set Up Proof Build
URL: https://wiki.pmease.com/display/QB14/Set+Up+Proof+Build
Breadcrumb:  > Administrator's Guide

Administrator's Guide
Set Up Proof Build
Version: QB14
Set Up Proof Build
Proof build support is enabled per SCM. Refer to below links on how to set up proof build for different SCMs:
[Bazaar](Working with Bazaar.html#WorkingwithBazaar-proofbuild)
[CVS](Working with CVS.html#WorkingwithCVS-proofbuild)
[ClearCase](Working with ClearCase.html#WorkingwithClearCase-proofbuild)
[Git](Working with Git.html#WorkingwithGit-proofbuild)
[Mercurial](Working with Mercurial.html#WorkingwithMercurial-proofbuild)
[Perforce](Working with Perforce.html#WorkingwithPerforce-proofbuild)
[StarTeam](Working with StarTeam.html#WorkingwithStarTeam-proofbuild)
[Subversion](Working with Subversion.html#WorkingwithSubversion-proofbuild)
[Visual SourceSafe](Working with Visual SourceSafe.html#WorkingwithVisualSourceSafe-proofbuild)
Proof build for other SCMs not listed here is currently not supported.
Last updated
on
Oct 23, 2024

================================================================================

Title: Working with Resources
URL: https://wiki.pmease.com/display/QB14/Working+with+Resources
Breadcrumb:  > Administrator's Guide

Administrator's Guide
Working with Resources
Version: QB14
On this page
Working with Resources
What is Resource
â
Resource means any physical or virtual component of limited availability within the grid, and is provided by grid node. A build step can declare to require certain resources to run. If some nodes are found with desired resources, the step will run on the fastest node; otherwise, the step will wait until a node with free resource is available. This way, the resource contention problem between builds and steps can be solved efficiently.
For instance, we can define the CPU processor resource representing all CPU processors of all agents in the grid, and declare that master step of the build requires the processor resource. This guarantees that a processor will run one and only one build. If processor resource is currently used up, new build requests will wait until there is a free one. Another example is that you have a single deployment machine in your grid, and only one deployment step can deploy to that machine in the same time. In this case, you may define a deployment resource corresponding to that machine, and for each deploy step, define it to require the deployment resource.
Define and Examine Resources
â
Resource can be defined in the resource tab. When define a resource, you will need to specify which grid node will provide the resource, and how many it will provide. Below screenshot defines a CPU processor resource, and all build agents can provide this resource, with the resource count set to system property
qb.processor.number
:
The
#available
column displays total number of resources currently available, and
#used
column displays total number of used resources.
Resources belonging to a specific node can also be examined from the node detail page like below:
Use Resource
â
To declare that a step requires a resource, please edit the step and choose option
on node with specified resource
for the
node selection
field like below:
This option can be combined with other node selection options. Taking the processor resource for example, you may define node selection property to use the processor resource and also on
agent1
, then the step will only run when a processor resource exists on
agent1
.
Migrate from Queue to Resource
â
The reason that we discard the queue concept is that the queue workers are not associated with grid nodes, and therefore it is difficult to solve the node resource contention problem between builds and steps. Now with the resource utility, we can queue build requests more reasonably and efficiently. To do so, please define appropriate resources and edit the master step to use those resources. When resource requirement of a master step is not satisfied, the whole build request will be in waiting state.
Last updated
on
Oct 28, 2024

================================================================================

Title: Build Concurrency and Deadlock
URL: https://wiki.pmease.com/display/QB14/Build+Concurrency+and+Deadlock
Breadcrumb:  > Administrator's Guide

Administrator's Guide
Build Concurrency and Deadlock
Version: QB14
On this page
Build Concurrency and Deadlock
Control Build Concurrency with Resources
â
As explained in
Working with Resources
section, one can define resources in grid page to control how many steps can run concurrently. Specifically, if resource requirement is applied to master step, the whole build will be queued when the requirement is not satisfied. You may also refer to
the resource management tutorial
on how to control the build concurrency.
Concurrency of Builds of the Same Configuration
â
Concurrency of builds of the same configuration is also affected by workspaces. QuickBuild guarantees that a workspace is only used by one build at a time. Assume that
step1
and
step2
belongs to
build1
and
build2
respectively. If
step1
and
step2
both matches the single same node, the second step will wait until the first step finishes. Specifically if the waiting step is of master step, the whole build will be put into queue for waiting.
Possible Deadlocks
â
Deadlock is possible if a child step requires a resource which has already been acquired by parent step. Taking the
One Build For One Agent
example, if the child step
test
of
child project1
also requires resource
Agent
, deadlock will happen if there is only one agent available. In this case:
master step has already acquired resource
Agent
.
master step will not finish unless child step
test
starts and finishes.
child step
test
will not start unless it can get a free
Agent
resource.
resource
Agent
will not be free unless master step finishes.
This makes the system enters into a infinite waiting loop unless there is another free
Agent
resource is available. Considering there might be many builds running in the system concurrently, deadlock can happen regardless how many resource you configured in the system.
To avoid such deadlock is simple: never try to acquire the same resource multiple times in the same build.
Another deadlock possibility is caused by looped waiting of different resources. Assume that:
we have two resources in the system:
resource1
and
resource2
.
master step of
build1
(assume
master1
) requires
resource1
and its child step
child1
requires
resource2
.
master step of
build2
(assume
master2
) requires
resource2
and its child step
child2
requires
resource1
.
Deadlock may happen if there is only one
resource1
and
resource2
and if we run
build1
and
build2
at the same time:
master1
acquires
resource1
.
master2
acquires
resource2
.
master1
will not finish unless
child1
starts and finishes.
master2
will not finish unless
child2
starts and finishes.
child1
will not start unless
resource2
is released by
master2
.
child2
will not start unless
resource1
is released by
master1
.
Even if there are multiple
resource1
and
resource2
configured in the system, deadlock can still happen if many builds of this type are running together. To avoid such deadlock, you should avoid looped waiting of different resources. If
resource1
waits for
resource2
in a build setup, you should be careful that other build setups will never cause
resource2
to wait for
resource1
. This also holds true if three or more resources are involved.
Last updated
on
Oct 23, 2024

================================================================================

Title: Working with Build Grid
URL: https://wiki.pmease.com/display/QB14/Working+with+Build+Grid
Breadcrumb:  > Administrator's Guide

Administrator's Guide
Working with Build Grid
Version: QB14
On this page
Working with Build Grid
Grid overview
â
The
Build Grid
can be managed by switching to
Grid
tab as shown below:
Active nodes are connected and authorized nodes, and can be used to run build steps. When QuickBuild server is initially installed, the grid contains only one active node - the build server itself.
Unauthorized nodes are connected nodes, but have not been authorized. To authorize nodes, select them and click the
authorize
link from action menu.
Additional grid nodes can be added by
installing build agents
on other build machines.
To remove nodes from the grid, just select nodes you want to remove, and click the
unauthorize
link from action menu.
Grid node attributes
â
Node attributes can be used to filter nodes for certain steps by specifying the step property
node match condition
. For example, the condition
node.getAttribute("os.name").startsWith("Windows")
matches only agents running Windows operating system, while condition
node.hasAttribute("ant")
matches agents that have the attribute
ant
defined.
There are two sets of attributes for a node: system defined attributes and user defined attributes. System defined attributes will be displayed if you select the
System Attributes
tab in node detail page.
System defined attributes include all environment variables and all Java system properties.
{#WorkingwithBuildGrid-defineuserattributes}User attributes are custom attributes that are defined by user to identify ability/environment of the node. For example, if the agent has Ant and Maven installed, you may define user attributes to reflect this installation as below:
Monitor grid node jobs
â
A single unit of work running on a grid node is called a grid job. In most cases, it is just a step. A grid node may have many jobs running concurrently (for example, steps from builds of different configurations). The number of concurrent jobs is limited by node resources (such as working threads). If the resources are exhausted, newly arriving jobs will be waiting in the queue. A typical job monitoring screen looks like this:
Partition grid between projects
â
The whole grid can be partitioned between different projects by assigning nodes in advanced setting of a configuration like below:
Assume the configuration in this example is
root/myproj
, all builds for
root/myproj
and its descendant configurations can only run on grid nodes with
project
attribute set to
MyProj
, regardless what value the node selection setting is set to when define steps. Eligible nodes for steps under this tree must match the node selection condition AND the node assignment condition in the same time. If multiple node assignment conditions are found along the tree, all these node assignment conditions need to be satisfied.
Last updated
on
Oct 28, 2024

================================================================================

Title: Working with Cloud Profiles
URL: https://wiki.pmease.com/display/QB14/category/Working+with+Cloud+Profiles
Breadcrumb:  > Administrator's Guide

ðï¸
Launch Node in GCP
GCP cloud profile
ðï¸
Launch Node in EC2
EC2 cloud profile
ðï¸
Launch Node in Azure
Azure cloud profile
ðï¸
Launch Node in Kubernetes
Configure server to access Kubernetes cluster

================================================================================

Title: Diagnose Build Issues
URL: https://wiki.pmease.com/display/QB14/Diagnose+Build+Issues
Breadcrumb:  > Administrator's Guide

Administrator's Guide
Diagnose Build Issues
Version: QB14
On this page
Diagnose Build Issues
Investigate build failure
â
If a build is generated but failed, you will see an error summary in the build overview page like below:
This gives a quick view of which steps are in error, and cause of the error. You may open the step log or build log to view details of the error.
Further, you may enable debug or trace logging of a configuration to have QuickBuild printing more build information into log, which might be helpful when investigate build failures.
Investigate configuration error
â
Configuration will be marked as in error in below cases:
Failed to take repository snapshots.
Failed to evaluate build condition.
Failed to calculate build version.
Failed to collect build metrics.
Failed to send build notifications.
Configuration error messages are logged in system log instead of build log either because the build has not been generated yet or because the build is finished and build log is closed. In this case, the configuration dashboard will display the error message, and clicking the detail icon will display the error detail in system log.
In case of configuration error, enabling debug level for system log may help the investigation. This can be done by editing file
conf/log4j.properties
under QuickBuild server's installation directory, and change the second line to be:
log4j
.
logger
.
com
.
pmease
.
quickbuild
=
DEBUG
or
log4j
.
logger
.
com
.
pmease
.
quickbuild
=
TRACE
The modified log4j setting will take effect immediately after you've saved the file, and you do NOT need to restart the server.
Last updated
on
Oct 28, 2024

================================================================================

Title: Running Behind Apache
URL: https://wiki.pmease.com/display/QB14/Running+Behind+Apache
Breadcrumb:  > Administrator's Guide

Administrator's Guide
Running Behind Apache
Version: QB14
On this page
Running Behind Apache
Introduction
â
You may want to run your QuickBuild instance behind Apache for some reasons. To do so, the following situations are assumed:
The following commands are Ubuntu specified, if you are running on other platform, please reference the apache documents on your platform.
An existing Apache web server has been set up already.
mod_proxy
has been enabled. If you haven't, you may enable it by running command:
a2enmod proxy_http
You run your QuickBuild instance at
http://localhost:8810
, and you want site
https://build.example.com
on the regular port (80) available after configuring the mod_proxy.
Configure your apache
â
Create a file named build.example.com.conf at your apache configurations directory: your_apache_home/conf/sites-available and edit it by adding below lines:
<
VirtualHost
*
:
80
>
#
if
you are configuring reverse proxy
with
https
enabled
,
make sure
to
prepend
the
ServerName
# directive
with
"https://"
schema
,
for
example
:
https
:
/
/
build
.
example
.
com
:
443
ServerName
build
.
example
.
com
ProxyRequests
Off
# turn off
this
option
.
We
will rely on
ProxyPassReverse
to
translate
# urls in
Http
response
headers
.
ProxyPreserveHost
Off
<
Proxy
*
>
Order
deny
,
allow
Allow
from all
<
/
Proxy
>
ProxyPass
/
http
:
/
/
localhost
:
8810
/
ProxyPassReverse
/
http
:
/
/
localhost
:
8810
/
<
Location
/
>
Order
allow
,
deny
Allow
from all
<
/
Location
>
ErrorLog
/
var
/
log
/
apache2
/
quickbuild
-
error
.
log
CustomLog
/
var
/
log
/
apache2
/
quickbuild
-
access
.
log combined
LogLevel
warn
<
/
VirtualHost
>
Then, we can enable this configuration and restart the apache server:
# a2ensite build
.
example
.
com
.
conf
#
/
etc
/
init
.
d
/
apache2 reload
That is it.
Last updated
on
Oct 23, 2024

================================================================================

Title: Data Management
URL: https://wiki.pmease.com/display/QB14/Data+Management
Breadcrumb:  > Administrator's Guide

Administrator's Guide
Data Management
Version: QB14
On this page
Data Management
Data backup and restore
â
The page
Administration/Backup Database
allows QuickBuild administrator to schedule auto-backups of the database, or run a backup immediately.
Please follow below procedure to restore database from backup:
Shutdown QuickBuild server. If an external database is used, the database server must be running.
Open a command prompt window, switch to
bin
sub directory of QuickBuild's installation directory, and run the command
restore /path/to/backup_file
.
danger
You will need to manually delete and re-create the database to wipe out all QuickBuild relevant data remained in the database in case a previous restore has been failed and you want to try again after fixing the errors.
After restore, start QuickBuild server.
Use other databases other than the embedded H2 database
â
By default, QuickBuild uses the embedded H2 database for demonstration purpose. In a production environment, it is highly recommended that a serious database is used for performance and reliability reasons. Below is the procedure to switch to use other databases:
Do a backup of current database following guide in the data backup and restore section. Of course this step is not necessary if you do not want to migrate data in current database.
Shutdown QuickBuild server.
Open the file
conf/hibernate.properties
under QuickBuild's installation directory, and modify settings to connect to desired database following instructions in the file. Currently the following database type other than the embedded H2 are supported:
MySQL 4.0 or higher
Microsoft SQL Server 2000 or higher
Oracle 8i or higher
DB2 10 or higher
PostgreSQL 9.0 or higher
MariaDB 5.5 or higher
Restore previously backed up data into the new database following instructions in the data backup and restore section. This step will not be necessary if you do not want to migrate data from previous database.
danger
Do not connect multiple QuickBuild servers to the same external database.
Last updated
on
Oct 23, 2024

================================================================================

Title: License Management
URL: https://wiki.pmease.com/display/QB14/License+Management
Breadcrumb:  > Administrator's Guide

Administrator's Guide
License Management
Version: QB14
License Management
Last updated
on
Oct 23, 2024

================================================================================

Title: Security Management
URL: https://wiki.pmease.com/display/QB14/category/Security+Management
Breadcrumb:  > Administrator's Guide

ðï¸
Single Sign On
3 items
ðï¸
Listen to specified IP address
By default, QuickBuild server or agent accept connections from all network interfaces. For security considerations, you may want to have them listening on specified network interface. This can be done by running "bin/config.(sh\|bat)" and specify binding address.
ðï¸
Protect QuickBuild using SSL
Enable https access to server
ðï¸
User and Group Management
Permission control in QuickBuild is implemented through group and user. The administrator creates groups and give them certain permissions. All users in the group will have the permissions defined for the group. A single user can be associated with multiple groups, and the user permission is the union of all permissions of all groups.
ðï¸
Configuration Visibility and Permissions
QuickBuild organizes configurations into a hierarchy tree. You can selectively expose portions of the tree to certain group of users by adding authorizations for certain configurations when defining related groups. Let's assume a full configuration tree like below:
ðï¸
Manage Permission Sets
Often you might find yourself in a situation where the same set of permissions need to be assigned to different groups and configurations again and again. The permission set feature comes to rescue
ðï¸
Enable Anonymous Access and Self Registering
Enable anonymous access
ðï¸
Authenticate with Active Directory and LDAP
QuickBuild can be configured to authenticate users through Active Directory or generic LDAP servers. To do this, please navigate to menu Administration/Security Settings, and add an authenticator with the type Active Directory or LDAP.
ðï¸
Other permissions
Below permissions can also be assigned to a group:

================================================================================

Title: Auditing User Activities
URL: https://wiki.pmease.com/display/QB14/Auditing+User+Activities
Breadcrumb:  > Administrator's Guide

Administrator's Guide
Auditing User Activities
Version: QB14
Auditing User Activities
QuickBuild audits all user activities in the system such as configuration modification, build triggering/cancelling. Authorized users may open the audit log to find out what has been changed in the system during a certain time period, and can compare the changes if necessary as demonstrated by below screenshot:
Audit log can also be checked at configuration level for users with VIEW_AUDIT_LOG permission for current configuration:
By default, audit entries older than one year will be purged from system for performance considerations at system maintenance time. You may customize this in system setting as demonstrated below:
Last updated
on
Oct 28, 2024

================================================================================

Title: Plugin Management
URL: https://wiki.pmease.com/display/QB14/Plugin+Management
Breadcrumb:  > Administrator's Guide

Administrator's Guide
Plugin Management
Version: QB14
Plugin Management
QuickBuild is designed around
OSGi
, a plugin framework. This enables QuickBuild to be extended easily by just installing new plugins. In fact many of its features are provided by plugins out of the box, such as steps, repositories, reports, etc. All QuickBuild plugins are kept in the
plugins
folder under QuickBuild's installation directory, with each file representing a single plugin.
NOTE:
When mentioning plugin management, we are referring to QuickBuild server. You may noticed that the agent installation also has the
plugins
directory. However, you don't need to take care of agent plugins, because QuickBuild agents will sync its plugins with QuickBuild server automatically when you install/uninstall plugins on the server.
To get more information on installed plugins, please go to the Plugin Management screen as shown below:
The icon before the plugin name indicates the status of the plugin:
This plugin is disabled. If a plugin is disabled, its functionality will not be available to the system. For example, if the plugin
com.pmease.quickbuild.plugin.ant
is disabled, the ant build step will not appear in the step menu.
This plugin is enabled.
This plugin can not be enabled as it needs to be configured first. Once it is configured, its status will change to
enabled
.
For plugins with settings, a
Configure
link will appear in the operation list. Following this link, plugin setting page will be opened to let the user view/edit settings of the plugin.
Custom plugins can be installed by dropping the plugin file into the
plugins/site
folder, followed by restart of the QuickBuild server.
Existing custom plugins can be uninstalled by deleting the plugin file from the
plugins/site
folder, followed by restart of the QuickBuild server.
Last updated
on
Oct 28, 2024

================================================================================

Title: Configuring System Alerts
URL: https://wiki.pmease.com/display/QB14/Configuring+System+Alerts
Breadcrumb:  > Administrator's Guide

Administrator's Guide
Configuring System Alerts
Version: QB14
On this page
Configuring System Alerts
Alert Definition
â
To configure system alerts, you need be an administrator, then:
Go to Administration page
Choose Plugin Management
Find Measurement & Alert section, and configure System Alert Plugin
Click Add button to add your own alert definition
warning
The name here should be unique globally.
You may also enable/disable a definition by clicking the status icon like below:
The metric condition set is a collection of boolean expression which will be used to test with the collected measurements from a node. You can tell QuickBuild to match all conditions or any conditions defined.
After a condition set is matched, QuickBuild also need know your firing strategy. The firing strategy is to tell QuickBuild when to fire an alert. For example, you may need test the condition set 5 times and if 3 times are true, then an alert can be really fired, you can choose the firing strategy to:
If condition set is true X times out of the last Y times it is evaluated
Currently, below strategies are supported:
Each time condition set is true, firing an alert every test is true
If condition set is true X times consecutively
If condition set is true X times out of the last Y times it is evaluated
Please also note our measurements are collected from each node every 5 minutes. That is each condition set will be tested every 5 minutes. You can define your firing strategy based on it.
Subscribe Alerts
â
You can subscribe the alerts by Email, Tray Monitor, Jabber client, MSN messenger. To subscribe the alerts, change to Alert Subscription tab, and just add users and notifiers and then saving your changes:
Last updated
on
Oct 28, 2024

================================================================================

Title: Configuring Disk Monitoring
URL: https://wiki.pmease.com/display/QB14/Configuring+Disk+Monitoring
Breadcrumb:  > Administrator's Guide

Administrator's Guide
Configuring Disk Monitoring
Version: QB14
Configuring Disk Monitoring
By default, QuickBuild will only monitor the disk where node storage directory is on. You may want to specify the disks yourself, so you need:
Go to Administration page
Select Plugin Management tab
Configure Grid Measurement Plugin
In Monitor Disk field, input something like:
$
{
node
.
getAttribute
(
"monitorDisks"
)
}
Go to Grid page, and select Active Nodes tab
Choose the nodes which you want
Choose User Attribute tab
Input something like:
monitorDisks
=
C
:
/
,
D
:
/
,
E
:
/
Since 5.0.9, you may also use match pattern to specify your monitoring disks, for example:
*
or
**
to monitor all disks/partitions on your agents/nodes, or use ant style pattern to include or exclude your disks:
*
*
,
-
/
dev
The above pattern means you want to monitor all partitions except
/dev
.
Please refer to
File Pattern Reference
for more about how to specify your path pattern.
Last updated
on
Oct 23, 2024

================================================================================

Title: Webhooks
URL: https://wiki.pmease.com/display/QB14/Webhooks
Breadcrumb:  > Administrator's Guide

Administrator's Guide
Webhooks
Version: QB14
On this page
Webhooks
info
Since 8.0.12
Webhooks allow you to subscribe to build events on your QuickBuild instance. When one of those events is triggered, we'll send a HTTP POST payload to the webhook's configured URL.
You can set up Webhooks for one configuration as many as you want. The configuration setting looks like below:
Event
â
The build events include:
BUILD_STARED when build is stared
BUILD_FINISHED when build is finished
BUILD_RECOMMENDED when build is recommended
BUILD_UNRECOMMENDED when build is un-recommended
Payload
â
The payload data can be any JSON string. If it is empty, the build model will be delivered.
Below is an example of build model:
{
"configurationId"
:
123
,
// configuration id
"configurationPath"
:
"root/PMEase/Quickbuild"
,
// configuration path
"id"
:
345
,
// build id
"version"
:
"1.3.4"
,
"status"
:
"RUNNING"
,
// build status, can be: SUCCESSFUL, RECOMMENDED, FAILED, CANCELLED, TIMEOUT, RUNNING
"requester"
:
"admin"
,
"duration"
:
100
,
// in milliseconds
"beginDate"
:
"20180728T03:51:58.573+0000"
,
// in ISO8601 format, yyyyMMdd'T'HH:mm:ss.SSSZ
"endDate"
:
"20180728T03:51:58.573+0000"
,
// in ISO8601 format, yyyyMMdd'T'HH:mm:ss.SSSZ
}
Delivery headers
â
HTTP POST payloads that are delivered to your webhook's configured URL endpoint will contain several special headers:
Header
Description
X-QB-EventType
Name of the event type that triggered the delivery, can be: BUILD_STARTED, BUILD_FINISHED
X-QB-Signatuer
The HMAC hex digest of the response body. This header will be sent if the webhook is configured with a secret. The HMAC hex digest is generated using the sha1 hash function and the secret as the HMAC key.
HMAC signature
â
Below is an example with Java on how to create the signature:
public
class
HmacSha1Signature
{
private
static
final
String
HMAC_SHA1_ALGORITHM
=
"HmacSHA1"
;
private
static
String
toHexString
(
byte
[
]
bytes
)
{
try
(
Formatter
formatter
=
new
Formatter
(
)
)
{
for
(
byte
b
:
bytes
)
{
formatter
.
format
(
"%02x"
,
b
)
;
}
return
formatter
.
toString
(
)
;
}
}
public
static
String
calculateRFC2104HMAC
(
String
data
,
String
key
)
throws
SignatureException
,
NoSuchAlgorithmException
,
InvalidKeyException
{
SecretKeySpec
signingKey
=
new
SecretKeySpec
(
key
.
getBytes
(
)
,
HMAC_SHA1_ALGORITHM
)
;
Mac
mac
=
Mac
.
getInstance
(
HMAC_SHA1_ALGORITHM
)
;
mac
.
init
(
signingKey
)
;
return
toHexString
(
mac
.
doFinal
(
data
.
getBytes
(
)
)
)
;
}
}
Last updated
on
Oct 23, 2024

================================================================================

Title: Develop Plugins
URL: https://wiki.pmease.com/display/QB14/category/Develop+Plugins
Breadcrumb:  > Developer's Guide

ðï¸
Plugin Tutorials
6 items
ðï¸
Plugin Examples
5 items
ðï¸
Development References
2 items

================================================================================

Title: RESTful API
URL: https://wiki.pmease.com/display/QB14/category/RESTful+API
Breadcrumb:  > Developer's Guide

ðï¸
Available Clients
Python
ðï¸
Get API Version
Version of the RESTful API can be retrieved by visiting below url:
ðï¸
Interact with Audits
This API is added since QuickBuild 6.0.6.
ðï¸
Interact with Configurations
Get child configurations of specified configuration
ðï¸
Interact with Builds
Access build by build id
ðï¸
Interact with Latest Builds
This API is provided for the purpose of accessing latest build information of one or more configurations efficiently.
ðï¸
Interact with Build Requests
Build request object can be used to request new build or cancel running build.
ðï¸
Trigger Build via GET Request
Build can be triggered by posting build request as described in page Interact with Build Requests. Sometimes it is useful to trigger build via GET request, and here is how:
ðï¸
Interact with Users
Get all users in the system
ðï¸
Interact with Groups
Get all groups in the system
ðï¸
Interact with Group Memberships
Get all memberships in the system
ðï¸
Interact with Dashboards
Get all dashboards in the system
ðï¸
Interact with Group Share
Group share is the object used to control dashboard sharing with groups
ðï¸
Interact with User Share
User share is the object used to control dashboard sharing with users
ðï¸
Interact with Cloud Profiles
Get all cloud profiles in the system
ðï¸
Interact with Configuration Authorizations
Get all authorizations in the system
ðï¸
Interact with Resources
Get all resources in the system
ðï¸
Interact with Agent Tokens
By operating tokens, one can authorize/unauthorize agents, or access agent details including token value and latest usage information.
ðï¸
Get System Attributes of Grid Node
System attributes of grid node can be fetched via RESTful call.
ðï¸
Get and Set User Attributes of Grid Node
User attributes of grid node can be fetched/modified via RESTful API.
ðï¸
Interact with Reports
For those reports supported by QuickBuild, you can retrieve the report data via RESTful APIs. The supported reports included:
ðï¸
Interact with Changes
Since QuickBuild 4.0, you can retrieve changes via RESTful APIs. The base URI for changes RESTful APIs is:
ðï¸
Interact with Issues
Since QuickBuild 4.0, you can retrieve issues via RESTful APIs. The base URI for changes RESTful APIs is:
ðï¸
Query Build Notifications
Syntax
ðï¸
Query Grid Measurements
Grid measurements can be fetched from REST API.
ðï¸
Access Information of Published Files
Syntax
ðï¸
Interact with Build Agents
Get list of active build agents
ðï¸
Backup Database
QuickBuild database backup can be taken via RESTful call.
ðï¸
Pause System
QuickBuild can be paused to prevent builds from running via RESTful call.
ðï¸
Resume System
QuickBuild can be resumed to allow builds from running via RESTful call.
ðï¸
Check System Pause Information
Get system pause information including pause reason.
ðï¸
Retrieve Object Identifier
Most of QuickBuild RESTful API relies on identifier of the object, which can be retrieved with the id service explained here.

================================================================================

Title: RESTful API (JSON Edition)
URL: https://wiki.pmease.com/display/QB14/RESTful+API++JSON+Edition+
Breadcrumb:  > Developer's Guide

Developer's Guide
RESTful API (JSON Edition)
Version: QB14
RESTful API (JSON Edition)
Starting from QuickBuild 10, A JSON based RESTful api is supported. It works exactly the same as the
traditional XML based api
, except that one has to specify http header
Accept: application/json
when retrieving json content from server, and specify http header
Content-Type: application/json
when posting json content back to server.
For instance, to get JSON representation of a configuration, you may refer to section
Access configuration by id
of page
interact with configurations
, and modify the demonstration command as below:
curl
-
u admin
:
admin
-
H
"Accept: application/json"
http
:
/
/
localhost
:
8810
/
rest
/
configurations
/
1
Or if you want to update a configuration, just refer to section
Update configuration
of the same page, and modify the demonstration command like below:
curl
-
X
POST
-
u admin
:
admin
-
H
"Content-Type: application/json"
--
data
-
binary
"@tempfile.json"
http
:
/
/
localhost
:
8810
/
rest
/
configurations
Last updated
on
Oct 23, 2024

================================================================================

Title: Build Against Specific Gerrit Change
URL: https://wiki.pmease.com/display/QB14/Build+Against+Specific+Gerrit+Change
Breadcrumb:  > Build Setup Tutorials

Build Setup Tutorials
Build Against Specific Gerrit Change
Version: QB14
On this page
Build Against Specific Gerrit Change
Situation
â
Sometimes it is desirable to run build against specific Gerrit change.
Resolution (since 6.0.25)
â
Define a variable say "change", with prompt setting set to
prompt as selection box
, with below choice:
$
{
groovy
:
// assume your Gerrit repository defined at QuickBuild side is named "gerrit"
def repo
=
repositories
.
get
(
"gerrit"
)
;
def choices
=
""
;
for
(
each in repo
.
getOpenChanges
(
)
)
{
choices
+=
each
.
customData
.
changeNo
+
": "
+
each
.
customData
.
subject
+
","
;
\
}
return
choices
;
}
This setting will prompt user with a list of Gerrit open changes for selection.
Set up Gerrit repository at QuickBuild side and configure field
change numbers
as below:
$
{
groovy
:
import
com
.
pmease
.
quickbuild
.
util
.
StringUtils
;
def change
=
vars
.
getValue
(
"change"
)
;
if
(
change
!=
null
)
return
StringUtils
.
substringBefore
(
change
,
":"
)
;
else
return
""
;
}
This tells QB to build against selected change in above step.
Make sure option "Queue Changed Branches Only" in advanced configuration setting is set to
no
, as otherwise, QB will not run build even if change number is specified if a build has already been fired for a change.
Last updated
on
Oct 23, 2024

================================================================================

Title: Set up Your First Build
URL: https://wiki.pmease.com/display/QB14/Set+up+Your+First+Build
Breadcrumb:  > Build Setup Tutorials

Build Setup Tutorials
Set up Your First Build
Version: QB14
On this page
Set up Your First Build
Situation
â
Set up build for a project to:
Check out source code from SCM.
Build and run unit tests.
Publish generated artifacts, and test reports.
Label SCM using the build version if the build is successful.
If failed, notify all commit users.
Demonstration
â
Visit the
demo project
, and hit the run button to generate the new build. After build finishes, you will see published artifacts as well as junit test reports.
Resolution
â
Define next build version at
general setting of the demo project
.
Switch to
notification setting of the demo project
. A notification is defined with receivers set as
<committers since previous build>
and notification condition set as
if build is failed
.
Switch to
repository definition of the demo project
. A repository is defined according to SCM setting of the project.
Switch to
step definition of the demo project
. A sequential composition step is defined as the master step, and below steps are included in the sequential step:
A checkout step to check out from the repository defined in step 3. The source code will be retrieved into workspace directory of the project as indicated by
destination path
property of the repository.
A Maven build step to run package goal. The
build properties
is defined like below:
component
.
version
=
$
{
build
.
version
}
With this setting, Maven property
component.version
will be defined as version of current build, and this property is used as project version in pom.xml.
A publish artifacts step to publish generated jars and release notes from workspace of the configuration. Reviewing the workspace tab will be helpful when define this step.
A publish JUnit reports step to publish JUnit xml reports generated by the build. Reviewing the workspace tab will be helpful when define this step.
A label step to tag SCM using the build version.
Last updated
on
Oct 23, 2024

================================================================================

Title: Control Build Versions
URL: https://wiki.pmease.com/display/QB14/category/Control+Build+Versions
Breadcrumb:  > Build Setup Tutorials

ðï¸
Use Version Stored in Maven POM
Situation
ðï¸
Read Version from File
Situation
ðï¸
Control Release Candidate and Release Version
Situation
ðï¸
Include SCM Revision in Build Version
Situation
ðï¸
Prompt for Build Version when Manually Triggered
Situation
ðï¸
Use Same Version When Promote Builds
Situation

================================================================================

Title: Build Against Specified Tag
URL: https://wiki.pmease.com/display/QB14/Build+Against+Specified+Tag
Breadcrumb:  > Build Setup Tutorials

Build Setup Tutorials
Build Against Specified Tag
Version: QB14
On this page
Build Against Specified Tag
Situation
â
Sometimes it is desirable to run build against an existing SCM tag.
Demonstration
â
Visit the
demo project
, and hit the run button. Please wait patiently and then QuickBuild will present a list of available tags in project repository for user to select from. Select an arbitrary tag, click OK to run the build, and the build will be generated against specified tag.
Resolution
â
Switch to
repository setting of the demo project
. The demo Subversion repository is defined with
Commit or Tag to Build
specified as
${vars.getValue("tag")}
. The
tag
variable will be defined later to use the selected tag name.
Switch to
variable setting of the demo project
. The variable
tag
is set to prompt as a selection box with choices defined as execution result of a groovy script listing available tags via "git ls-remote" command.
Switch to
step setting of the demo project
. Necessary steps are defined here to checkout from the Subversion repository, run Maven build script, and then publish generated artifacts.
Last updated
on
Oct 23, 2024

================================================================================

Title: Re-run Build Using Same SCM Revision
URL: https://wiki.pmease.com/display/QB14/Re-run+Build+Using+Same+SCM+Revision
Breadcrumb:  > Build Setup Tutorials

Build Setup Tutorials
Re-run Build Using Same SCM Revision
Version: QB14
On this page
Re-run Build Using Same SCM Revision
Situation
â
It is sometimes desirable to re-produce an already generated build using same SCM revision. This can be useful for a number of reasons for instance when build artifacts get lost, or when you want to re-generate the build with new configuration definition.
Demonstration
â
Visit
latest build of the demo project
, and hit the
Rebuild
button to re-run this build. QuickBuild will generate a new build using same SCM revision as old build and will also make sure that newly generated build using same build version as old build.
Resolution
â
Define a
rebuild
promotion at
promotion definitions of the demo project
, with configuration specified as the demo configuration itself, which is
Demo/Build Setup Tutorials/Build Rerun
. Upon this, QuickBuild will generate a rerun button at build overview page of the configuration, and hitting this button will cause current build to be promoted to a new build in the same configuration. QuickBuild promotion guarantees that the new build will use the same SCM revision as old build.
Now we continue to see how the new build uses the same version string as old build. Check
general setting of the demo project
, the next build version is defined as:
$
{
groovy
:
if
(
vars
.
getValue
(
"version"
)
!=
null
)
return
vars
.
getValue
(
"version"
)
;
else
return
vars
.
getValue
(
"major"
)
+
"."
+
vars
.
getValue
(
"minor"
)
+
"."
+
vars
.
get
(
"patch"
)
.
increase
(
)
;
}
This tells QuickBuild that version of new build should take value of variable
version
if it is available; otherwise, it should calculate version string based on major, minor and patch variables defined in the configuration.
Check the
promotion definition
rebuild
again, and here the promotion is defined with a variable
version
taking value
${build.version}
. This tells QuickBuild to pass variable
version
to build process using version string of old build as its value.
With above definition, the new build will use version of old build if it is a result of pressing the rebuild button; otherwise, it will construct its version using the default
major.minor.patch
format.
Last updated
on
Oct 23, 2024

================================================================================

Title: Inherit and Override
URL: https://wiki.pmease.com/display/QB14/category/Inherit+and+Override
Breadcrumb:  > Build Setup Tutorials

ðï¸
Set up Builds for Multiple Branches
Situation

================================================================================

Title: Chained Build Options
URL: https://wiki.pmease.com/display/QB14/Chained+Build+Options
Breadcrumb:  > Build Setup Tutorials

Build Setup Tutorials
Chained Build Options
Version: QB14
On this page
Chained Build Options
Situation
â
When prompt build options for a manually triggered build, it is often desirable to chain two or more selection boxes together so that available choices of latter selection box are calculated based on selected value of prior selection box.
Demonstration
â
Switch to the
demo configuration
, and hit the run button.
The build option page prompts user to select a directory and a file inside that directory.
Select a directory, and available choices of the file selection box will change to reflect contained files under that directory.
Run the build, and check the
build log
. The selected directory name and file name will be printed there as a demonstration.
Resolution
â
Switch to
variables definition
of the demo configuration.
The variable
dir
is defined to prompt as a selection box, with choices field defined as a groovy script returning all sub directory names under
/home/pmease/skyagent
.
The variable
file
is defined to prompt as a selection box, with choices field defined as a groovy script returning all file names under the selected sub directory.
Check the
steps definition
, a test step is added to print selected value of the directory and file.
Last updated
on
Oct 23, 2024

================================================================================

Title: Distributed Builds
URL: https://wiki.pmease.com/display/QB14/category/Distributed+Builds
Breadcrumb:  > Build Setup Tutorials

ðï¸
Build Multi-platform Projects
Scenario
ðï¸
Reduce Server Load
Scenario
ðï¸
Speed up Build Process
Scenario
ðï¸
Test on All Applicable Agents
Situation

================================================================================

Title: Resource Management
URL: https://wiki.pmease.com/display/QB14/category/Resource+Management
Breadcrumb:  > Build Setup Tutorials

ðï¸
One Build For One Agent
Situation
ðï¸
Exclusive Deployment
Situation

================================================================================

Title: Build Dependencies
URL: https://wiki.pmease.com/display/QB14/category/Build+Dependencies
Breadcrumb:  > Build Setup Tutorials

ðï¸
Set up Static Dependency
Situation
ðï¸
Set up Passive Dependency
Situation
ðï¸
Set up Active Dependency
Situation
ðï¸
Auto-Trigger Dependent Maven Builds
Situation

================================================================================

Title: Clean and Incremental Build
URL: https://wiki.pmease.com/display/QB14/Clean+and+Incremental+Build
Breadcrumb:  > Build Setup Tutorials

Build Setup Tutorials
Clean and Incremental Build
Version: QB14
On this page
Clean and Incremental Build
Situation
â
For scheduled builds, run them incrementally. However if it is manually triggered, user needs to control whether it is a clean build or an incremental build.
Demonstration
â
Visit the
demo project
, click run button to trigger the build, and the build option screen will present a clean option. QuickBuild will clean up the workspace directory (and this means a clean build for this demo project) before running the build if this option is checked.
Resolution
â
Define a variable
clean
in
variable setting
of the demo project, with prompt setting defined as a checkbox. The default value is set to
false
indicating all scheduled builds being incrementally. Note that variable name is arbitrary as long as the same name is referenced later.
Switch to
step setting
of the demo project. The
pre-execute action
of the master step is defined as below to clean the workspace if variable
clean
is set to
true
:
if
(
vars
.
get
(
"clean"
)
.
asBoolean
(
)
)
util
.
cleanDir
(
configuration
.
workspaceDir
)
;
If build is triggered by scheduler, default value of the variable will be used, which is
false
, and workspace directory will not cleaned. If triggered manually, the variable value will be either
true
or
false
depending on whether or not the user has checked the
clean
option.
info
This demo treats clean build as cleaning up the workspace directory before running the build. However, your clean build might have a different behavior, for example, cleaning up a sub directory under the workspace before running master step, or even deleting certain files before running certain steps. All of these logic can be customized using the
pre-execute action
and
post-execute action
of various steps. You may even use multiple variables to control the clean behavior.
Last updated
on
Oct 23, 2024

================================================================================

Title: Complicated Build Options
URL: https://wiki.pmease.com/display/QB14/Complicated+Build+Options
Breadcrumb:  > Build Setup Tutorials

Build Setup Tutorials
Complicated Build Options
Version: QB14
On this page
Complicated Build Options
Situation
â
Set up the configuration so that it can ask user for below settings when manually triggered:
User can select either
Smoke Test Mode
or
Acceptance Test Mode
.
When
Smoke Test Mode
is selected, user can select
Component A
and/or
Component B
to test, and can select whether or not to run integration tests.
When
Acceptance Test Mode
is selected, user can continue to select
Component C
and/or
Component D
to test.
User can optionally select which test suite to run.
User can optionally select which test case to run in the selected test suite.
Demonstration
â
Open
this configuration
and hit the run button.
A build option screen will be presented with desired settings. Make some selection and hit the OK button. Please note that when a test suite is selected, all test cases belonging to that test suite will be displayed for choice.
Wait for some time for the build to finish. Check the
step status
screen, and you will find that the test step has been executed on the nodes you specified in the build option screen.
Open
build log
and check output of the test step. For demonstration purpose, the specified test setting and its options are printed in the log correctly.
Resolution
â
Create a custom plugin
implementing the PromptBeanProvider extension point to provider your own build option bean. You may start with the sample plugin
com.example.promptbean
in directory
<QuickBuild server install dir>/dev/plugin/samples
, and modify various bean classes as necessary. Refer to
Bean Editor
on how to annotate your beans for editing purpose. This tutorial uses the sample plugin directly.
Stop QuickBuild, deploy your plugin to QuickBuild, and then start QuickBuild. Refer to
Plugin Tutorials
on how to do this.
Define a variable with prompt setting set to
prompt for bean input
, and choose the bean you provided in your plugin. In this tutorial, we choosed the
Example Prompt Bean
as demonstrated
here
.
Please note that we also specified default value of the bean by creating the bean object with groovy, assigning default values to its fields, and convert it to a string. This default bean will be used to populate the variable when the build is not manually triggered (ie. triggered via schedule).
Definition of the
test step
retrieves the bean via the variable and traverses the object graph to print interesting information.
Last updated
on
Oct 23, 2024

================================================================================

Title: Complicated Build Cleanup Strategy
URL: https://wiki.pmease.com/display/QB14/Complicated+Build+Cleanup+Strategy
Breadcrumb:  > Build Setup Tutorials

Build Setup Tutorials
Complicated Build Cleanup Strategy
Version: QB14
On this page
Complicated Build Cleanup Strategy
Situation
â
QuickBuild ships with two build auto-cleanup strategies of a configuration:
To reserve builds by certain number of days.
To reserve certain number of builds.
However sometimes this is not enough. For instance, you may want that recommended builds never get deleted automatically while other builds follow the normal auto-cleanup strategy. The solution is to define maintenance configuration running at descired schedule running customized script to do the cleanup.
Demonstration
â
Visit the
demo configuration
, and hit the run button several times to generate more than five builds.
Mark eldest build of the
demo configuration
as recommended if it is not.
Visit the
demo cleanup configuration
, and hit the run button to perform cleanup for the demo configuration. The cleanup is intended to preserve latest three builds, with recommended builds remaining intacted.
After cleanup, check the
demo configuration
, and you will find that all recommended builds are still there, but only latest three builds of other statuses are preserved.
Resolution
â
Switch to
step setting of the demo cleanup configuration
. The master step is defined to execute a groovy script. The script loops over all builds of the demo configuration and delete all builds matching two conditions: not a recommended build and not the most recent three builds.
The demo cleanup configuration is also scheduled to run every night at 1:00AM to do the job automatically.
Last updated
on
Oct 23, 2024

================================================================================

Title: Promote Builds
URL: https://wiki.pmease.com/display/QB14/category/Promote+Builds
Breadcrumb:  > Build Setup Tutorials

ðï¸
Generate Release Build from the Source Used by QA Build
Scenario
ðï¸
Generate Release Build using Artifacts of QA Build
Scenario

================================================================================

Title: Set up Build Pipeline
URL: https://wiki.pmease.com/display/QB14/Set+up+Build+Pipeline
Breadcrumb:  > Build Setup Tutorials

Build Setup Tutorials
Set up Build Pipeline
Version: QB14
On this page
Set up Build Pipeline
Situation
â
Set up the build pipeline to handle multiple connected phases as described below:
New commit into the SCM triggers the commit verification phase to build the package and run unit tests.
The same commit automatically transit to next phase for running smoke tests if commit verification phase succeeds.
The same commit automatically transit to next phase for deploying into development environment if smoke test phase succeeds.
QA engineers may run some manual tests against the commit deployed to development environment, and if passed, they can recommend the commit.
Some one in the team can manually transit the recommended commit to next phase for deploying into UAT environment.
Mark the commit as recommended if user accepts the new commit.
Again some one in the team manually transits the UAT passed commit to next phase for deploying into the production environment.
Demonstration
â
Switch to pipeline view of the
demo project
. The
Commit Verification
configuration is set up to poll SCM periodically to trigger a build whenever there are new commit. Since you can not commit into the demo SCM repository, for demonstration purpose, you may manually run the configuration to verify latest commit.
After triggering the build, you will be brought to the
overview
page. When the build finishes, you may switch back to the pipelines page. You will see three big arrows connected together with each arrow representing a phase. You will also see that current SCM revision is pulled from
Commit Verification
phase and stops at
Deploy to Dev Servers
phase.
Now assume you are QA engineers, and have tested the commit deployed in development environment. You decided to recommend the commit by following the link of
Deploy to Dev Servers
in the pipeline and recommending the build.
Now go back to the
pipeline page
and the
Deploy to Dev Servers
phase can now be transited into next phase. Hover mouse over that phase, and hit the displayed
Promote
button, and you will see that next phase
Deploy to UAT Servers
is triggered.
Wait for a short period of time for the phase to be completed. Assume your users are satisfied with the new feature and again you play the role of some other one in your team to recommend the commit by following the link of
Deploy to UAT Servers
in the pipeline and recommending the build.
Now go back to the
pipeline page
and the
Deploy to UAT Servers
phase can now be transited into next phase. Hover mouse over that phase, and hit the displayed
Promote
button, and you will see that next phase
Deploy to Prod Servers
is triggered.
At this time, the new commit has finished its life cycle from verification to production.
Resolution
â
In QuickBuild build pipeline is based on the build promotion feature. Each phase we described is represented by a separate configuration, and transitions between different phases are accomplished with defined promotions. Check promotions definition of below configurations and there is a promotion named "Promote" defined for each of them with the target configuration set to next phase configuration.
Commit Verification
Run Smoke Tests
Deploy to Dev Servers
Deploy to UAT Servers
Please note that:
Promotion definition for the first two configurations are marked as
Auto Promotion
when the build is successful. This enables the commit transits to next phase without human intervention. However if the build fails, the commit will cease to transit to next phase.
Promotion definition for the last two configurations are NOT marked as
Auto Promotion
, and the promote condition is set to met only if build is recommended. This means that transition to important environments can only be enabled upon manual approved.
All promotion definitions passes the generated artifacts to next phase so that next phase works on the verified artifacts of previous phase instead of rebuilding the artifacts from scratch.
All promotion definitions passes the variable
version
to next phase so that next phase uses the same build version as previous phase for same commit. To support this, next build versions of all phases except the
commit verification
are set to inherit from parent configuration, which is set to
${vars.getValue("version")}
.
Last updated
on
Oct 23, 2024

================================================================================

Title: LDAP Authentication
URL: https://wiki.pmease.com/display/QB14/category/LDAP+Authentication
Breadcrumb:  > Build Setup Tutorials

ðï¸
Authenticate through Active Directory
Scenario
ðï¸
Authenticate through Fedora Directory Server
Scenario

================================================================================

Title: Single Sign-On
URL: https://wiki.pmease.com/display/QB14/category/Single+Sign-On
Breadcrumb:  > Build Setup Tutorials

ðï¸
Single Sign-On with Azure AD (SAML)
Purpose
ðï¸
Single Sign-On with Okta (SAML)
Purpose
ðï¸
Single Sign-On with Okta (OpenID)
Purpose
ðï¸
Single Sign-On with Windows Domain Account (Trusted Http Header)
Purpose

================================================================================

Title: Trigger Builds
URL: https://wiki.pmease.com/display/QB14/Trigger+Builds
Breadcrumb:  > Build Setup Tutorials

Build Setup Tutorials
Trigger Builds
Version: QB14
On this page
Trigger Builds
Situation
â
Project2 uses project1 through Maven or Ivy dependency outside of QuickBuild. When project1 finishes building, trigger project2 just to verify if project1 breaks project2.
Demonstration
â
Switch to
project1
, and hit the run button to build project1.
A new build of project1 will be generated, and a new build of
project2
will also be generated when build of project1 finishes.
Resolution
â
Switch to
step setting of project1
, a step is defined to trigger project2 after build step of project1 is finished. You may add as many trigger build steps here as you want, or you can arrange the step executin order to trigger other builds in any order.
Last updated
on
Oct 23, 2024

================================================================================

Title: Publish Reports
URL: https://wiki.pmease.com/display/QB14/Publish+Reports
Breadcrumb:  > Build Setup Tutorials

Build Setup Tutorials
Publish Reports
Version: QB14
On this page
Publish Reports
In Quickbuild (from Version 2.0), if we want to publish reports, we need add a publish step. Below gives an example for publishing JUnit reports, for other reports supported by Quickbuild, they are almost the same.
JUnit Tests with Ant
â
Quickbuild will not generate the original reports. Most of the reports should be generated by your build tools, such as Ant, Maven, NAnt, etc. In our example, we will generate JUnit by Ant, we will add a target in our build.xml:
<
target name
=
"junit"
depends
=
"compile"
>
<
property name
=
"junit.report.dir"
value
=
"target/reports/test-reports"
/
>
<
mkdir dir
=
"${junit.report.dir}"
/
>
<
mkdir dir
=
"${junit.report.dir}/test-out"
/
>
<
record
name
=
"${junit.report.dir}/test-output.txt"
append
=
"no"
action
=
"start"
/
>
<
!
--
NOTE
:
haltonfailure set
to
NO
or
else
the
Ant
will failed
--
>
<
junit printsummary
=
"yes"
haltonfailure
=
"no"
fork
=
"yes"
>
<
classpath refid
=
"test.classpath"
/
>
<
formatter type
=
"xml"
/
>
<
batchtest fork
=
"yes"
todir
=
"${junit.report.dir}/test-out"
>
<
fileset dir
=
"${test.home}"
>
<
include name
=
"**/*Test.java"
/
>
<
exclude name
=
"**/*AbstractTest.java"
/
>
<
/
fileset
>
<
/
batchtest
>
<
/
junit
>
<
!
--
junitreport is not required here
,
but we recommend
to
add
this
to
speed
up the later publish step
--
>
<
junitreport todir
=
"${junit.report.dir}"
>
<
fileset dir
=
"${junit.report.dir}/test-out"
>
<
include name
=
"TEST-*.xml"
/
>
<
/
fileset
>
<
/
junitreport
>
<
record
name
=
"${junit.report.dir}/test-output.txt"
action
=
"stop"
/
>
<
/
target
>
Here, we need notice that for most of the reports generation task, the 'haltonfailure' or something like this property should be set to
no
, or else the target for Ant or other build tools will stop. If we want to publish the full reports, it is recommended to set this kind of property to 'no'.
Now, we can test our build script from command line, and make sure the script can generate the test reports to directory ${junit.report.dir} correctly.
Publish JUnit Report
â
In Quickbuild, now we will add a configuration for our project. After add the configuration, we will add some steps to build and test our project. The steps we added in Quickbuild may look like:
First, we will use all default settings and fill in the required fields for those steps. The Publish JUnit Step may looks like:
Here, we only tell Quickbuild where to find the original reports by filling in field Report Files/Patterns. The directory we write here is the same as we specified in build.xml.
Ok, we can run the configuration now to see the results now. In my example, after running the configuration, we will find an overview section for JUnit will be displayed and a JUnit Report tab is also added on the left side:
By clicking the 'JUnit Report' tab on the left side, four child tabs will be displayed:
Distribute JUnit Tests
â
Sometimes, we will run our tests on different platform to make sure our product can support all of them. In this case, Quickbuild supports to publish those reports separately and display the reports via different report sets.
Below screen shot shows after we add the steps supported for such case:
Here, we defined below steps:
master, this step is a serial composition step which contains all other steps and this step will run on server.
checkout step, this step will check out the source code from the repository we defined and this step will run on server.
Distribute Tests step, this step is defined as a parall composition step which contains our test step and this step will run on server.
Windows Composition step, this step is a serial composition step which will run on a Windows node, this step need transfer the resources from parent node(because all the source files are checked out on server node) and this step contains:
Build and Run Tests on Windows step, this step is an Ant step which will build the source code and run junit task for testing on windows.
Publish JUnit Reports on Windows step, this step will publish the JUnit reports generated from previous step.
Linux Composition step, this step is same as Windows Composition step except that the step will run on a Linux node and this step also contains two child steps:
Build and Run Tests on Linux step
Publish JUnit Reports on Linux step
The below screen shots shows how we define these steps:
Windows Composition Step
Publish JUnit Reports On Windows Step
Last updated
on
Oct 28, 2024

================================================================================

Title: JIRA Integration
URL: https://wiki.pmease.com/display/QB14/JIRA+Integration
Breadcrumb:  > Build Setup Tutorials

Build Setup Tutorials
JIRA Integration
Version: QB14
On this page
JIRA Integration
Situation
â
Set up a configuration to generate builds of a project and achieve below purposes:
QuickBuild should use next unreleased version of that project in JIRA as version of the new build.
For JIRA issues marked as fixed in SCM commit comments, QuickBuild should update status of these issues in JIRA to be
resolved
under the developer's JIRA account.
QuickBuild should mark corresponding versions of the project in JIRA as
released
.
For all above resolved issues, QuickBuild should update the
fix version/s
field to include the build version.
When navigate to build detail, issue keys in the commit comments should be rendered as issue links.
User should be able to view all resolved/related issues in a particular build.
User should be able to view all builds and SCM changes relating to a particular issue at JIRA side.
Demonstration
â
Switch to
versions screen
of the demo JIRA instance. The next unreleased version is the same as next build version displayed at
QuickBuild side
. You will also find that all built versions at QuickBuild side are marked as released here.
Switch to
scm changes page of latest build of the demo project
. All issue keys in the commit message are hyper-linked to JIRA.
Switch to
issues page of latest build of the demo project
. All issues corresponding to current build are listed there, and QuickBuild has resolved all issues under the name of "robin" at JIRA side based on "fix" keywords found in robin's commit message.
Click any issue key in the issues page to get navigated to issue detail page in JIRA, and you will find that the issue's
fix version/s
field is updated to include current build version.
In the issue detail page opened above, you will find two additional tabs, respectively
QB Builds
, and
QB Changes
. The
QB Builds
tab displays all builds relating to this issue, while
QB Changes
tab displays all SCM changes relating to the issue. You may also be able to view/diff changed files in
QB Changes
tab.
Resolution
â
To get QuickBuild displaying JIRA issues:
Configure JIRA to accept remote API calls. Remote API call option can be turned on/off by logging in as JIRA administrator, switching to
Administration
tab, clicking
General Configuration
link at left side of the screen, and clicking the
edit configuration
link.
Set up JIRA server information at QuickBuild side by switching to the
JIRA server setting page
.
To configure QuickBuild to pick up next unreleased JIRA version as next build version, switch to
general setting page
and specify next build version as
Use first unreleased version of associated JIRA project
.
To configure QuickBuild to auto-update status of JIRA issues based on issue actions in SCM commit messages, you will need to add the
Update JIRA Issues
step as shown in
steps page of the demo project
. QuickBuild tries to update issues using developer's own JIRA account, and this required that:
The user name in SCM system can be mapped to a QuickBuild user. Taking the demo project for example, the user "robin" is mapped to QuickBuild user "robinshine" in
repository definition
. This requirement will be automatically met if your SCM system and QuickBuild have been configured to authenticate against the same LDAP system. Refer to the
LDAP Authentication
for details.
If user name/password of the mapped QuickBuild user is not the same as in JIRA, you will need to specify JIRA account by editing my setting page of the QuickBuild user. This requirement will be automatically met if QuickBuild and JIRA have been configured to authenticate against the same LDAP system. Refer to the
LDAP Authentication
for details.
To configure QuickBuild to auto-release corresponding JIRA versions and update
fix version/s
field of relevant issues, you will need to add the
Release JIRA Version
step as shown in
steps page of the demo project
. Also please make sure that the JIRA account specified at
JIRA server setting page
has below permissions:
Be able to release existing versions and create new versions in relevant projects in JIRA.
Be able to update issues of corresponding projects.
To configure JIRA to display
QB Builds
tab and
QB Changes
tab, do the following:
Install the QuickBuild plugin for JIRA following instructions in
this page
.
Start up JIRA, login as JIRA administrator, switch to Administration tab, and click the
QuickBuild Server
link at left side of the screen. In the QuickBuild servers page, we've specified below setting for this demo:
Server Name: Demo QuickBuild Server
Host URL:
https://demo.pmease.com
User name/password: specify the QuickBuild account with permission to access build changes
Associated Projects: TST=Demo/Build Setup Tutorials/JIRA Integration
Last updated
on
Oct 23, 2024

================================================================================

Title: Reports Aggregation
URL: https://wiki.pmease.com/display/QB14/Reports+Aggregation
Breadcrumb:  > Build Setup Tutorials

Build Setup Tutorials
Reports Aggregation
Version: QB14
On this page
Reports Aggregation
Scenario
â
Setup a configuration to act as dashboard of other configurations: it should reflect status of latest build of selected configurations, as well as aggregate various reports from those configurations.
Demonstration
â
Please visit
the demo aggregate configuration
. It acts as dashboard of its child configurations:
Status of this configuration is successful only if all its child configurations built successfully; otherwise, the failed configurations will be displayed.
For demonstration purpose, it is configured to only aggregate JUnit reports generated by child configurations. Various indicators such as success rate, test duration is the merge result of child test reports, and
the package view
displays packages coming from the child configurations, respectively
org.apache.commons.collections
, and
org.apache.commons.configuration
. Report statistics will reflect this aggregation as well.
Resolution
â
For each configuration need to be aggregated, add steps to publish report XML files as artifacts. Taking the
commons-collection
for example, the step
publish junit xml reports
is created to publish JUnit report xml files as artifacts.
In the aggregation configuration,
set up QuickBuild repositories
to checkout desired report xml files from desired configurations. When define these repositories, please make sure the
build
property is defined as
latest build
.
In the aggregation configuration,
set up steps
to:
Checkout from QuickBuild repositories defined above.
Checkout step will fail if corresponding configuration fails to build.
Publish desired reports using all retrieved report xml files.
Edit
general setting
of the aggregation configuration to set a periodical build schedule. With this setting, the aggregation configuration will build automatically to aggregate build status and reports if there are new builds generated in corresponding configurations.
Last updated
on
Oct 23, 2024

================================================================================

Title: Launch Build Agent On Demand
URL: https://wiki.pmease.com/display/QB14/category/Launch+Build+Agent+On+Demand
Breadcrumb:  > Build Setup Tutorials

ðï¸
GCP Integration
Situation
ðï¸
Retry Step On Spot VM
Situation
ðï¸
Amazon EC2 Integration
Situation
ðï¸
Microsoft Azure Integration
Situation
ðï¸
Kubernetes Integration
Situation

================================================================================

Title: Repository Path
URL: https://wiki.pmease.com/display/QB14/Repository+Path
Breadcrumb:  > References

References
Repository Path
Version: QB14
Repository Path
Repository path is used to refer to file in SCM systems. Example repository urls for different SCM systems:
Subversion
: the path is relative to Subversion root, WITH a leading "/".
/
my
-
app
/
trunk
/
pom
.
xml
Since the path is relative to Subversion root, above value will remain unchanged whether the checkout url defined in a Subversion repository is
svn://localhost/my-app
or
svn://localhost/my-app/trunk
.
CVS
: the path is relative to the CVS root, WITHOUT the leading "/"
my
-
app
/
trunk
/
pom
.
xml
Since the path is relative to the CVS root, above value will remain unchanged whether the checkout module defined in a CVS repository is
my-app
or
my-app/trunk
Perforce
: the path should be an absolute path in the Perforce server, including the depot part
//depot1/my-app/trunk/pom.xml
Visual SourceSafe
: the path is an absolute path in sourcesafe database, starting with "$/"
$
/
my
-
app
/
trunk
/
pom
.
xml
Since the path is relative to the sourcesafe root, above value will remain unchanged whether the checkout project defined in a VSS repository is
/
m
y
â
a
p
p
â
o
r
â
/my-app* or *
/
m
y
â
a
pp
â
or
â
/my-app/trunk
.
Accurev
: the path is relative to the depot root, WITHOUT the leading "/"
my
-
app
/
trunk
/
pom
.
xml
ClearCase
: the path is an absolute path in ClearCase, including the vob part:
/
vob1
/
my
-
app
/
trunk
/
pom
.
xml
StarTeam
: the path is relative to the view root, WITHOUT the leading "/"
my
-
app
/
trunk
/
pom
.
xml
Since the path is relative to the view root, above value will remain unchanged whether the source path defined in a StarTeam repository is
my-app
or
my-app/trunk
Git
: the path is relative to git repository root, WITHOUT the leading "/"
my
-
app
/
trunk
/
pom
.
xml
Mercurial
: the path is relative to repository root, WITHOUT the leading "/"
my
-
app
/
trunk
/
pom
.
xml
Bazaar
: the path is relative to repository root, WITHOUT the leading "/"
my
-
app
/
trunk
/
pom
.
xml
Team Foundation Server
: this path is relative to the repository root, starting with "$/"
$
/
my
-
app
/
trunk
/
pom
.
xml
Since the path is relative to the repository root, above value will remain unchanged whether the source control folder defined in TFS repository is
/
m
y
â
a
p
p
â
o
r
â
/my-app* or *
/
m
y
â
a
pp
â
or
â
/my-app/trunk
.
Last updated
on
Oct 23, 2024

================================================================================

Title: File Pattern Reference
URL: https://wiki.pmease.com/display/QB14/File+Pattern+Reference
Breadcrumb:  > References

References
File Pattern Reference
Version: QB14
On this page
File Pattern Reference
Definition
â
File patterns are widely used in QuickBuild to specify a set of directories or files. For example, the artifact publishing step has a property
File Patterns
which is used to specify files and directories to be published as artifacts.
File patterns are described using
EBNF
:
file patterns
::
=
file pattern
,
{
","
,
file pattern
}
file pattern
::
=
[
+
|
-
]
Ant
pattern
where:
Ant pattern
refers to
Ant based path patterns
File pattern can be constructed by prefixing"+" or "-" character before an Ant pattern:
if prefixed with "+", the file pattern will include files or directories specified in the Ant pattern (default)
if prefixed with "-", the file pattern will exclude files or directories specified in the Ant pattern
if not prefixed, the file pattern will include files or directories specified in the Ant pattern (it has the same effect as prefixing a "+" character)
File patterns are a series of file pattern connected with the comma character
Examples
â
We will use the artifact publishing step to give examples of the file patterns in QuickBuild. Let's suppose that:
The configuration workspace is located in
/opt/quickbuild2/configurations/1/workspace
, and it contains the following directories and files:
file0
.
zip
file0
.
doc
dir1
/
file1
.
zip
file1
.
doc
dir2
/
file2
.
zip
file2
.
doc
dir3
/
file3
.
zip
file3
.
doc
The build artifacts directory is located in
/opt/quickbuild2/builds/1/artifacts
The property
From Directory
of the artifact publishing step is left empty, which means that the workspace directory will be used as the base directory of the file pattern matching.
The property
Destination Directory
of the artifact publishing step is left empty, which means matched files and directories will be copied over to the artifacts directory.
Let's examine several file patterns to see what the artifacts directory will look like after the publishing step:
**
All files and directories will be published from the workspace directory to the artifacts directory recursively. The artifacts directory will look just the same as the workspace directory:
file0
.
zip
file0
.
doc
dir1
/
file1
.
zip
file1
.
doc
dir2
/
file2
.
zip
file2
.
doc
dir3
/
file3
.
zip
file3
.
doc
**/*.zip
All zip files will be published recursively. The artifacts direcory will look like:
file0
.
zip
dir1
/
file1
.
zip
dir2
/
file2
.
zip
dir3
/
file3
.
zip
*.zip
All zip files that are directly in the workspace directory will be published. The artifacts directory will look like:
file0
.
zip
**/*.zip,-dir2/**
Publishes all zip files recursively, but excludes all the files under the dir2 directory recursively. The artifacts
directory will look like:
file0
.
zip
dir1
/
file1
.
zip
**/*.zip,-dir2/*
Publishes all zip files recursively, but excludes all the files that are directly in the dir2 directory. The artifacts
directory will look like:
file0
.
zip
dir1
/
file1
.
zip
dir2
/
dir3
/
file3
.
zip
Last updated
on
Oct 23, 2024

================================================================================

Title: Kubernetes Integration
URL: https://wiki.pmease.com/display/QB14/Kubernetes+Integration
Breadcrumb:  > Build Setup Tutorials > Launch Build Agent On Demand

Build Setup Tutorials
Launch Build Agent On Demand
Kubernetes Integration
Version: QB14
On this page
Kubernetes Integration
Situation
â
Set up QuickBuild the same as tutorial
One Build For One Agent
, except that build agents should be started in Kubernetes cluster as necessary. Launched build agents should be able to be closed if they are idle for specified amount of time to save resource.
Resolution
â
Set up QuickBuild according to resolution section of tutorial
One Build For One Agent
.
Login to QuickBuild as administrator and switch to administration menu, then follow the
plugin management
link, and edit plugin setting of
Kubernetes Plugin
to provide a config file for QuickBuild to access Kubernetes.
Create appropriate build agent docker image following [this guide](Launch Node in Kubernetes.html#LaunchNodeinKubernetes-createbuildagentimage) if necessary.
Switch to grid page and follow the
Cloud Profiles
link to bring out the cloud profiles page. Add a cloud profile with
node launch setting
specified as
Launch Node into Kubernetes
and fill relevant Kubernetes node launch options. Specifically the
docker image
should be filled with the the build agent image you created previously.
QuickBuild will proceed to do a test launch of your defined cloud profile to grab system/user attribute of node launched by your profile. Grabbed system/user attributes will be used afterwards to match against node matcher setting of build steps to determine which profile has to be used to launch node if no active agents satisfy the criteria. Only after test launch the profile can be used by builds to launch node on demand. Normally the test launch should be done in two or three minutes, if it takes too long, please check instance status as well as agent log at Kubernetes pod side.
Now run the build. If configured correctly, QuickBuild will launch build agent using your defined cloud profile to run the build. By default the launched build agent will stay active for 30 minutes before terminating. If more builds are set to run in the same time, more agents will be launched to accommodate the concurrency. You may check all launched instances by examining the
active launched nodes
tab of certain cloud profile, and may manually terminate them there.
Last updated
on
Oct 23, 2024

================================================================================

Title: In-place upgrade
URL: https://wiki.pmease.com/display/QB14/In-place+upgrade
Breadcrumb:  > Upgrade Guide > Procedures

Upgrade Guide
Procedures
In-place upgrade
Version: QB14
In-place upgrade
Stop your QuickBuild server. You do not need to stop agents since they will be auto-upgraded after server is upgraded.
Extract installation package of new version to a temp directory.
Open a command line window, and switch to
bin
sub directory under extracted directory above. Run command
upgrade.(bat|sh) <install directory of current QuickBuild>
to upgrade QuickBuild in-place. The upgrade script will update target directory to new version so that QuickBuild installation directory remains unchanged.
After the upgrade, start your current QuickBuild instance. Agents will be auto-updated after server startup. It will take a while for them to appear in the build grid.
Verify server and agent installation by running some builds.
Last updated
on
Oct 23, 2024

================================================================================

Title: Upgrade Data and Start Agent
URL: https://wiki.pmease.com/display/QB14/Upgrade+Data+and+Start+Agent
Breadcrumb:  > Upgrade Guide > Procedures

Upgrade Guide
Procedures
Upgrade Data and Start Agent
Version: QB14
Upgrade Data and Start Agent
Stop QuickBuild server of previous version, you do not need to stop agents since they will be auto-upgraded after server is upgraded.
Extract installation package of new version to a new directory.
Open a command line window, and switch to the
bin
sub directory under the
new version
's installation directory. Run command
migrate.(bat|sh) <install directory of previous QuickBuild version>
to migrate from previous QuickBuild version.
For windows platform, NT service will be installed automatically for the new QuickBuild server if old QuickBuild server is configured to run as NT service. However the new service runs with local system account initially and the "interact with desktop" option is disabled. You will need to change this manually after migration if necessary.
Start QuickBuild server in new installation directory and agents will be auto-updated.
Some build and user agents may not get started automatically after upgrade. You may check inactive node list from grid page and start them manually by logging to the machine with appropriate users and running command
<agent install dir>/agent.(sh|bat) start
. This only happens when upgrading QB4 to QB5 as 5.0 introduces the bootstrap upgrading mechanism but unfortunately cause the agent to stop for the first upgrade. After this start, the agent will be able to update and start automatically when upgrade to new versions even if the bootstrap libraries are changed.
Verify server and agent installation by running some builds.
Last updated
on
Oct 23, 2024

================================================================================

Title: Backup and Restore Data
URL: https://wiki.pmease.com/display/QB14/Backup+and+Restore+Data
Breadcrumb:  > Upgrade Guide > Procedures

Upgrade Guide
Procedures
Backup and Restore Data
Version: QB14
Backup and Restore Data
In this procedure, we assume that installation directory of 4.0.61 or 4.0.61 server is
/quickbuild-old
, and new version of QuickBuild is extracted to directory
/quickbuild-new
.
Login to old QuickBuild web UI as administrator, switch to menu
Administration/Database Backup
, and backup the database to file
backup.zip
. After the backup, you should be able to find the file
/quickbuild-old/backup.zip
.
Stop old QuickBuild server process. On Windows platform, please also run
/quickbuild-old/bin/server.bat remove
to unregister the QuickBuild NT service if it is installed previously. On Windows Vista and Windows 7 system with UAC enabled, you will need to run this command as administrator.
Copy all files under
/quickbuild-old/conf
to
/quickbuild-new/conf
except for
wrapper.conf
and
wrapper_license.conf
.
Edit file
/quickbuild_new/conf/hibernate.properties
to remove below line:
hibernate
.
hbm2ddl
.
auto
=
update
If you've adjusted memory setting (property
wrapper.java.maxmemory
), and java command (property
wrapper.java.command
) in
/quickbuild-old/conf/wrapper.conf
, make the same adjustment in
/quickbuild-new/conf/wrapper.conf
.
If you run QuickBuild with Sun JDK or
OpenJDK
, make sure to edit file
<QuickBuild install dir>/conf/wrapper.conf
and add below entry to avoid using up permgen space:
wrapper
.
java
.
additional
.
4
=
-
XX
:
MaxPermSize
=
256
m
Copy all files under the
/quickbuild-old/asset
to
/quickbuild-new/resource
except for
default_html_notification.vm
,
default_plain_notification.vm
, and
velocity.properties
.
If you are connecting to external database in old QuickBuild (please check file
/quickbuild-old/conf/hibernate.properties
for sure), manually delete the database using your database tool, and create a new one with the same name.
Open a command line window, switch to directory
/quickbuild-new/bin
, and run command
restore.(bat|sh)
/quickbuild-old/backup.zip_ to migrate and restore data of old QuickBuild.
Run command
/quickbuild-new/bin/server.bat install
to install QuickBuild NT service if necessary. On Windows Vista and Windows 7 system with UAC enabled, you will need to
open the command prompt window as Administrator
before running command
/quickbuild-new/bin/server.bat install
.
Startup new QuickBuild server by running
/quickbuild-new/bin/server.bat console
and check if data has been restored successfully.
Build and user agents may not get started automatically after upgrade. You may check inactive node list from grid page and start them manually by logging to the machine with appropriate users and running command
<agent install dir>/agent.(sh|bat) start
. This only happens when upgrading QB4 to QB5 as 5.0 introduces the bootstrap upgrading mechanism but unfortunately cause the agent to stop for the first upgrade. After this start, the agent will be able to update and start automatically when upgrade to new versions even if the bootstrap libraries are changed.
Verify server and agent installation by running some builds.
Last updated
on
Oct 23, 2024

================================================================================

Title: Upgrade 2.0.x
URL: https://wiki.pmease.com/display/QB14/Upgrade+2.0.x
Breadcrumb:  > Upgrade Guide > Procedures

Upgrade Guide
Procedures
Upgrade 2.0.x
Version: QB14
Upgrade 2.0.x
In this procedure, we assume that installation directory of 2.0.x server is
/quickbuild-old
, and new version of QuickBuild is extracted to directory
/quickbuild-new
.
Login to 2.0.x as administrator, switch to menu
Administration/Database Backup
, and backup the database to file
backup.zip
. After the backup, you should be able to find the file
/quickbuild-old/backup.zip
.
Stop QuickBuild 2.0.x server process. On Windows platform, please also run
/quickbuild-old/bin/service-uninstall.bat
to unregister the QuickBuild NT service if it is installed previously. On Windows Vista and Windows 7 system with UAC enabled, you will need to run this command as administrator.
Copy all files under
/quickbuild-old/conf
to
/quickbuild-new/conf
except for
wrapper.conf
and
wrapper_license.conf
.
Copy all files under
/quickbuild-old/lib
to
/quickbuild-new/plugins/com.pmease.quickbuild.libs
.
Copy all files under the
/quickbuild-old/resource
to
/quickbuild-new/resource
except for
default_html_notification.vm
,
default_plain_notification.vm
, and
velocity.properties
.
Edit file
/quickbuild-new/conf/hibernate.properties
to add below entry if it does not exist already:
hibernate
.
validator
.
apply_to_ddl
=
false
If you've adjusted memory setting (property
wrapper.java.maxmemory
), and java command (property
wrapper.java.command
) in
/quickbuild-old/conf/wrapper.conf
, make the same adjustment in
/quickbuild-new/conf/wrapper.conf
.
If you are connecting to external database in old QuickBuild (please check file
/quickbuild-old/conf/hibernate.properties
for sure), manually delete the database using your database tool, and create a new one with the same name.
Open a command line window, switch to directory
/quickbuild-new/bin
, and run command
restore.(bat|sh)
/quickbuild-old/backup.zip_ to migrate and restore data of old QuickBuild.
Run command
/quickbuild-new/bin/server.bat install
to install QuickBuild NT service if necessary. On Windows Vista and Windows 7 system with UAC enabled, you will need to
open the command prompt window as Administrator
before running command
/quickbuild-new/bin/server.bat install
.
Startup new QuickBuild server by running
/quickbuild-new/bin/server.bat console
and check if data has been restored successfully.
If you've configured build agents,
re-install build agents
following below steps:
Backup the file
conf/attributes.properties
under build agent's installation directory.
Delete build agent's installation directory.
Install build agents following
this guide
.
Overwrite file
conf/attributes.properties
under build agent's installation directory with the file backed up previously.
If user agents are used in your team, tell your developer to
re-install user agents
following below steps:
Backup the file
conf/attributes.properties
under user agent's installation directory.
Delete user agent's installation directory.
Install user agents following
this guide
.
Overwrite file
conf/attributes.properties
under user agent's installation directory with the file backed up previously.
Verify the server and agent installation by running some builds.
Last updated
on
Oct 23, 2024

================================================================================

Title: Upgrade QuickBuild 1.x
URL: https://wiki.pmease.com/display/QB14/Upgrade+QuickBuild+1.x
Breadcrumb:  > Upgrade Guide > Procedures

Upgrade Guide
Procedures
Upgrade QuickBuild 1.x
Version: QB14
On this page
Upgrade QuickBuild 1.x
Upgrade procedure
â
Login to QuickBuild 1.x as administrator, switch to page
Administration/Backup Database
, and backup the database as
backup.xml
under QuickBuild 1.x's installation directory.
Install new QuickBuild version following the
installation guide
.
Open a command prompt window, switch to sub directory
bin
under QuickBuild's installation directory, and run command
migrate.sh
(or
migrate.bat
on Windows platform) with a param pointing to QuickBuild 1.x's installation directory.
After migration, please check the file
migrate/migrate-log.html
under QuickBuild's installation directory for all settings that can not be migrated and needs to be re-configured.
Important changes that affect 1.x users
â
QuickBuild is no longer able to deploy as a WAR into other application servers. Instead, it always run as a standalone application, either in foreground mode, or in service mode.
Configurations can now be added/removed/copied/moved directly at dashboard page if login as administrator.
Full name of configuration is now separated by character '/', instead of '.'. For example, to refer to configuration
project1
defined under
root
, the name
root/project1
should be used instead of
root.project1
.
Everything defined in the configuration is now inheritable except for
name
and
description
.
Only QuickBuild administrators (can define more than one admin account) can now edit settings/repositories/steps of configurations for security reasons.
Configuration settings such as build necessary condition, variables definitions, promote settings, build clean up strategies are placed into advanced settings tab.
Expressions have been changed a lot. Due to complexity of expressions, we can only migrate default expressions that have not been changed by users. For customized expressions, please rewrite them based on the scripting help, which can be accessed by poining mouse to the help icon when edit related properties.
By default only one promote destination can be defined now. However multiple promote destinations can be enabled by using variables and scripts as explained in help of property
configuration
when defined the promotion setting.
Promotion mechanism is simplified and a QuickBuild repository is no longer necessary in order to fetch files from promotion source. Instead, promotion files are specified when define the promotion settings of related configurations.
The step type
Send Notification
is now removed. To specify receivers and conditions of build notifications, please edit advanced settings of related configurations, and enable proper notifications.
By default, configuration workspaces (previously named
configuration checkout
directory) are created under the workspace sub directory under the configuration directory. However workspace directories of different configurations can be organized to match the configuration hierarchy with the help of scripting. To demonstrate this, assume we have below configuration hierarchy:
root
projectA
componentA1
componentA2
projectB
componentB1
componentB2
Now we need to place workspaces of all configuration under the directory
/workspace
hierarchically. To do this, just define workspace property of the root configuration as below:
/
workspace
/
$
{
current
.
pathName
}
The
build cleanly
option of configuration is removed since it is not flexible. Instead, each step can be configured to clean up the workspace conditionally (through the property
workspace cleanup condition
), and this gives user the flexibility of defining custom behavior of clean build. For example, if you have a checkout step checking out code at agent1, and deliver code to agent2 to build with a build step. You may want to define two build type:
clean build
: workspace of agent running the build step needs to be cleaned up before running the step, while workspace of the agent running checkout step should remain untouched.
increment build
: workspaces of both agents should remain untouched.
For scheduled builds, the increment build type should be used; for manual builds, a dialog should be presented to give user a chance to decide whether or not perform a clean build.
To accomplish this, define a configuration variable named
buildCleanly
with the value being
false
, and set the
prompt setting
of the variable as
checkbox
. Then define property
workspace cleanup condition
of checkout step as
false
, and define the same property of build step as
vars.get("buildCleanly").booleanValue
.
In this way, you've defined your own notion of clean/increment build. You can even define three or more build types by using the
selection box
prompt setting.
By default QuickBuild does not prompt for build version when manually triggering a build. To get build version prompted, define a variable with prompt setting being
text input
, and reference value of this variable in
next build version
property of the configuration like below:
vars
.
get
(
"buildVersion"
)
Here
buildVersion
refers to name of the variable defined above. Further more, value of the variable can be specified as:
version
-
prefix
-
$
{
vars
.
get
(
"nameOfBuildNumberVariable"
)
.
increase
(
)
}
Then version of the build will be auto-increasing if user has not specified value of the variable or if the build is triggered by a scheduler.
By default QuickBuild does not prompt for build version when promoting a build. However, version of resulting build can be controlled using almost the same techinque as specifying build version when manually triggers a build mentioned above, with the exception that the variable should be defined as a promotion variable in promotion setting section of the configuration. Specifically if you want to have the resulting build always has the same version as the promoted build, just set the variable as not prompted and specify value of the promote variable as:
$
{
build
.
version
}
For Accurev users:
By default QuickBuild does not sync replica when detecting changes. To enable the sync, please edit Accurev plugin setting by navigating to page
Administration/Plugin Management
, and set proper value for property
replica sync condition
. For example, this condition can be defined as
true
so that all defined Accurev repository should sync replica before detecting changes, or can be defined as
vars.get("syncReplica").booleanValue
, so that the configuration variable
syncReplica
can be used to control whether or not sync replica when the configuration is triggered.
Reference tree will always be created now for build purpose.
For CVS users: Multiple modules with different labels/branches can not be defined to checkout inside a single CVS repository for simplicity reasons. If you want to check out from different modules of different labels or branches, please define multiple CVS repositories and check out from them respectively.
For StarTeam users: Modules concept is removed and multiple views can not be defined to checkout inside a single StarTeam repository for simplicity reasons. If you want to check out from different views, please define multiple StarTeam repositories and check out from them respectively.
For Subversion users: Modules concept is removed and only one checkout url can be defined in a single Subversion repository for simplicity reasons. If you want to check out from different urls, please define multiple Subversion repositories and check out from them respectively.
For Visual SourceSafe users: Modules concept is removed and only one project can be defined in a single Subversion repository for simplicity reasons. If you want to check out from different projects, please define multiple VSS repositories and check out from them respectively.
Last updated
on
Oct 23, 2024

================================================================================

Title: Upgrade Luntbuild
URL: https://wiki.pmease.com/display/QB14/Upgrade+Luntbuild
Breadcrumb:  > Upgrade Guide > Procedures

Upgrade Guide
Procedures
Upgrade Luntbuild
Version: QB14
Upgrade Luntbuild
Please follow below procedure to migrate from Luntbuild:
Migrate Luntbuild data to QuickBuild 1.x format. To do this, please visit
https://build.pmease.com/build/28.latest
, download QuickBuild 1.x, and follow instructions in the readme file to install QuickBuild 1.x and migrate data from Luntbuild.
After migrating Luntbuild to QuickBuild 1.x,
follow this guide
to migrate QuickBuild 1.x data to current version.
Last updated
on
Oct 23, 2024

================================================================================

Title: Upgrade Data
URL: https://wiki.pmease.com/display/QB14/Upgrade+Data
Breadcrumb:  > Upgrade Guide > Procedures

Upgrade Guide
Procedures
Upgrade Data
Version: QB14
Upgrade Data
Stop QuickBuild server of previous version, you do not need to stop agents since they will be auto-upgraded after server is upgraded.
Extract installation package of new version to a new directory.
Open a command line window, and switch to the
bin
sub directory under the
new version
's installation directory. Run command
migrate.(bat|sh) <install directory of previous QuickBuild version>
to migrate from previous QuickBuild version.
For windows platform, NT service will be installed automatically for the new QuickBuild server if old QuickBuild server is configured to run as NT service. However the new service runs with local system account initially and the "interact with desktop" option is disabled. You will need to change this manually after migration if necessary.
Start QuickBuild server in new installation directory and agents will be auto-updated. It will take a while for them to appear in the build grid.
Verify server and agent installation by running some builds.
Last updated
on
Oct 23, 2024

================================================================================

Title: Resource Management
URL: https://wiki.pmease.com/display/QB14/Resource+Management
Breadcrumb: 

Version: QB14
Resource Management
Table Of Contents
One Build For One Agent
Exclusive Deployment
Last updated
on
Oct 23, 2024

================================================================================

Title: RESTful API
URL: https://wiki.pmease.com/display/QB14/RESTful+API
Breadcrumb: 

Version: QB14
RESTful API
With the
RESTful API
introduced in QuickBuild 2.1, external system can interact with QuickBuild through standard http methods such as get, put, post and delete, in regardless of the programming language the external system is using.
This chapter explains how to work with this RESTful API. To facilitate the explanation, we assume that the QuickBuild server url is
http://localhost:8810
, and the administrator account is
admin
, and its password is
admin
. We also use
curl
to demonstrate the interaction with QuickBuild RESTful API.
Table Of Contents
Available Clients
Get API Version
Interact with Audits
Interact with Configurations
Interact with Builds
Interact with Latest Builds
Interact with Build Requests
Trigger Build via GET Request
Interact with Users
Interact with Groups
Interact with Group Memberships
Interact with Dashboards
Interact with Group Share
Interact with User Share
Interact with Cloud Profiles
Interact with Configuration Authorizations
Interact with Resources
Interact with Agent Tokens
Get System Attributes of Grid Node
Get and Set User Attributes of Grid Node
Interact with Reports
Interact with Changes
Interact with Issues
Query Build Notifications
Query Grid Measurements
Access Information of Published Files
Interact with Build Agents
Backup Database
Pause System
Resume System
Check System Pause Information
Retrieve Object Identifier
Last updated
on
Oct 23, 2024

================================================================================

Title: Reinstall Agents
URL: https://wiki.pmease.com/display/QB14/Reinstall+Agents
Breadcrumb:  > Upgrade Guide > Procedures

Upgrade Guide
Procedures
Reinstall Agents
Version: QB14
On this page
Reinstall Agents
Reinstall build agents
â
Backup the file
conf/attributes.properties
under build agent's installation directory.
Delete build agent's installation directory.
Install build agents following
this guide
.
Overwrite file
conf/attributes.properties
under build agent's installation directory with the file backed up previously.
Reinstall user agents
â
Backup the file
conf/attributes.properties
under user agent's installation directory.
Delete user agent's installation directory.
Install user agents following
this guide
.
Overwrite file
conf/attributes.properties
under user agent's installation directory with the file backed up previously.
Last updated
on
Oct 23, 2024

================================================================================

Title: Configuration Dashboard
URL: https://wiki.pmease.com/display/QB14/Configuration+Dashboard
Breadcrumb:  > User's Guide > Working with Configurations

User's Guide
Working with Configurations
Configuration Dashboard
Version: QB14
Configuration Dashboard
A configuration specific dashboard to display brief information of a configuration, including description, next build version, overall build success rate, average build duration, error messages, recent builds, and pending build requests.
Last updated
on
Oct 28, 2024

================================================================================

Title: Configuration Navigation
URL: https://wiki.pmease.com/display/QB14/Configuration+Navigation
Breadcrumb:  > User's Guide > Working with Configurations

User's Guide
Working with Configurations
Configuration Navigation
Version: QB14
Configuration Navigation
There are several ways to navigate between configurations in QuickBuild:
Navigate to configuration from dashboard
Navigate to configuration through configuration chooser or breadcrumb
Navigate to configuration from children tab
Last updated
on
Oct 28, 2024

================================================================================

Title: Run Configuration
URL: https://wiki.pmease.com/display/QB14/Run+Configuration
Breadcrumb:  > User's Guide > Working with Configurations

User's Guide
Working with Configurations
Run Configuration
Version: QB14
Run Configuration
Configuration can be triggered manually through configuration dashboard or through the configuration toolbar.
Run configuration through configuration dashboard
Run configuration through configuration toolbar
After a configuration is triggered, QuickBuild will switch to display latest build of the configuration. If the configuration is running without any error, you will see the newly generated build after several seconds.
Configuration can also be triggered by the scheduler. Refer to the administrator's guide on how to do this.
Last updated
on
Oct 28, 2024

================================================================================

Title: Add configuration
URL: https://wiki.pmease.com/display/QB14/Add+configuration
Breadcrumb:  > User's Guide > Working with Configurations

User's Guide
Working with Configurations
Add configuration
Version: QB14
Add configuration
To add child configuration, please login as administrator, select the configuration under which you want to add a child, and click the add button as demonstrated below:
The newly added configuration will inherit settings from parent configuration until you've override them.
info
This operation is only available to administrators.
Last updated
on
Oct 23, 2024

================================================================================

Title: Copy Configurations
URL: https://wiki.pmease.com/display/QB14/Copy+Configurations
Breadcrumb:  > User's Guide > Working with Configurations

User's Guide
Working with Configurations
Copy Configurations
Version: QB14
Copy Configurations
New configurations can also be added by copying an existing configuration shown as below:
info
This operation is only available to administrators.
Last updated
on
Oct 28, 2024

================================================================================

Title: Delete Configurations
URL: https://wiki.pmease.com/display/QB14/Delete+Configurations
Breadcrumb:  > User's Guide > Working with Configurations

User's Guide
Working with Configurations
Delete Configurations
Version: QB14
Delete Configurations
Configuration can be deleted by selecting the configuration and click the delete button as shown below:
To delete multiple child configurations at the same time, please switch to children page, select child configurations you want to delete, and hit the delete button, as shown below:
danger
Warn
When a configuration is selected to be deleted, all its descendent configurations and all builds contained in these configurations will also be deleted.
info
This operation is only available to administrators.
Last updated
on
Oct 28, 2024

================================================================================

Title: Move Configurations
URL: https://wiki.pmease.com/display/QB14/Move+Configurations
Breadcrumb:  > User's Guide > Working with Configurations

User's Guide
Working with Configurations
Move Configurations
Version: QB14
Move Configurations
To move configurations to be under another parent, please do the following:
Login as administrator and switch to children page of current parent of the configuration you want to move.
Select one or more child configurations from there, and click the move button
Select new parent of these configurations.
This process is demonstrated with below screenshot:
info
This feature can also be used to manually archive inactive configurations by parenting them to some un-used configurations.
info
This operation is only available to administrators.
Last updated
on
Oct 23, 2024

================================================================================

Title: Configuration Settings
URL: https://wiki.pmease.com/display/QB14/Configuration+Settings
Breadcrumb:  > User's Guide > Working with Configurations

User's Guide
Working with Configurations
Configuration Settings
Version: QB14
Configuration Settings
Configuation setting menu will be available if current user is allowed to view configuration settings:
Most of the configuration settings are inheritable. Taking configuration schedule for example, assume below configuration hierarchy:
root
project1
qa
If configuration
root/project1
and
root/project1/qa
do not define their own schedules, while configuration
root
defines a schedule which triggers every 5 minutes, the configuration
root/project1/qa
will inherit schedule defined in configuration
root
and consequently be triggered every 5 minutes. If a schedule is defined in
root/project1
, that schedule will be used for
root/project1/qa
instead.
info
Configuration settings can only be edited by users with permission to edit configuration settings.
Last updated
on
Oct 28, 2024

================================================================================

Title: Workspace Tab
URL: https://wiki.pmease.com/display/QB14/Workspace+Tab
Breadcrumb:  > User's Guide > Working with Configurations

User's Guide
Working with Configurations
Workspace Tab
Version: QB14
Workspace Tab
Workspace
tab will be visible to users who have permission to access workspace of current configuration. Each node has its own workspace for each configuration as demonstrated below:
Workspace relative path
When mentioning a file (or directory)'s workspace relative path, we mean the file path relative to the workspace. Workspace relative path can be determined easily from workspace tab as shown in the above screenshot.
Clean workspace
Workspace cleanup will be necessary if you want to do a clean build or if workspace files are out of sync with SCM. Workspace files may got out of sync if:
Switch to use a different SCM, or different address of the same SCM.
The SCM server is restored to previous status which does not contain revision in current workspace.
Last updated
on
Oct 28, 2024

================================================================================

Title: Storage tab
URL: https://wiki.pmease.com/display/QB14/Storage+tab
Breadcrumb:  > User's Guide > Working with Configurations

User's Guide
Working with Configurations
Storage tab
Version: QB14
Storage tab
Storage tab displays
Storage Directory
of current configuration. Please note that multiple configurations may share the same storage directory.
Last updated
on
Oct 28, 2024

================================================================================

Title: Display Custom Build Info
URL: https://wiki.pmease.com/display/QB14/Display+Custom+Build+Info
Breadcrumb:  > User's Guide > Working with Builds

User's Guide
Working with Builds
Display Custom Build Info
Version: QB14
Display Custom Build Info
Custom build info can be displayed in build summary section and build history table by defining custom fields in advanced setting of the configuration like below:
In this screenshot, we define a custom column to display Subversion revision used by the build via repository
myrepo
, then QuickBuild will display build summary info as below:
And build history page as below:
Last updated
on
Oct 28, 2024

================================================================================

Title: Build Navigation
URL: https://wiki.pmease.com/display/QB14/Build+Navigation
Breadcrumb:  > User's Guide > Working with Builds

User's Guide
Working with Builds
Build Navigation
Version: QB14
Build Navigation
Navigate to latest build from dashboard
Navigate between builds using build navigator
Navigate to latest build using build chooser
{#BuildNavigation-buildhistory}Navigate to build history
{#BuildNavigation-findbuilds}Find desired builds
Last updated
on
Oct 28, 2024

================================================================================

Title: Build Dashboard
URL: https://wiki.pmease.com/display/QB14/Build+Dashboard
Breadcrumb:  > User's Guide > Working with Builds

User's Guide
Working with Builds
Build Dashboard
Version: QB14
Build Dashboard
Build dashboard page gives an overview of current build.
Last updated
on
Oct 28, 2024

================================================================================

Title: Run Build
URL: https://wiki.pmease.com/display/QB14/Run+Build
Breadcrumb:  > User's Guide > Working with Builds

User's Guide
Working with Builds
Run Build
Version: QB14
Run Build
Build can be manually triggered by
running configuration
. After a build is triggered, it will be put into the queue. If there are no idle threads in the queue, the build will wait until a free thread is available as demonstrated below:
The build will then be put into running status if it is picked up by a free thread in the queue. Build log tab will display latest 500 log entries and will be auto-refreshed while the build is running.
danger
The step status graph and build log tab is only visible to users who are allowed to access build logs.
After the build finished, the step status graph will disappear from the build overview page. However, it can be brought out by clicking the
steps
tab like below:
The build log tab will display the full build log after build finishes.
Last updated
on
Oct 28, 2024

================================================================================

Title: Recommend Build
URL: https://wiki.pmease.com/display/QB14/Recommend+Build
Breadcrumb:  > User's Guide > Working with Builds

User's Guide
Working with Builds
Recommend Build
Version: QB14
Recommend Build
Successful builds can be recommended by clicking the recommend button. After recommendation, a star icon will appear beside the build version. This functionality can be used to suggest good build.
A recommended build can be un-recommended later on.
danger
Please note that the recommend and un-recommend button is only visible to users who are allowed to recommend builds.
Last updated
on
Oct 28, 2024

================================================================================

Title: Promote Build
URL: https://wiki.pmease.com/display/QB14/Promote+Build
Breadcrumb:  > User's Guide > Working with Builds

User's Guide
Working with Builds
Promote Build
Version: QB14
Promote Build
Build promotion
can be used to manage build life cycle in QuickBuild. A build can be promoted to another build if all below conditions are satisfied:
Current configuration is enabled for build promotion.
Current user is authorized with the permission to promote build in this configuration.
The build is recommended, or if the build is successful and the "recommended build only" option is not enabled for build promotion setting.
In a build promotion process, the source build refers to the build being promoted. Below is a screenshot of build being promoted:
The destination build in a promotion process represents the build being promoted to. The destination build will link back to the source build after the promotion. The source link can only be displayed if the source build resides on the same server as the destination build.
{#PromoteBuild-buildchanges}In a promotion process, changes will be calculated against previous build of the destination build, instead of source build. Assume below scenario:
Build
QA1
contains change1, and is promoted to
Release1
.
Build
QA2
contains change2. It is not promoted.
Build
QA3
contains change3, and is promoted to
Release2
.
When calculate changes for
Release2
, the base build will be
Release1
. Hence the calculated changes of
Release2
will be change2 and change3.
Refer to
Working with Changes
for details of build changes.
Last updated
on
Oct 28, 2024

================================================================================

Title: Stop Build Forcibly
URL: https://wiki.pmease.com/display/QB14/Stop+Build+Forcibly
Breadcrumb:  > User's Guide > Working with Builds

User's Guide
Working with Builds
Stop Build Forcibly
Version: QB14
Stop Build Forcibly
Build can be forcibly stopped by clicking the stop button as below:
To stop multiple builds, please login as administrator and switch to
queues
tab
Last updated
on
Oct 28, 2024

================================================================================

Title: Delete Build
URL: https://wiki.pmease.com/display/QB14/Delete+Build
Breadcrumb:  > User's Guide > Working with Builds

User's Guide
Working with Builds
Delete Build
Version: QB14
On this page
Delete Build
Delete builds manually
â
Build can only be deleted if current user has permission to delete builds in current configuration. After a build is deleted from the build page, the latest build in the configuration will be displayed. To delete multiple builds in the same time, one has to [navigate to build history page](Build Navigation.html#BuildNavigation-buildhistory) first. As an
administrator
, one can also [search desired builds](Build Navigation.html#BuildNavigation-findbuilds) and delete them batchly from the find result page.
Delete builds automatically
â
In a busy system, number of builds increase rapidly. This may consume a lot of disk spaces, and the system may respond slowly for certain operations if there are large number of builds. In such case, it is convenient to delete unwanted builds automatically if certain condition is satisfied. This can be done by specifying build cleanup strategy in advanced settings of related configurations. Currently two cleanup strategies are supported: reserve by days, and reserve by count. Once a cleanup strategy is defined for a configuration, all ocnfigurations in the subtree will use the same strategy unless a descendent configuration overrides this strategy.
Last updated
on
Oct 23, 2024

================================================================================

Title: RSS Feeds
URL: https://wiki.pmease.com/display/QB14/RSS+Feeds
Breadcrumb:  > User's Guide > Working with Builds

User's Guide
Working with Builds
RSS Feeds
Version: QB14
RSS Feeds
RSS link will be displayed in [build history page](Build Navigation.html#BuildNavigation-buildhistory). Clicking this link will get a RSS feed for all builds matching specified status. The filter options are ignored for RSS feeds. For example, to get RSS feed of failed builds, just select the
Failed Builds
from the build chooser, and then click the RSS link button in the result page as demonstrated below:
Last updated
on
Oct 28, 2024

================================================================================

Title: Dependent and Dependency Builds
URL: https://wiki.pmease.com/display/QB14/Dependent+and+Dependency+Builds
Breadcrumb:  > User's Guide > Working with Builds

User's Guide
Working with Builds
Dependent and Dependency Builds
Version: QB14
Dependent and Dependency Builds
Build dependency is handled in QuickBuild through
QuickBuild repository
. If build A uses artifacts of build B to accomplish its build, the following statement will hold to true:
Build A depends on build B
B is a dependency build of A
A is a dependent build of B
For a particular build, its dependency and dependent builds can be accessed as below:
Last updated
on
Oct 28, 2024

================================================================================

Title: Diagnose Build Failures
URL: https://wiki.pmease.com/display/QB14/Diagnose+Build+Failures
Breadcrumb:  > User's Guide > Working with Builds

User's Guide
Working with Builds
Diagnose Build Failures
Version: QB14
Diagnose Build Failures
Access build failure message from dashboard
Access build failure message from overview screen
You may also open the build log directly to investigate the error. Note that the build log tab is only visible to users who are allowed to access build log.
Last updated
on
Oct 28, 2024

================================================================================

Title: Working with Issue Tracker
URL: https://wiki.pmease.com/display/QB14/Working+with+Issue+Tracker
Breadcrumb: 

Version: QB14
On this page
Working with Issue Tracker
QuickBuild works with issue tracker tightly:
Hyperlink the issues in SCM commit messages to issue tracker
Generate an issues report which will show you all the issues related with a build and also you can list all issues from a specified build.
List all changed files against an issue
Update issue status via SCM commit messages
Release a version/milestone to issue tracker
Add the fixed version/milestone for issues mentioned in SCM commit messages
Create an issue via a step which is useful if you want to track the build status in your issue tracker
Developers can now update their issues via
commit commands
and need not update their issues manually from Issue Tracker GUI. Moreover, QuickBuild can manage or release a version to issue tracker and also update fixed version field or something equivalent of the issues which can help you generate the release notes easily.
Supported Issue Tracker
â
Below table lists the supported issue tracker:
Issue Tracker
Version
Atlassian Jira
3.13.3 or higher
Bugzilla
3.4 or higher
Trac
0.11 or higher
CollabNet TeamForge
5.4 or higher
Redmine
1.1 or higher
If you use a different issue tracker QuickBuild not supported yet, read
this document
and it will also help you to hyperlink the issue keys mentioned in the commit messages. Or you may consider write a plugin to support, it is very easy.
Basic Features Overview
â
Issues In Build Overview
â
All issues will be hyperlinked and when mouse is hover on the issue key, the summary will be displayed:
Issues Report
â
All issues mentioned in commit message will be collected and you will get a report in build Issues tab, the issues will be updated automatically from your tracker server so that the report can always keep accurate:
You can also select a build to generate the issues report:
and to know what files were changed against an issue:
Advanced Features
â
For most of the issue trackers, QuickBuild supply more advanced features:
Update issues/tickets via SCM commit messages
Release a version/milestone to issue tracker
Add the fixed version/milestone for issues mentioned in SCM commit messages
Read below documents to know more:
Integrating QuickBuild with JIRA
Integrating QuickBuild with TeamForge
Integrating QuickBuild with Trac
Last updated
on
Oct 28, 2024

================================================================================

Title: Working with Coverage Report
URL: https://wiki.pmease.com/display/QB14/Working+with+Coverage+Report
Breadcrumb:  > User's Guide > Working with Reports

User's Guide
Working with Reports
Working with Coverage Report
Version: QB14
On this page
Working with Coverage Report
After publishing the coverage report, QuickBuild can display the coverage report in build page and statistics page. Below we will use Cobertura as an example. Different coverage tool may have different view, but in most cases, they have the same look-and-feel.
Build Overview
â
By Package
â
By Class
â
By Method
â
View Source code
â
View Coverage Trends
â
View Aggregated Coverage Data
â
If you have defined aggregation, a panel in the configuration overview will list the recent coverage data in the child configurations
Last updated
on
Oct 28, 2024

================================================================================

Title: Working with Inspection Report
URL: https://wiki.pmease.com/display/QB14/Working+with+Inspection+Report
Breadcrumb:  > User's Guide > Working with Reports

User's Guide
Working with Reports
Working with Inspection Report
Version: QB14
On this page
Working with Inspection Report
After publishing the inspection report, QuickBuild can display the inspection report in build page and statistics page. Below we will use Fxcop as an example. Different inspection tool may have different view, but in most cases, they have the same look-and-feel.
Build Overview
â
Last updated
on
Oct 23, 2024

================================================================================

Title: Working with Test Report
URL: https://wiki.pmease.com/display/QB14/Working+with+Test+Report
Breadcrumb:  > User's Guide > Working with Reports

User's Guide
Working with Reports
Working with Test Report
Version: QB14
On this page
Working with Test Report
After publishing the test report successfully, QuickBuild will display the tests information in the build overview:
and also a report tab is displayed in the build page, for example, you will find a JUnit Report tab in the build page after JUnit report is published, and you can navigate the tabs to get the detailed information.
warning
The sub tabs may be a little different for the different kind of test report. QuickBuild always tries to display as more information as possible based on the original report.
Below we will use JUnit report as an example.
Failed Tests
â
The tab display all failed tests:
By Package
â
The tab displays the test info by package:
By Testsuite
â
The tab displays the test info by testsuite:
By Test
â
The tab displays all tests information:
and when you click the icon
, the detailed information is displayed in a popeup dialog like below:
Test Trends
â
In
statistics page
, the test trends can display the top error-proned tests, top longest tests and all run the tests in the history:
View aggregated tests information
â
If a configuration defines the aggregations, a panel in the configuration overview will summarize the tests information and list all recent test information in its child configurations:
Last updated
on
Oct 28, 2024

================================================================================

Title: Working with Configurations
URL: https://wiki.pmease.com/display/QB14/Working+with+Configurations
Breadcrumb: 

Version: QB14
Working with Configurations
Working with Configurations
Configuration Dashboard
Configuration Navigation
Run Configuration
Add configuration
Copy Configurations
Delete Configurations
Move Configurations
Configuration Settings
Workspace Tab
Storage tab
Last updated
on
Oct 23, 2024

================================================================================

Title: Add Custom Statistics Data
URL: https://wiki.pmease.com/display/QB14/Add+Custom+Statistics+Data
Breadcrumb:  > Administrator's Guide > Publish Build Reports

Administrator's Guide
Publish Build Reports
Add Custom Statistics Data
Version: QB14
On this page
Add Custom Statistics Data
QuickBuild support add your custom statistics data and will generate the statistics chart and build overview automatically. For example, we use a test framework named rubyunit and want QuickBuild to collect the following indicators: total test count, failed test count, passed test count and total duration, then we will:
Add a custom statistics category
â
First, we will define the statistics data structure in QuickBuild. To define the data structure:
Log in to the QuickBuild server as Administrator
Click the 'Administration' tab in main navigation
Click the 'Plugin Management' tab
Click the 'Configure' link of 'Custom Statistics Report' plugin
Click 'Add New' button to add a new custom statistics category
Define the information of rubyunit like below
Field Name
Description
Required
Category Name
The name of the category. It will be used as tab name in statistics page and also will be used as an overview section in build overview page.
The category name should be unique in the whole QuickBuild.
YES
Ordinal
The order of the category. The QuickBuild will use this value to determine the position of this category when displayed in statistics page and build overview page.
YES
Description
The description of the category.
NO
Indicators
Indicators are what you want QuickBuild to collect from your original reports.
YES
Click 'Save' button.
warning
Indicator id should be started with an alphabetic character (a-z or A-Z). For example:
Indicator123 is a good id, while 123Indicator is not.
Publish JSON report
â
The custom statistics data can also be in JSON format. QuickBuild uses
JSON-Path
to parse the JSON file.
Below operators are supported:
Operator
Description
`$`
The root element to query. This starts all path expressions.
`@`
The current node being processed by a filter predicate.
`*`
Wildcard. Available anywhere a name or numeric are required.
`..`
Deep scan. Available anywhere a name is required.
`.<name>`
Dot-notated child
`['<name>' (, '<name>')]`
Bracket-notated child or children
`[<number> (, <number>)]`
Array index or indexes
`[start:end]`
Array slice operator
`[?(<expression>)]`
Filter expression. Expression must evaluate to a boolean value.
Below functions are supported
Functions can be invoked at the tail end of a path - the input to a function is the output of the path expression.
The function output is dictated by the function itself.
Function
Description
Output type
min()
Provides the min value of an array of numbers
Double
max()
Provides the max value of an array of numbers
Double
avg()
Provides the average value of an array of numbers
Double
stddev()
Provides the standard deviation value of an array of numbers
Double
length()
Provides the length of an array
Integer
sum()
Provides the sum value of an array of numbers
Double
keys()
Provides the property keys (An alternative for terminal tilde `~`)
`Set<E>`
concat(X)
Provides a concatinated version of the path output with a new item
like input
append(X)
add an item to the json path output array
like input
first()
Provides the first item of an array
Depends on the array
last()
Provides the last item of an array
Depends on the array
index(X)
Provides the item of an array of index: X, if the X is negative, take from backwards
Depends on the array
Please see
JSON-Path
page for more detailed information.
Collect the statistics data
â
After defining the custom statistics category, you can now add a publish 'Custom Statistics Report' step:
In this step, you can select a category which you defined before and then publish the XML reports where you want QuickBuild to collect the statistics data from. Just like all other publish report step, here you can specify the file patterns, step failure condition and failure message.
Now, you can run your configuration. After running finished, QuickBuild will show the indicators value in Build Dashboard like below:
and display the statistics chart in Statistics tab like below:
Last updated
on
Oct 28, 2024

================================================================================

Title: Tray Monitor
URL: https://wiki.pmease.com/display/QB14/Tray+Monitor
Breadcrumb:  > User's Guide > Working With Addons

User's Guide
Working With Addons
Tray Monitor
Version: QB14
On this page
Tray Monitor
The tray monitor is an addon for QuickBuild (2.1 or higher) to enable user monitoring build, triggering build, and receiving build notifications from desktop without opening the web browser. It requires
JRE 1.5
and currently supports below platforms:
Windows XP or higher
Linux with Gtk support
Mac OS X (Leopard or higher)
Download and run tray monitor
â
Tray monitor can be downloaded at
My
page after you logged into QuickBuild. After download, you may launch it by:
On Windows: extract downloaded zip file and run traymonitor.exe.
On Mac OS X: extract downloaded zip file and run TrayMonitor.app.
On Linux: run command "java -jar traymonitor.jar" against downloaded jar file.
If the tray monitor is running successfully, you will see a tray icon is displayed in your system tray. Below is an example screen shot in Mac:
warning
Trouble shooting on Linux
If you cannot find the tray icon for the tray monitor, you may encounter the known issue on linux - 'Lost tray icon'. You can google it and there are lots of the posts about it and how to resolve it. A possible solution is to install gnome-session-fallback, please see this post for details:
https://askubuntu.com/questions/136733/some-system-tray-icons-invisible-in-gnome-classic-12-04
Use the tray monitor
â
To tell tray monitor which build events you are interested, please open
My Setting
page in QuickBuild and add subscriptions with
Notify Through
field defined as
Tray Monitor & IDE Plugins
. Below screen tells tray monitor to receive all build events for all configurations in the system:
Everytime a build finishes, you will see a popup message from tray monitor like below:
There will be a latency between build finishing and message poping up. The latency depends on how frequent tray monitor is set to check build events, and can be controlled by parameter
refresh interval
in its preference setting.
If you also subscribed the system alerts, then when there are alerts occurred, a notification window will also popup like below:
The menu item
View/Run Build...
brings out an auto-refreshing lite dashboard of QuickBuild. Auto-refresh frequency is controlled by parameter
refresh interval
in the preference setting.
The menu item
Preference Setting
includes settings such as QuickBuild server url, login user and password, refresh interval, and message display time.
Also, if you subscribed the system alerts, you can view those latest alert history:
Last updated
on
Oct 23, 2024

================================================================================

Title: SCM Support Overview
URL: https://wiki.pmease.com/display/QB14/SCM+Support+Overview
Breadcrumb:  > Administrator's Guide > Working with SCM systems

Administrator's Guide
Working with SCM systems
SCM Support Overview
Version: QB14
On this page
SCM Support Overview
Introduction
â
SCM systems are modeled as repositories in QuickBuild. To define repository for a configuration, please select the configuration and switch to repository setting page. The repository menu will be displayed to let you choose the repository type if you click the add button from there, as demonstrated below:
After a repository is defined, you can add repository related steps from
Repository
category of step menu. Before going further, let's define below concepts:
repository snapshot
Repository snapshot represents a fixed set of source code in the repository, that is not affected by new checkins
repository revision
Repository revision is used by QuickBuild to identify repository snapshot. It has different meaning for different SCM:
for Subversion: it is the revision number of the repository
for Perforce: it is the changelist number of the repository
for Accurev: it is transaction number of the repository
for other repositories: it is timestamp of the repository
Currently below steps can be used to interact with a repository, respectively:
checkout step
This step can be added by selecting
Repository -> Checkout
from step menu, and it lets you choose a repository to checkout. This is the only way to checkout files from SCM in QuickBuild. When this step runs, QuickBuild automatically takes a snapshot of the repository so that later steps (for example, the label step) operate on the same set of source code used for checkout.
label step
This step can be added by selecting
Repository -> Label
from step menu, and it lets you choose a repository to create label on. This step is useful if you want to label the SCM for the set of source code used for the build. This step will also take a snapshot of the repository.
take snapshot step
This step can be added by selecting
Repository -> Take Snapshot
from step menu, and it allows you choose a repository and take a snapshot against that repository. The revision number of the repository object defined in QuickBuild will be set to a fixed value after a snapshot is taken.
record changes step
This step can be used to record changes of a repository without actually checking it out.
Examples
â
With these steps, you can design very flexible workflow when interacting with SCM. You can even define multiple repositories, and checkout/label all of them in a single build.
Here are some examples:
Checkout source code for build, and label it if build and test is successful
â
Define your repository.
Define a checkout step to checkout from your repository.
Define necessary steps to build and test your code.
Define a label step to label the repository that is used for checkout.
Define the master step as a sequential step to include steps defined above.
Create a label on SCM trunk, and checkout against that label for build
â
Define your repository.
Define a label step to label the repository.
Define a checkout step to checkout from the labeled repository.
Define necessary steps to build and test your code.
Define the master step as a sequential step to include steps defined above.
Checkout different part of the project from different machines in parallel, but use the same repository revision
â
Let's assume that in your SCM, the project is represented by
project1
, and it has two modules
project1/componentA
and
project1/componentB
Define a repository representing
project1.
Define two repositories representing
project1/componentA
and
project1/componentB
respectively. Revision of both repositories should be set as:
$
{
repositories
.
get
(
"project1"
)
.
revision
}
Add a step to take snapshot of repository
project1.
Add two steps to checkout from repository
componentA
and
componentB
. You may arrange these two steps running on different machines using
node match condition
(refer to
build grid
documentation).
Add a parallel composition step to run the checkout steps in parallel.
Define the master step as a sequential step to include the take snapshot step and the parallel composition step defined above.
Last updated
on
Oct 28, 2024

================================================================================

Title: Working with Accurev
URL: https://wiki.pmease.com/display/QB14/Working+with+Accurev
Breadcrumb:  > Administrator's Guide > Working with SCM systems

Administrator's Guide
Working with SCM systems
Working with Accurev
Version: QB14
On this page
Working with Accurev
warning
Accurev relies heavily on accurate system clock to perform its operations. Please make sure clock of the build server and all build agents interacting with Accurev repository are synced with Accurev server.
Specify Accurev command location
â
QuickBuild utilizes the accurev command to interact with Accurev SCM. If this command is not in system path, you will need to specify location of the command by configuring Accurev plugin as below:
Further more, accurev command location can be specified on a per-node basis by following below steps:
Open Accurev plugin setting page and define the accurev path property as:
$
{
node
.
getAttribute
(
"accurevPath"
)
}
For each node that does not have accurev on system path, define the user attribute
accurevPath
to point to the actual accurev path like below:
Please note that in above example, the
accurevPath
user attribute is just for demonstration purpose. You can use any other user attribute name.
Change detection
â
If the build process involves checking out from a Accurev repository, the changes will be detected for the build stream and all parent streams until a snapshot or time-locked parent is found.
Label a Accurev repository
â
The label step will create a snapshot stream backed by the build stream, with the snapshot name set to label name.
Proof build support
â
Proof build support can be enabled to send active changes from developer's local workspace to QuickBuild for build verification. For general concept of proof build, refer to
proof build
. Here we explain how to set up Accurev repository to support proof build.
Test proof build as administrator
â
Since proof build set up is a bit tricky, we first set up proof build for the administrator account and make sure it works before we proceed to enable it for all developers. To set up proof build for administrator, please follow below steps:
Login as administrator and download user agent by switching to
My
tab.
Install and start user agent on your own desktop. For testing purpose, please start the agent as a foreground process. On windows, this can be done by running
agent.bat
; on Unix platforms, this can be done by running
agent.sh console
Set up a test configuration on QuickBuild server, define a Accurev repository, and enable the proof build option in advanced section like below:
Make sure the Accurev command exists in the system path of both server machine and your desktop. If not, please follow the section
Specify Accurev command location
to tell QuickBuild location of Accurev command.
Add a
repository/checkout
step into step execution graph and have it checkout from the repository defined above.
Now proof build has been enabled for your account, please try to edit some file and keep them in the local Accurev workspac specified above, and then run the test configuration. If set up correctly, your local active change will be picked up and reflected in the build result. A local change tab will also appear to display your active changes after build finishes. Your active changes will be promoted automatically if build is successful.
{#WorkingwithAccurev-proofbuildforalldevelopers}
Enable proof build for all developers
â
Now that we have a concept of how proof build works. In order to get proof build works for all developers, we need to parameterize various proof build properties, so that different properties can be used for different developers. To do this, you will need to:
Define configuration variables like below:
Script various properties in proof build section to make use of above variables like below:
Property Name
Property Value
Local Workspace
${vars.getValue("localWorkspace")}
User Name
${vars.getValue("userName")}
Password
${vars.get("password")}
Promote Condition
build.successful && vars.get("promoteIfSuccessful").asBoolean()
Promote Comment
${vars.get("promoteComment")}
In this way, various proof build properties will be prompted when your developer run the build. Once they've been input by your developer for the first time, the values will be remembered for subsequent triggers for that user.
At last we suggest to set up the configuration to
enable concurrent builds
so that multiple builds in the same configuration can run concurrently. This is vital to get fast feedback in case multiple developers are requesting proof builds in the same time.
Last updated
on
Oct 28, 2024

================================================================================

Title: Working with Azure Devops
URL: https://wiki.pmease.com/display/QB14/Working+with+Azure+Devops
Breadcrumb:  > Administrator's Guide > Working with SCM systems

Administrator's Guide
Working with SCM systems
Working with Azure Devops
Version: QB14
On this page
Working with Azure Devops
QuickBuild integrates with Azure Devops via the Azure repository. This repository has all features of a normal Git repository, but add the ability to build against pull requests, and update the status based on build result for commits or pull requests.
Build against Pull Requests
â
If you want to build against pull request, username field and password field are required. The password can also use a personal access token instead. To generate personal access token, please see
this page
.
If the personal access token is used, the token should at least include code read scope.
You can filter the pull requests by adding the parameters you want:
Now, QuickBuild can build against the pull request branch refs/pull/*/merge.
Azure Devops Webhook
â
QuickBuild can trigger build via Azure Devops web hooks.
Configure QuickBuild Side
â
Add anonymous group
â
As the webhook is triggered without authentication, anonymous group should be added and it should have the permission to use RESTful API.
Add webhook settings
â
To add integration at QuickBuild side, please go to configuration settings page and then choose Webhook -> Azure Devops from right side menu:
Then, you can add the settings:
Trigger User
the user to trigger the build
Webhook Secret
the secret should be the same as what you defined in Azure authorization header
Trigger Condition
the trigger condition in Groovy scripts, when the result is true, build will be triggered, otherwise, the build will not be triggered. You can use variable
delivery
to access the data from GitHub like
delivery.ref
,
delivery.pusher.name
. See more details on
https://docs.microsoft.com/en-us/azure/devops/service-hooks/events?view=azure-devops
. You can also use the parameter specified in webhook URL as below section.
Trigger Build Variables
define the variables to trigger the builds so you can use those variables in the steps later.
Configure Azure Side
â
To enable the webhook, first you need go to Azure Devops web hook settings page to configure the QuickBuild side related information:
Important
you need add Authorization header if you specify the secret at QuickBuild side. The header looks like below (replace the
my-scret-code
to your actual secret token):
Authorization
:
Basic
my
-
secret
-
code
If you want to use some custom parameters, you can add them to your webhook url like below:
https://your.quickbuild.com/rest/webhook/webhook/14?target=android
Then, later you can use target parameter in your trigger condition.
Last updated
on
Oct 28, 2024

================================================================================

Title: Working with Bazaar
URL: https://wiki.pmease.com/display/QB14/Working+with+Bazaar
Breadcrumb:  > Administrator's Guide > Working with SCM systems

Administrator's Guide
Working with SCM systems
Working with Bazaar
Version: QB14
On this page
Working with Bazaar
Prerequisites
â
QuickBuild utilizes the Bazaar command (bzr) to interact with remote Bazaar repository. If this command is not in system path, you will need to specify location of the command by configuring Bazaar plugin as below:
warning
Please also install bazaar plugin bzr-xmloutput:
https://launchpad.net/bzr-xmloutput
Further more, Bazaar command (bzr) location can be specified on a per-node basis by following below steps:
Open Bazaar plugin setting page and define the Bazaar path property as:
$
{
node
.
getAttribute
(
"bzrPath"
)
}
For each node that does not have Bazaar on system path, define the user attribute
bzrPath
to point to the actual Bazaar path like below:
NOTE:
example above is just for demonstration, you can use any other user attribute name instead of
bzrPath
.
Creating a Bazaar Repository
â
You may refer to
this page
on how to add a repository.
Supported URL prefixes
â
Currently, below URL prefixes are supported:
aftp://
Access using active FTP.
bzr://
Fast access using the Bazaar smart server.
bzr+ssh://
Fast access using the Bazaar smart server over SSH.
file://
Access using the standard filesystem (default)
ftp://
Access using passive FTP.
http://
Read-only access of branches exported on the web.
https://
Read-only access of branches exported on the web using SSL.
sftp://
Access using SFTP (most SSH servers provide SFTP).
svn://
Access using the Subversion smart server.
svn+ssh://
Access using the Subversion smart server tunneled over SSH.
If
https
is used, and your credential need password, you need first add the credential manually to the nodes which you want check out code to.
If
bzr+ssh
is used, please use public key without password for authorization and you need not specify the password when you create the repository. You can reference your SSH manual on how to create public key without password.
Proof build support
â
Your developers might need to push their local commits in local branches to a central official Bazaar repository occasionally. In this case, QuickBuild can validate these commits by running proof build before pushing them.
Test proof build as administrator
â
Since proof build set up is a bit tricky, we first set up proof build for the administrator account and make sure it works before we proceed to enable it for all developers. To set up proof build for administrator, please follow below steps:
Login as administrator and download user agent by switching to
My
tab.
Install and start user agent on your own desktop. For testing purpose, please start the agent as a foreground process. On windows, this can be done by running
agent.bat
; on Unix platforms, this can be done by running
agent.sh console
Set up a test configuration on QuickBuild server, define a Bazaar repository, enable the proof build option in advanced section like below:
Make sure the bazaar command exists in the system path of both server machine and your desktop. If not, please follow the prerequisites section to tell QuickBuild location of bazaar command.
Add a
repository/checkout
step into step execution graph and have it checkout from the repository defined above.
Now proof build has been enabled for your account, please make some local commits into your local repository specified above, and then run the test configuration. If set up correctly, your local commits will be picked up and reflected in the build result. A local change tab will also appear to display local commits after build finishes. Your local commits will be pushed automatically if build is successful.
Enable proof build for all developers
â
Now that we have a concept of how proof build works. In order to get proof build works for all developers, we need to parameterize various proof build properties, so that different properties can be used for different developers. To do this, you will need to:
Define configuration variables like below:
Script various properties in proof build section to make use of above variables like below:
Property Name
Property Value
Local Repository Path
${vars.get("localRepositoryPath")}
Revision Spec to Verify
${vars.get("revisionSpecToVerify")}
Merge Condition
vars.get("merge").asBoolean()
Push Condition
build.successful && vars.get("push").asBoolean()
In this way, various proof build properties will be prompted when your developer runs the build. Once they've been specified by your developer for the first time, the values will be remembered for subsequent triggers for that user.
At last we suggest to set up the configuration to
enable concurrent builds
so that multiple builds in the same configuration can run concurrently. This is vital to get fast feedback in case multiple developers are requesting proof builds in the same time.
Last updated
on
Oct 28, 2024

================================================================================

Title: Working with ClearCase
URL: https://wiki.pmease.com/display/QB14/Working+with+ClearCase
Breadcrumb:  > Administrator's Guide > Working with SCM systems

Administrator's Guide
Working with SCM systems
Working with ClearCase
Version: QB14
On this page
Working with ClearCase
Specify cleartool command location
â
QuickBuild utilizes the cleartool command to interact with ClearCase. If this command is not in system path, you will need to specify location of the command by configuring ClearCase plugin as below:
Further more, Cleartool location can be specified on a per-node basis by following below steps:
Open ClearCase plugin setting page and define the cleartool path property as:
$
{
node
.
getAttribute
(
"cleartoolPath"
)
}
For each node that does not have cleartool on system path, define the user attribute
cleartoolPath
to point to the actual cleartool path like below:
Please note that in above example, the
cleartoolPath
user attribute is just for demonstration purpose. You can use any other user attribute name.
Proof build support
â
For general concept of proof build, refer to
proof build
. Here we explain how to set up ClearCase repository to support proof build.
Test proof build as administrator
â
Since proof build set up is a bit tricky, we first set up proof build for the administrator account and make sure it works before we proceed to enable it for all developers. To set up proof build for administrator, please follow below steps:
Login as administrator and download user agent by switching to
My
tab.
Install and start user agent on your own desktop. For testing purpose, please start the agent as a foreground process. On windows, this can be done by running
agent.bat
; on Unix platforms, this can be done by running
agent.sh console
Set up a test configuration on QuickBuild server, define a ClearCase repository, and enable the proof build option in advanced section like below:
Make sure the cleartool command exist in the system path of both server machine and your desktop. If not, please follow the section
Specify cleartool command location
to tell QuickBuild location of cleartool command.
Add a
repository/checkout
step into step execution graph and have it checkout from the repository defined above.
Now proof build has been enabled for your account, please try to checkout and edit some file inside the local view path specified above, and then run the test configuration. If set up correctly, your local change will be picked up and reflected in the build result. A local change tab will also appear to display your uncommitted changes after build finishes. Your uncommitted changes will be committed automatically if build is successful.
Enable proof build for all developers
â
Now that we have a concept of how proof build works. In order to get proof build works for all developers, we need to parameterize various proof build properties, so that different properties can be used for different developers. To do this, you will need to:
Define configuration variables like below:
Script various properties in proof build section to make use of above variables like below:
Property Name
Property Value
Local View Path
${vars.get("localViewPath")}
Update Condition
vars.get("update").asBoolean()
Checkin Condition
build.successful && vars.get("commit").asBoolean()
Checkin Comment
${vars.get("comment")}
In this way, various proof build properties will be prompted when your developer run the build. Once they've been input by your developer for the first time, the values will be remembered for subsequent triggers for that user.
At last we suggest to set up the configuration to
enable concurrent builds
so that multiple builds in the same configuration can run concurrently. This is vital to get fast feedback in case multiple developers are requesting proof builds in the same time.
Limitations
â
Please be aware of below limitations when use this repository:
Directory operations, file deletions and file renamging in ClearCase are not detected as changes due to limitation of the cleartool command.
Newly branched files are detected as added files.
Changes are only detected on current branch. For example, if file1 goes through version
main/2
,
main/3
,
main/branch1/1
,
main/branch1/2
between two builds, only changes for
main/branch1/1
and
main/branch1/2
are detected.
Last updated
on
Oct 28, 2024

================================================================================

Title: Working with CVS
URL: https://wiki.pmease.com/display/QB14/Working+with+CVS
Breadcrumb:  > Administrator's Guide > Working with SCM systems

Administrator's Guide
Working with SCM systems
Working with CVS
Version: QB14
On this page
Working with CVS
Specify cvs command location
â
QuickBuild utilizes the cvs command to interact with CVS repository. If this command is not in system path, you will need to specify location of the command by configuring CVS plugin as below:
Further more, cvs command location can be specified on a per-node basis by following below steps:
Open CVS plugin setting page and define the cvs path property as:
$
{
node
.
getAttribute
(
"cvsPath"
)
}
For each node that does not have cvs command on system path, define the user attribute
cvsPath
to point to the actual cvs command location like below:
For user agent node, this user attribute can be defined [follow this guide](Manage User Agent.html#ManageUserAgent-defineuserattributes).
Please note that in above example, the
cvsPath
user attribute is just for demonstration purpose. You can use any other user attribute name.
Proof build support
â
For general concept of proof build, refer to
proof build
. Here we explain how to set up Subversion repository to support proof build.
Test proof build as administrator
â
Since proof build set up is a bit tricky, we first set up proof build for the administrator account and make sure it works before we proceed to enable it for all developers. To set up proof build for administrator, please follow below steps:
Login as administrator and download user agent by switching to
My
tab.
Install and start user agent on your own desktop. For testing purpose, please start the agent as a foreground process. On windows, this can be done by running
agent.bat
; on Unix platforms, this can be done by running
agent.sh console
Set up a test configuration on QuickBuild server, define a CVS repository, and enable the proof build option in advanced section like below:
Make sure the cvs command exist in the system path of both server machine and your desktop. If not, please follow the section
Specify cvs command location
to tell QuickBuild location of cvs command.
Add a
repository/checkout
step into step execution graph and have it checkout from the repository defined above.
Now proof build has been enabled for your account, please try to checkout and edit some files in working copies specified above, and then run the test configuration. If set up correctly, your local change will be picked up and reflected in the build result. A local change tab will also appear to display your uncommitted changes after build finishes. Your uncommitted changes will be committed automatically if build is successful.
Enable proof build for all developers
â
Now that we have a concept of how proof build works. In order to get proof build works for all developers, we need to parameterize various proof build properties, so that different properties can be used for different developers. To do this, you will need to:
Define configuration variables like below:
Script various properties in proof build section to make use of above variables like below:
Property Name
Property Value
CVS Root
${vars.get("cvsRoot")}
CVS Password
${vars.get("cvsPassword")}
Working Copies
${vars.get("workingCopies")}
Update Condition
vars.get("update").asBoolean()
Commit Condition
build.successful && vars.get("commit").asBoolean()
Commit Comment
${vars.get("comment")}
In this way, various proof build properties will be prompted when your developer run the build. Once they've been input by your developer for the first time, the values will be remembered for subsequent triggers for that user.
At last we suggest to set up the configuration to
enable concurrent builds
so that multiple builds in the same configuration can run concurrently. This is vital to get fast feedback in case multiple developers are requesting proof builds in the same time.
Last updated
on
Oct 28, 2024

================================================================================

Title: Working with Git
URL: https://wiki.pmease.com/display/QB14/Working+with+Git
Breadcrumb:  > Administrator's Guide > Working with SCM systems

Administrator's Guide
Working with SCM systems
Working with Git
Version: QB14
On this page
Working with Git
Prerequisites
â
QuickBuild utilizes the Git command (git) to interact with remote Git repository. If this command is not in system path, you will need to specify location of the command by configuring Git plugin as below:
Further more, Git command (git) location can be specified on a per-node basis by following below steps:
Open Git plugin setting page and define the Git path property as:
$
{
node
.
getAttribute
(
"gitPath"
)
}
For each node that does not have Git on system path, define the user attribute
gitPath
to point to the actual Git path like below:
NOTE:
example above is just for demonstration, you can use any other user attribute name instead of
gitPath
.
Creating a Git Repository
â
You may refer to
this page
on how to add a repository.
Supported URL prefixes
â
Currently, below URL prefixes are supported:
ssh://host.[:port]/path/to/repo.git/
git://host.xz[:port]/path/to/repo.git/
http[s]://host.xz[:port]/path/to/repo.git/
ftp[s]://host.xz[:port]/path/to/repo.git/
rsync://host.xz/path/to/repo.git/
If
https
is used, and your credential need password, you need first add the credential manually to the nodes which you want check out code to.
If
ssh based
URL is used, please use public key without password for authorization and you need not specify the password when you create the repository. You can reference your SSH manual on how to create public key without password.
Proof build support
â
Your developers might need to push their local commits in local repository to a central official Git repository occasionally. In this case, QuickBuild can validate these commits by running proof build before pushing them.
Test proof build as administrator
â
Since proof build set up is a bit tricky, we first set up proof build for the administrator account and make sure it works before we proceed to enable it for all developers. To set up proof build for administrator, please follow below steps:
Login as administrator and download user agent by switching to
My
tab.
Install and start user agent on your own desktop. For testing purpose, please start the agent as a foreground process. On windows, this can be done by running
agent.bat
; on Unix platforms, this can be done by running
agent.sh console
Set up a test configuration on QuickBuild server, define a Git repository, enable the proof build option in advanced section like below:
Make sure the git command exists in the system path of both server machine and your desktop. If not, please follow the prerequisites section to tell QuickBuild location of git command.
Add a
repository/checkout
step into step execution graph and have it checkout from the repository defined above.
Now proof build has been enabled for your account, please make some local commits into your local repository specified above, and then run the test configuration. If set up correctly, your local commits will be picked up and reflected in the build result. A local change tab will also appear to display local commits after build finishes. Your local commits will be pushed automatically if build is successful.
Enable proof build for all developers
â
Now that we have a concept of how proof build works. In order to get proof build works for all developers, we need to parameterize various proof build properties, so that different properties can be used for different developers. To do this, you will need to:
Define configuration variables like below:
Script various properties in proof build section to make use of above variables like below:
Property Name
Property Value
Local Repository Path
${vars.get("localRepositoryPath")}
Change Set to Verify
${vars.get("changesetToVerify")}
Merge Condition
vars.get("merge").asBoolean()
Push Condition
build.successful && vars.get("push").asBoolean()
In this way, various proof build properties will be prompted when your developer runs the build. Once they've been specified by your developer for the first time, the values will be remembered for subsequent triggers for that user.
At last we suggest to set up the configuration to
enable concurrent builds
so that multiple builds in the same configuration can run concurrently. This is vital to get fast feedback in case multiple developers are requesting proof builds in the same time.
Last updated
on
Oct 28, 2024

================================================================================

Title: Working with GitHub
URL: https://wiki.pmease.com/display/QB14/Working+with+GitHub
Breadcrumb:  > Administrator's Guide > Working with SCM systems

Administrator's Guide
Working with SCM systems
Working with GitHub
Version: QB14
On this page
Working with GitHub
QuickBuild integrates with GitHub via the GitHub repository. This repository has all features of a normal
Git repository
, but add the ability to build against pull requests, and update pull request status based on build result.
Build against pull requests
â
To build against GitHub pull requests, define a GitHub repository like below:
In repository definition, you may select to build against open, closed, or specified pull requests, and choose to build head, merge, or both of selected build requests like below:
Here
head
branch of pull request points to tip commit of the pull request, while
merge
points to merged commit of head commit and tip commit of target branch of the pull request. After defining the Git repository, you should add a checkout step to check it out into the workspace, and add necessary build steps to build against checked out contents.
Upon triggering of configuration using such repository, QuickBuild will first find all matched pull requests at GitHub side and then fire separate build request(s) for each pull request to check changes against that pull request, and build that pull request if necessary. So if there are many matched pull requests, many build requests will be fired. So it is best practice to enable
concurrent build
to speed up verification of multiple pull requests.
As demonstrated below, each finished build will display associated pull request as branch information and changes of the build will be calculated against previous build with the same pull request branch.
Upon manual triggering of such configuration, all matched pull requests will be built even if they've not being updated, just like what QuickBuild behaves when trigger configurations using normal repositories. However if you schedule the configuration and set build condition to
If changes found in referenced repositories
(or something similar), QuickBuild will only build against new/updated pull requests.
Update pull request status at GitHub side based on build status
â
When build against
head branch
of GitHub pull requests, QuickBuild will update pull request status automatically to reflect build status when build is started/finished, as demonstrated below:
warning
To make this working, make sure head branch of relevant pull requests are getting built as pull request status reflects head commit status.
GitHub Webhook Integration
â
QuickBuild can trigger builds via GitHub webhooks since 9.0.
Config GitHub
â
To enable the webhook, first you need go to GitHub repository webhook settings page to configure the QuickBuild side related information:
If you want to use some custom parameters, you can add them to your webhook url like below:
https://your.quickbuild.com/rest/webhook/github/14?target=android
Then, later you can use
target
parameter in your trigger condition.
Config QuickBuild
â
Add anonymous group
â
As the webhook is triggered without authentication, anonymous group should be added and it should have the permission to use RESTful API.
Add webhook settings
â
QuickBuild only allow push event to trigger the builds, other events will be ignored. To add integration at QuickBuild side, please go to configuration settings page and then choose Webhook -> GitHub from right side menu:
Then, you can add the settings:
Trigger User
the QuickBuild user to trigger the build who should at least have permission
RUN_BUILD
for that configuration.
Webhook Secret
the secret should be the same as what you defined in GitHub
Trigger Condition
the trigger condition in Groovy scripts, when the result is true, build will be triggered, otherwise, the build will not be triggered. You can use variable
delivery
to access the data from GitHub like
delivery.ref
,
delivery.pusher.name
. See more details on
GitHub Events and Payloads page
. You can also use the parameter specified in webhook URL as aforementioned.
Trigger Build Variables
define the variables to trigger the builds so you can use those variables in the steps later.
GitHub Organization Webhook
â
If you want to use GitHub organization webhook, you don't need specify the configuration id at the webhook URL:
https
:
/
/
your
.
quickbuild
.
url
/
rest
/
webhook
/
github
and then you need specify the repo and configuration mappings at QuickBuild side. Go to Administration page, and choose Plugin Management, then search for GitHub Webhook plugin:
and then click the "Gear" icon to config the plugin, specify the repo and configuration id mappings here:
You also need to add
GitHub Webhook
settings at QuickBuild side and decide whether or not to trigger builds according to the GitHub webhook payload like
aforementioned
.
Last updated
on
Oct 28, 2024

================================================================================

Title: Working with GitLab
URL: https://wiki.pmease.com/display/QB14/Working+with+GitLab
Breadcrumb:  > Administrator's Guide > Working with SCM systems

Administrator's Guide
Working with SCM systems
Working with GitLab
Version: QB14
On this page
Working with GitLab
QuickBuild integrates with GitLab via the GitLab repository. This repository has all features of a normal
Git repository
, but add the ability to build against merge requests, and update merge request status based on build result.
Build against merge requests
â
To build against GitLab merge requests, define a GitLab repository like below:
In repository definition, you may select to build against merge requests with filter, and then you can add your criteria in format: a=value1&b=value2
You need also specify the private access token in order to build against merge requests. The private access token should have permission to access to APIs and the repo.
See more detailed information on below page:
https://docs.gitlab.com/ee/user/profile/personal_access_tokens.html
GitLab Webhook Integration
â
QuickBuild can trigger builds via GitLab webhooks since 9.0.
Config GitLab
â
To enable the webhook, first you need go to GitLab repository webhook settings page to configure the QuickBuild side related information:
see more detailed information on webhooks below:
https://docs.gitlab.com/ee/user/project/integrations/webhooks.html
Config QuickBuild
â
Add anonymous group
â
As the webhook is triggered without authentication, anonymous group should be added and it should have the permission to use RESTful API.
Add webhook settings
â
QuickBuild only allow push event to trigger the builds, other events will be ignored. To add integration at QuickBuild side, please go to configuration settings page and then choose Webhook -> GitLab from right side menu:
Then, you can add the settings:
Trigger User
the user to trigger the build
Webhook Secret
the secret should be the same as what you defined in GitLab
Trigger Condition
the trigger condition in Groovy scripts, when the result is true, build will be triggered, otherwise, the build will not be triggered.
Last updated
on
Oct 28, 2024

================================================================================

Title: Working with Bitbucket Server
URL: https://wiki.pmease.com/display/QB14/Working+with+Bitbucket+Server
Breadcrumb:  > Administrator's Guide > Working with SCM systems

Administrator's Guide
Working with SCM systems
Working with Bitbucket Server
Version: QB14
On this page
Working with Bitbucket Server
QuickBuild integrates with Bitbucket server via the Bitbucket server repository. This repository has all features of a normal
Git repository
, but add the ability to build against open pull requests, and update pull request status based on build result.
Build against pull requests
â
To build against pull requests, define a Bitbucket server repository like below:
In repository definition, tick the
build open pull requests
option like below:
Upon triggering of configuration using such repository, QuickBuild will first find all open pull requests at Bitbucket server side and then fire separate build request(s) for each open pull request to check changes against that pull request, and build that pull request if necessary. So if there are many open pull requests, many build requests will be fired. So it is best practice to enable
concurrent build
to speed up verification of multiple pull requests.
As demonstrated below, each finished build will display associated pull request as branch information and changes of the build will be calculated against previous build with the same pull request branch.
Upon manual triggering of such configuration, all matched pull requests will be built even if they've not being updated, just like what QuickBuild behaves when trigger configurations using normal repositories. However if you schedule the configuration and set build condition to
If changes found in referenced repositories
(or something similar), QuickBuild will only build against new/updated pull requests.
Update pull request status at Bitbucket server side based on build status
â
QuickBuild will update pull request status automatically to reflect build status when build is started/finished, as demonstrated below:
BitBucket Webhook Integration
â
QuickBuild can trigger builds via BitBucket webhooks since 9.0.
Config BitBucket
â
To enable the webhook, first you need go to BitBucket server webhook settings page to configure the QuickBuild side related information:
Here, the URL for QuickBuild is in below format:
http
:
/
/
your
-
qb
-
server
:
8810
/
rest
/
webhook
/
bitbucket
/
{
configurationId
}
Config QuickBuild
â
Add anonymous group
â
As the webhook is triggered without authentication, anonymous group should be added and it should have the permission to use RESTful API.
Add webhook settings
â
To add integration at QuickBuild side, please go to configuration settings page and then choose Webhook -> BitBucket from right side menu:
Then, you can add the settings:
Trigger User
the user to trigger the build
Webhook Secret
the secret should be the same as what you defined in BitBucket
Trigger Condition
the trigger condition in Groovy scripts, when the result is true, build will be triggered, otherwise, the build will not be triggered.
Trigger Events
the events which are allowed to trigger the build, by default, only push event (
repo:refs_changed
) can trigger the build.
Event Payload
â
For detailed event payload please refer to below page:
https://confluence.atlassian.com/bitbucketserver/event-payload-938025882.html
You can use the payload data in the script. For example, in "Trigger Condition", you can use payload data via
delivery
object, for example:
if
(
"pr:merged"
.
equals
(
event
)
)
{
return
delivery
.
actor
.
name
==
"robin"
;
}
else
{
return
false
;
}
You can define
Trigger Build Variables
in the webhook settings, and then use those variables in configuration settings just like other variables. When define the variables, script is also supported, so the payload data can also be used via
delivery
object, for example:
if
(
event
.
startsWith
(
"pr:"
)
)
{
return
delivery
.
pullRequest
.
fromRef
.
id
;
}
else
{
return
"master"
;
}
Configure QuickBuild repository
â
You can specify the ref or commit like below so QuickBuild can build the pull request or specified commit:
add a variable in BitBucket webhook definition:
use the variable in BitBucket repository definition:
Last updated
on
Oct 28, 2024

================================================================================

Title: Working with Bitbucket Cloud
URL: https://wiki.pmease.com/display/QB14/Working+with+Bitbucket+Cloud
Breadcrumb:  > Administrator's Guide > Working with SCM systems

Administrator's Guide
Working with SCM systems
Working with Bitbucket Cloud
Version: QB14
On this page
Working with Bitbucket Cloud
QuickBuild integrates with Bitbucket cloud via the Bitbucket Cloud repository. This repository has all features of a normal
Git repository
, but add the ability to build against open pull requests, and update pull request status based on build result.
Build against pull requests
â
To build against pull requests, define a Bitbucket Cloud repository like below:
In repository definition, tick the
build open pull requests
option like below:
Upon triggering of configuration using such repository, QuickBuild will first find all open pull requests at Bitbucket side and then fire separate build request(s) for each open pull request to check changes against that pull request, and build that pull request if necessary. So if there are many open pull requests, many build requests will be fired. So it is best practice to enable
concurrent build
to speed up verification of multiple pull requests.
As demonstrated below, each finished build will display associated pull request as branch information and changes of the build will be calculated against previous build with the same pull request branch.
Upon manual triggering of such configuration, all matched pull requests will be built even if they've not being updated, just like what QuickBuild behaves when trigger configurations using normal repositories. However if you schedule the configuration and set build condition to
If changes found in referenced repositories
(or something similar), QuickBuild will only build against new/updated pull requests.
Update pull request status at Bitbucket side based on build status
â
QuickBuild will update pull request status automatically to reflect build status when build is started/finished, as demonstrated below:
BitBucket Cloud Webhook Integration
â
To use BitBucket Cloud webhook, first, you need ensure you have anonymous group added with REST API access permission.
Config Webhook on bitbucket.org
â
Go to your repository settings page on bitbucket.org, then config webhook settings:
Here, the URL for QuickBuild is in below format:
http
:
/
/
your
-
qb
-
server
:
8810
/
rest
/
webhook
/
bitbucket
.
org
/
{
configurationId
}
?
secret
=
{
my_webhook_secret
}
Config Webhook on QuickBuild
â
Add anonymous group
â
As the webhook is triggered without authentication, anonymous group should be added and it should have the permission to use RESTful API.
Add webhook settings
â
To add integration at QuickBuild side, please go to configuration settings page and then choose Webhook -> bitbucket.org from right side menu:
Then, you can add the settings:
Trigger User
the user to trigger the build
Webhook Secret
the secret should be the same as what you defined in BitBucket webhook URL in secret query param.
Trigger Condition
the trigger condition in Groovy scripts, when the result is true, build will be triggered, otherwise, the build will not be triggered.
Trigger Events
the events which are allowed to trigger the build.
Event Payload
â
For detailed event payload please refer to below page:
https://support.atlassian.com/bitbucket-cloud/docs/event-payloads/
You can use the payload data in the script. For example, in "Trigger Condition", you can use payload data via
delivery
object:
if
(
"repo:push"
.
equals
(
event
)
)
{
return
delivery
.
actor
.
account_id
==
"5555555:77771777-2222-4ta6-bbbb-da3f0b740476"
;
}
else
{
return
false
;
}
You can define
Trigger Build Variables
in the webhook settings, and then use those variables in configuration settings just like other variables. When define the variables, script is also supported, so the payload data can also be used via
delivery
object, for example:
if
(
event
.
startsWith
(
"pr:"
)
)
{
return
delivery
.
pullRequest
.
fromRef
.
id
;
}
else
{
return
"main"
;
}
Last updated
on
Oct 23, 2024

================================================================================

Title: Working with Gerrit
URL: https://wiki.pmease.com/display/QB14/Working+with+Gerrit
Breadcrumb:  > Administrator's Guide > Working with SCM systems

Administrator's Guide
Working with SCM systems
Working with Gerrit
Version: QB14
On this page
Working with Gerrit
QuickBuild integrates with Gerrit via the Gerrit repository to verify gerrit changes.
How to integrate
â
To build against Gerrit changes, define a Gerrit repository like below:
And then add a checkout step in your step workflow to check out that repository, followed by appropriate build/test steps to verify checked out code. Upon initial triggering of the configuration containing this checkout step, QuickBuild will call Gerrit RESTful API to spawn a build request for each open change (or open change of specified branch if branch is specified in gerrit repository). Subsequent triggering of the configuration will only spawn build request for new change and change with new patch sets. In order to provide fast feedback of the changes, please make sure the configuration can run concurrently by enable concurrent mode in general setting of the configuration, and then configure node selection of the master step so that different build requests can run on different build agents.
After build finishes, QuickBuild will update relevant changes Gerrit server with the build information including build url. Further, if label scoring is enabled when define Gerrit repository, QuickBuild will score specified Gerrit label based on build status like below:
Trouble shooting
â
Trouble
Possible Causes
No any build requests are spawned upon triggering the configuration
* The user specified in Gerrit repository definition does not have read permission against reference
refs/*
* There are no new changes or updated changes (changes with new patch sets). If you want to build against open changes even if they have been built before, please turn off option
Queue Changed Branches Only
in advanced setting of the configuration
QuickBuild can not score specified Gerrit label
* The label is not defined at Gerrit side. Refer to
Gerrit documentation
on how to do this * The user specifid in Gerrit repository definition does not have permission to score the label
Last updated
on
Oct 23, 2024

================================================================================

Title: Working with Google git-repo
URL: https://wiki.pmease.com/display/QB14/Working+with+Google+git-repo
Breadcrumb:  > Administrator's Guide > Working with SCM systems

Administrator's Guide
Working with SCM systems
Working with Google git-repo
Version: QB14
On this page
Working with Google git-repo
Prerequisites
â
Repo
is a tool which is built on top of Git. QuickBuild utilizes the
repo
command to interact with remote git-repo repository. If this command is not in system path, you will need to specify location of the command by configuring Repo plugin as below:
Further more, git-repo command (repo) location can be specified on a per-node basis by following below steps:
Open Repo plugin setting page and define the repo path property as:
$
{
node
.
getAttribute
(
"repoPath"
)
}
For each node that does not have git-repo on system path, define the user attribute
repoPath
to point to the actual repo command path like below:
NOTE:
example above is just for demonstration, you can use any other user attribute name instead of
repoPath
.
warning
As git-repo is built on top of git, the Git plugin and git command should be also configured properly. Please refer to
Working with Git
page for details.
Creating a Repo Repository
â
You may refer to
this page
on how to add a repository.
Supported URL prefixes
â
Below URL prefixes are supported:
ssh://host.[:port]/path/to/repo.git/
git://host.xz[:port]/path/to/repo.git/
http[s]://host.xz[:port]/path/to/repo.git/
ftp[s]://host.xz[:port]/path/to/repo.git/
rsync://host.xz/path/to/repo.git/.
If
https
is used, and your credential need password, you need first add the credential manually to the nodes which you want check out code to.
If
ssh
is used, please use public key without password for authorization and you need not specify the password when you create the repository. You can reference your SSH manual on how to create public key without password.
Proof build support
â
warning
The proof build does not support, please use git proof build instead.
Last updated
on
Oct 23, 2024

================================================================================

Title: Working with Mercurial
URL: https://wiki.pmease.com/display/QB14/Working+with+Mercurial
Breadcrumb:  > Administrator's Guide > Working with SCM systems

Administrator's Guide
Working with SCM systems
Working with Mercurial
Version: QB14
On this page
Working with Mercurial
Prerequisites
â
QuickBuild utilizes the Mercurial command (hg) to interact with remote Mercurial repository. If this command is not in system path, you will need to specify location of the command by configuring Mercurial plugin as below:
Further more, Mercurial command (hg) location can be specified on a per-node basis by following below steps:
Open Mercurial plugin setting page and define the
hg
path property as:
$
{
node
.
getAttribute
(
"hgPath"
)
}
For each node that does not have
hg
on system path, define the user attribute
hgPath
to point to the actual Mercurial path like below:
NOTE:
example above is just for demonstration, you can use any other user attribute name instead of
hgPath
.
Creating a Mercurial Repository
â
You may refer to
this page
on how to add a repository.
Supported URL prefixes
â
Currently, below URL prefixes are supported:
[local/filesystem/path]
[file://local/filesystem/path]
[
http://host\[:port\]/path\
]
[
https://host\[:port\]/path\
]
[ssh://host[:port]/path]
If
https
is used, and your credential need password, you need first add the credential manually to the nodes which you want check out code to.
If
ssh based
URL is used, please use public key without password for authorization and you need not specify the password when you create the repository. You can reference your SSH manual on how to create public key without password.
Proof build support
â
Your developers might need to push their local commits in local branches to a central official Mercurial repository occasionally. In this case, QuickBuild can validate these outgoing changes by running proof build before pushing them.
Test proof build as administrator
â
Since proof build set up is a bit tricky, we first set up proof build for the administrator account and make sure it works before we proceed to enable it for all developers. To set up proof build for administrator, please follow below steps:
Login as administrator and download user agent by switching to
My
tab.
Install and start user agent on your own desktop. For testing purpose, please start the agent as a foreground process. On windows, this can be done by running
agent.bat
; on Unix platforms, this can be done by running
agent.sh console
Set up a test configuration on QuickBuild server, define a Mercurial repository, enable the proof build option in advanced section like below:
Make sure the hg command exists in the system path of both server machine and your desktop. If not, please follow the prerequisites section to tell QuickBuild location of hg command.
Add a
repository/checkout
step into step execution graph and have it checkout from the repository defined above.
Now proof build has been enabled for your account, please make some local commits into your local repository specified above, and then run the test configuration. If set up correctly, your local commits will be picked up and reflected in the build result. A local change tab will also appear to display local commits after build finishes. Your local commits will be pushed automatically if build is successful.
Enable proof build for all developers
â
Now that we have a concept of how proof build works. In order to get proof build works for all developers, we need to parameterize various proof build properties, so that different properties can be used for different developers. To do this, you will need to:
Define configuration variables like below:
Script various properties in proof build section to make use of above variables like below:
Property Name
Property Value
Local Repository Path
${vars.get("localRepositoryPath")}
Change Set to Verify
${vars.get("changesetToVerify")}
Merge Condition
vars.get("merge").asBoolean()
Push Condition
build.successful && vars.get("push").asBoolean()
In this way, various proof build properties will be prompted when your developer runs the build. Once they've been specified by your developer for the first time, the values will be remembered for subsequent triggers for that user.
At last we suggest to set up the configuration to
enable concurrent builds
so that multiple builds in the same configuration can run concurrently. This is vital to get fast feedback in case multiple developers are requesting proof builds in the same time.
Last updated
on
Oct 28, 2024

================================================================================

Title: Working with Perforce
URL: https://wiki.pmease.com/display/QB14/Working+with+Perforce
Breadcrumb:  > Administrator's Guide > Working with SCM systems

Administrator's Guide
Working with SCM systems
Working with Perforce
Version: QB14
On this page
Working with Perforce
Specify p4 command location
â
QuickBuild utilizes the p4 command to interact with Perforce depot. If this command is not in system path, you will need to specify location of the command by configuring Perfoce plugin as below:
Further more, p4 location can be specified on a per-node basis by following below steps:
Open Perforce plugin setting page and define the p4 path property as:
$
{
node
.
getAttribute
(
"p4Path"
)
}
For each node that does not have p4 command on system path, define the user attribute
p4Path
to point to the actual p4 command path like below:
In case of user agent node, the user attribute need to be defined [in this way](Manage User Agent.html#ManageUserAgent-defineuserattributes).
Please note that in above example, the
p4Path
user attribute is just for demonstration purpose. You can use any other user attribute name.
Proof build support
â
For general concept of proof build, refer to
proof build
. Here we explain how to set up Perforce repository to support proof build.
Test proof build as administrator
â
Since proof build set up is a bit tricky, we first set up proof build for the administrator account and make sure it works before we proceed to enable it for all developers. To set up proof build for administrator, please follow below steps:
Login as administrator and download user agent by switching to
My
tab.
Install and start user agent on your own desktop. For testing purpose, please start the agent as a foreground process. On windows, this can be done by running
agent.bat
; on Unix platforms, this can be done by running
agent.sh console
Set up a test configuration on QuickBuild server, define a Perforce repository, and enable the proof build option in advanced section like below:
Make sure the p4 command exist in the system path of both server machine and your desktop. If not, please follow the section
Specify p4 command location
to tell QuickBuild location of p4 command.
Add a
repository/checkout
step into step execution graph and have it checkout from the repository defined above.
Now proof build has been enabled for your account, please try to checkout and edit some file in the local perforce client specified above, and then run the test configuration. If set up correctly, your local change will be picked up and reflected in the build result. A local change tab will also appear to display your uncommitted changes after build finishes. Your uncommitted changes will be committed automatically if build is successful.
{#WorkingwithPerforce-proofbuildforalldevelopers}
Enable proof build for all developers
â
Now that we have a concept of how proof build works. In order to get proof build works for all developers, we need to parameterize various proof build properties, so that different properties can be used for different developers. To do this, you will need to:
Define configuration variables like below:
Script various properties in proof build section to make use of above variables like below:
Property Name
Property Value
Local Client
${vars.get("localClient")}
User Name
${vars.get("userName")}
Password
${vars.get("password")}
Sync Condition
vars.get("sync").asBoolean()
Change Numbers to Verify
${vars.get("changeLists")}
Submit Condition
build.successful && vars.get("submit").asBoolean()
Submit Comment
${vars.get("comment")}
In this way, various proof build properties will be prompted when your developer run the build. Once they've been input by your developer for the first time, the values will be remembered for subsequent triggers for that user.
At last we suggest to set up the configuration to
enable concurrent builds
so that multiple builds in the same configuration can run concurrently. This is vital to get fast feedback in case multiple developers are requesting proof builds in the same time.
Shelve support
â
The proof build mechanism serves the purpose of verifying unsubmitted changes, but it requires developers to install user agent on their development machine. Also it requires that the user agent is online when proof build is finished, which is not ideal as it is impossible for developer to submit proof build and then shutdown computer to go home. The perforce shelve support in QuickBuild 5.1 comes to rescue. It serves the same purpose of verifying unsubmitted changes, without aforementioned limitations. What it does is to merge shelved changes with latest version in defined repository, run build, and optionally submit shelved changes if build is successful.
To enable perforce shelve support, tick the option
Merge with Shelved Changes
in advanced setting of perforce repository like below:
Just like what we've done when enable proof build for all developers, we can enable shelve support for all develoers with help of variables:
Define variables as below to prompt developer for perforce account and shelved change lists when the configuration is triggered:
Script various properties in shelve support definition to make use of above variables:
With this, you no longer need to hard code shelve account/change list information at the time defining shelve support. Developer will be prompted with below screen at the time triggering the configuration:
Lastly, if you select to submit the changes in shelve support, QuickBuild will submit the shelved changes and the shelved changes will be removed from developer's local client.
Last updated
on
Oct 23, 2024

================================================================================

Title: Working with StarTeam
URL: https://wiki.pmease.com/display/QB14/Working+with+StarTeam
Breadcrumb:  > Administrator's Guide > Working with SCM systems

Administrator's Guide
Working with SCM systems
Working with StarTeam
Version: QB14
On this page
Working with StarTeam
warning
Please make sure clock of the build server and all build agents interacting with StarTeam repository are synced with the StarTeam server.
Install StarTeam client on build machine
â
In order to use StarTeam repository, you will need to install StarTeam client on QuickBuild server and all build agents interacting with StarTeam repository. After installation, please copy the StarTeam API library file (normally starteamXX.jar, where XX stands for StarTeam API version) to the
plugins/com.pmease.quickbuild.libs
sub folder under QuickBuild server's installation directory.
Proof build support
â
For general concept of proof build, refer to
proof build
. Here we explain how to set up StarTeam repository to support proof build.
Test proof build as administrator
â
Since proof build set up is a bit tricky, we first set up proof build for the administrator account and make sure it works before we proceed to enable it for all developers. To set up proof build for administrator, please follow below steps:
Login as administrator and download user agent by switching to
My
tab.
Install and start user agent on your own desktop. For testing purpose, please start the agent as a foreground process. On windows, this can be done by running
agent.bat
; on Unix platforms, this can be done by running
agent.sh console
Set up a test configuration on QuickBuild server, define a StarTeam repository, and enable the proof build option in advanced section like below:
Add a
repository/checkout
step into step execution graph and have it checkout from the repository defined above.
Now proof build has been enabled for your account, please try to checkout and edit some files in working view specified above, and then run the test configuration. If set up correctly, your local change will be picked up and reflected in the build result. A local change tab will also appear to display your uncommitted changes after build finishes. Your uncommitted changes will be committed automatically if build is successful.
Enable proof build for all developers
â
Now that we have a concept of how proof build works. In order to get proof build works for all developers, we need to parameterize various proof build properties, so that different properties can be used for different developers. To do this, you will need to:
Define configuration variables like below:
Script various properties in proof build section to make use of above variables like below:
Property Name
Property Value
Working View
${vars.get("workingView")}
User Name
${vars.get("userName")}
Password
${vars.get("password")}
Checkin Condition
build.successful && vars.get("checkin").asBoolean()
Checkin Comment
${vars.get("comment")}
In this way, various proof build properties will be prompted when your developer run the build. Once they've been input by your developer for the first time, the values will be remembered for subsequent triggers for that user.
At last we suggest to set up the configuration to
enable concurrent builds
so that multiple builds in the same configuration can run concurrently. This is vital to get fast feedback in case multiple developers are requesting proof builds in the same time.
Last updated
on
Oct 28, 2024

================================================================================

Title: Working with Subversion
URL: https://wiki.pmease.com/display/QB14/Working+with+Subversion
Breadcrumb:  > Administrator's Guide > Working with SCM systems

Administrator's Guide
Working with SCM systems
Working with Subversion
Version: QB14
On this page
Working with Subversion
Specify svn command location
â
QuickBuild utilizes the svn command to interact with Subversion. If this command is not in system path, you will need to specify location of the command by configuring Subversion plugin as below:
Further more, svn command location can be specified on a per-node basis by following below steps:
Open Subversion plugin setting page and define the svn path property as:
$
{
node
.
getAttribute
(
"svnPath"
)
}
For each node that does not have svn command on system path, define the user attribute
svnPath
to point to the actual svn command location like below:
For user agent node, this user attribute can be defined [follow this guide](Manage User Agent.html#ManageUserAgent-defineuserattributes).
Please note that in above example, the
svnPath
user attribute is just for demonstration purpose. You can use any other user attribute name.
Handling https and svn+ssh schema
â
To connect to Subversion repository with
https
and
svn+ssh
schema, you'll need to permanently accept the Subversion server's certificate from the command line before running QuickBuild. The detailed step is:
Login to the build machine as the user that will be used to launch QuickBuild process.
Connect to your Subversion repository using Subversion command line, and if the server asks for whether or not to save credentials for subsequent usage, choose "yes".
Make sure that subsequent Subversion command does not prompt for username and password.
Start QuickBuild process.
Checkout from multiple urls
â
QuickBuild 2.0 removes module definition for Subversion repository to
keep simple things simple, complex things possible
. In most cases, checking out from a single url is sufficient. However, checking out from multiple urls is still possible, you just need to define multiple Subversion repositories pointing to desired url and to add corresponding checkout steps to check them out.
Things get a bit complex if these urls are pointing to the same Subversion SCM repository, and you want to make sure that these checkouts are performed against the same repository revision. To do this:
Define a top level Subversion repository covering all urls you want to checkout. Let's assume the name of repository is
top
, the
destination path
property of this repository is not important as it will not be used for actual checkout.
Define the property
snapshot taking script
(can be found in advanced settings of a configuration) as below:
var
topRepos
=
repositories
.
get
(
"top"
)
;
topRepos
.
takeSnapshot
(
)
;
repositories
.
get
(
"repository1"
)
.
setRevision
(
topRepos
.
getRevision
(
)
)
;
repositories
.
get
(
"repository2"
)
.
setRevision
(
topRepos
.
getRevision
(
)
)
;
Here
repository1
and
repository2
represents the repositories responsible for checking out codes.
External support
â
If
ignore externals
option is not checked, QuickBuild will checkout specified url together with any external definitions. However, it does not detect changes for external urls, that is, the
isChanged()
method for the repository does not return true even if there are new checkins made into the externals. There are two approaches to get around this:
If you only want to detect changes from externals, and trigger the build if externals are changed.
Keep
ignore externals
unchecked
for the subversion repository.
For each external url, define a corresponding Subversion repository in QuickBuild, the
destination path
property is not important as these repositories will only be used for changing detection. No checkout will be done for these repositories.
Modify the
build necessary condition
to detect changes from these repositories. For example, if the main Subversion repository is defined as
repository1
, and it has two externals, defined as
external1
and
external2
, the
build condition
can be defined as:
repositories
.
get
(
"repository1"
)
.
isChanged
(
)
||
repositories
.
get
(
"external1"
)
.
isChanged
(
)
||
repositories
.
get
(
"external2"
)
.
isChanged
(
)
This approach has a limitation: although it can detect changes from externals and trigger the build, the external changeset does not appear in the
build changes
tab. The next approach addresses this.
If you want to detect changes from externals, and trigger the build if externals has changed. Besides this, you also want changeset of externals appear in the
build changes
tab together with the main repository
Check the option
ignore externals
of the main Subversion repository. That is, the main Subversion repository will no longer be responsible for external checkouts.
For each external url, define a corresponding Subversion repository, and add steps to checkout these repositories together with the main repository. The
destination path
property for these external repositories should be well defined, so that the final checkout directory structure looks the same as the directory structure when externals are enabled to checkout.
Modify the
build necessary condition
to detect changes from these repositories. For example, if the main Subversion repository is defined as
repository1
, and it has two externals, defined as
external1
and
external2
, the
build necessary condition
can be defined as:
repositories
.
get
(
"repository1"
)
.
isChanged
(
)
||
repositories
.
get
(
"external1"
)
.
isChanged
(
)
||
repositories
.
get
(
"external2"
)
.
isChanged
(
)
Proof build support
â
For general concept of proof build, refer to
proof build
. Here we explain how to set up Subversion repository to support proof build.
Test proof build as administrator
â
Since proof build set up is a bit tricky, we first set up proof build for the administrator account and make sure it works before we proceed to enable it for all developers. To set up proof build for administrator, please follow below steps:
Login as administrator and download user agent by switching to
My
tab.
Install and start user agent on your own desktop. For testing purpose, please start the agent as a foreground process. On windows, this can be done by running
agent.bat
; on Unix platforms, this can be done by running
agent.sh console
Set up a test configuration on QuickBuild server, define a Subversion repository, and enable the proof build option in advanced section like below:
Make sure the svn command exist in the system path of both server machine and your desktop. If not, please follow the section
Specify svn command location
to tell QuickBuild location of svn command.
Add a
repository/checkout
step into step execution graph and have it checkout from the repository defined above.
Now proof build has been enabled for your account, please try to checkout and edit some files in working copies specified above, and then run the test configuration. If set up correctly, your local change will be picked up and reflected in the build result. A local change tab will also appear to display your uncommitted changes after build finishes. Your uncommitted changes will be committed automatically if build is successful.
Enable proof build for all developers
â
Now that we have a concept of how proof build works. In order to get proof build works for all developers, we need to parameterize various proof build properties, so that different properties can be used for different developers. To do this, you will need to:
Define configuration variables like below:
Script various properties in proof build section to make use of above variables like below:
Property Name
Property Value
Working Copies
${vars.get("workingCopies")}
User Name
${vars.get("userName")}
Password
${vars.get("password")}
Update Condition
vars.get("update").asBoolean()
Commit Condition
build.successful && vars.get("commit").asBoolean()
Commit Comment
${vars.get("comment")}
In this way, various proof build properties will be prompted when your developer run the build. Once they've been input by your developer for the first time, the values will be remembered for subsequent triggers for that user.
At last we suggest to set up the configuration to
enable concurrent builds
so that multiple builds in the same configuration can run concurrently. This is vital to get fast feedback in case multiple developers are requesting proof builds in the same time.
Last updated
on
Oct 23, 2024

================================================================================

Title: Working with Team Foundation Server
URL: https://wiki.pmease.com/display/QB14/Working+with+Team+Foundation+Server
Breadcrumb:  > Administrator's Guide > Working with SCM systems

Administrator's Guide
Working with SCM systems
Working with Team Foundation Server
Version: QB14
On this page
Working with Team Foundation Server
Prerequisites
â
QuickBuild utilizes the Team Foundation command (tf) to interact with remote Team Foundation Server repository. If this command (tf) is not in system path, you will need to specify location of the command by configuring Team Foundation Server plugin as below:
warning
Whenever possible, install Team Explorer Everywhere CLC. This is because TEE is more CI friendly. If both Visual Studio and TEE are installed, make sure tf command is using TEE version.
TEE can be download from Microsoft
https://www.microsoft.com/en-us/download/details.aspx?id=30661
Further more, Team Foundation command (tf) location can be specified on a per-node basis by following below steps:
Open Team Foundation Server plugin setting page and define the Team Foundation command path property as:
$
{
node
.
getAttribute
(
"tfPath"
)
}
For each node that does not have Team Foundation command on system path, define the user attribute
tfPath
to point to the actual Team Foundation path like below:
NOTE:
example above is just for demonstration, you can use any other user attribute name instead of
tfPath
.
Creating a Team Foundation Server Repository
â
You may refer to
this page
on how to add a repository.
Supported URL prefixes
â
Currently, below URL prefixes are supported:
[
http://host\[:port\]/path/to/branch\
]
[
https://host\[:port\]/path/to/branch\
]
If
https
is used, and your credential need password, you need first add the credential manually to the nodes which you want check out code to.
For Team Foundation Server 2010, the path should be a collection path, for example,
https://myserver/tfs/DefaultCollection
.
Label the source code
â
To label the source code, you can add a label step from the configuration workflow definition page.
Last updated
on
Oct 28, 2024

================================================================================

Title: Working with Visual SourceSafe
URL: https://wiki.pmease.com/display/QB14/Working+with+Visual+SourceSafe
Breadcrumb:  > Administrator's Guide > Working with SCM systems

Administrator's Guide
Working with SCM systems
Working with Visual SourceSafe
Version: QB14
On this page
Working with Visual SourceSafe
Specify sourcesafe command location
â
QuickBuild utilizes the sourcesafe command (normally ss.exe) to interact with SourceSafe database. If this command is not in system path, you will need to specify location of the command by configuring Visual SourceSafe plugin through
Plugin Management
page.
Further more, soucesafe command location can be specified on a per-node basis by following below steps:
Open Visual SourceSafe plugin setting page and set the property
VSS Executable Path
as:
$
{
node
.
getAttribute
(
"ssExePath"
)
}
For each node that does not have sourcesafe command on system path, define the user attribute
vssPath
to point to the actual sourcesafe command path like below:
In case of user agent node, the user attribute need to be defined [in this way](Manage User Agent.html#ManageUserAgent-defineuserattributes).
Please note that in above example, the
ssExePath
user attribute is just for demonstration purpose. You can use any other user attribute name.
Limitations
â
To use this repository, please be aware of below limitations:
If label step is executed after checkout step, the labeled code might not be consistent with the checkout code since SourceSafe only supports create label on the head. To avoid this issue, please execute label step before checkout step.
Due to SourceSafe command line tool limitation, changes are only calculated in the range of minutes. For example, if a build started at 13:30:05, and a second build started at 13:30:50, any changes committed during 13:30:05 and 13:30:50 will not be detected by the second build.
If user name and password is not specified correctly,
ss.exe
will hang and use 100% CPU. Upon this, the only way is to bring out task manager and kill _ss.exe process.
Last updated
on
Oct 23, 2024

================================================================================

Title: Aggregate SCM Changes
URL: https://wiki.pmease.com/display/QB14/Aggregate+SCM+Changes
Breadcrumb:  > Administrator's Guide > Working with SCM systems

Administrator's Guide
Working with SCM systems
Aggregate SCM Changes
Version: QB14
On this page
Aggregate SCM Changes
Aggregate SCM Changes
â
You can aggregate the SCM changes in parent configuration to help know the latest changes for each child configuration like below:
To add aggregation, please go to configuration settings page and add an aggregation for "SCM Changes" like below:
Then, you can define your own aggregation:
Last updated
on
Oct 28, 2024

================================================================================

Title: Build with Xcode
URL: https://wiki.pmease.com/display/QB14/Build+with+Xcode
Breadcrumb:  > Administrator's Guide > Working with Build Tools

Administrator's Guide
Working with Build Tools
Build with Xcode
Version: QB14
On this page
Build with Xcode
Since QuickBuild version 5.1.16, Xcode plugin is bundled. This plugin can help to build Xcode project by calling command
xcodebuild
.
Configure xcodebuild command location
â
QuickBuild calls the command
xcodebuild
to build Xcode project. If this command is not in system path, you will need to specify its location in plugin setting of the Xcode plugin through
Plugin Management
page.
Further more,
xcodebuild
command location can be specified on a per-node basis by following below steps:
Open Xcode plugin setting page and set the property
xcodebuild Path
as:
$
{
node
.
getAttribute
(
"xcodePath"
)
}
For each node that does not have command
xcodebuild
on system path, [define the user attribute](Working with Build Grid.html#WorkingwithBuildGrid-defineuserattributes)
xcodePath
to point to the actual ant command path, for example:
xcodePath
=
/
usr
/
bin
/
xcodebuild
In case of user agent node, the user attribute need to be defined [in this way](Manage User Agent.html#ManageUserAgent-defineuserattributes).
Please note that in above example, the
xcodePath
user attribute is just for demonstration purpose. You can use any other user attribute name.
Last updated
on
Oct 23, 2024

================================================================================

Title: Build with Ant
URL: https://wiki.pmease.com/display/QB14/Build+with+Ant
Breadcrumb:  > Administrator's Guide > Working with Build Tools

Administrator's Guide
Working with Build Tools
Build with Ant
Version: QB14
Build with Ant
QuickBuild supports
Ant
based build through the Ant build step. Ant build step can be added by selecting menu item
Build -> Ant
from the step menu.
QuickBuild calls the command
ant
to run Ant build script. If this command is not in system path, you will need to specify its location in plugin setting of the Ant plugin through
Plugin Management
page.
Further more, ant command location can be specified on a per-node basis by following below steps:
Open Ant plugin setting page and set the property
Ant Executable Path
as:
$
{
node
.
getAttribute
(
"antPath"
)
}
For each node that does not have command
ant
on system path, [define the user attribute](Working with Build Grid.html#WorkingwithBuildGrid-defineuserattributes)
antPath
to point to the actual ant command path, for example:
antPath
=
/
home
/
robin
/
bin
/
ant
In case of user agent node, the user attribute need to be defined [in this way](Manage User Agent.html#ManageUserAgent-defineuserattributes).
Please note that in above example, the
antPath
user attribute is just for demonstration purpose. You can use any other user attribute name.
Last updated
on
Oct 23, 2024

================================================================================

Title: Build with Maven
URL: https://wiki.pmease.com/display/QB14/Build+with+Maven
Breadcrumb:  > Administrator's Guide > Working with Build Tools

Administrator's Guide
Working with Build Tools
Build with Maven
Version: QB14
On this page
Build with Maven
QuickBuild is able to integrate with the popular build tool -
Maven
. A Maven build step can be added by selecting menu item
Build -> Maven
from the step menu.
Configure Maven command location
â
QuickBuild calls the command
mvn
to run Maven build. If this command is not in system path, you will need to specify its location in plugin setting of the Maven plugin through
Plugin Management
page.
Further more, mvn command location can be specified on a per-node basis by following below steps:
Open Maven plugin setting page and set the property
Maven Executable Path
as:
$
{
node
.
getAttribute
(
"mvnPath"
)
}
For each node that does not have command
mvn
on system path, [define the user attribute](Working with Build Grid.html#WorkingwithBuildGrid-defineuserattributes)
mvnPath
to point to the actual
mvn
command path, for example:
mvnPath
=
/
home
/
robin
/
bin
/
mvn
In case of user agent node, the user attribute need to be defined [in this way](Manage User Agent.html#ManageUserAgent-defineuserattributes).
Please note that in above example, the
mvnPath
user attribute is just for demonstration purpose. You can use any other user attribute name.
Control build version
â
If you want to control the build version from QuickBuild side, please follow below steps:
Change the POM file and define the project version as
${buildVersion}
. Do not forget to commit the file into your SCM after change.
Define a build property like below when define the Maven build step:
buildVersion
=
$
{
build
.
version
}
You can also instruct QuickBuild to use version in POM file as build version by checking the
Sync Build Version
option when define the maven build step (since 5.0.8).
Trigger dependent projects
â
When a snapshot version of a library is built, QuickBuild can be configured to do verificatin build of all projects using this snapshot library. This can be done by checking the option
Trigger Dependents
in general setting of the library configuration. Also please make sure that the option
Resolve Effective POM
in maven plugin setting (can be found in page
Administration/Plugin Management
) has been enabled.
warning
Newly added maven configurations have to be triggered at least once (either manually or scheduled) before this works, as QuickBuild has to set up the dependency graph first at the time of running Maven build. Also the configuration has to be built once if dependency information is changed in its POM to update the dependency graph. Normally this will not be a problem if you set up the configuration to build automatically upon repository modification with a schedule.
Last updated
on
Oct 23, 2024

================================================================================

Title: Build with Devenv
URL: https://wiki.pmease.com/display/QB14/Build+with+Devenv
Breadcrumb:  > Administrator's Guide > Working with Build Tools

Administrator's Guide
Working with Build Tools
Build with Devenv
Version: QB14
On this page
Build with Devenv
Most Visual Studio projects can be built from command line with devenv command. QuickBuild supports this method now. You just need add a devenv step in your configuration steps definition.
Configure Devenv command location
â
warning
The deveenv command should be
devenv.com
instead of
devenv.exe
. They exist in the same directory.
By default, QuickBuild executes "devenv.com" to run this build step, and expects this file to be on the system path. If not, you will need to specify path to this file by configuring the Devenv plugin through the
Plugin Management
page.
Further more,
Devenv.com
location can be specified on a per-node basis by following below steps:
Go to Plugin management page and configure Devenv plugin
Set the property
Devenv Executable Path
as below and save:
$
{
node
.
getAttribute
(
"devenvPath"
)
}
For each node that does not have command
devenv.com
on system path or need different version of
devenv.com
, [define the user attribute](Working with Build Grid.html#WorkingwithBuildGrid-defineuserattributes)
devenvPath
to point to the actual Devenv command path, for example:
devenvPath
=
C
:
\
Program
Files
\
Microsoft
Visual
Studio
9.0
\
Common7
\
IDE
\devenv
.
com
In case of user agent node, the user attribute need to be defined [in this way](Manage User Agent.html#ManageUserAgent-defineuserattributes).
Please note that in above example, the
devenvPath
user attribute is just for demonstration purpose. You can use any other user attribute name.
Last updated
on
Oct 23, 2024

================================================================================

Title: Build with MSBuild
URL: https://wiki.pmease.com/display/QB14/Build+with+MSBuild
Breadcrumb:  > Administrator's Guide > Working with Build Tools

Administrator's Guide
Working with Build Tools
Build with MSBuild
Version: QB14
On this page
Build with MSBuild
QuickBuild is able to integrate with the popular build tool - MSBuild for .NET platform. You just need simply add a MSBuild step in the configuration steps definition.
Configure MSBuild command location
â
By default, QuickBuild executes "MSBuild.exe" to run this build step, and expects this file to be on the system path. If not, you will need to specify path to this file by configuring the MSBuild plugin through the
Plugin Management
page.
Further more,
MSBuild.exe
location can be specified on a per-node basis by following below steps:
Go to Plugin management page and configure MSBuild plugin
Set the property
MSBuild Executable Path
as below and save:
$
{
node
.
getAttribute
(
"msBuildPath"
)
}
For each node that does not have command
MSBuild.exe
on system path or need different version of
MSBuild.exe
, [define the user attribute](Working with Build Grid.html#WorkingwithBuildGrid-defineuserattributes)
msBuildPath
to point to the actual MSBuild command path, for example:
msBuildPath
=
C
:
\
WINDOWS
\
Microsoft
.
NET
\
Framework
\
4.0
\
MSBuild
.
exe
In case of user agent node, the user attribute need to be defined [in this way](Manage User Agent.html#ManageUserAgent-defineuserattributes).
Please note that in above example, the
msBuildPath
user attribute is just for demonstration purpose. You can use any other user attribute name.
Configure MSBuild step
â
Basically, QuickBuild just need specify a project file to execute the MSBuild command. QuickBuild also gives you more flexibility to define your MSBuild command, most of the fields are scriptable, that means you need not input fixed values, instead you can input a script and QuickBuild will evaluate it later when this step is triggered.
Last updated
on
Oct 23, 2024

================================================================================

Title: Build with NAnt
URL: https://wiki.pmease.com/display/QB14/Build+with+NAnt
Breadcrumb:  > Administrator's Guide > Working with Build Tools

Administrator's Guide
Working with Build Tools
Build with NAnt
Version: QB14
Build with NAnt
QuickBuild supports
NAnt
based build through the NAnt build step. NAnt build step can be added by selecting menu item
Build -> NAnt
from the step menu.
QuickBuild calls the command
nant.exe
to run NAnt build script. If this command is not in system path, you will need to specify its location in plugin setting of the NAnt plugin through
Plugin Management
page.
Further more, nant command location can be specified on a per-node basis by following below steps:
Open NAnt plugin setting page and set the property
NAnt Executable Path
as:
$
{
node
.
getAttribute
(
"nantPath"
)
}
For each node that does not have command
nant.exe
on system path, [define the user attribute](Working with Build Grid.html#WorkingwithBuildGrid-defineuserattributes)
nantPath
to point to the actual nant command path, for example:
rakePath
=
c
:
\program files\nant\nant
.
exe
In case of user agent node, the user attribute need to be defined [in this way](Manage User Agent.html#ManageUserAgent-defineuserattributes).
Please note that in above example, the
nantPath
user attribute is just for demonstration purpose. You can use any other user attribute name.
Last updated
on
Oct 23, 2024

================================================================================

Title: Build with Rake
URL: https://wiki.pmease.com/display/QB14/Build+with+Rake
Breadcrumb:  > Administrator's Guide > Working with Build Tools

Administrator's Guide
Working with Build Tools
Build with Rake
Version: QB14
Build with Rake
QuickBuild supports
Ruby Rake
based build through the Rake build step. Rake build step can be added by selecting menu item
Build -> Rake
from the step menu.
QuickBuild calls the command
rake
to run Rake build script. If this command is not in system path, you will need to specify its location in plugin setting of the Ruby Rake plugin through
Plugin Management
page.
Further more, rake command location can be specified on a per-node basis by following below steps:
Open Ruby Rake plugin setting page and set the property
Rake Executable Path
as:
$
{
node
.
getAttribute
(
"rakePath"
)
}
For each node that does not have command
rake
on system path, [define the user attribute](Working with Build Grid.html#WorkingwithBuildGrid-defineuserattributes)
rakePath
to point to the actual rake command path, for example:
rakePath
=
/
home
/
robin
/
bin
/
rake
In case of user agent node, the user attribute need to be defined [in this way](Manage User Agent.html#ManageUserAgent-defineuserattributes).
Please note that in above example, the
rakePath
user attribute is just for demonstration purpose. You can use any other user attribute name.
Last updated
on
Oct 23, 2024

================================================================================

Title: Build with Arbitrary Command
URL: https://wiki.pmease.com/display/QB14/Build+with+Arbitrary+Command
Breadcrumb:  > Administrator's Guide > Working with Build Tools

Administrator's Guide
Working with Build Tools
Build with Arbitrary Command
Version: QB14
Build with Arbitrary Command
If your build tool is not directly supported by QuickBuild, you may utilize the command build step to run your builds as long as your build can be performed from command line non-interactively. To add a command build step, choose
Build -> Shell/Batch Command
from the step menu.
Sometimes it is desirable to call back into QuickBuild to execute some scripts while executing the command. To support this, QuickBuild treats all output lines between "## Begin QuickBuild Script" and "## End QuickBuild Script" as script to be executed.
Some examples:
Set build version
version
=
6.0
.0
echo
"## Begin QuickBuild Script"
echo
"groovy:build.setVersion('$version')"
echo
"## End QuickBuild Script"
Set value of a variable
echo
"## Begin QuickBuild Script"
echo
"groovy:vars.get('somevar').setValue('some value')"
echo
"## End QuickBuild Script"
Last updated
on
Oct 23, 2024

================================================================================

Title: Scan code with SonarQube
URL: https://wiki.pmease.com/display/QB14/Scan+code+with+SonarQube
Breadcrumb:  > Administrator's Guide > Working with Build Tools

Administrator's Guide
Working with Build Tools
Scan code with SonarQube
Version: QB14
On this page
Scan code with SonarQube
Since QuickBuild 10,
SonarQube
, a continuous code inspection solution, can be added to your continuous integration workflow.
You can trigger SonarQube to analyze your source code by adding a step. The step can be:
Sonar Scanner Step
Maven Step
Gradle Step
Command line Step
Anonymous Group
â
As QuickBuild uses RESTful API to receive the results from Sonar server, a group named "anonymous" with RESTful API permission need be created first.
Configuring Webhook
â
QuickBuild uses Webhook to communicate with SonarQube. So firstly, you need config the webhook both in QuickBuild and in SonarQube.
QuickBuild Side
â
Go to configuration Settings page, then Webhook tab, you can define the SonarQube settings:
If the "Anyone" pseudo-group does not have permission to perform analyses, you'll need to
supply the credentials of a user with Execute Analysis permission for the analysis to run under. So, you need input Login or Token and Password for authentication. See more details at below page:
https://docs.sonarqube.org/latest/analysis/analysis-parameters/
warning
Important
The Login or Token field and Password field are only used in Sonar Scanner Step. If you use
other steps. like Maven step or Gradle step, those fields are no use.
SonarQube Side
â
Go to project administration page, create a webhook:
Please make sure the secret is identical to the secret filled in QuickBuild.
The URL is in below format:
http
:
/
/
{
your
-
quickbuild
-
host
}
/
rest
/
webhook
/
sonarqube
/
{
configurationId
}
Sonar Scanner Step
â
In configuration workflow, add Sonar Scanner Step to trigger SonarQube to analyze your source code. And beside triggering the analysis, this step can also used to detect the quality gate result.
If you are using Maven Step or Gradle Step to run Sonar scanner, this step can only be used for detecting the quality gate only and fail the build if quality gate is not passed.
Maven Step
â
If you are using Maven step for triggering Sonar Scanner, you need add scanner parameters either in Maven properties section or in step build properties, see more details at below page:
https://docs.sonarqube.org/latest/analysis/scan/sonarscanner-for-maven/
The parameters can be found at below page:
https://docs.sonarqube.org/latest/analysis/analysis-parameters/
QuickBuild need one additional parameter in order to receive the webhook result: sonar.analysis.buildNumber:
sonar
.
analysis
.
buildNumber
:
$
{
build
.
id
}
warning
Property: sonar.analysis.buildNumber is required when using Maven Step to trigger the scanner, otherwise, there is no quality gate report.
Gradle Step
â
If you are using Gradle step for triggering Sonar Scanner, you need add scanner parameters either in Gradle properties file or in step build properties, see more details at below page:
https://docs.sonarqube.org/latest/analysis/scan/sonarscanner-for-gradle/
The parameters can be found at below page:
https://docs.sonarqube.org/latest/analysis/analysis-parameters/
QuickBuild need one additional parameter in order to receive the webhook result: sonar.analysis.buildNumber:
sonar
.
analysis
.
buildNumber
:
$
{
build
.
id
}
warning
Property: sonar.analysis.buildNumber is required when using Gradle Step to trigger the scanner, otherwise, there is no quality gate report.
Command line Step
â
If you are using command line step for triggering Sonar Scanner, you need add scanner parameters in command line directly:
https://docs.sonarqube.org/latest/analysis/scan/sonarscanner/
The parameters can be found at below page:
https://docs.sonarqube.org/latest/analysis/analysis-parameters/
QuickBuild need one additional parameter in order to receive the webhook result: sonar.analysis.buildNumber:
-
Dsonar
.
analysis
.
buildNumber
=
$
{
build
.
id
}
warning
Property: sonar.analysis.buildNumber is required when using command line Step to trigger the scanner, otherwise, there is no quality gate report.
View Quality Gate Result
â
QuickBuild can receive the Quality Gate result from SonarQube webhook and showing them in build report tab:
Last updated
on
Oct 28, 2024

================================================================================

Title: Integrating QuickBuild with JIRA
URL: https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+JIRA
Breadcrumb:  > Administrator's Guide > Working with Issue Tracker

Administrator's Guide
Working with Issue Tracker
Integrating QuickBuild with JIRA
Version: QB14
On this page
Integrating QuickBuild with JIRA
Since QuickBuild 3, a two-way solution is provided to integrate with Atlassian JIRA. The integration features:
Hyperlink the JIRA keys in commit messages to corresponding JIRA pages
Generate an issues report from commit messages
Progress/update the issues from commit messages
Release a version of a project in JIRA and update the fixed versions field of issues with status fixed or closed
Create an issue to JIRA based on a customized step condition
View SCM changes for each issue
View related builds for each issue
View related builds for each project
This page will describe how to integrate JIRA in QuickBuild.
On This Page
Basic Integration
Advanced Integration
Update Issues
Release QuickBuild Version to JIRA
Create Issue from QuickBuild
Trouble Shooting
Triggering Build via Webhook
info
Supported JIRA version should be JIRA 3.13.3 or higher.
Basic Integration
â
To enable the integration:
1. Enable 'Access remote API calls' in JIRA Administration
2. Configure JIRA server in your configuration setting tab
You can associate a JIRA project with this configuration. This project is used when you want to update issues or release version to JIRA. See details below.
After doing these, the issues keys mentioned in commit messages will be hyperlinked:
and an issues report tab will be displayed in Build tab:
NOTE
The issues here will synchronize with JIRA to reflect their latest status.
you can also find all related issues from a specified version and view their changes:
After configured the JIRA server in the configuration settings, below steps are available to add in your build workflow:
Update Issue Step
Release Version Step
Create Issue Step
Advanced Integration
â
Besides the basic integration, QuickBuild also features:
Update issues mentioned in commit messages directly
Cooperate with JIRA to manage both JIRA and QuickBuild version
Release a JIRA version and also update the Fix Version/s field of issues mentioned in commit messages which can help you to generate the Release Notes easily.
Update Issues
â
To update issues from the commit messages,
Update JIRA Issue
step should be added to your build workflow. And you need specify one or more issue updater(s) below in the step:
Update issues according to SCM commit messages
Update issues by a specified JIRA filter
Update issues with specified issue keys
Update issues corresponding to changeset closed tasks
By default, QuickBuild will update issues according to SCM commit messages.
Update issues according to SCM commit messages
â
When QuickBuild find any
commit commands
in the commit message, it will execute these commands to update or progress the issues listed in the commands.
NOTE:
This step should be defined after your checkout step.
QuickBuild will update all issues which are requested from the commit comments from
previous successful
build.
If issue updated manually after committed, this issue will not be updated then.
Only issues which belong to the associated project be updated.
Customize Commit Command
â
The
commit command
has two types:
Progress Command which is used to progress an issue in the JIRA workflow and
step
attribute is required.
Update Command which is used to update an issue only and will not lead to a workflow transition.
The commit commands can be customized in the Update Jira Issue step based on your JIRA workflow definition.
Command Attributes
â
A
commit command
has below attributes, each attribute relates to the field of an issue:
Attribute
Description
summary
a brief one-line summary of the issue.
description
a detailed description of the issue.
type
the type of the issue, for example: Bug, Improvement, Task, etc.
priority
the importance of the issue in relation to other issues.
resolution
a record of the issue's resolution, if the issue has been resolved or closed.
step
the workflow transition that this command triggers. For example, step=Start Progress will progress issue to 'In Progress' status. See
JIRA workflow
for details.
reporter
the person who entered the issue into the system.
assignee
the person to whom the issue is currently assigned.
duedate
specify the issue due date.
dateFormat
specify the date format for due date.
environment
the hardware or software environment to which the issue relates.
affectsVersions
project version(s) for which the issue is (or was) manifesting.
fixVersions
project version(s) in which the issue was (or will be) fixed.
comment
the comment which will be added to the issue and will be diplayed in issue comment tab.
time
:::warning To use time attribute,
time tracking
must be enabled in your JIRA server. Please check with your JIRA administrator, if you cannot record time tracking information against issues.
::: Records the time tracking information of an issue. The syntax for time is:
java <n>w <n>d <n>h <n>m <worklog comment>
Here,
<n>
is user specified time period. For example:
1w 2d 3h 20m Total cost period
- this will record 1 week 2 days 3 hours and 20 minutes against the issue and add the comment 'Total cost period' in the Work Log tab of the issue. |
JIRA custom fields are also supported, for custom fields, below format can be used:
customfield_10000
=
Hello
,
Custom
Field
or
customfield_My
Custom
Field
Name
=
Hello
,
Custom
Field
here,
10000
is the field id of a custom field, and 'My Custom Field Name' is the name of the custom field. Please reference
https://confluence.atlassian.com/display/JIRA/Custom+fields
for details about custom field or consult your JIRA administrator for the custom field id.
Below we will give some example commit messages to illustrate the commit commands:
In below commit message, QuickBuild will resolve the issues TST-1 and TST-2 and add comment
The issue has been fixed
to both issues.
1.
Modified
Foo
.
java
to
fix
TST
-
1
,
TST
-
2
--
comment
The
issue has been fixed
2.
Some
dummy comments
.
.
.
In below commit message, QuickBuild will add
2d 3h
to the worklog and add comment
Some comment
to issue TST-1. The value of time
2d 3h
should be used the format defined in JIRA time tracking.
Update
TST
-
1
--
time
2d
3
h
--
comment
Some
comment
In below commit message, the value of custom field 10000 will be updated to
for custom field
Update
TST
-
1
--
customfield_10000
for
custom field
You can define common attributes in the Update Jira Issue step so that when updating issues, the attributes can be applied to all of the issues. When an attribute is specified both in
commit command
and
Extra Attributes
, the value in commit command will be used.
Update issues by a specified JIRA filter
â
This updater is used to retrieve the issues to be updated from a specified JIRA filter. This filter should be saved by the user defined in configuration JIRA server setting. And you also need specify the workflow action you want to take.
!filter-updater!
Update issues with specified issue keys
â
This updater is much similar to update issues by filter. You can specify the JIRA keys directly here, or you can input a script here to generate the issue keys to be updated.
Update issues corresponding to changeset closed tasks
â
Currently, this updater can only work with Perforce. If your Perforce job is associated with JIRA issue, QuickBuild will extract the issue keys from those closed jobs and then update the issue status.
Release QuickBuild Version to JIRA
â
To release version to JIRA,
Release JIRA Version
step should be added to your build workflow. And this step will release the build version to the associated project in JIRA. If this version does not exist, QuickBuild will create it automatically. Also, you can define one or more issue provider(s) below to provide the issues which you want to update their 'Fix Version/s' fields:
Resolved/Closed issues found in commit messages
Resolved/Closed issues in previous update issue steps
Issues filtered by a specified filter (the filter should be saved by the user defined in configuration JIRA server setting)
Issues with specified keys
Issues corresponding to changeset closed tasks (currently, this can only work with Perforce, see Update issues corresponding to changeset closed tasks above)
Do not update issues
Resolved/Closed issues found in commit messages
â
Resolved/Closed issues in previous update issue steps
â
Issues filtered by a specified filter
â
The filter should be saved by the user defined in configuration JIRA server setting.
Issues with specified keys
â
You can specify the issue keys directly or you can input a script to generate the issue keys.
Issues corresponding to changeset closed tasks
â
Currently, this can only work with Perforce. If your Perforce job is associated with JIRA issue, QuickBuild will extract the issue keys from those closed jobs.
Do not update issues
â
If you don't want to update the Fix Version/s field, you can use this.
warning
The user defined in JIRA Setting must have global or project administrator rights in order to release version.
Only the issues with status closed or resolved in the associated project will be updated.
The version can be managed either from QuickBuild or from JIRA:
Manage from QuickBuild
â
By default, the version is managed by QuickBuild, that means you need not define any version for the associated project in JIRA and QuickBuild will automatically create and release the version of this build.
Manage from JIRA
â
Sometimes, you want to manage the versions in JIRA side by yourself and let QuickBuild retrieve the version from JIRA. In this scenario, you just need change your
Next Build Version
(in configuration settings -> General Setting section) to
use next unreleased version from JIRA
, and then you will find the next build version will be the first unreleased version you defined in JIRA when go to configuration dashboard.
Create Issue from QuickBuild
â
You may create an issue from QuickBuild by adding a
Create JIRA Issue
step. A common case is that when build failed, create an issue so that we can track the build from JIRA.
Trouble Shooting
â
Q: I have written the commit commands in my commit message correctly, but QuickBuild doesn't execute them and update the issues.
A: In most cases, that is because your SCM user does not associate with your JIRA account correctly. See
how to associate them
in this page.
Q: I can't add comment to a closed issue, why?
A: You need modify the file $JIRA_HOME/atlassian-jira/WEB-INF/classes/jira-workflow.xml, find 'Closed' step and change the value of 'jira.issue.editable' to
true
.
Q: The commit command failed with error: Workflow step 'Start Progress' is not valid for issue: ABC-123.
A: Normally, this is caused by several commit commands were submitted in wrong order to change the issue status. For example, two commit commands submitted to progress issue TST-123:
Close TST-123 // OK, changed status to Closed
Fix TST-123 // Error! Workflow step is not valid
Q: How to update a custom field with multiple users selection
A: To update a custom field with multiple users, you can input below lines in the Extra Attributes field:
customfield_Your Users Field=name:steve,name:robin
That is, use comma to separate the user and use colon to separate the property.
Triggering Build via Webhook
â
To trigger build via JIRA webhook, first, you need create a webhook setting in JIRA like below:
Here, the URL is in below format:
http
:
/
/
quickbuild
.
host
/
rest
/
webhook
/
jira
/
$
{
project
.
key
}
?
token
=
{
your_token
}
Please replace the QuickBuild host and token with your actual value.
The token is used for verification with QuickBuild.
After setting up at JIRA side, go back to QuickBuild, in Administration -> Plugin Management page, search JIRA plugin:
then config it by filling below two fields:
Project Mappings, config the project mappings between JIRA project and QuickBuild configuration.
Token, specify the access token for security reason
then, go to the configuration you want and set up the webhook setting in the configuration setting:
filling below fields:
Last updated
on
Oct 28, 2024

================================================================================

Title: Integrating JIRA with QuickBuild
URL: https://wiki.pmease.com/display/QB14/Integrating+JIRA+with+QuickBuild
Breadcrumb:  > Administrator's Guide > Working with Issue Tracker

Administrator's Guide
Working with Issue Tracker
Integrating JIRA with QuickBuild
Version: QB14
On this page
Integrating JIRA with QuickBuild
Since QuickBuild 3, a two-way solution is provided to integrate with Atlassian JIRA. The integration features:
Hyperlink the JIRA keys in commit messages to corresponding JIRA pages
Generate an issues report from commit messages
Progress/update the issues from commit messages
Release a version of a project in JIRA and update the fixed versions field of issues with status fixed or closed
Create an issue to JIRA based on a customized step condition
View SCM changes for each issue
View related builds for each issue
View related builds for each project
This page will describe how to integrate QuickBuild in JIRA.
info
Supported JIRA version: 4.0 or higher.
On This Page
Install QuickBuild Plugin For JIRA
Configure QuickBuild Server
Issue Changes and Issue Builds
Project Builds
Install QuickBuild Plugin For JIRA
â
Download QuickBuild Plugin for JIRA from administration page like below:
Shutdow JIRA server.
Copy the plugin jar into plugins directory: {JIRA_HOME}/plugins/installed-plugins/
Start JIRA server.
You may reference
https://confluence.atlassian.com/display/JIRA/Managing+JIRA's+Plugins
for details about managing JIRA plugin.
Configure QuickBuild Server
â
If the plugin has been installed successfully, you can configure the QuickBuild server from Administration page:
To add a QuickBuild Server, you need define the associations between JIRA project and QuickBuild configuration(s). One JIRA project can be associated with multiple QuickBuild configurations.
Issue Changes and Issue Builds
â
warning
Issue changes and builds are only available when JIRA for QuickBuild plugin is configured. Reference
Integrating QuickBuild with JIRA
for details.
After successfully configured QuickBuild server, you can now view the related changes for an issue:
Click the 'View' link to view the source code, and 'Diff Prev' to diff the source code with previous edition.
and also the related builds:
Project Builds
â
You can also view the builds history from your JIRA project tab.
Last updated
on
Oct 28, 2024

================================================================================

Title: Integrating QuickBuild with JIRA Cloud
URL: https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+JIRA+Cloud
Breadcrumb:  > Administrator's Guide > Working with Issue Tracker

Administrator's Guide
Working with Issue Tracker
Integrating QuickBuild with JIRA Cloud
Version: QB14
On this page
Integrating QuickBuild with JIRA Cloud
Since QuickBuild 10, a two-way solution is provided to integrate with Atlassian JIRA Cloud. The integration features:
Hyperlink the JIRA keys in commit messages to corresponding JIRA Cloud pages
Generate an issues report from commit messages
Create an issue to JIRA based on a customized step condition
View SCM changes for each issue
View related builds for each issue
View related builds for each project
QuickBuild Side
â
JIRA Cloud Issue Tracker
â
To collect the issues information, you need first add JIRA Cloud tracker setting in QuickBuild. The tracker setting can be defined from Configuration settings -> Issue Tracker -> JIRA Cloud:
Then, fill in the required information:
The token can be generated from:
https://id.atlassian.com/manage/api-tokens
See more about API token at the following page:
https://confluence.atlassian.com/cloud/api-tokens-938839638.html
Jira Cloud Issues Report
â
After doing these, the issues keys mentioned in commit messages will be hyperlinked:
and an issues report tab will be displayed in Build tab:
Create Issue Step
â
You can also create a issue based on build status or any conditions you want by adding a Create Issue Step just like any other steps in configuration workflow.
The only thing we want to mention here is that if you have some custom fields which are required when creating issue, you need specify them in Extra Attributes:
The format for extra attributes is JSON, for example:
{
"customfield_10001"
:
"my custom status"
,
"customfield_10010"
:
{
"type"
:
"obj"
,
"name"
:
"test"
}
}
Jira Cloud Side
â
To view project builds, issue related builds or issue related changes in Jira Cloud. First, we need add mappings for Jira Project and QuickBuild configurations.
Add Project Mapping
â
Go to QuickBuild administration page, and then Plugin Management tab, find Jira Cloud Integration:
add the mappings in the plugin setting:
Install QuickBuild App
â
In Jira Cloud, open Jira Settings page, click Apps, then Manage Apps:
From the bottom of the page, there is a link named Settings
Click and enable Development Mode so you can install the app not from Atlassian market place.
After enable the development mode, you can add QuickBuild integration by uploading app:
The QuickBuild integration URL is:
https://your-quickbuild-server/rest/jiracloud/connect/atlassian-connect.json
Please replace your-quickbuild-server with your actual server url.
NOTE
your quickbuild instance should be accessible from internet.
If the installation is successful, you will see QuickBuild listed in the list:
Project Builds
â
Go to your project page, you will see QB Builds in the project sidebar:
Click QB Builds will show you the latest builds related to this project:
Issue Builds and Issue Changes
â
For a specific issue, the integration can also show you the related builds for that issue,
and related SCM changes:
Last updated
on
Oct 23, 2024

================================================================================

Title: Integrate QuickBuild with GitHub Issue
URL: https://wiki.pmease.com/display/QB14/Integrate+QuickBuild+with+GitHub+Issue
Breadcrumb:  > Administrator's Guide > Working with Issue Tracker

Administrator's Guide
Working with Issue Tracker
Integrate QuickBuild with GitHub Issue
Version: QB14
On this page
Integrate QuickBuild with GitHub Issue
Since QuickBuild 5.1.0, QuickBuild integrates with GitHub by featuring:
Hyperlink the issue ids mentioned in commit message
Generate an issues report from commit messages
Create an issue to Bugzilla based on step condition
Configure GitHub Issue Tracker
â
Go to configuration settings and select GitHub server to define, and then below screen will be displayed:
Below lists the descriptions of these properties:
Property
Description
Server URL
The URL of GitHub server.
User Name
The user name which will be used to retrieve the issues information from GitHub server.
Password
The password for the user.
Issue Pattern
Uses
Java regular expression
to match the issue ids from commit messages. By default, below pattern will match #123 or bug:123. ```java (?<!:)(?:#
After you configured, all issues mentioned in commit messages will by hyperlinked:
and an issues report will be shown in Issues tab:
Create issue to GitHub
â
To create an issue to GitHub,
Create GitHub Issue
step should be added to your build workflow. You may use this step to track your build status in GitHub.
Last updated
on
Oct 28, 2024

================================================================================

Title: Integrating QuickBuild with TeamForge
URL: https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+TeamForge
Breadcrumb:  > Administrator's Guide > Working with Issue Tracker

Administrator's Guide
Working with Issue Tracker
Integrating QuickBuild with TeamForge
Version: QB14
On this page
Integrating QuickBuild with TeamForge
The integration features:
Hyperlink TeamForge artifacts in commit message to corresponding TeamForge pages
Generate an issues report from commit messages
Display the modifications of each issue
Update TeamForge tracker artifacts based on
commit commands in the commit messages
a list specified manually
a specified query based on lucene search syntax
Generate TeamForge tracker artifacts based on the build or step status
Create a release to TeamForge File Releases along with:
Updating "Fix in Release" fields
Updating specified fields of TeamForge tracker artifacts
Publishing files to the release
Upload files to TeamForge documents
Delegate user management to TeamForge logins. (
NOTE
if you are using LDAP as TeamForge authenticator, please also use LDAP authenticator instead.)
NOTE
Supported Team Forge version should be TeamForge 5.4 or higher.
Below we will describe how to integrate with TeamForge.
Basic Integration
Create TeamForge Artifact
Create TeamForge Release
Update TeamForge Artifacts
Upload Files to TeamForge Documents
Supported TeamForge Artifact Attributes
Delegate user management to TeamForge logins
Integrate with Orchestrate
Basic Integration
â
In configuration setting > Issue Tracker > TeamForge Server, you can define the TeamForge setting like below:
After the setting defined, the QuickBuild can generate the issues report automatically based on your commit messages, moreover, all TeamForge tracker artifact ids occurred in commit messages are hyperlinked.
TeamForge Issues Report
Artifacts link in commit messages
And now below steps are available for you to add to your workflow:
Create TeamForge Artifact
Create TeamForge Release
Update TeamForge Artifacts
Upload Files to TeamForge
Create TeamForge Artifact
â
In your configuration workflow definition, you can add one or more "Create TeamForge Artifact" step to create TeamForge artifacts based on the build status or step status.
Create TeamForge Release
â
In your configuration workflow definition, you can add a "Create TeamForge Release" step to create a release in the specified package. The step can also help you to update the "Fixed in Release" field of specified TeamForge artifacts, moreover, you may update extra fields via "extra attributes".
Also, you may upload files based on "File Pattern" to the release.
Update TeamForge Artifacts
â
In your configuration workflow definition, you can add a "Update TeamForge Artifacts" step to update the TeamForge tracker artifacts. The artifacts are provided from commit message, from a specific list, or from a lucene search.
Upload Files to TeamForge Documents
â
In your configuration workflow definition, you can add a "Upload Files to TeamForge" step to upload files to TeamForge documents.
Supported TeamForge Artifact Attributes
â
Besides the attributes you need input in the step, you may specify extra attributes with below format line by line:
attribute name=attribute value
Below lists all supported attributes:
Attribute Name
Description
title
The title of the artifact
description
The description of the artifact
group
The group of the artifact
category
The category of the artifact
status
The status of the artifact
customer
The customer of the artifact
estimatedEffort
The estimated effort of the artifact. Number only.
remainingEffort
The remaining effort of the artifact. Number only.
autosumming
Whether auto summing the effort or not. true or false.
assignee
The assignee of the artifact
fixedIn
The release id this artifact is fixed in
comment
The comment for updating the artifact
Flex/Custom Fields
The flex/custom fields are also supported, you need add a prefix "flex:" to the custom field name. For example, you have a custom field named
My Custom1
, and if you want to specify the value, you need write like:
flex
:
My
Custom1
=
Some
value
When you update TeamForge artifact via commit command, you need replace all space to underscore "_", for example:
Fix
artf1100
--
flex
:
My_Custom1
Some
value
Delegate user management to TeamForge logins
â
To delegate user management to TeamForge is very easy, just go to Administration page and select Authenticators page, then add a TeamForge authenticator and QuickBuild will use TeamForge logins to authenticate the users.
Integrate with Orchestrate
â
To integrate with Orchestrate, first, you need enable Orchestrate feature in TeamForge, please refer to the TeamForge documentation for details.
After Orchestrate is enabled in your project, go to Orchestrate page and click Manage Source button, you will see below page:
Choose Build category and click button
Add a new source
, so you can add QuickBuild source like below:
Now, copy and paste the settings to our QuickBuild TeamForge server:
After adding Orchestrate successfully, each time the build is finished, QuickBuild will post a message to Orchestrate and you will see the message in Orchestrate like below:
Last updated
on
Oct 28, 2024

================================================================================

Title: Integrating QuickBuild with Trac
URL: https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+Trac
Breadcrumb:  > Administrator's Guide > Working with Issue Tracker

Administrator's Guide
Working with Issue Tracker
Integrating QuickBuild with Trac
Version: QB14
On this page
Integrating QuickBuild with Trac
QuickBuild now integrate with
Trac
natively. The integration features:
Hyperlink the Trac ticket id in commit messages to corresponding JIRA pages
Generate an issues report from commit messages
Progress/update the issues from commit messages
Release a milestone of a project in Trac
Create an issue to Trac based on step condition
This page will describe how to integrate Trac in QuickBuild.
On This Page
Basic Integration
Advanced Integration
Update Tickets
Release Milestone
Create Ticket
info
Supported Trac version: 0.11 or higher.
Basic Integration
â
To enable the integration:
Install and enable XML RPC plugin for Trac.
This plugin and its installation guide can be found at below link:
https://trac-hacks.org/wiki/XmlRpcPlugin
Configure Trac Server on configuration settings tab.
Below lists the descriptions of these properties:
Property
Description
Server URL
Defines the server url. you can test it by adding "/rpc", for example, if the server url is:
http://localhost/trac/project
, open below url in your browser:
http://localhost/trac/project/rpc
, and if the "Remote Procedure Call (RPC)" page can be displayed correctly, this url can work in QuickBuild.
User Name
The user should have TICKET_VIEW permission. If you want to update issues from QuickBuild, the user should also have TICKET_MODIFY permission.
Password
The password for the user.
Ticket Pattern
Defines the ticket pattern which will be used to extract the ticket id from commit messages. The ticket pattern here uses
Java regular expression
to match the ticket ids. By default, below pattern will match #123 or ticket:123. ```java (?<!:)(?:#
After doing these, the issues keys mentioned in commit messages will be hyperlinked:
and a ticket report will be displayed in Build tab:
you can also find all related issues from a specified version and view the changes for an issue:
After configured the Trac server in the configuration settings, below steps are available to add in your build workflow:
Update Issue Step
Release Version Step
Create Issue Step
Advanced Integration
â
Besides the basic integration, QuickBuild also features:
Update tickets mentioned in commit messages directly
Cooperate with Trac to manage both Trac and QuickBuild version
Release a Trac milestone and also update the milestone field of tickets mentioned in commit messages which can help you to generate the Release Notes easily.
Update Tickets
â
To update tickets from the commit messages,
Update Trac Ticket
step should be added to your build workflow. And when QuickBuild find any
commit commands
in the commit messages, QuickBuild will submit them to Trac to update or progress the tickets.
NOTE:
To update issues, QuickBuild need map SCM committer to Trac user as we want to make sure the updates in Trac are made by the same person who submits the commit commands.
This step should be defined after your checkout step.
QuickBuild will update all tickets which are requested from the commit comments from
previous successful
build.
If a ticket updated manually after committed, this tickets will not be updated then.
Associated SCM user with Trac user
â
If the username and password in your SCM, QuickBuild and Trac are same, the association between them is already set up. Or you have to associate them together:
If the SCM user is different with QuickBuild user, you need associate them in your configuration Repository settings.
If the Trac user is different with QuickBuild user, you need associate them in Administration -> User Management tab (if you are administrator) or go to My tab (if you are normal user) and enable and input your Trac account like below:
Customize Commit Command
â
The
commit command
can be customized in step definition:
The
commit command
property defines the commit command which you can change to meet your company requirements. And the
update attributes
here are what you want to change in your Trac when executing the commit command. For example, when executing
accept
commit command above, QuickBuild will update the ticket status and change it to accept, also will update the owner to the command committer which is same as the SCM committer.
Below section will discuss the attributes available.
Command Attributes
â
The command attributes for Trac are defined by the Trac server. You may ask your Trac administrator for available attributes or reference
https://trac.edgewall.org/wiki/TracTickets
. By default Trac installation, the attributes include:
type
- The nature of the ticket (for example, defect or enhancement request)
reporter
- The author of the ticket.
summary
- A brief description summarizing the problem or issue.
description
- The body of the ticket.
component
- The project module or subsystem this ticket concerns.
version
- Version of the project that this ticket pertains to.
status
- What is the current status? One of new, assigned, closed, reopened or whatever you add/customize in the Trac.
resolution
- Reason for why a ticket was closed.
priority
- The importance of this issue, ranging from trivial to blocker.
milestone
- When this issue should be resolved at the latest.
owner
- Principal person responsible for handling the issue.
cc
- A comma-separated list of other users or E-Mail addresses to notify.
comment
- Add a comment to the ticket
These attributes can be used not only in the
Update Trac Ticket
step, but also in the
commit commands
.
Besides the attributes specified in the
commit command
, the
Extra Attributes
in the step definition is used to add some common attributes you want. For example, you want leave a comment against each updating, you may define the extra attributes like:
comment
=
Updated
in build $
{
build
.
getVersion
}
Each attribute should use one line and you can use script (see the example above) which gives you more flexibility to control the value you want to input to the issue.
Release Milestone
â
To release milestone to Trac server,
Release Trac Milestone
step should be added to your build workflow. This step will set or update the complete date of milestone, if the milestone does not exist in Trac, QuickBuild will create it and add it to Trac.
This step will also update the milestone field of all tickets mentioned in the commit messages from previous successful build.
Although, the released milestone uses build version, you can still manage the milestone by yourself from Trac side and let QuickBuild use them.
Use Trac milestone as build version
â
To use Trac milestone as your build version is very simple, you just need go to configuration settings and set the property
Next Build Version
to
Use next unreleased milestone from Trac
. By doing this, the next build version will use the default next milestone which defined in Trac.
Create Ticket
â
By adding
Create Trac Ticket
step, you can create a ticket to Trac based on your step condition which can be used to manage the build status in the Trac.
Last updated
on
Oct 28, 2024

================================================================================

Title: Integrating QuickBuild with Bugzilla
URL: https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+Bugzilla
Breadcrumb:  > Administrator's Guide > Working with Issue Tracker

Administrator's Guide
Working with Issue Tracker
Integrating QuickBuild with Bugzilla
Version: QB14
On this page
Integrating QuickBuild with Bugzilla
Since QuickBuild 3, QuickBuild can integrate with Bugzilla, it features:
Hyperlink the issue ids mentioned in commit message
Generate an issues report from commit messages
Create an issue to Bugzilla based on step condition
Configure Bugzilla
â
To enable the integration, you need configure Bugzilla setting first. Go to configuration settings and select Bugzilla Server to define, and then below screen will be displayed:
Below lists the descriptions of these properties:
Property
Description
Server URL
The URL of Bugzilla server. http:// or https:// is needed here.
User Name
The user name which will be used to retrieve the issues information from Bugzilla server.
Password
The password for the user.
Issue Pattern
Uses
Java regular expression
to match the issue ids from commit messages. By default, below pattern will match #123 or bug:123. ```java (?<!:)(?:#
After you configured, all issues mentioned in commit messages will by hyperlinked:
and an issues report will be shown in Issues tab:
Create issue to Bugzilla
â
To create an issue to Bugzilla,
Create Bugzilla Issue
step should be added to your build workflow. You may use this step to track your build status in Bugzilla.
Trouble shooting
â
If QuickBuild complains XmlRpcException, please make sure you have installed SOAP module like below:
$ perl
-
MCPAN
-
e 'install
"SOAP::Lite"
'
Last updated
on
Oct 28, 2024

================================================================================

Title: Integrating QuickBuild with Redmine
URL: https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+Redmine
Breadcrumb:  > Administrator's Guide > Working with Issue Tracker

Administrator's Guide
Working with Issue Tracker
Integrating QuickBuild with Redmine
Version: QB14
On this page
Integrating QuickBuild with Redmine
The integration features:
Hyperlink the issue ids mentioned in commit message
Generate an issues report from commit messages
Display SCM commits associated with each issue.
Configure Redmine
â
To enable the integration, you need configure Redmine setting first. Go to configuration settings->Issue Tracker->Redmine server, and then below screen will be displayed:
Below lists the descriptions of these properties:
Property
Description
Server URL
The URL of Bugzilla server. http:// or https:// is needed here.
User Name
The user name which will be used to retrieve the issues information from Bugzilla server.
Password
The password for the user.
Issue Pattern
Uses
Java regular expression
to match the issue ids from commit messages. By default, below pattern will match #123 or bug:123. ```java (?<!:)(?:#
Associated Project
The key of the related project.
After you configured, all issues mentioned in commit messages will by hyperlinked:
and an issues report will be shown in Issues tab:
Last updated
on
Oct 28, 2024

================================================================================

Title: Integrating QuickBuild with Other Issue Tracker
URL: https://wiki.pmease.com/display/QB14/Integrating+QuickBuild+with+Other+Issue+Tracker
Breadcrumb:  > Administrator's Guide > Working with Issue Tracker

Administrator's Guide
Working with Issue Tracker
Integrating QuickBuild with Other Issue Tracker
Version: QB14
Integrating QuickBuild with Other Issue Tracker
For those issue trackers QuickBuild not support, you can define a search pattern and a replace pattern in
Comments Transformer
. For example, we want to hyperlink all issue keys mentioned in commit messages to corresponding Bugzilla issue page, we can define search pattern as:
(
?
<
!
\
:
)
(
?
:
#
|
bug
:
)
(
\d
+
)
(
\b
|
$
)
and define replace pattern as:
<
a target
=
"_blank"
title
=
"Click to open this issue a new window"
href
=
"http://mybugzilla.com/browse/$1"
>
#$
1
<
/
a
>
You can define arbitary HTML pieces here. The syntax for the pattern is useing
Java regular expression
.
Last updated
on
Oct 23, 2024

================================================================================

Title: Commit Command
URL: https://wiki.pmease.com/display/QB14/Commit+Command
Breadcrumb:  > Administrator's Guide > Working with Issue Tracker

Administrator's Guide
Working with Issue Tracker
Commit Command
Version: QB14
Commit Command
Commit command is used in commit message to update or progress issues. It has below syntax:
COMMAND_NAME
ISSUE_KEY
[
ISSUE_KEY
.
.
.
]
[
--
OPTION1
VALUE1
]
[
--
OPTION2
VALUE2
]
For example, the command below means: command name is
Fix
, issues are
TST-1
,
TST-2
and TST-3, with one attribute
comment
which value is
implemented a cool feature
Fix
TST
-
1
,
TST
-
2
and
TST
-
3
--
comment implemented a cool feature
Normally, one command is in one line
, if you need multiple line for an attribute, a '\' should be added to the end of line, for example:
Fix
TST
-
1
--
comment
First
line \
Second
line \
Third
line
Command Name
The action can be customized when you add an
Update Issue Step
. The action in commit command is case-insensitive that means Fix TST-1 is equals to fix TST-1 or FIX TST-1.
Issue Key
The issue key is issue tracker related. You can customize it in related issue tracker settings by using
Java regular expression
.
Command Option
Command options in a commit command use defined attributes in issue tracker and they are issue tracker related. Please reference them in the corresponding page in this wiki.
Last updated
on
Oct 23, 2024

================================================================================

Title: Publish Build Artifacts
URL: https://wiki.pmease.com/display/QB14/Publish+Build+Artifacts
Breadcrumb:  > Administrator's Guide > Artifact Management

Administrator's Guide
Artifact Management
Publish Build Artifacts
Version: QB14
Publish Build Artifacts
Artifacts
can be published to build server during the build process. These artifacts can be manually downloaded by user from QuickBuild web interface, or can be used as dependency while building other projects. To publish artifacts, just add the step
Publish -> Artifacts
from the step menu.
Properties in the artifact publish step are explained in the online help, and we will not repeat it here. Instead, we will give an example to help you better understand how to publish the artifacts. Suppose the
workspace
has the following directory structure:
distribution
/
file1
.
zip
file2
.
zip
docs
/
file1
.
doc
file2
.
doc
And we want that the artifact directory has following directory structure after publish step:
file1
.
zip
file2
.
zip
userguide
/
file1
.
doc
file2
.
doc
To accomplish this, you will need two artifact publish steps, one that publishes zip files, and the another that publishes doc files. Key property of the zip publish step are listed below:
from directory
: distribution
files to publish
: *.zip
destination directory
: <left empty>
Key properties of the doc publish step are:
from directory
: docs
files to publish
: *.doc
destination directory
: userguide
Last updated
on
Oct 23, 2024

================================================================================

Title: Store Build Artifacts on Agent
URL: https://wiki.pmease.com/display/QB14/Store+Build+Artifacts+on+Agent
Breadcrumb:  > Administrator's Guide > Artifact Management

Administrator's Guide
Artifact Management
Store Build Artifacts on Agent
Version: QB14
Store Build Artifacts on Agent
Since QuickBuild 5.0, build artifacts can be stored on one or more agents to reduce load of publishing and serving artifacts from QuickBuild server. For instance, one can edit advanced setting of a configuration to store artifacts of all its builds on desired agent as below:
Thanks to the inheritance nature of configuration settings, all descendant configurations will also store artifacts on that agent unless they has its own artifact storage strategy defined.
When you decide to store artifacts on agent, please note that:
You may need to tune your firewall setting to allow users accessing port of involved build agents to download build artifacts from GUI.
You may need to tune the firewall setting to allow other agents accessing port of involved build agents to publish and download artifacts during a build.
Users will be prompted to input their credentials again when downloading artifacts from GUI if artifacts are not allowed to be accessed anonymously on relevant build agents.
By default artifacts are stored on agent under the directory
<build agent install dir>/storage/<build id>/artifacts
. So please be careful not to remove this folder when manually upgrade your build agent (manually upgrade build agent is generally not necessary as QuickBuild server can upgrade them automatically in most cases).
If you'd like to store artifacts on some other places on agent other than the default directory, please do the following:
Modify storage directory setting in advanced setting of relevant configuration like below:
Then define the user attribute
storageDir
on relevant agents like below for instance:
Last updated
on
Oct 28, 2024

================================================================================

Title: Artifactory Integration
URL: https://wiki.pmease.com/display/QB14/Artifactory+Integration
Breadcrumb:  > Administrator's Guide > Artifact Management

Administrator's Guide
Artifact Management
Artifactory Integration
Version: QB14
On this page
Artifactory Integration
JFrog's Artifactory
is a popular artifact management server. Integration with Artifactory enables QuickBuild to publish artifacts to Artifactory server as well as using published artifacts as build dependencies.
Prerequisites
â
This plugin requires professional version of Artifactory. Version 3.4.2 has been tested.
Enable Artifactory integration
â
To enable Artifactory integration, login to QuickBuild as administrator to configure Artifactory plugin like below:
Publish artifacts to Artifactory
â
To publish artifacts to Artifactory, add a step of type
Publish > Artifactory Artifacts
like below:
Once published, the artifacts will appear in artifactory repository together with associated build information like below:
You may publish desired properties along with the build information via configuration level Artifactory setting like below:
After publishing, QuickBuild will display links to published artifacts as below:
Use artifacts published to Artifactory
â
Configurations in QuickBuild can be set up to use artifacts published to Artifactory as build dependencies. To do it, define a repository of type
Artifactory Artifacts
at QuickBuild side like below:
And then add a step to check out this repository just as other repositories. The repository is considered to be changed if the build version is set to LATEST, and there are new versions published under specified build name.
Last updated
on
Oct 28, 2024

================================================================================

Title: Amazon S3 Integration
URL: https://wiki.pmease.com/display/QB14/Amazon+S3+Integration
Breadcrumb:  > Administrator's Guide > Artifact Management

Administrator's Guide
Artifact Management
Amazon S3 Integration
Version: QB14
On this page
Amazon S3 Integration
Since QuickBuild 10, artifacts can be published to Amazon S3 (
Amazon Simple Storage Service
), artifacts can also be checked out from Amazon S3.
Publish Artifacts
â
To publish artifacts to Amazon S3, you can add Publish S3 Artifacts step to your build workflow:
In step definitions, specify the source directory and files to publish pattern, and S3 bucket and region fields are required.
if artifacts have been published to S3 successfully, QuickBuild will show you the artifacts report in build overview page like below:
Authentication
â
In QuickBuild, credential provider chain looks for credentials in below order to communicate with S3 service:
Step level
: access key id and access secret specified in the step.
Credential File
specified in EC2 plugin setting.
Environment variables
: AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY
Java system properties
: aws.accessKeyId and aws.secretKey.
The default credential profiles file
: typically located at ~/.aws/credentials (location can vary per platform).
Amazon ECS container credentials
: loaded from the Amazon ECS if the environment variable AWS_CONTAINER_CREDENTIALS_RELATIVE_URI is set.
S3 Repository
â
You can also use S3 as a repository and then later use checkout step to checkout the artifacts from Amazon S3.
Last updated
on
Oct 28, 2024

================================================================================

Title: Publish Boost Test Report
URL: https://wiki.pmease.com/display/QB14/Publish+Boost+Test+Report
Breadcrumb:  > Administrator's Guide > Publish Build Reports

Administrator's Guide
Publish Build Reports
Publish Boost Test Report
Version: QB14
On this page
Publish Boost Test Report
To publish
Boost Test
report, you only need two steps:
Generate Boost Test
XML
report.
Add a Publish Boost Test Report step by choosing Settings->Steps->
Publish ->Boost Test Report
in step menu.
Generate Boost XML Report
â
Boost.Test can output test reports in XML format. Suppose the program that runs your tests is called run_tests, then we can get an XML report by running that program as:
run_tests
--
log_format
=
XML
--
report_level
=
detailed
and below XML report will be generated:
<
TestLog
>
<
TestSuite
name
=
"MyBoostTest"
>
<
TestSuite
name
=
"FooSuites"
>
<
TestCase
name
=
"simpleTestCase"
>
<
Message
file
=
"./boost/test/impl/results_collector.ipp"
line
=
"210"
>
<
!
[
CDATA
[
Test
case
simplePass did not check any assertions
]
]
>
<
/
Message
>
<
TestingTime
>
35
<
/
TestingTime
>
<
/
TestCase
>
<
TestCase
name
=
"checkFailure"
>
<
Error
file
=
"main.cpp"
line
=
"30"
>
<
!
[
CDATA
[
check
add
(
2
,
2
)
==
4
failed
]
]
>
<
/
Error
>
<
TestingTime
>
57
<
/
TestingTime
>
<
/
TestCase
>
<
TestCase
name
=
"multipleCheckFailures"
>
<
Error
file
=
"main.cpp"
line
=
"25"
>
<
!
[
CDATA
[
check
add
(
2
,
2
)
==
1
failed
]
]
>
<
/
Error
>
<
Error
file
=
"main.cpp"
line
=
"27"
>
<
!
[
CDATA
[
check
add
(
2
,
2
)
==
3
failed
]
]
>
<
/
Error
>
<
TestingTime
>
63
<
/
TestingTime
>
<
/
TestCase
>
<
/
TestSuite
>
<
/
TestSuite
>
<
/
TestLog
>
Publish Boost Test Report
â
Add
Publish Boost Test Report
step to your build workflow. If you have several report sets, you can add several publish Boost Test Report steps with different report set names. Reference
this page
for more details.
Last updated
on
Oct 23, 2024

================================================================================

Title: Publish Busted Report
URL: https://wiki.pmease.com/display/QB14/Publish+Busted+Report
Breadcrumb:  > Administrator's Guide > Publish Build Reports

Administrator's Guide
Publish Build Reports
Publish Busted Report
Version: QB14
On this page
Publish Busted Report
Busted
is a Lua unit testing framework. Since QuickBuild 6.0.9, Busted generated test reports can be published. To publish the report:
Generate JUnit style output reports.
Add a publish step to publish the reports.
Generate Busted Reports
â
The QuickBuild only supports publish JUnit alike reports. To generate JUnit alike report, below command can be used:
busted
--
output
=
junit
<
files
>
Publish Busted Report
â
Add Publish Busted Report step to your build workflow. If you have several report sets, you can add several steps with different report set names. Reference
this page
or this page for more details.
Last updated
on
Oct 23, 2024

================================================================================

Title: Publish CheckStyle Report
URL: https://wiki.pmease.com/display/QB14/Publish+CheckStyle+Report
Breadcrumb:  > Administrator's Guide > Publish Build Reports

Administrator's Guide
Publish Build Reports
Publish CheckStyle Report
Version: QB14
On this page
Publish CheckStyle Report
To publish
CheckStyle
report, you only need two steps:
Generate CheckStyle
XML
report from
Ant
or
Maven
or any other build tool.
Add Checkstyle publish step by choosing
Publish -> CheckStyle Report
from the step menu.
Generate CheckStyle Report
â
QuickBuild will NOT generate
CheckStyle
report automatically, so first make sure the CheckStyle report is produced by
ANT
or by any other build tool. The following example shows how to generate CheckStyle XML report by
Ant JUnit task
:
CheckStyle target in build.xml
<
target
name
=
"
checkstyle
"
description
=
"
Check coding style
"
>
<
taskdef
resource
=
"
checkstyletask.properties
"
>
<
classpath
refid
=
"
path.lib
"
/>
</
taskdef
>
<
checkstyle
config
=
"
checkstyle_checks.xml
"
>
<
fileset
dir
=
"
${src.dir}
"
>
<
include
name
=
"
**/*.java
"
/>
</
fileset
>
<
formatter
type
=
"
xml
"
/>
<!-- DO use xml formatter -->
</
checkstyle
>
</
target
>
After adding the target above, generate the XML report for your source code, and you can tell QuickBuild to publish the results.
Publish CheckStyle Report
â
Add
Publish CheckStyle Report
step to your build workflow. If you have several report sets, you can add several
Publish CheckStyle steps
with different report set names. Reference
this page
for more details.
Last updated
on
Oct 23, 2024

================================================================================

Title: Publish Clover Report
URL: https://wiki.pmease.com/display/QB14/Publish+Clover+Report
Breadcrumb:  > Administrator's Guide > Publish Build Reports

Administrator's Guide
Publish Build Reports
Publish Clover Report
Version: QB14
On this page
Publish Clover Report
Since QuickBuild 5.1.22, you can generate and publish
Clover
XML report by:
Generate Cobertura
XML
report from
Ant
or
Maven
or any other build tool.
Add Cobertura publish step by choosing
Publish -> Cobertura Report
from step menu.
Generate Clover Report
â
QuickBuild will NOT generate
Clover
report automatically, so first make sure the
Clover
report is produced by
ANT
or by any other build tool. The following example shows how to generate Cobertura test results with
Ant
or
Maven
Clover coverage report target in build.xml
<
target
name
=
"
clover.current
"
depends
=
"
test.run
"
>
<
clover-report
>
<
current
outfile
=
"
${clover.report.dir}/clover.xml
"
title
=
"
Clover Demo
"
charset
=
"
UTF-8
"
>
<
format
type
=
"
xml
"
/>
<
columns
>
<
totalChildren
/>
<
filteredElements
/>
<
avgMethodComplexity
/>
<
uncoveredElements
format
=
"
raw
"
/>
<
totalPercentageCovered
format
=
"
raw
"
/>
<
complexity
format
=
"
raw
"
/>
<
complexityDensity
format
=
"
raw
"
/>
<
coveredBranches
format
=
"
raw
"
/>
<
coveredElements
format
=
"
raw
"
/>
<
coveredMethods
format
=
"
raw
"
/>
<
coveredStatements
format
=
"
raw
"
/>
<
totalBranches
/>
<
totalClasses
/>
<
totalElements
/>
<
totalFiles
/>
<
totalMethods
/>
<
totalStatements
/>
<
ncLineCount
/>
<
lineCount
/>
<
uncoveredBranches
format
=
"
raw
"
/>
<
uncoveredElements
format
=
"
raw
"
/>
<
uncoveredMethods
format
=
"
raw
"
/>
<
uncoveredStatements
format
=
"
raw
"
/>
</
columns
>
</
current
>
</
clover-report
>
</
target
>
The code snippet will generate the XML reports, and the report will be captured to '${clover.report.dir}/clover.xml'.
Publish Clover Report
â
Add
Publish Clover Report
step to your build workflow. If you have several report sets, you can add several steps with different report set names. Reference
this page
for more details.
Trouble Shooting
â
Last updated
on
Oct 23, 2024

================================================================================

Title: Publish Cobertura Report
URL: https://wiki.pmease.com/display/QB14/Publish+Cobertura+Report
Breadcrumb:  > Administrator's Guide > Publish Build Reports

Administrator's Guide
Publish Build Reports
Publish Cobertura Report
Version: QB14
On this page
Publish Cobertura Report
To publish
Cobertura
report, you only need two steps:
Generate Cobertura
XML
report from
Ant
or
Maven
or any other build tool.
Add Cobertura publish step by choosing
Publish -> Cobertura Report
from step menu.
warning
The cobertura should be version 1.9.2 or higher.
Generate Cobertura Report
â
QuickBuild will NOT generate
Cobertura
report automatically, so first make sure the
Cobertura
report is produced by
ANT
or by any other build tool. The following example shows how to generate Cobertura test results with
Ant Cobertura task
:
Cobertura coverage report target in build.xml
<
target
name
=
"
instrument
"
depends
=
"
jar
"
>
<
delete
file
=
"
${basedir}/cobertura.ser
"
/>
<
delete
file
=
"
${build.dir}/cobertura.ser
"
/>
<
cobertura-taskdef
/>
<
cobertura-instrument
datafile
=
"
${build.dir}/cobertura.ser
"
todir
=
"
${build.instrumented.dir}
"
>
<
fileset
dir
=
"
${build.classes.dir}
"
>
<
include
name
=
"
**/*.class
"
/>
<
exclude
name
=
"
**/*Test.class
"
/>
<
exclude
name
=
"
net/sourceforge/cobertura/javancss/*.class
"
/>
</
fileset
>
<
fileset
dir
=
"
${build.otherclasses.dir}
"
>
<
include
name
=
"
**/*.class
"
/>
<
exclude
name
=
"
**/*Test.class
"
/>
</
fileset
>
</
cobertura-instrument
>
</
target
>
<
target
name
=
"
coverage-report
"
>
<
cobertura-taskdef
/>
<
delete
dir
=
"
${build.reports.dir}/coverage-xml
"
/>
<
mkdir
dir
=
"
${build.reports.dir}/coverage-xml
"
/>
<
cobertura-report
datafile
=
"
${build.dir}/cobertura.ser
"
destdir
=
"
${build.reports.dir}/coverage-xml
"
format
=
"
xml
"
>
<
fileset
dir
=
"
${src.dir}
"
>
<
include
name
=
"
**/*.java
"
/>
</
fileset
>
<
fileset
dir
=
"
${othersrc.dir}
"
>
<
include
name
=
"
**/*.java
"
/>
</
fileset
>
</
cobertura-report
>
<
cobertura-check
datafile
=
"
${build.dir}/cobertura.ser
"
totalbranchrate
=
"
50
"
totallinerate
=
"
50
"
/>
</
target
>
The code snippet will generate the XML reports for each test case, and the reports will be captured to '${build.reports.dir}/coverage-xml' directory.
warning
For property src.dir, should define like below:
src.dir=${basedir}/src
instead of a relative path below:
src.dir=src
otherwise, opening source code from QuickBuild may fail if basedir is different from workspace directory.
Publish Cobertura Report
â
Add
Publish Cobertura Report
step to your build workflow. If you have several report sets, you can add several steps with different report set names. Reference
this page
for more details.
Trouble Shooting
â
If you can not publish Cobertura reports correctly, please:
Make sure you generate the Cobertura XML files. As by default, Cobertura only generate .ser file.
Make sure your file pattern is specified correctly. For example, Cobertura maven goal will generate the Cobertura XML files to target/site/cobertura/coverage.xml and the pattern "**/target/*.xml" will not work, instead, you may need use pattern like "**/target/site/cobertura/*.xml".
Last updated
on
Oct 23, 2024

================================================================================

Title: Publish Coverity Report
URL: https://wiki.pmease.com/display/QB14/Publish+Coverity+Report
Breadcrumb:  > Administrator's Guide > Publish Build Reports

Administrator's Guide
Publish Build Reports
Publish Coverity Report
Version: QB14
Publish Coverity Report
To publish
coverity report
, you need:
Generate coverity JSON report
Add Publish Coverity Report step
Last updated
on
Oct 23, 2024

================================================================================

Title: Publish CPD Report
URL: https://wiki.pmease.com/display/QB14/Publish+CPD+Report
Breadcrumb:  > Administrator's Guide > Publish Build Reports

Administrator's Guide
Publish Build Reports
Publish CPD Report
Version: QB14
On this page
Publish CPD Report
To publish
CPD
report, you only need two steps:
Generate CPD
XML
report from
Ant
or
Maven
or any other build tool.
Add CPD report publish step by choosing
Publish -> CPD Report
from step menu.
Generate CPD Report
â
QuickBuild will NOT generate
CPD
report automatically, so first make sure the CPD report is produced by
ANT
or by any other build tool. The following example shows how to generate CPD XML report with
CPD Ant task
:
CheckStyle target in build.xml
<
target
name
=
"
cpd
"
depends
=
"
init
"
description
=
"
Generate the CPD XML report
"
>
<
taskdef
name
=
"
cpd
"
classname
=
"
net.sourceforge.pmd.cpd.CPDTask
"
>
<
classpath
>
<
fileset
dir
=
"
${pmd.home}/lib
"
>
<
include
name
=
"
*.jar
"
/>
</
fileset
>
</
classpath
>
</
taskdef
>
<
mkdir
dir
=
"
${cpd.report.dir}
"
/>
<
cpd
minimumTokenCount
=
"
100
"
format
=
"
xml
"
outputFile
=
"
${cpd.report.dir}/cpd_report.xml
"
>
<
fileset
dir
=
"
${dir.src}
"
>
<
include
name
=
"
**/*.java
"
/>
</
fileset
>
</
cpd
>
</
target
>
After adding the target, you can generate the XML report for your source code, and after that you can tell QuickBuild to publish the results.
Publish CPD Report
â
Add
Publish CPD Report
step to your build workflow. If you have several report sets, you can add several steps with different report set names. Reference
this page
for more details.
Last updated
on
Oct 23, 2024

================================================================================

Title: Publish CppCheck Report
URL: https://wiki.pmease.com/display/QB14/Publish+CppCheck+Report
Breadcrumb:  > Administrator's Guide > Publish Build Reports

Administrator's Guide
Publish Build Reports
Publish CppCheck Report
Version: QB14
On this page
Publish CppCheck Report
To publish
CppCheck
report, first you need:
Generate version 2 XML report
Add a publish step in your configuration
Generate CppCheck XML report
â
CppCheck can generate XML report, QuickBuild only supports
version 2
format. For example:
cppcheck
--
xml
-
version
=
2
file1
.
cpp
Publish the report
â
Add Publish CppCheck Report
step to your build workflow. If you have several report sets, you can add multiple publish CppCheck report steps with different report set names. Reference
this page
for more details.
Last updated
on
Oct 23, 2024

================================================================================

Title: Publish EMMA Report
URL: https://wiki.pmease.com/display/QB14/Publish+EMMA+Report
Breadcrumb:  > Administrator's Guide > Publish Build Reports

Administrator's Guide
Publish Build Reports
Publish EMMA Report
Version: QB14
On this page
Publish EMMA Report
To publish
EMMA
report, you only need two steps:
Generate EMMA
XML
report from
Ant
or
Maven
or any other build tool.
Add EMMA publish step by choosing
Publish -> EMMA Report
from the step menu.
Generate EMMA Report
â
QuickBuild will NOT generate
EMMA
report automatically, so first make sure that the EMMA report is produced by
ANT
or by any other build tool. The following example shows how to generate EMMA
code coverage
with
Ant EMMA task
:
EMMA target in build.xml
<
target
name
=
"
emma.instr
"
depends
=
"
clean, compile.tests
"
if
=
"
emma.enabled
"
>
<
available
file
=
"
lib/emma.jar
"
property
=
"
emma.available
"
/>
<
fail
unless
=
"
emma.available
"
message
=
"
Error: emma.jar not found
"
/>
<
path
id
=
"
emma.lib.dir
"
>
<
pathelement
location
=
"
${lib.dir}/emma.jar
"
/>
<
pathelement
location
=
"
${lib.dir}/emma_ant.jar
"
/>
</
path
>
<
taskdef
resource
=
"
emma_ant.properties
"
classpathref
=
"
emma.lib.dir
"
/>
<
mkdir
dir
=
"
${emma.report.dir}
"
/>
<
emma
>
<
instr
instrpath
=
"
${build.home}/classes
"
destdir
=
"
${build.home}/classes
"
metadatafile
=
"
${emma.report.dir}/metadata.emma
"
merge
=
"
true
"
mode
=
"
overwrite
"
/>
</
emma
>
</
target
>
<!-- Run all the JUnit Tests -->
<
target
name
=
"
junit
"
depends
=
"
emma.instr
"
>
<
mkdir
dir
=
"
${junit.report.dir}
"
/>
<
mkdir
dir
=
"
${junit.report.dir}/test-out
"
/>
<
record
name
=
"
${junit.report.dir}/test-output.txt
"
append
=
"
no
"
action
=
"
start
"
/>
<
junit
printsummary
=
"
yes
"
haltonfailure
=
"
false
"
fork
=
"
yes
"
>
<
jvmarg
value
=
"
-Demma.coverage.out.file=${emma.report.dir}/coverage.emma
"
/>
<
jvmarg
value
=
"
-Demma.coverage.out.merge=true
"
/>
<
classpath
refid
=
"
test.classpath
"
/>
<!-- <formatter type="plain"/> -->
<
formatter
type
=
"
xml
"
/>
<
batchtest
fork
=
"
yes
"
todir
=
"
${junit.report.dir}/test-out
"
>
<
fileset
dir
=
"
${test.home}
"
>
<
include
name
=
"
**/*Test.java
"
/>
<
exclude
name
=
"
**/*AbstractTest.java
"
/>
</
fileset
>
</
batchtest
>
</
junit
>
<
junitreport
todir
=
"
${junit.report.dir}
"
>
<
fileset
dir
=
"
${junit.report.dir}/test-out
"
>
<
include
name
=
"
TEST-*.xml
"
/>
</
fileset
>
</
junitreport
>
<
record
name
=
"
${junit.report.dir}/test-output.txt
"
action
=
"
stop
"
/>
</
target
>
<!-- Generate Emma Report -->
<
target
name
=
"
emma.report
"
depends
=
"
junit
"
if
=
"
emma.enabled
"
>
<
emma
enabled
=
"
true
"
>
<
report
sourcepath
=
"
${dir.src}
"
sort
=
"
+name,+class,+method,+block
"
metrics
=
"
method:70,block:80,line:80,class:100
"
>
<
fileset
dir
=
"
${emma.report.dir}
"
>
<
include
name
=
"
*.emma
"
/>
</
fileset
>
<
xml
outfile
=
"
${emma.report.dir}/coverage.xml
"
depth
=
"
method
"
/>
</
report
>
</
emma
>
<!-- deleted the instrumented .class files -->
<!-- <delete dir="${build.home}/classes" /> -->
</
target
>
The code snippet will generate the XML report for all the source code. XML report coverage.xml will be generated in 'reports/emma directory' directory which is relative to the
workspace
directory.
After adding the target above, generate the XML code coverage report for your source code, and after that you can tell QuickBuild to publish the results.
Publish EMMA Report
â
Add
Publish EMMA Report
step to your build workflow. If you have several report sets, you can add several steps with different report set names. Reference
this page
for more details.
Last updated
on
Oct 24, 2024

================================================================================

Title: Publish Findbugs Report
URL: https://wiki.pmease.com/display/QB14/Publish+Findbugs+Report
Breadcrumb:  > Administrator's Guide > Publish Build Reports

Administrator's Guide
Publish Build Reports
Publish Findbugs Report
Version: QB14
On this page
Publish Findbugs Report
To publish
Findbugs
report, you only need two steps:
Generate Findbugs
XML
report from
Ant
or
Maven
or any other build tool.
Add Findbugs report publish step by choosing menu item
Publish -> Findbugs Reports
from the step menu.
Generate Findbugs Report
â
QuickBuild will NOT generate
Findbugs
report automatically, so first make sure the
Findbugs
report is produced by
ANT
or by any other build tool. The following example shows how to generate Findbugs test results with
Ant Findbugs task
:
Findbugs report target in build.xml
<
taskdef
name
=
"
findbugs
"
classname
=
"
edu.umd.cs.findbugs.anttask.FindBugsTask
"
classpath
=
"
${findbugs.utils.dir}/findbugs-ant.jar
"
/>
<
target
name
=
"
findbugs
"
depends
=
"
dist,findbugs-xml,findbugs-html
"
/>
<
target
name
=
"
findbugs-xml
"
>
<
mkdir
dir
=
"
${findbugs.reports}
"
/>
<
findbugs
home
=
"
${findbugs.home}
"
output
=
"
xml:withMessages
"
outputFile
=
"
${findbugs.reports}/findbugs.xml
"
jvmargs
=
"
-Xmx512m
"
>
<
auxClasspath
path
=
"
${lib.dir}
"
/>
<
sourcePath
path
=
"
${src.dir}
"
/>
<
class
location
=
"
${dist.dir}/${exe.name}.jar
"
/>
</
findbugs
>
</
target
>
The code snippet will generate the XML reports for each test case, and the reports will be captured to '${findbugs.reports}' directory.
Note. The
output
format should be set to 'xml:withMessages'.
Publish Findbugs Report
â
Add
Publish Findbugs Report
step to your build workflow. If you have several report sets, you can add several steps with different report set names. Reference
this page
for more details.
Last updated
on
Oct 23, 2024

================================================================================

Title: Publish Fxcop Report
URL: https://wiki.pmease.com/display/QB14/Publish+Fxcop+Report
Breadcrumb:  > Administrator's Guide > Publish Build Reports

Administrator's Guide
Publish Build Reports
Publish Fxcop Report
Version: QB14
On this page
Publish Fxcop Report
To publish Fxcop reports, you need:
Generate Fxcop reports by using
FxcopCmd
or
NAnt fxcop task
or any other tools.
Add a Publish Fxcop Reports step in your configuration steps.
Note:
The Fxcop version should be 1.35+.
After doing this, QuickBuild will generate the Fxcop reports automatically.
NOTE
QuickBuild only parses the XML reports.
Generate Fxcop XML Reports
â
We use NAnt fxcop task as an example for how to generate Fxcop XML reports:
<
fxcop
failonerror
=
"
false
"
projectFile
=
"
${build.dir}\Sample.fxcop
"
>
<
targets
>
<
include
name
=
"
${build.dir}\bin\*.dll
"
/>
</
targets
>
<
rules
>
<
include
name
=
"
${build.dir}\rules\*.dll
"
/>
</
rules
>
</
fxcop
>
Publish Fxcop Reports
â
Add
Publish Fxcop Report
step to your build workflow. If you have several report sets, you can add several steps with different report set names. Reference
this page
for more details.
Last updated
on
Oct 23, 2024

================================================================================

Title: Publish JaCoCo Report
URL: https://wiki.pmease.com/display/QB14/Publish+JaCoCo+Report
Breadcrumb:  > Administrator's Guide > Publish Build Reports

Administrator's Guide
Publish Build Reports
Publish JaCoCo Report
Version: QB14
On this page
Publish JaCoCo Report
To publish
JaCoCo
report, you only need two steps:
Generate JaCoCo
XML
report from
Ant
or
Maven
or any other build tool.
Add JaCoCo publish step by choosing
Publish -> JaCoCo Report
from step menu.
warning
The JaCoCo should be version 0.6.1 or higher.
Generate JaCoCo Report
â
QuickBuild will NOT generate
JaCoCo
report automatically, so first make sure the
JaCoCo
report is produced by
ANT
or by any other build tool. The following example shows how to generate JaCoCo coverage XML report with
Ant Cobertura task
, you may find more examples from
JaCoCo
website:
JaCoCo coverage report target in build.xml
<
target
name
=
"
test
"
depends
=
"
compile
"
>
<!-- Step 2: Wrap test execution with the JaCoCo coverage task -->
<
jacoco:
coverage
destfile
=
"
${result.exec.file}
"
>
<
java
classname
=
"
org.jacoco.examples.parser.Main
"
fork
=
"
true
"
>
<
classpath
path
=
"
${result.classes.dir}
"
/>
<
arg
value
=
"
2 * 3 + 4
"
/>
<
arg
value
=
"
2 + 3 * 4
"
/>
<
arg
value
=
"
(2 + 3) * 4
"
/>
<
arg
value
=
"
2 * 2 * 2 * 2
"
/>
<
arg
value
=
"
1 + 2 + 3 + 4
"
/>
<
arg
value
=
"
2 * 3 + 2 * 5
"
/>
</
java
>
</
jacoco:
coverage
>
</
target
>
<
target
name
=
"
report
"
depends
=
"
test
"
>
<!-- Step 3. Create coverage report -->
<
jacoco:
report
>
<!-- This task needs the collected execution data and ... -->
<
executiondata
>
<
file
file
=
"
${result.exec.file}
"
/>
</
executiondata
>
<!-- the class files and optional source files ... -->
<
structure
name
=
"
JaCoCo Ant Example
"
>
<
classfiles
>
<
fileset
dir
=
"
${result.classes.dir}
"
/>
</
classfiles
>
<
sourcefiles
encoding
=
"
UTF-8
"
>
<
fileset
dir
=
"
${src.dir}
"
/>
</
sourcefiles
>
</
structure
>
<!-- to produce reports in XML formats. -->
<
xml
destfile
=
"
${result.report.dir}/report.xml
"
/>
</
jacoco:
report
>
</
target
>
The code snippet will generate the JaCoCo report will be captured to '${result.report.dir}/report.xml'.
warning
When generating the report, please also make sure the source directory is under your configuration workspace directory. Otherwise, QuickBuild will fail to find the source code and will not be able to open the source code later.
Publish JaCoCo Report
â
Add
Publish JaCoCo Report
step to your build workflow. You can category your coverage report by adding multiple steps with different report set name(category name). Reference
this page
for how to use report set.
If the JaCoCo is published successfully, the build overview page will display the summary for your coverage,
and JaCoCo report tab will be displayed in your build page like below:
below shows the coverage of source code opening from class report or method report:
Configure Coverage Threshold
â
You may also change the JaCoCo coverage threshold for each configuration. Go to Configuration Settings / Report Settings / JaCoCo Setting:
then change to your threshold and configure the color you want.
Aggregate JaCoCo Report
â
Like all other reports, JaCoCo coverage data can be aggregated to current configuration and parent configuration, please refer to this page for how to add aggregation based on your strategy.
Trouble Shooting
â
If you can not publish JaCoCo reports correctly, please:
Make sure you generate the Cobertura XML files.
Last updated
on
Oct 28, 2024

================================================================================

Title: Publish JMeter Report
URL: https://wiki.pmease.com/display/QB14/Publish+JMeter+Report
Breadcrumb:  > Administrator's Guide > Publish Build Reports

Administrator's Guide
Publish Build Reports
Publish JMeter Report
Version: QB14
On this page
Publish JMeter Report
To publish
JMeter
report, you only need two steps:
Generate JMeter
XML
report from
Ant
or
Maven
or any other build tool.
Add JMeter publish step by choosing
Publish -> JMeter Report
from step menu.
Generate JMeter Report
â
QuickBuild will NOT generate
JMeter
report automatically, so first make sure the
JMeter
report is produced by
ANT
or by any other build tool. The following example shows how to generate JMeter XML report with Ant JMeter task:
Generate JMeter Report
<
project
default
=
"
all
"
>
<
property
name
=
"
jmeter-home
"
value
=
"
/your/jmeter/home
"
/>
<!-- ant-jmeter.jar comes with jmeter, be sure this is the release you have -->
<
path
id
=
"
ant.jmeter.classpath
"
>
<
pathelement
location
=
"
${jmeter-home}/extras/ant-jmeter-1.1.1.jar
"
/>
</
path
>
<
taskdef
name
=
"
jmeter
"
classname
=
"
org.programmerplanet.ant.taskdefs.jmeter.JMeterTask
"
classpathref
=
"
ant.jmeter.classpath
"
/>
<
target
name
=
"
clean
"
>
<
delete
dir
=
"
results
"
/>
<
delete
file
=
"
jmeter.log
"
/>
<
mkdir
dir
=
"
results/jtl
"
/>
<
mkdir
dir
=
"
results/html
"
/>
</
target
>
<
target
name
=
"
test
"
depends
=
"
clean
"
>
<
jmeter
jmeterhome
=
"
${jmeter-home}
"
resultlogdir
=
"
results/jtl
"
>
<
testplans
dir
=
"
test/jmeter
"
includes
=
"
*.jmx
"
/>
<
property
name
=
"
jmeter.save.saveservice.output_format
"
value
=
"
xml
"
/>
</
jmeter
>
</
target
>
<!-- This is not needed for the plugin, but it produces a nice html report
which can be saved usin jenkins's archive artifact feature -->
<
target
name
=
"
report
"
depends
=
"
test
"
>
<
xslt
basedir
=
"
results/jtl
"
destdir
=
"
results/html
"
includes
=
"
*.jtl
"
style
=
"
${jmeter-home}/extras/jmeter-results-detail-report_21.xsl
"
/>
</
target
>
<
target
name
=
"
all
"
depends
=
"
test, report
"
/>
</
project
>
Publish JMeter Report
â
Add
Publish JMeter Report
step to your build workflow. You can category your JMeter report by adding multiple steps with different report set name(category name). Reference
this page
for how to use report set.
If the JMeter is published successfully, the build overview page will display the summary for your JMeter requests,
Aggregate JMeter Report
â
Like all other reports, JMeter data can be aggregated to current configuration and parent configuration, please refer to
Report Aggregation
for how to add aggregation based on your strategy.
Last updated
on
Oct 28, 2024

================================================================================

Title: Publish JUnit Report
URL: https://wiki.pmease.com/display/QB14/Publish+JUnit+Report
Breadcrumb:  > Administrator's Guide > Publish Build Reports

Administrator's Guide
Publish Build Reports
Publish JUnit Report
Version: QB14
On this page
Publish JUnit Report
To publish
JUnit
report, you only need two steps:
Generate JUnit
XML
report from
Ant
or
Maven
or any other build tool.
Add a JUnit report publish step by choosing
Publish -> Junit Report
in step menu.
Generate JUnit Report
â
QuickBuild will NOT generate
JUnit
report automatically, so first make sure the
JUnit
report is produced by
ANT
or by any other build tool. The following example shows how to generate JUnit test results with
Ant JUnit task
and aggregate all the test reports into one by using
Ant JUnitReport task
(this is not required):
JUnit target in build.xml
<
target
name
=
"
junit
"
depends
=
"
compile.test
"
>
<
mkdir
dir
=
"
${junit.report.dir}
"
/>
<
mkdir
dir
=
"
${junit.report.dir}/test-out
"
/>
<
record
name
=
"
${junit.report.dir}/test-output.txt
"
append
=
"
no
"
action
=
"
start
"
/>
<
junit
printsummary
=
"
yes
"
haltonfailure
=
"
false
"
fork
=
"
yes
"
>
<
classpath
refid
=
"
test.classpath
"
/>
<
formatter
type
=
"
xml
"
/>
<
batchtest
fork
=
"
yes
"
todir
=
"
${junit.report.dir}/test-out
"
>
<
fileset
dir
=
"
${test.home}
"
>
<
include
name
=
"
**/*Test.java
"
/>
<
exclude
name
=
"
**/*AbstractTest.java
"
/>
</
fileset
>
</
batchtest
>
</
junit
>
<
junitreport
todir
=
"
${junit.report.dir}
"
>
<
fileset
dir
=
"
${junit.report.dir}/test-out
"
>
<
include
name
=
"
TEST-*.xml
"
/>
</
fileset
>
</
junitreport
>
<
record
name
=
"
${junit.report.dir}/test-output.txt
"
action
=
"
stop
"
/>
</
target
>
The code snippet will generate the XML reports for each test case, and the reports will be captured to '${junit.report.dir}' directory.
warning
About haltonfailure
If 'haltonfailure' in junit task is defined to true, the junit reports are not complete. If you want to generate the full reports, set 'haltonfailure' to false.
Publish JUnit Report
â
Add
Publish JUnit Report
step to your build workflow. If you have several report sets, you can add several publish JUnit steps with different report set names. Reference
this page
for more details.
Supported JUnit-style Report
â
For those who are willing to output JUnit-style XML report by yourself, below illustrates the format supported in QuickBuild:
Testcase element
â
<
testcase
classname
=
"
xxx
"
name
=
"
xxx
"
time
=
"
xxx
"
>
<
error
type
=
"
xxx
"
>
some error message if any
</
error
>
<
failure
type
=
"
xxx
"
>
some failure message if any
</
failure
>
<
skipped
/>
<!-- if this test case is skipped -->
</
testcase
>
The system-out and system-err are not generated by JUnit, so you can use them to output the message only for this testcase and QuickBuild can display them. classname should also include package name, QuickBuild only parse the classname attribute to generate the package name. The attribute time is the duration of a test case which should be in milliseconds.
All child elements: system-out, system-err, error, failure, skipped are optional. The status of test case depends on one of error, failure or skipped element, if none of them, then the test is passed.
Testsuite element
â
<
testsuite
classname
=
"
xxx
"
package
=
"
xxx
"
tests
=
"
xxx
"
time
=
"
xxx
"
>
<
testcase
...
>
</
testcase
>
...
<
ignored-testcase
...
>
<!-- test case is ignored -->
</
ignored-testcase
>
<
system-out
/>
<
system-err
/>
</
testsuite
>
Here, you may use classname only without package attribute, that is, package name will be parsed from attribute
classname="com.pmease.quickbuild.DummyTest
if there is no package attribute presented. tests attribute and time attribute are optional, QuickBuild will accumulate all test cases and their duration automatically.
The attribute system-out and system-err are for all test cases in this test suite and will be displayed for all test cases in it.
If you have multiple test suites in one report, then a root element <testsuites> should be used, like below:
<
testsuites
>
<
testsuite
...
>
</
testsuite
>
... ...
<
testsuite
...
>
</
testsuite
>
</
testsuites
>
Last updated
on
Oct 23, 2024

================================================================================

Title: Publish MBUnit Report
URL: https://wiki.pmease.com/display/QB14/Publish+MBUnit+Report
Breadcrumb:  > Administrator's Guide > Publish Build Reports

Administrator's Guide
Publish Build Reports
Publish MBUnit Report
Version: QB14
On this page
Publish MBUnit Report
MbUnit
is an advanced, extensible unit testing framework originally developed by Jonathon 'Peli' de Halleux and Jamie Cansdale. It is a free and open source unit testing tool for the .NET Framework. To publish the MBUnit reports to QuickBuild, first, the XML reports should be generated by
nant
or by msbuild which is freely available as part of the .NET 2.0 Framework.
Generate MBUnit Reports
â
The following code snippet is an example from
MBUnit
which will generate the XML test reports by NAnt:
<
project
default
=
"tests"
>
<
target name
=
"tests"
>
<
mbunit
report
-
types
=
"xml"
report
-
filename
-
format
=
"myreport{0}{1}"
report
-
output
-
directory
=
"."
halt
-
on
-
failure
=
"true"
>
<
assemblies
>
<
include name
=
"FizzBuzzTests.dll"
/
>
<
/
assemblies
>
<
/
mbunit
>
<
/
target
>
<
/
project
>
More detailed information please refer to the
documentation of MBUnit
.
Add MBUnit Report Publish Step
â
Add
Publish MBUnit Report
step to your build workflow. If you have several report sets, you can add several steps with different report set names. Reference
this page
for more details.
Last updated
on
Oct 23, 2024

================================================================================

Title: Publish MSTest Report
URL: https://wiki.pmease.com/display/QB14/Publish+MSTest+Report
Breadcrumb:  > Administrator's Guide > Publish Build Reports

Administrator's Guide
Publish Build Reports
Publish MSTest Report
Version: QB14
On this page
Publish MSTest Report
To publish MSTest report, the following two steps are required:
Generate MSTest TRX test report by running
mstest command
or by MSBuild, NAnt etc.
Add MSTest report publish step by choosing
Publish -> Publish MSTest Report
from step menu.
Generate MSTest Report
â
You may generate MSTest report by running
mstest.exe
from command line or by MSBuild task. The result of MSTest should be TRX test report.
warning
In this version, QuickBuild will not parse the MSTest coverage result.
Publish MSTest Report
â
Add
Publish MSTest Report
step to your build workflow. If you have several report sets, you can add several steps with different report set names. Reference
this page
for more details.
Last updated
on
Oct 23, 2024

================================================================================

Title: Publish NCover Report
URL: https://wiki.pmease.com/display/QB14/Publish+NCover+Report
Breadcrumb:  > Administrator's Guide > Publish Build Reports

Administrator's Guide
Publish Build Reports
Publish NCover Report
Version: QB14
On this page
Publish NCover Report
To publish NCover reports, you need:
Generate NCover
SymbolModuleNamespaceClassMethod
XML reports by using
NCover
.
Add a Publish NCover Reports step in your configuration steps.
After doing this, QuickBuild will generate the NCover reports automatically.
warning
QuickBuild only parses the XML reports.
NCover version should be 3.0+
The NCover report type should be SymbolModuleNamespaceClassMethod
Generate NCover XML Reports
â
The NCover SymbolModuleNamespaceClassMethod XML reports can be generated from NCover command tool or msbuild or nant. Below we are using msbuild to generate the coverage report:
<
UsingTask
TaskName
=
"NCover.MSBuildTasks.NCover"
AssemblyFile
=
"C:\Program Files\NCover\Build Task Plugins\NCover.MSBuildTasks.dll"
/
>
<
UsingTask
TaskName
=
"NCover.MSBuildTasks.NCoverReporting"
AssemblyFile
=
"C:\Program Files\NCover\Build Task Plugins\NCover.MSBuildTasks.dll"
/
>
<
Target
Name
=
"Coverage"
>
<
NCover
ToolPath
=
"
C
:
\
Program
Files
\
NCover
\"
TestRunnerExe
=
"$(NUnitPath)\nunit-console.exe"
TestRunnerArgs
=
"TestAssembly1.dll TestRunner2.dll"
CoverageFile
=
"Coverage.xml"
/
>
<
/
Target
>
<
PropertyGroup
>
<
Reports
>
<
Report
>
<
ReportType
>
SymbolModuleNamespaceClassMethod
<
/
ReportType
>
<
Format
>
Xml
<
/
Format
>
<
OutputPath
>
$
(
outputDir
)
\smncm
.
xml
<
/
OutputPath
>
<
/
Report
>
<
/
Reports
>
<
/
PropertyGroup
>
<
Target
Name
=
"CreateCoverageReports"
>
<
NCoverReporting
ToolPath
=
"
C
:
\
Program
Files
\
NCover
\"
CoverageDataPaths
=
"Coverage.xml"
OutputReport
=
"$(Reports)"
/
>
<
/
Target
>
NCover 4
â
For NCover 4+, you need export your coverage data in v3 XML format, please refer to below page:
NCover Export
Publish NCover Reports
â
Add
Publish NCover Report
step to your build workflow. If you have several report sets, you can add several steps with different report set names. Reference
this page
for more details.
info
Especially thanks for the help from
NCover developer team
Last updated
on
Oct 23, 2024

================================================================================

Title: Publish NUnit Report
URL: https://wiki.pmease.com/display/QB14/Publish+NUnit+Report
Breadcrumb:  > Administrator's Guide > Publish Build Reports

Administrator's Guide
Publish Build Reports
Publish NUnit Report
Version: QB14
On this page
Publish NUnit Report
To publish
NUnit
report, you only need two steps:
Generate NUnit
XML
report from
NAnt
or any other build tool.
Add NUnit report publish step by choosing
Publish -> NUnit Report
from step menu.
Generate NUnit Report
â
QuickBuild will NOT generate
NUnit
report automatically, so first make sure the NUnit report is produced by
NANT
or by any other build tool. The following example shows how to generate NUnit XML report with
NAnt task
:
NUnit target in build.xml
<
target
name
=
"
runUnitTests
"
description
=
"
Runs unit tests on specified dlls
"
>
<
echo
message
=
"
Before running tests
"
/>
<
nunit2
failonerror
=
"
false
"
verbose
=
"
false
"
>
<
formatter
outputdir
=
"
${nant.project.basedir}
"
usefile
=
"
true
"
type
=
"
Xml
"
extension
=
"
.xml
"
/>
<
test
assemblyname
=
"
${compile.dir}\foo.bar.dll
"
appconfig
=
"
${compile.dir}\foo.bar.dll.config
"
/>
</
nunit2
>
</
target
>
After adding the target, you can generate the NUnit report for your source code, and then you can tell QuickBuild to publish the results.
Publish NUnit Report
â
Add
Publish NUnit Report
step to your build workflow. If you have several report sets, you can add several steps with different report set names. Reference
this page
for more details.
Last updated
on
Oct 23, 2024

================================================================================

Title: Publish PMD Report
URL: https://wiki.pmease.com/display/QB14/Publish+PMD+Report
Breadcrumb:  > Administrator's Guide > Publish Build Reports

Administrator's Guide
Publish Build Reports
Publish PMD Report
Version: QB14
On this page
Publish PMD Report
To publish
PMD
report, you only need two steps:
Generate PMD
XML
report from
Ant
or
Maven
or any other build tool.
Add PMD report publish step by choosing
Publish -> PMD Report
from step menu.
Generate PMD Report
â
QuickBuild will NOT generate
PMD
report automatically, so first make sure the PMD report is produced by
ANT
or by any other build tool. The following example shows how to generate PMD XML report with
PMD Ant task
:
CheckStyle target in build.xml
<
taskdef
name
=
"
pmd
"
classname
=
"
net.sourceforge.pmd.ant.PMDTask
"
/>
<
target
name
=
"
pmd
"
>
<
taskdef
name
=
"
pmd
"
classname
=
"
net.sourceforge.pmd.ant.PMDTask
"
/>
<
pmd
rulesetfiles
=
"
imports.xml,unusedcode
"
>
<
formatter
type
=
"
xml
"
toFile
=
"
c:\pmd_report.xml
"
/>
<
fileset
dir
=
"
C:\j2sdk1.4.1_01\src\java\lang\
"
>
<
include
name
=
"
**/*.java
"
/>
</
fileset
>
</
pmd
>
</
target
>
warning
"Be Careful"
Please don't use 'shortFileNames' attribute for PMD task, or set this attribute to false instead, otherwise QuickBuild will not open the source code correctly.
After adding the target, you can generate the XML report for your source code, and after that you can tell QuickBuild to publish the results.
Publish PMD Report
â
Add
Publish PMD Report
step to your build workflow. If you have several report sets, you can add several steps with different report set names. Reference
this page
for more details.
Last updated
on
Oct 23, 2024

================================================================================

Title: Publish TAP Report
URL: https://wiki.pmease.com/display/QB14/Publish+TAP+Report
Breadcrumb:  > Administrator's Guide > Publish Build Reports

Administrator's Guide
Publish Build Reports
Publish TAP Report
Version: QB14
Publish TAP Report
TAP, the Test Anything Protocol, is a text-based interface between testing modules in a test harness. See more details in its website below:
https://testanything.org/
Since QuickBuild 6.0.9, TAP report can be published as other test reports. To publish TAP report, you need generate TAP reports first. Below is a TAP test stream copied from TAP website:
1.
.4
ok
1
-
Input
file opened
not ok
2
-
First
line of the input valid
ok
3
-
Read
the rest of the file
not ok
4
-
Summarized
correctly #
TODO
Not
written yet
If the TAP is published successfully, QuickBuild can show you tests information like below:
QuickBuild will use your TAP file name as test set name automatically and then calculate the total tests, failed, passed for you, below image as an example:
TAP report by default has no duration information, but some test tool will add duration information in the diagnostic data like below:
not ok
2
-
First
line of the input valid
--
-
duration_ms
:
123.456
message
:
"Board layout"
severity
:
comment
.
.
.
If you need duration information, you need add
duration_ms
in your diagnostic data.
Last updated
on
Oct 28, 2024

================================================================================

Title: Publish TestNG Report
URL: https://wiki.pmease.com/display/QB14/Publish+TestNG+Report
Breadcrumb:  > Administrator's Guide > Publish Build Reports

Administrator's Guide
Publish Build Reports
Publish TestNG Report
Version: QB14
On this page
Publish TestNG Report
To publish
TestNG
report, you only need two steps:
Generate TestNG
XML
report (the TestNG also supports generate JUnit style report) from
Ant
or
Maven
or any other build tool.
Add TestNG report publish steps by choosing step
Publish -> TestNG Report
from step menu.
Generate TestNG Report
â
QuickBuild will NOT generate
TestNG
reports automatically, so first make sure the
TestNG
report is produced by
ANT
or by any other build tool. The following example shows how to generate TestNG test results with
Ant TestNG task
:
JUnit target in build.xml
<
testng
classpathref
=
"
run.cp
"
outputDir
=
"
${testng.report.dir}
"
sourcedir
=
"
${test.src.dir}
"
haltOnfailure
=
"
false
"
>
<
xmlfileset
dir
=
"
${test14.dir}
"
includes
=
"
testng.xml
"
/>
</
testng
>
By default, TestNG will create both XML and HTML reports. You can customize the report listener for TestNG to generate the reports, the detailed information can be referred to
TestNG webiste
.
warning
About haltOnfailure
If 'haltOnfailure' in testng task is defined to true, the TestNG reports are not complete. If you want to generate the full reports, set 'haltOnfailure' to false.
Publish TestNG Report
â
Add
Publish TestNG Report
step to your build workflow. If you have several report sets, you can add several steps with different report set names. Reference
this page
for more details.
Last updated
on
Oct 23, 2024

================================================================================

Title: Report Aggregation
URL: https://wiki.pmease.com/display/QB14/Report+Aggregation
Breadcrumb:  > Administrator's Guide > Publish Build Reports

Administrator's Guide
Publish Build Reports
Report Aggregation
Version: QB14
On this page
Report Aggregation
What is report aggregation
â
Report aggregation is designed to provide quick insight of build metrics of descendant configurations from the parent configuration. For example you may define a JUnit aggregation in root configuration to display the overall test number, success rate and test duration for all configurations in the system. The statistics page of root configuration will also include aggregation statistics to display aggregated metrics over time. Metrics will be aggregated when build runs, so you will not see aggregated metrics immediately after aggregation definition.
Define aggregations
â
Aggregations can be defined in configuration setting page like below:
The report set field tells QuickBuild which report sets to aggregate. If left empty, QuickBuild will aggregate all available report sets.
Aggregations defined in high level configurations will be inherited by low level configurations. This makes aggregation at different levels much easier. Taking below hierarchy for example:
We can define three JUnit aggregations at root configuration to aggregate JUnit metrics from DEV, QA and RELEASE configurations respectively. After building of all configurations, overview page of the root configuration will display three aggregation result shown as below:
The
Release JUnit Summary
table displays JUnit summaries from all release configurations in the system, and the same applies for
QA JUnit Summary
and
Dev JUnit Summary
.
If switch to overview page of
Project A
, it also has three JUnit summaries. However instead of summarizing the RELEASE/QA/DEV configurations of the whole system, these summaries are aggregated from RELEASE/QA/DEV configurations under the
Project A
configuration. The reason is that
Project A
inherits aggregations from root configuration. Taking Release aggregation for instance, it declares to aggregate metrics from all child release configurations. In root configuration, this means to aggregate from all release configurations in the system, but in
Project A
, this means to aggregate from all release configurations under
Project A
.
Additionally, statistics page of relevant configurations will display the aggregated metrics over time, grouped by day, week, or month.
Add aggregation gadget
â
You may also add the aggregation gadgets to the user dashboard to know the aggregated build metrics at first glance.
Last updated
on
Oct 28, 2024

================================================================================

Title: Rebuild statistics and aggregation data
URL: https://wiki.pmease.com/display/QB14/Rebuild+statistics+and+aggregation+data
Breadcrumb:  > Administrator's Guide > Publish Build Reports

Administrator's Guide
Publish Build Reports
Rebuild statistics and aggregation data
Version: QB14
Rebuild statistics and aggregation data
Sometimes, the statistics data and aggregation data don't seem to be synced after you delete some builds. Then, you can rebuild the statistics data and/or aggregation data.
First, you will need create a new configuration, and in this configuration, you can add a step like below:
then, choose the configuration and the report/s you want to rebuild like below:
OK, now, trigger a build, the statistics data will be rebuilt.
Last updated
on
Oct 28, 2024

================================================================================

Title: Configuration Visibility and Permissions
URL: https://wiki.pmease.com/display/QB14/Configuration+Visibility+and+Permissions
Breadcrumb:  > Administrator's Guide > Security Management

Administrator's Guide
Security Management
Configuration Visibility and Permissions
Version: QB14
Configuration Visibility and Permissions
QuickBuild organizes configurations into a hierarchy tree. You can selectively expose portions of the tree to certain group of users by adding authorizations for certain configurations when defining related groups. Let's assume a full configuration tree like below:
Now you want that developers can only access the subtree under
root/componentA
. To do this, you define a developer group, add an authorization for configuration
root/componentA
, and specify proper permissions. When logged in as developer, the resulting dashboard will look like this:
As you can see, the authorization entry for
root/componentA
exposes corresponding subtree to members of the group. If multiple authorization entries exist for the group, the resulting visible subtree will be a union of all subtrees rooted at each authorized configuration. Subtree union also applies when a user is a member of multiple groups.
When determining permissions for a particular configuration, QuickBuild will look for the nearest ancestor configuration that is authorized in the group, and uses the corresponding permissions. For example, if authorizations of the developer group is defined as:
Developers will only have
RUN_BUILD
permission for configuration
root/componentA/2.0/QA
as the authorization entry
root/componentA/2.0
is the nearest ancestor.
When a user is member of multiple groups, configuration permissions consist of the union of permissions that are calculated separately for each group using algorithm described above. For example, if the user
madaha
is also a member of group
tester
besides being member of
developer
group mentioned above, and the
tester
group has following authorizations:
User
madaha
will have permission
RUN_BUILD
and
PROMOTE_BUILD
for configuration
root/componentA/2.0/QA
as the permissions derived from
developer
group is
RUN_BUILD
, and the permissions derived from
tester
group is
RUN_BUILDS
and
PROMOTE_BUILD
. The union of these two sets of permissions will be
RUN_BUILD, PROMOTE_BUILD
.
Last updated
on
Oct 28, 2024

================================================================================

Title: One Build For One Agent
URL: https://wiki.pmease.com/display/QB14/One+Build+For+One+Agent
Breadcrumb:  > Build Setup Tutorials > Resource Management

Build Setup Tutorials
Resource Management
One Build For One Agent
Version: QB14
On this page
One Build For One Agent
Situation
â
Set up the build so that one agent runs only one build at a time. If all agents are occupied, the build should be waiting.
Demonstration
â
Check
grid tab
on the demo site, and there are two agents available.
Visit
the control project
, and hit the run button to trigger all its children (project1, project2 and project3) concurrently.
Check the
queue tab
. Only two child builds will be running, each occupying one agent. The waiting child build will start to run when one of the running child builds finishes.
Resolution
â
Switch to
resources tab
and a resource named "Agent" is defined with each agent providing one resource.
Check master step definition of
child project1
,
child project2
, and
child project3
. They all set to run on node with resource
Agent
. If resource requirement of the master step is not satisfied, the build itself will be put into waiting state.
Last updated
on
Oct 23, 2024

================================================================================

Title: Launch Node in GCP
URL: https://wiki.pmease.com/display/QB14/Launch+Node+in+GCP
Breadcrumb:  > Administrator's Guide > Working with Cloud Profiles

Administrator's Guide
Working with Cloud Profiles
Launch Node in GCP
Version: QB14
On this page
Launch Node in GCP
GCP cloud profile
â
Cloud profiles rely on cloud providers to do its job. QuickBuild 12.0 ships with the GCP cloud provider. To use it, one has to enable the GCP plugin by providing a json file containing private key of a GCP service account in
Administration/Plugin Management
page as demonstrated below:
The GCP service account should have permission to launch/access/delete compute instances in particular GCP projects. Check
here
on how to create service account and
here
on how to obtain json file containing private key of the service account
Also make sure to
enable GCP compute engine API
Then one can follow the
cloud profiles
guide to create cloud profiles using GCP launchers like below:
{#LaunchNodeinGCP-createbuildagentinstancetemplate}
Create build agent instance template
â
An instance template is required to set up GCP cloud profile. This instance template should be pre-configured with your build environment as well as QuickBuild build agent. To create an instance template able to be used by GCP cloud profile, please do the following:
Manually launch a compute instance of desired platform using your GCP account, and install Java Runtime Environment version 8 or higher on the launched instance. You may also want to install other software required by your build to this instance.
Download QuickBuild build agent package from Grid page, and upload it to launched instance above.
Login to the compute instance and extract build agent package to your chosen agent installation directory.
Edit file
<agent install dir>/conf/wrapper.conf
to define property
wrapper.java.command
to point to java binary if it is not in system path.
Edit file
<agent install dir>/conf/node.properties
to configure QuickBuild server URL. You may also run
<agent install dir>/bin/config.(bat|sh)
to config node properties such as SSL setting. However this program requires GUI terminal, and if your console does not have that facility, you may run this program at your desktop to populate the node.properties, then transfer this file to launched instance.
Edit file
<agent install dir>/conf/attributes.properties
to define necessary user attributes for the build agent.
For Unix instances, edit file
<agent install dir>/bin/agent.sh
to uncomment below line and assign an OS user to run the agent in service mode.
#
RUN_AS_USER
=
The service user should own the agent installation directory.
Run
<agent install dir>/bin/agent.(sh|bat) install
to install agent as system service.
Configure GCP firewall of the network associated with the launched instance to allow incoming connections to agent port.
Restart launched node. After the system comes up, the build agent should be started automatically and will contact QuickBuild server to download necessary plugins. You may check file
<agent install dir>/logs/console.log
for the progress and possible errors.
If agent starts up normally, you should be able to see this agent appears at
unauthorized nodes
list at grid page. Authorize the node and wait for a while to see if it can come active.
If the agent comes active, stop the compute instance, and create a storage image from the instance disk.
Create an instance template using the storage image, and specify desired machine type and disk type.
You can define multiple instance templates for multiple cloud profiles to satisfy different build requirements.
Last updated
on
Oct 28, 2024

================================================================================

Title: Launch Node in EC2
URL: https://wiki.pmease.com/display/QB14/Launch+Node+in+EC2
Breadcrumb:  > Administrator's Guide > Working with Cloud Profiles

Administrator's Guide
Working with Cloud Profiles
Launch Node in EC2
Version: QB14
On this page
Launch Node in EC2
EC2 cloud profile
â
Cloud profiles rely on cloud providers to do its job. QuickBuild 5.0 ships with the EC2 cloud provider. To use it, one has to enable the EC2 plugin by providing a property file containing your EC2 access keys in
Administration/Plugin Management
page as demonstrated below:
Then one can follow the
cloud profiles
guide to create cloud profiles using EC2 launchers like below:
{#LaunchNodeinEC2-createbuildagentAMI}
Create build agent AMI
â
Besides launching node into public EC2 network, the EC2 plugin also provides the ability to launch node into EC2 virtual private cloud. Both launch settings requires the user to specify a AMI ID. The AMI should be pre-configured with your build environment as well as QuickBuild build agent. To configure a AMI with build agent, please do the following:
Manually launch an instance of desired platform using your EC2 account, and install Java Runtime Environment version 8 or higher on the launched instance. You may also want to install other software required by your build to this instance.
Download QuickBuild build agent package from Grid page, and upload it to launched instance above.
Login to the EC2 instance and extract build agent package to your chosen agent installation directory.
Edit file
<agent install dir>/conf/wrapper.conf
to define property
wrapper.java.command
to point to java binary if it is not in system path.
Edit file
<agent install dir>/conf/node.properties
to configure QuickBuild server URL. You may also run
<agent install dir>/bin/config.(bat|sh)
to config node properties such as SSL setting. However this program requires GUI terminal, and if your console does not have that facility, you may run this program at your desktop to populate the node.properties, then transfer this file to launched instance.
Edit file
<agent install dir>/conf/attributes.properties
to define necessary user attributes for the build agent.
For Unix instances, edit file
<agent install dir>/bin/agent.sh
to uncomment below line and assign an OS user to run the agent in service mode.
#
RUN_AS_USER
=
The service user should own the agent installation directory.
Run
<agent install dir>/bin/agent.(sh|bat) install
to install agent as system service.
Edit security group associated with the launched instance to allow incoming connections to agent port.
Restart launched node. After the system comes up, the build agent should be started automatically and will contact QuickBuild server to download necessary plugins. You may check file
<agent install dir>/logs/console.log
for the progress and possible errors.
If agent starts up normally, you should be able to see this agent appears at
unauthorized nodes
list at grid page. Authorize the node and wait for a while to see if it can come active.
If the agent comes active, create a EBS AMI for the launched instance and this AMI can then be used to define your cloud profiles to run certain builds. After build agent AMI is created, you may terminate the manually launched instance.
You can certainly define multiple build agent AMIs for multiple cloud profiles to satisfy different build requirements.
Last updated
on
Oct 28, 2024

================================================================================

Title: Launch Node in Azure
URL: https://wiki.pmease.com/display/QB14/Launch+Node+in+Azure
Breadcrumb:  > Administrator's Guide > Working with Cloud Profiles

Administrator's Guide
Working with Cloud Profiles
Launch Node in Azure
Version: QB14
On this page
Launch Node in Azure
Azure cloud profile
â
Cloud profiles rely on cloud providers to do its job. QuickBuild 8.0 ships with the Azure cloud provider. To use it, one has to enable the Azure plugin by providing an authentication file in
Administration/Plugin Management
page as demonstrated below:
Then one can follow the
cloud profiles
guide to create cloud profiles using Azure launchers like below:
{#LaunchNodeinAzure-createbuildagentimage}
The Azure launcher requires either a custom Windows image or Linux image being equipped with build agent and your build environment.
Create custom Windows build agent image
â
Manually launch a Windows virtual machine, and install Java Runtime Environment version 8 or higher on the machine. You may also want to install other software required by your build.
Download QuickBuild build agent package from Grid page, and upload it to the virtual machine.
Login to the machine and extract build agent package to your chosen agent installation directory.
Edit file
<agent install dir>/conf/wrapper.conf
to define property
wrapper.java.command
to point to java binary if it is not in system path.
Edit file
<agent install dir>/conf/node.properties
to configure QuickBuild server URL. You may also run
<agent install dir>/bin/config.(bat|sh)
to config node properties such as SSL setting.
Edit file
<agent install dir>/conf/attributes.properties
to define necessary user attributes for the build agent.
Open a command window as Administrator and run
<agent install dir>/bin/agent.bat install
to install agent as system service.
Configure firewall rules of the machine to allow incoming connection to build agent port.
Edit network security group associated with the machine from Azure portal to allow incoming connection to build agent port.
Restart the virtual machine. After the system comes up, the build agent should be started automatically and will contact QuickBuild server to download necessary plugins. You may check file
<agent install dir>/logs/console.log
for the progress and possible errors.
If agent starts up normally, you should be able to see this agent appears at
unauthorized nodes
list at grid page. Authorize the node and wait for a while to make sure it appears as active node in the grid.
Delete file
C:\AzureData\CustomData.bin
if exists.
Create an empty file
<agent install dir>/azure_windows.txt
.
Follow
this instruction
to prepare the machine for image capture.
Capture the virtual machine as a custom image from Azure portal. Make sure to select "No, capture only a managed image" for option "Share image to Azure compute gallery"
Create custom Linux build agent image
â
Manually launch a Linux virtual machine, and install Java Runtime Environment version 8 or higher on the machine. You may also want to install other software required by your build.
Download QuickBuild build agent package from Grid page, and upload it to the virtual machine.
Login to the EC2 instance and extract build agent package to your chosen agent installation directory.
Edit file
<agent install dir>/conf/wrapper.conf
to define property
wrapper.java.command
to point to java binary if it is not in system path.
Edit file
<agent install dir>/conf/node.properties
to configure QuickBuild server URL. You may also run
<agent install dir>/bin/config.sh
to config node properties such as SSL setting. However this program requires GUI terminal, and if your console does not have that facility, you may run this program at your desktop to populate the node.properties, then transfer this file to launched instance.
Edit file
<agent install dir>/conf/attributes.properties
to define necessary user attributes for the build agent.
Edit file
<agent install dir>/bin/agent.sh
to uncomment below line and define
RUN_AS_USER
as the user specified when creating the virtual machine
#
RUN_AS_USER
=
You may also specify other user here. However the user should have sudo permission without password prompt, as the build agent needs to access the file
/var/lib/waagent/ovf-env.xml
to get the grid token. Azure makes this file only accessible by root user. If you are using other users, make sure below command can run successfully as that user:
sudo
-
n cat
/
var
/
lib
/
waagent
/
ovf
-
env
.
xml
Run
sudo <agent install dir>/bin/agent.sh install
to install agent as system service.
Edit network security group associated with the machine to allow incoming connections to agent port.
Restart the virtual machine. After the system comes up, the build agent should be started automatically and will contact QuickBuild server to download necessary plugins. You may check file
<agent install dir>/logs/console.log
for the progress and possible errors.
If agent starts up normally, you should be able to see this agent appears at
unauthorized nodes
list at grid page. Authorize the node and wait for a while to make sure it can come active.
Run sudo
waagent -deprovision
to prepare the machine for image capture.
warning
Do not add the
+user
option when run
waagent
, as otherwise the current user will be erased
Capture the virtual machine as a custom image from Azure portal. Make sure to select "No, capture only a managed image" for option "Share image to Azure compute gallery"
Last updated
on
Oct 28, 2024

================================================================================

Title: Launch Node in Kubernetes
URL: https://wiki.pmease.com/display/QB14/Launch+Node+in+Kubernetes
Breadcrumb:  > Administrator's Guide > Working with Cloud Profiles

Administrator's Guide
Working with Cloud Profiles
Launch Node in Kubernetes
Version: QB14
On this page
Launch Node in Kubernetes
Configure server to access Kubernetes cluster
â
On the machine running QuickBuild server, make sure that the OS account
running QuickBuild service
is set up appropriately so that it can run below command to connect to desired Kubernetes cluster:
kubectl cluster
-
info
Set up firewall rule to allow node ports
â
Build agents are running as pods in Kubernetes cluster, and these pods are exposed via services with type "NodePort". QuickBuild server has to access these node ports, so appropriate firewall rule may need to be set up to allow this. For Google Kubernetes Engine, an example firewall rule can be as following:
{#LaunchNodeinKubernetes-createbuildagentimage}
Create build agent image
â
Build agent docker image needs to be configured with your build environment as well as QuickBuild build agent. Below is an example to create a Debian Linux image only with OpenJDK and build agent installed.
Assume we have build agent installed at
/path/to/buildagent
. First run the build agent to make sure it can connect with the build server.
Create file
/path/to/buildagent/Dockerfile
with below content:
FROM
openjdk
:
8
-
jdk
ADD
.
/
app
EXPOSE
8811
CMD
[
"/app/bin/wrapper-linux-x86-64"
,
"/app/conf/wrapper.conf"
]
Change to directory
/path/to/buildagent
, and run below command
sudo docker build
-
t youraccount
/
qbagent
:
latest
.
Then publish the built image:
sudo docker push youraccount
/
qbagent
:
latest
Enable Kubernetes plugin in QuickBuild
â
Login to QuickBuild server, and enable the Kubernetes plugin in
Administration/Plugin Management
page as demonstrated below:
Add Kubernetes cloud profile in QuickBuild
â
Then one can follow the
cloud profiles
guide to create cloud profiles using Kubernetes launchers like below:
Last updated
on
Oct 28, 2024

================================================================================

Title: Single Sign On
URL: https://wiki.pmease.com/display/QB14/category/Single+Sign+On
Breadcrumb:  > Administrator's Guide > Security Management

ðï¸
SSO via Trusted Http Header
How it works
ðï¸
SSO via SAML
How it works
ðï¸
SSO via OpenID
How it works

================================================================================

Title: Listen to specified IP address
URL: https://wiki.pmease.com/display/QB14/Listen+to+specified+IP+address
Breadcrumb:  > Administrator's Guide > Security Management

Administrator's Guide
Security Management
Listen to specified IP address
Version: QB14
Listen to specified IP address
By default, QuickBuild server or agent accept connections from all network interfaces. For security considerations, you may want to have them listening on specified network interface. This can be done by running "bin/config.(sh|bat)" and specify binding address.
Last updated
on
Oct 23, 2024

================================================================================

Title: Protect QuickBuild using SSL
URL: https://wiki.pmease.com/display/QB14/Protect+QuickBuild+using+SSL
Breadcrumb:  > Administrator's Guide > Security Management

Administrator's Guide
Security Management
Protect QuickBuild using SSL
Version: QB14
On this page
Protect QuickBuild using SSL
Enable https access to server
â
QuickBuild server by default runs on top of http protocol. Https can be enabled to encrypt passwords and data send to the server. Please follow below procedure to enable https access to QuickBuild server:
Run keytool command to generate a keystore. Assume Sun JDK is installed at
/path/to/jdk
and you want to generate keystore to
/path/to/keystore
. The command will be:
/
path
/
to
/
jdk
/
bin
/
keytool
-
keystore
/
path
/
to
/
keystore
-
alias
QuickBuild
-
genkey
-
keyalg
RSA
-
validity
365
You will be prompted for some settings including the keystore password and private key password. Note when prompting for name, please use host name of QB server instead of name of the person in order to make the CN field of the DN match the server and allow the cert to pass hostname validation.
Change to directory
<QuickBuild server install dir>/bin
and run command
config.(bat|sh)
. In the displayed config window, enable https access, specify https port, and specify keytool path and passwords provided in step 1.
Once https is enabled, you may access QuickBuild web interface and RESTful API through https protocol. And QuickBuild agents can be configured to connect to QuickBuild server through https protocol by editing the file
<agent install dir>/conf/node.properties
and changing the
serverUrl
accordingly.
We suggest to enable http and https access to QuickBuild server at the same time. While browser and RESTful API access are forced to go through https protocol with proper firewall settings, all agents can still talk to server via http protocol, which will perform bettern than https protocol considering the short and frequent interactions between agents and server.
If connections between server and certain agents go through insecure networks, you will need to configure those agents to connect to server via https protocol, and further, you may configure those agents to run themselves on https protocol to protect incoming connections from server and other agents, as introduced in next section.
Enable https access to agents
â
Agent can be configured to run on top of https port so that other nodes in the grid are forced to connect to it securely. To do this:
Run keytool command to generate a keystore. Assume Sun JDK is installed at
/path/to/jdk
and you want to generate keystore to
/path/to/keystore
. The command will be:
/
path
/
to
/
jdk
/
bin
/
keytool
-
keystore
/
path
/
to
/
keystore
-
alias
QuickBuild
-
genkey
-
keyalg
RSA
-
validity
365
You will be prompted for some settings including the keystore password and private key password. Note when prompting for name, please use host name of QB server instead of name of the person in order to make the CN field of the DN match the server and allow the cert to pass hostname validation.
Change to directory
<QuickBuild agent install dir>/bin
and run command
config.(bat|sh)
. In the displayed config window, enable https access, and specify keytool path and passwords provided in step 1.
Exclude SSL ciphers
â
Certain SSL ciphers can be excluded by editing file
conf/ciphers.excluded
of server (or agent if you are enabling SSL at agent side). QB server by default excludes below ciphers:
SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA
SSL_RSA_EXPORT_WITH_DES40_CBC_SHA
SSL_RSA_EXPORT_WITH_RC4_40_MD5
SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA
SSL_RSA_EXPORT_WITH_DES40_CBC_SHA
SSL_RSA_EXPORT_WITH_RC4_40_MD5
SSL_DHE_RSA_WITH_DES_CBC_SHA
SSL_RSA_WITH_DES_CBC_SHA
SSL_DHE_RSA_WITH_DES_CBC_SHA
SSL_RSA_WITH_DES_CBC_SHA
Exclude SSL protocols (since 6.0.25)
â
Certain SSL protocols can be excluded by editing file
conf/protocols.excluded
of server (or agent if you are enabling SSL at agent side). QB server by default excludes below protocols:
SSLv3
Import external certificate
â
Above steps generates self-signed certificate, if you have external certificate, you may follow
John Szakmeister
's excellent guide to configure QuickBuild using it:
First, you need to get a cert into the right format. In our case, that meant we needed to bundle the key, the public cert, and the provider's intermediate cert.
To do this, use openssl:
openssl pkcs12
-
export
-
out certificate
.
pfx
-
inkey
private
.
key
-
in
public
.
crt
-
certfile cacert
.
crt
Make sure to type in a password when prompted, otherwise keytool will die with a divide by zero error when you go to import it into a Java keystore.
Then get the new cert into a keystore, run:
keytool
-
importkeystore
-
srckeystore certificate
.
pfx
-
srcstoretype
PKCS12
\
-
srcalias
1
-
destkeystore
/
path
/
to
/
keystore
-
destalias $
ALIAS
\
-
deststorepass
"$PASSWORD"
-
destkeypass
"$PASSWORD"
Here,
A
L
I
A
S
i
s
t
h
e
n
a
m
e
t
o
a
s
s
i
g
n
t
o
t
h
e
c
e
r
t
.
F
o
r
Q
u
i
c
k
B
u
i
l
d
,
i
t
n
e
e
d
s
t
o
b
e
c
a
l
l
e
d
Q
u
i
c
k
B
u
i
l
d
.
ALIAS is the name to assign to the cert. For QuickBuild, it needs to be called QuickBuild.
A
L
I
A
S
i
s
t
h
e
nam
e
t
o
a
ss
i
g
n
t
o
t
h
ecer
t
.
F
or
Q
u
i
c
k
B
u
i
l
d
,
i
t
n
ee
d
s
t
o
b
ec
a
ll
e
d
Q
u
i
c
k
B
u
i
l
d
.
PASSWORD is the same password assigned to the export, but only the destkeypass really requires that. You could assign a different deststorepass, if you like. Note: the srcalias is actually a 1. There is no alias in a pfx file, so it just uses an index number. We put only one combined certificate in there, so the alias for it becomes 1. Also, it's not necessary to put the passwords on the command line. keytool will prompt you for them if you leave them off. It is necessary that you at least provide one. Check your work with:
keytool
-
list
-
keystore
/
path
/
to
/
keystore
-
storepass
"$PASSWORD"
You should see the cert listed as a PrivateKeyEntry. If it's listed as a trustedCertEntry, then you've failed to include the private key.
At last, tell QuickBuild to use the keystore by running "bin/config.sh" (or bin/config.bat) on windows.
Last updated
on
Oct 23, 2024

================================================================================

Title: User and Group Management
URL: https://wiki.pmease.com/display/QB14/User+and+Group+Management
Breadcrumb:  > Administrator's Guide > Security Management

Administrator's Guide
Security Management
User and Group Management
Version: QB14
User and Group Management
Permission control in QuickBuild is implemented through group and user. The administrator creates groups and give them certain permissions. All users in the group will have the permissions defined for the group. A single user can be associated with multiple groups, and the user permission is the union of all permissions of all groups.
Groups are managed through menu
Administration/Group Management
as indicated below:
Users are managed through menu
Administration/User Management
as indicated below:
The administrator account is created when you initially setup the server and cannot be deleted. However you can follow the account link to edit its details including changing the password.
Last updated
on
Oct 28, 2024

================================================================================

Title: Manage Permission Sets
URL: https://wiki.pmease.com/display/QB14/Manage+Permission+Sets
Breadcrumb:  > Administrator's Guide > Security Management

Administrator's Guide
Security Management
Manage Permission Sets
Version: QB14
Manage Permission Sets
Often you might find yourself in a situation where the same set of permissions need to be assigned to different groups and configurations again and again. The permission set feature comes to rescue: it lets you select a set of permissions and give it a name, then you can assign that permission set as a whole to configurations just as other individual permissions. A permission set can be defined as below:
After the permission set has been defined, you can then assign it to corresponding configurations when define authorizations of the group:
Last updated
on
Oct 23, 2024

================================================================================

Title: Enable Anonymous Access and Self Registering
URL: https://wiki.pmease.com/display/QB14/Enable+Anonymous+Access+and+Self+Registering
Breadcrumb:  > Administrator's Guide > Security Management

Administrator's Guide
Security Management
Enable Anonymous Access and Self Registering
Version: QB14
On this page
Enable Anonymous Access and Self Registering
Enable anonymous access
â
To enable anonymous access, please create a group with the name
anonymous
like below:
Permissions of anonymous users will have the same permissions assigned to the anonymous group.
Enable user self registering
â
To enable user self-registering, please create a group with the name
register
like below:
Permissions of self registered users will have the same permissions assigned to the register group.
Last updated
on
Oct 28, 2024

================================================================================

Title: Authenticate with Active Directory and LDAP
URL: https://wiki.pmease.com/display/QB14/Authenticate+with+Active+Directory+and+LDAP
Breadcrumb:  > Administrator's Guide > Security Management

Administrator's Guide
Security Management
Authenticate with Active Directory and LDAP
Version: QB14
Authenticate with Active Directory and LDAP
QuickBuild can be configured to authenticate users through Active Directory or generic LDAP servers. To do this, please navigate to menu
Administration/Security Settings
, and add an authenticator with the type Active Directory or LDAP.
Multiple LDAP authenticators can be configured in the system to allow authenticating users to multiple sources. When a user logins into the system, QuickBuild will check user credential against the authentiators one by one, until an authenticator successfully authenticates the user. If all authenticators fail to authenticate the user, the internal database will be used to authenticate the user. New user entries will be created in the internal database for all users authenticated successfully through the authenticators. These user entries are created to hold user settings that are not available in the LDAP servers. For example, an LDAP authenticated user can edit his/her setting to add build subscriptions. These subscription settings will be saved in that user's entry in the internal database.
Last updated
on
Oct 23, 2024

================================================================================

Title: Other permissions
URL: https://wiki.pmease.com/display/QB14/Other+permissions
Breadcrumb:  > Administrator's Guide > Security Management

Administrator's Guide
Security Management
Other permissions
Version: QB14
Other permissions
Below permissions can also be assigned to a group:
QuickBuild administration
This permission can be assigned by checking the
Is Admin Group
option of the group. Users assigned to admin group becomes administrators and will have all permissions even if they are not explicitly assigned.
Access to node attributes
This permission controls whether or not the user can view system and user attributes of grid nodes.
Expand all configurations
This permission controls whether or not the user can expand the whole configuration tree in one click. to assign this permission, a group with permission
Expand All Allowed
needs to be associated with the user.
Access system log
This permission controls whether or not an user can access system log.
Allow user agent {#Otherpermissions-allowuseragent}
This permission controls whether or not an user can download and connect the user agent to QuickBuild server for
proof build
purposes.
Last updated
on
Oct 23, 2024

================================================================================

Title: Plugin Tutorials
URL: https://wiki.pmease.com/display/QB14/category/Plugin+Tutorials
Breadcrumb:  > Developer's Guide > Develop Plugins

ðï¸
Set up Plugin Development Workspace
1. Make sure JDK version 1.8 or higher is installed on your development machine.
ðï¸
Write Your First Plugin
To start simple, we will create a plugin adding a "hello world" step to the step choice menu. A "hello world" message will be printed in the build log if this step is executed.
ðï¸
Working with Plugin UI
Generate UI with annotations
ðï¸
Working with Plugin Settings
Global plugin setting
ðï¸
Plugin Data Storage
Store build related data
ðï¸
Migrate Plugin Data
Now your plugin is used by a lot of users and they've configured your plugin and used steps contributed by your plugin. This leads to a problem: you might need to change fields of plugin setting and step classes in new version of your plugin and the change could be incompatible with existing steps and plugin settings. We certainly do not want to have users re-define their steps and plugin settings.

================================================================================

Title: Plugin Examples
URL: https://wiki.pmease.com/display/QB14/category/Plugin+Examples
Breadcrumb:  > Developer's Guide > Develop Plugins

ðï¸
Write Custom Gadget
In this example, we will enhance the plugin in tutorial Write Your First Plugin to add a custom gadget to display a specified message. Firstable, we create our gadget class as below:
ðï¸
The Example Plugin in Tutorial
Source code of this plugin can be found in project com.example.myplugin after you import the example plugins, and this is the final version of the example plugin used in the Plugin Tutorials
ðï¸
The JavaNCSS Plugin
This example plugin analyzes JavaNCSS report to count source and comment lines of your project and if comment to source ratio is under a specified threshold, it reports a build error. It also adds a pie chart to build overview page displaying source and comment lines, and adds a stack bar chart to statistics page to display trends of comment to source ratio over time.
ðï¸
Creating a Test Report Plugin
Since 4.0, you can add your own test report plugin by using report plugin APIs. Normally, a test report plugin contributes below extension-points to QuickBuild:
ðï¸
Creating an Issue Tracker Plugin
Since 4.0, you can add your own test report plugin by using report plugin APIs. Normally, an typical issue tracker plugin contributes below extension points:

================================================================================

Title: Development References
URL: https://wiki.pmease.com/display/QB14/category/Development+References
Breadcrumb:  > Developer's Guide > Develop Plugins

ðï¸
Extension Points
For documentation of plugin extension points defined in the system, please extract the file \/plugins/com.pmease.quickbuild.bootstrap/javadoc.zip/com/pmease/quickbuild/extensionpoint/package-summary.html.
ðï¸
Bean Editor
We use plugin setting to explain how to use the bean editor to generate plugin UI. As introduced in Write a Simple Plugin, user can provide a plugin setting class by overriding getPluginSettingClass() method in the plugin class. If provided, this class will be used by QuickBuild to generate plugin setting user interface. The setting will be saved as an instance of this class and can be retrieved later through getPluginSetting() method when this plugin runs. Let's start with a very simple plugin setting class:

================================================================================

Title: Available Clients
URL: https://wiki.pmease.com/display/QB14/Available+Clients
Breadcrumb:  > Developer's Guide > RESTful API

Developer's Guide
RESTful API
Available Clients
Version: QB14
Available Clients
Python
Last updated
on
Oct 23, 2024

================================================================================

Title: Get API Version
URL: https://wiki.pmease.com/display/QB14/Get+API+Version
Breadcrumb:  > Developer's Guide > RESTful API

Developer's Guide
RESTful API
Get API Version
Version: QB14
Get API Version
Version of the RESTful API can be retrieved by visiting below url:
http
:
/
/
localhost
:
8810
/
rest
/
version
No any authentication is required for this service. Mime type of the response is
text/plain
, and the content is string representation of the API version.
Last updated
on
Oct 23, 2024

================================================================================

Title: Interact with Audits
URL: https://wiki.pmease.com/display/QB14/Interact+with+Audits
Breadcrumb:  > Developer's Guide > RESTful API

Developer's Guide
RESTful API
Interact with Audits
Version: QB14
On this page
Interact with Audits
warning
This API is added since QuickBuild 6.0.6.
Search Audits
â
Syntax
â
Audits can be searched using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
audits
?
<
search criteria1
>
=
<
value1
>
&
<
search criteria2
>
=
<
value2
>
&
.
.
.
Query string part of the url represents various search criterias to restrict the search result. Supported search criterias are:
Search criteria
Explanation
username
Name of the user to audit. If not specified, audit log of all users will be searched.
source
Specify source of audit to match. The character
*
can be used in the source string to do wildcard match. If not specified, audits from all sources will be matched.
action
Action of the audit to match. If left empty, any action will be matched.
since
In the format of
yyyy-MM-dd
HH:mm, for example:
2009-11-12 13:00
. If specified, search audits generated after this date
until
In the format of
yyyy-MM-dd
HH:mm, for example:
2009-11-12 14:00
. If specified, search builds generated before this date
first
Specified first audit entry to return. If not specified, value
0
is assumed
count
Specified number of audit entries to return. This param must be specified in order not to mistakenly return all audits to stress the system
The response is of mime type
application/xml
, and the content is XML representation of list of matched builds. If no any search criterias are specified, all builds in the system will be returned.
Security
â
You will need to use http BASIC authentication to login as administrator if the anonymous does not have administative permission.
Demo
â
Below
curl
commands demonstrates how to combine different criterias to perform search:
Search recent 100 audit entries for user
robin
under configuration tree
root/test
:
curl
-
u admin
:
admin
"http://localhost:8810/rest/audits?username=robin&source=root/test/*&count=100"
warning
Make sure to append "/" to configuration path if you want to search against certain configuration as QuickBuild uses trailing slash to differenticate audits generated from configurations and other sources. In this example we also append
*
to end of source param to match all sub configurations under
root/test
Search all audits bewteen generated after
2015-01-12 13:00
and after
2015-01-12 23:00
in the system:
curl
-
u admin
:
admin
"http://localhost:8810/rest/audits?since=2015-01-12+13:00&until=2015-01-12+23:00"
warning
Here we use
2015-01-12+13:00
instead of
2015-01-12 13:00
as the white space in query string has to be encoded as plus sign.
Count Audits
â
Counting audits uses the same syntax as searching audits, except that:
It goes to url
http://localhost:8810/rest/audits/count
instead of
http://localhost:8810/rest/audits
.
first and count param should not be specified.
Last updated
on
Oct 23, 2024

================================================================================

Title: Interact with Configurations
URL: https://wiki.pmease.com/display/QB14/Interact+with+Configurations
Breadcrumb:  > Developer's Guide > RESTful API

Developer's Guide
RESTful API
Interact with Configurations
Version: QB14
On this page
Interact with Configurations
Get child configurations of specified configuration
â
Syntax
â
A list of child configurations can be accessed by parent configuration id using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
configurations
?
parent_id
=
<
parent configuration id
>
Here
<parent configuration id>
represents id of the parent configuration. The response is of mime type
application/xml
and the content is brief xml representation of list of all child configurations.
warning
For performance reason, only brief information of the configuration will be returned here, including id, name, description, schedule, runMode, errorMessage, and parent id. You may
get the full xml representation using id
if necessary.
Security
â
Only configurations accessible by current user (specified in http BASIC authentication) will be returned.
Demo
â
Below
curl
command demonstrates how to get child configurations under the configuration with id of
1
:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
configurations
?
parent_id
=
1
Get all descendent configurations of specified configuration
â
Syntax
â
All descendent configurations can be accessed by parent configuration id using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
configurations
?
parent_id
=
<
parent configuration id
>
&
recursive
=
true
Here
<parent configuration id>
represents id of the parent configuration. The response is of mime type
application/xml
and the content is brief xml representation of list of all descendent configurations.
warning
For performance reason, only brief information of the configuration will be returned here, including id, name, description, schedule, runMode, errorMessage, and parent id. You may
get the full xml representation using id
if necessary.
Security
â
Only configurations accessible by current user (specified in http BASIC authentication) will be returned.
Demo
â
Below
curl
command demonstrates how to get descendent configurations under the configuration with id of
1
:
curl
-
u admin
:
admin
"http://localhost:8810/rest/configurations?parent_id=1&recursive=true"
Get all configurations in the system
â
Syntax
â
All configurations in the system can be accessed using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
configurations
?
recursive
=
true
The response is of mime type
application/xml
and the content is brief xml representation of list of all configurations.
warning
For performance reason, only brief information of the configuration will be returned here, including id, name, description, schedule, runMode, errorMessage, and parent id. You may
get the full xml representation using id
if necessary.
Security
â
Only configurations accessible by current user (specified in http BASIC authentication) will be returned.
Demo
â
Below
curl
command demonstrates how to get descendent configurations under the configuration with id of
1
:
curl
-
u admin
:
admin
"http://localhost:8810/rest/configurations?recursive=true"
Search configurations by path pattern
â
Syntax
â
Configurations matching specified path pattern can be accessed using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
configurations
?
search
=
some
/
path
/
pattern
The response is of mime type
application/xml
and the content is brief xml representation of list of all matched configurations.
warning
For performance reason, only brief information of the configuration will be returned here, including id, name, description, schedule, runMode, errorMessage, and parent id. You may
get the full xml representation using id
if necessary.
Security
â
Only configurations accessible by current user (specified in http BASIC authentication) will be returned.
Demo
â
Below
curl
command demonstrates how to get all release configurations:
curl
-
u admin
:
admin
"http://localhost:8810/rest/configurations?search=**/release/**"
{Interact+with+Configurations}
Access configuration by id
â
Syntax
â
Configuration can be accessed by id using http GET method through below url:
http
:
/
/
qb
-
server
:
8810
/
rest
/
configurations
/
<
configuration id
>
Here
<configuration id>
stands for id of the configuration. The response is of mime type
application/xml
and the content is xml representation of the configuration.
Security
â
You will need to use http BASIC authentication to login as an authorized QuickBuild user if the anonymous does not have the
ACCESS_SETTINGS
permission of the requested configuration.
Demo
â
Below
curl
command demonstrates how to get xml representation of configuration with identifier
1
(the root configuration):
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
configurations
/
1
Access configuration path by id
â
Syntax
â
Configuration path can be accessed by id using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
configurations
/
<
configuration id
>
/
path
Here
<configuration id>
stands for id of the configuration. The response is of mime type
plain/text
and the content is string representation of the configuration path name.
Security
â
Any user can access this service including anonymous.
Demo
â
Below
curl
command demonstrates how to get path name of configuration with id
2
:
curl http
:
/
/
localhost
:
8810
/
rest
/
configurations
/
2
/
path
Access configuration name by id
â
Syntax
â
Configuration name can be accessed by id using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
configurations
/
<
configuration id
>
/
name
Here
<configuration id>
stands for id of the configuration. The response is of mime type
plain/text
and the content is string representation of the configuration name.
Security
â
You will need to use http BASIC authentication to login as an authorized QuickBuild user if the anonymous is not allowed to access the requested configuration.
Demo
â
Below
curl
command demonstrates how to get name of configuration with id
2
:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
configurations
/
2
/
name
Access configuration description by id
â
Syntax
â
Configuration description can be accessed by id using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
configurations
/
<
configuration id
>
/
description
Here
<configuration id>
stands for id of the configuration. The response is of mime type
plain/text
and the content is string representation of the configuration description. Status code 204 (No Content) will be returned if the configuration does not have description.
Security
â
You will need to use http BASIC authentication to login as an authorized QuickBuild user if the anonymous is not allowed to access the requested configuration.
Demo
â
Below
curl
command demonstrates how to get description of configuration with id
2
:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
configurations
/
2
/
description
Access configuration error message by id
â
Syntax
â
Configuration error message can be accessed by id using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
configurations
/
<
configuration id
>
/
error_message
Here
<configuration id>
stands for id of the configuration. The response is of mime type
plain/text
and the content is string representation of the configuration error message. Status code 204 (No Content) will be returned if the configuration is not in error.
Security
â
You will need to use http BASIC authentication to login as an authorized QuickBuild user if the anonymous is not allowed to access the requested configuration.
Demo
â
Below
curl
command demonstrates how to get error message of configuration with id
2
:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
configurations
/
2
/
error_message
Access configuration run mode by id
â
Syntax
â
Configuration run mode can be accessed by id using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
configurations
/
<
configuration id
>
/
run_mode
Here
<configuration id>
stands for id of the configuration. The response is of mime type
plain/text
and the content is string representation of configuration run mode. Status code 204 (No Content) will be returned if run mode is inherited from parent configuration.
Security
â
Any user can access this service including anonymous.
Demo
â
Below
curl
command demonstrates how to get run mode of configuration with id
2
:
curl http
:
/
/
localhost
:
8810
/
rest
/
configurations
/
2
/
run_mode
Access configuration schedule by id
â
Syntax
â
Configuration schedule can be accessed by id using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
configurations
/
<
configuration id
>
/
schedule
Here
<configuration id>
stands for id of the configuration. The response is of mime type
application/xml
and the content is XML representation of configuration schedule. Status code 204 (No Content) will be returned if schedule is inherited from parent configuration.
Security
â
Any user can access this service including anonymous.
Demo
â
Below
curl
command demonstrates how to get schedule of configuration with id
2
:
curl http
:
/
/
localhost
:
8810
/
rest
/
configurations
/
2
/
schedule
Access configuration variables in hierarchy by id
â
Syntax
â
Configuration variables in hierarchy can be accessed by id using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
configurations
/
<
configuration id
>
/
variablesInHierarchy
Here
<configuration id>
stands for id of the configuration. The response is of mime type
application/xml
and the content is xml representation of returned variables.
Security
â
You will need to use http BASIC authentication to login as an authorized QuickBuild user if the anonymous is not allowed to access settings of the requested configuration.
Demo
â
Below
curl
command demonstrates how to get hierarchy variables of configuration with id
2
:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
configurations
/
2
/
variablesInHierarchy
Access interpolated configuration variables in hierarchy by id
â
Syntax
â
Interpolated configuration variables in hierarchy can be accessed by id using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
configurations
/
<
configuration id
>
/
interpolatedVariablesInHierarchy
Here
<configuration id>
stands for id of the configuration. The response is of mime type
application/xml
and the content is xml representation of interpolated variables.
Security
â
You will need to use http BASIC authentication to login as an authorized QuickBuild user if the anonymous is not allowed to access settings of the requested configuration.
Demo
â
Below
curl
command demonstrates how to get interpolated hierarchy variables of configuration with id
2
:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
configurations
/
2
/
interpolatedVariablesInHierarchy
Access average build duration of configuration by id
â
Syntax
â
Average build duration can be accessed by configuration id using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
configurations
/
<
configuration id
>
/
average_duration
?
from_date
=
<
from date
>
&
to_date
=
<
to
date
>
Here
<configuration id>
stands for id of the configuration, and one can optionally limit scope of build for calculation via query parameter
from_date
and
to_date
. Date is of format yyyy-MM-dd, for example: 2009-11-12. The response is of mime type
plain/text
and the content is milli-seconds of average build duration.
Security
â
You will need to use http BASIC authentication to login as an authorized QuickBuild user if the anonymous is not allowed to access the requested configuration.
Demo
â
Below
curl
command demonstrates how to get average duration of configuration with id
2
:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
configurations
/
2
/
average_duration
Access build success rate of configuration by id
â
Syntax
â
Build success rate can be accessed by configuration id using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
configurations
/
<
configuration id
>
/
success_rate
?
from_date
=
<
from date
>
&
to_date
=
<
to
date
>
Here
<configuration id>
stands for id of the configuration, and one can optionally limit scope of build for calculation via query parameter
from_date
and
to_date
. Date is of format yyyy-MM-dd, for example: 2009-11-12. The response is of mime type
plain/text
and the content is an integer in the range of 0~100, with 0 stands for 0%, and 100 stands for 100%.
Security
â
You will need to use http BASIC authentication to login as an authorized QuickBuild user if the anonymous is not allowed to access the requested configuration.
Demo
â
Below
curl
command demonstrates how to get success rate of configuration with id
2
:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
configurations
/
2
/
success_rate
Access parent configuration by id
â
Syntax
â
Parent configuration can be accessed by id using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
configurations
/
<
configuration id
>
/
parent
Here
<configuration id>
stands for id of the configuration. The response is of mime type
plain/text
and the content is string representation of id of parent configuration. Status code 204 (No Content) will be returned if the configuration is root configuration and does not have parent.
Security
â
Any user can access this service including anonymous.
Demo
â
Below
curl
command demonstrates how to get parent of configuration with id
2
:
curl http
:
/
/
localhost
:
8810
/
rest
/
configurations
/
2
/
parent
Update configuration
â
Syntax
â
Configuration can be updated by posting xml representation of the configuration to below url:
http
:
/
/
localhost
:
8810
/
rest
/
configurations
Please note that the
parent
element denotes id of the parent configuration.
Normally you do not need to create the xml from scratch: you may retrieve full xml representation of the configuration using configuration id, modify certain parts of the xml and post back to above url.
The response is of mime type
text/plain
and the content is string representation of the configuration id being updated.
warning
If you want to change value of secret elements (elements with attribute "secret=encrypt", including repository passwords, secret variable values, etc.), please make sure to remove the "secret" attribute and then supply a plain text password; otherwise, QuickBuild will think that the supplied password has already been encrypted.
Security
â
You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have
EDIT_SETTINGS
permission on the requested configuration.
Demo
â
We will use
curl
to demonstrate how to modify description of configuration
root/test
:
Retrieve id of configuration
root/test
using id service
:
curl http
:
/
/
localhost
:
8810
/
rest
/
ids
?
configuration_path
=
root
/
test
Retrieve full xml representation of configuration
root/test
into a temp file using below command:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
configurations
/
<
configuration id
>
>
tempfile
.
xml
Here
<configuration id>
needs to be replaced with query result of first step.
Edit
tempfile.xml
and change the
description
property to desired value (or add description element if it does not exist).
Post back modified content using below command:
curl
-
X
POST
-
u admin
:
admin
--
data
-
binary
"@tempfile.xml"
http
:
/
/
localhost
:
8810
/
rest
/
configurations
Create configuration
â
Syntax
â
Configuration can be created by posting xml representation of the configuration to below url:
http
:
/
/
localhost
:
8810
/
rest
/
configurations
Please note that:
The posted xml should NOT contain the
id
element; otherwise, QuickBuild will treat the post as an update to the configuration with that id.
The
parent
element denotes id of the parent configuration.
Normally you do not need to create the xml from scratch: you may retrieve xml representation of a templating configuration using various configuration access methods, remove the
id
element, modify certain parts and post back to above url.
The response is of mime type
text/plain
and the content is string representation of id of the newly created configuration.
Secret elements (Elements with attribute "secret=encrypt" in XML representation of an existing configuration, typically they are repository passwords, secret variable values, etc.) should not contain the "secret" attribute; otherwise QuickBuild will think that the password has already been encrypted. However if you creating configuration by copying existing one and want to remain the passwords, the "secret" attribute should then be preserved.
Security
â
You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have
ADD_CHILDREN
permission on the parent configuration.
Demo
â
We will use
curl
to demonstrate how to create a new configuration
root/test-copy
by copying the configuration
root/test
.
Retrieve id of configuration
root/test
using id service
:
curl http
:
/
/
localhost
:
8810
/
rest
/
ids
?
configuration_path
=
root
/
test
Retrieve full xml representation of configuration
root/test
into a temp file using below command:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
configurations
/
<
configuration id
>
>
tempfile
.
xml
Here
<configuration id>
needs to be replaced with query result of first step.
Edit
tempfile.xml
, remove the
id
element, and change the
name
element to be
test-copy
Post back modified content using below command:
curl
-
X
POST
-
u admin
:
admin
--
data
-
binary
"@tempfile.xml"
http
:
/
/
localhost
:
8810
/
rest
/
configurations
Copy configuration (available since 4.0.72)
â
Syntax
â
Configuration can be copied via GET method like below:
http
:
/
/
localhost
:
8810
/
rest
/
configurations
/
<
configuration id
>
/
copy
?
parent_id
=
<
parent id
>
&
name
=
<
name
>
&
recursive
=
[
true
|
false
]
Here:
The
<configuration id>
has to be replaced by id of the configuration to be copied.
The
<parent id>
has to be replaced by id of the parent to place newly copied configuration.
The
<name>
has to be replaced by name of the newly copied configuration.
Specify parameter
recursive=true
to copy specified configuration and all its descendant configurations recursively; otherwise, only the configuration itself will be copied.
The response is of mime type
text/plain
and the content is string representation of id of the newly copied configuration.
Security
â
You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have
ACCESS_SETTINGS
permission on the configuration to be copied and have
ADD_CHILDREN
permission on the parent configuration.
Demo
â
We will use
curl
to demonstrate how to copy a configuration
root/project/test
recursively as
root/project/test_copy
.
Retrieve id of configuration
root/project/test
using id service
:
curl http
:
/
/
localhost
:
8810
/
rest
/
ids
?
configuration_path
=
root
/
project
/
test
Assume retrieved identifier is 100.
Retrieve id of configuration
root/project
using id service
:
curl http
:
/
/
localhost
:
8810
/
rest
/
ids
?
configuration_path
=
root
/
project
Assume retrieved parent identifier is 2.
Run below command to copy the configuration:
curl
-
u admin
:
admin
"http://localhost:8810/rest/configurations/100/copy?parent_id=2&name=test_copy&recursive=true"
Delete configuration
â
Syntax
â
Configuration can be deleted using http DELETE method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
configurations
/
<
configuration id
>
Here
<configuration id>
stands for id of the configuration to be deleted and can be queried with
id service
.
Security
â
You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have
DELETE_CHILDREN
on the parent configuration.
Demo
â
Below
curl
command demonstrates how to delete the configuration with id
2
:
curl
-
X
DELETE
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
configurations
/
2
Last updated
on
Oct 24, 2024

================================================================================

Title: Interact with Builds
URL: https://wiki.pmease.com/display/QB14/Interact+with+Builds
Breadcrumb:  > Developer's Guide > RESTful API

Developer's Guide
RESTful API
Interact with Builds
Version: QB14
On this page
Interact with Builds
Access build by build id
â
Syntax
â
Build can be accessed by id using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
builds
/
<
build id
>
The response is of mime type
application/xml
, and the content is XML representation of the build.
Security
â
You will need to use http BASIC authentication to login as an authorized QuickBuild user if the anonymous does not have permission to access belonging configuration of requested build.
Demo
â
Below
curl
command demonstrates how to access XML representation of build with id
14
:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
builds
/
14
Access build status by build id
â
Syntax
â
Build status can be accessed by build id using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
builds
/
<
build id
>
/
status
The response is of mime type
text/plain
, and the content is string representation of the build status.
Security
â
You will need to use http BASIC authentication to login as an authorized QuickBuild user if the anonymous does not have permission to access belonging configuration of requested build.
Demo
â
Below
curl
command demonstrates how to access status of build with id
14
:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
builds
/
14
/
status
Access build begin date by build id
â
Syntax
â
Build begin date can be accessed by build id using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
builds
/
<
build id
>
/
begin_date
The response is of mime type
text/plain
, and the content is string representation of build begin date (mill-seconds since January 1, 1970, 00:00:00 GMT)
Security
â
You will need to use http BASIC authentication to login as an authorized QuickBuild user if the anonymous does not have permission to access belonging configuration of requested build.
Demo
â
Below
curl
command demonstrates how to access begin date of build with id
14
:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
builds
/
14
/
begin_date
Access build version by build id
â
Syntax
â
Build version can be accessed by build id using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
builds
/
<
build id
>
/
version
The response is of mime type
text/plain
, and the content is string representation of the build version.
Security
â
You will need to use http BASIC authentication to login as an authorized QuickBuild user if the anonymous does not have permission to access belonging configuration of requested build.
Demo
â
Below
curl
command demonstrates how to access version of build with id
14
:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
builds
/
14
/
version
Access build duration by build id
â
Syntax
â
Build duration can be accessed by build id using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
builds
/
<
build id
>
/
duration
The response is of mime type
text/plain
, and the content is string representation of the build duration (milli-seconds). Status 204 (No Content) will be returned if build is not finished.
Security
â
You will need to use http BASIC authentication to login as an authorized QuickBuild user if the anonymous does not have permission to access belonging configuration of requested build.
Demo
â
Below
curl
command demonstrates how to access duration of build with id
14
:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
builds
/
14
/
duration
{Interact+with+Builds}
Get build request id by build id
â
Syntax
â
Build request
id can be accessed by build id using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
builds
/
<
build id
>
/
request_id
The response is of mime type
text/plain
, and the content is string representation of the build request id. Status 204 (No Content) will be returned if build is finished.
Security
â
You will need to use http BASIC authentication to login as an authorized QuickBuild user if the anonymous does not have permission to access belonging configuration of requested build.
Demo
â
Below
curl
command demonstrates how to get request id of build with id
14
:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
builds
/
14
/
request_id
Access executed steps by build id
â
Syntax
â
Executed steps of a build can be accessed by build id using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
builds
/
<
build id
>
/
steps
The response is of mime type
application/xml
, and the content is XML representation of the list of steps executed in the build.
Security
â
You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have permission to access settings of belonging configuration.
Demo
â
Below
curl
command demonstrates how to access executed steps by build with id
14
:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
builds
/
14
/
steps
Access used repositories by build id
â
Syntax
â
Used repositories of a build can be accessed by build id using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
builds
/
<
build id
>
/
repositories
The response is of mime type
application/xml
, and the content is XML representation of the list of repositories used in the build.
Security
â
You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have permission to access settings of belonging configuration.
Demo
â
Below
curl
command demonstrates how to access used repositories by build with id
14
:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
builds
/
14
/
repositories
Access used variables by build id
â
Syntax
â
Used variables of a build can be accessed by build id using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
builds
/
<
build id
>
/
variables
The response is of mime type
application/xml
, and the content is XML representation of the list of variables used in the build.
Security
â
You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have permission to access build variables.
Demo
â
Below
curl
command demonstrates how to access used variables in build with id
14
:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
builds
/
14
/
variables
Access dependency builds by build id
â
Syntax
â
All dependency builds whose artifacts are used by current build can be accessed by build id using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
builds
/
<
build id
>
/
dependencies
The response is of mime type
application/xml
, and the content is XML representation of the list of dependency builds of specified build.
Security
â
You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have permission to access all dependency builds of specified build.
Demo
â
Below
curl
command demonstrates how to access dependency builds of build with id
14
:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
builds
/
14
/
dependencies
Access dependent builds by build id
â
Syntax
â
All dependent builds who using artifacts of current build can be accessed by build id using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
builds
/
<
build id
>
/
dependents
The response is of mime type
application/xml
, and the content is XML representation of the list of dependent builds of specified build.
Security
â
You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have permission to access all dependent builds of specified build.
Demo
â
Below
curl
command demonstrates how to access dependent builds of build with id
14
:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
builds
/
14
/
dependents
Search Builds
â
Syntax
â
Builds can be searched using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
builds
?
<
search criteria1
>
=
<
value1
>
&
<
search criteria2
>
=
<
value2
>
&
.
.
.
Query string part of the url represents various search criterias to restrict the search result. Supported search criterias are:
Search criteria
Explanation
configuration_id
This tells QuickBuild under which configuration id to search builds. If not specified, all configurations will be searched.
recursive
If set to
true
, QuickBuild will also search builds in all descendent configurations of specified configuration. The value is assumed as
false
if not specified.
from_date
In the format of
yyyy-MM-dd
, for example:
2009-11-12
. If specified, search builds generated after this date
to_date
In the format of
yyyy-MM-dd
, for example:
2009-11-12
. If specified, search builds generated before this date
version
Specify the build version to match. The character
*
can be used in the version string to do wildcard match. If not specified, all versions will be matched.
status
Status of the build to match. Valid build statuses are:
SUCCESSFUL
,
FAILED
,
RECOMMENDED
,
CANCELLED
,
RUNNING
,
TIMEOUT
. If left empty, any build status will be matched.
user_id
Match builds which is triggered by specified user. If not specified, builds triggered by any user will be matched.
master_node
Match builds with master step running on specified node if specified.
promoted_from_id
Match builds promoted from specified build id if specified.
request_id
If specified, match builds with specified build request id
first
Specify start position of search results. Position
0
is assumed if this param is not specified.
count
Specify number of builds to return. This parameter is required.
The response is of mime type
application/xml
, and the content is XML representation of list of matched builds.
danger
The parameter
count
is required to limit the returned result set in order not to put heavy load on the server.
Security
â
You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have permission to access returned builds.
Demo
â
Below
curl
commands demonstrates how to combine different criterias to perform search:
Search all failed builds under configuration with id
2
:
curl
-
u admin
:
admin
"http://localhost:8810/rest/builds?configuration_id=2&status=FAILED&count=100"
Search all successful builds generated before
2009-11-12
in the system:
curl
-
u admin
:
admin
"http://localhost:8810/rest/builds?status=SUCCESSFUL&to_date=2009-11-12&count=100"
Search all failed builds with version containing
qa
:
curl
-
u admin
:
admin
"http://localhost:8810/rest/builds?version=*qa*&status=FAILED&count=100"
Count Builds
â
Syntax
â
Builds can be counted using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
builds
/
count
?
<
search criteria1
>
=
<
value1
>
&
<
search criteria2
>
=
<
value2
>
&
.
.
.
Query string part of the url represents various search criterias to restrict the search result. Supported search criterias are:
Search criteria
Explanation
configuration_id
This tells QuickBuild under which configuration id to search builds. If not specified, all configurations will be searched.
recursive
If set to
true
, QuickBuild will also search builds in all descendent configurations of specified configuration. The value is assumed as
false
if not specified.
from_date
In the format of
yyyy-MM-dd
, for example:
2009-11-12
. If specified, search builds generated after this date
to_date
In the format of
yyyy-MM-dd
, for example:
2009-11-12
. If specified, search builds generated before this date
version
Specify the build version to match. The character
*
can be used in the version string to do wildcard match. If not specified, all versions will be matched.
status
Status of the build to match. Valid build statuses are:
SUCCESSFUL
,
FAILED
,
RECOMMENDED
,
CANCELLED
,
RUNNING
,
TIMEOUT
. If left empty, any build status will be matched.
user_id
Match builds which is triggered by specified user. If not specified, builds triggered by any user will be matched.
promoted_from_id
If specified, match builds which is promoted from specified build
request_id
If specified, match builds with specified build request id
The response is of mime type
text/plain
, and the content is string representation of number of builds matching search criterias. If no any search criterias are specified, all builds in the system will be counted.
Security
â
Any user can call this RESTful API to count builds in system.
Demo
â
Below
curl
commands demonstrates how to combine different criterias to perform build counting:
Count all failed builds under configuration with id
2
:
curl
-
u admin
:
admin
"http://localhost:8810/rest/builds/count?configuration_id=2&status=FAILED"
Count all successful builds generated before
2009-11-12
in the system:
curl
-
u admin
:
admin
"http://localhost:8810/rest/builds/count?status=SUCCESSFUL&to_date=2009-11-12"
Count all failed builds with version containing
qa
:
curl
-
u admin
:
admin
"http://localhost:8810/rest/builds/count?version=*qa*&status=FAILED"
Update build
â
Syntax
â
Build can be updated by posting XML representation of the build to below url:
http
:
/
/
localhost
:
8810
/
rest
/
builds
Please note that the
configuration
element denotes id of the belonging configuration.
Normally you do not need to create the XML from scratch: you may retrieve XML representation of the build using the http GET method, modify certain parts of the XML and post back to above url.
The response is of mime type
text/plain
and the content is string representation of the build id being updated.
Security
â
You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have
SAVE_BUILD
permission on the belonging configuration.
Demo
â
We will use
curl
to demonstrate how to move the build to be under another configuration. Let's assume the build id is
100
, and the destination configuration id is
6
.
Retrieve xml representation of desired build into a temp file using below command:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
builds
/
100
>
tempfile
.
xml
Edit
tempfile.xml
and change the
configuration
property to take the value
6
.
Post back modified content using below command:
curl
-
X
POST
-
u admin
:
admin
-
d
@tempfile.xml
http
:
/
/
localhost
:
8810
/
rest
/
builds
danger
Moving builds to other configurations is not suggested since it will result in inaccurate change sets when compare builds in the original configuration.
Create build
â
Syntax
â
Build object can be created by posting XML representation of the build to below url:
http
:
/
/
localhost
:
8810
/
rest
/
builds
Please note that:
The posted xml should NOT contain the
id
element; otherwise, QuickBuild will treat the post as an updating to the build with that id.
The
configuration
element denotes id of the belonging configuration.
Normally you do not need to create the XML from scratch: you may retrieve XML representation of a templating build using the http GET method, remove the
id
element, modify certain parts and post back to above url.
The response is of mime type
text/plain
and the content is string representation of id of the newly created build.
warning
This is different from [requesting new build](Interact with Build Requests.html#InteractwithBuildRequests-requestnewbuild) in the system. It simply adds a build object in the system, and is normally used to move build objects between different servers or configurations.
Security
â
You will need to use http BASIC authentication to login as administrator if the anonymous does not have administrative rights.
Demo
â
We will use
curl
to demonstrate how to create a new build by copying an existing build with id
100
.
Retrieve xml representation of build with id
100
into a temp file using below command:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
builds
/
100
>
tempfile
.
xml
Edit
tempfile.xml
to remove the
id
element, and change other properties as desired.
Post back modified content using below command:
curl
-
X
POST
-
u admin
:
admin
-
d
@tempfile.xml
http
:
/
/
localhost
:
8810
/
rest
/
builds
Delete Build
â
Syntax
â
Build can be deleted using http DELETE method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
builds
/
<
build id
>
warning
This service simply deletes the build object in database, and is different from build cacellation. You may follow below steps to cancel a running build:
Get build request id
[Delete the build request](Interact with Build Requests.html#InteractwithBuildRequests-deletebuildrequest) with build request id if it is not empty
Security
â
You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have
DELETE_BUILD
permission on the belonging configuration.
Demo
â
Below
curl
command demonstrates how to delete the build with id
100
:
curl
-
X
DELETE
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
builds
/
100
Recommend build
â
Syntax
â
Build can be recommended using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
builds
/
<
build id
>
/
recommend
Security
â
You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have permission to recommend specified build
Demo
â
Below
curl
command demonstrates how to recommend build with id
14
:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
builds
/
14
/
recommend
Unecommend build
â
Syntax
â
Build can be unrecommended using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
builds
/
<
build id
>
/
unrecommend
Security
â
You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have permission to unrecommend specified build
Demo
â
Below
curl
command demonstrates how to unrecommend build with id
14
:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
builds
/
14
/
unrecommend
Last updated
on
Oct 24, 2024

================================================================================

Title: Interact with Latest Builds
URL: https://wiki.pmease.com/display/QB14/Interact+with+Latest+Builds
Breadcrumb:  > Developer's Guide > RESTful API

Developer's Guide
RESTful API
Interact with Latest Builds
Version: QB14
On this page
Interact with Latest Builds
This API is provided for the purpose of accessing latest build information of one or more configurations efficiently.
Access latest build of a specific configuration
â
Syntax
â
Latest build information can be accessed by configuration id using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
latest_builds
/
<
configuration id
>
The response is of mime type
application/xml
, and the content is XML representation of the build. Http status code 204 (no content) will be returned if no any build exists in the configuration.
warning
Please note that only brief information of the build will be returned for efficiency. These brief information includes build id, build version, build status, begin date, build duration, and id of belonging configuration.
Security
â
You will need to use http BASIC authentication to login as an authorized QuickBuild user if the anonymous does not have permission to access builds of specified configuration.
Demo
â
Below
curl
command demostrates how to access XML representation of latest build of configuration with id
2
:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
latest_builds
/
2
Get latest builds for all child configurations
â
Syntax
â
Latest builds can be queried for all child configurations of specified configuration using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
latest_builds
?
parent_configuration_id
=
<
parent configuration id
>
&
recursive
=
<
recursive
>
Here
<parent configuration id>
needs to be replaced with identifier of the parent configuration. QuickBuild will return latest builds of all child configurations of this parent configuration.
<recursive>
is either
true
or
false
, where
true
means to get latest builds for all child configurations recursively, and
false
means to get latest builds for all child configurations non-recursively.
The response is of mime type
text/plain
, and the content is string representation of the build status.
warning
Please note that only brief information of the build will be returned for efficiency. These brief information includes build id, build version, build status, begin date, build duration, and id of belonging configuration.
Security
â
You will need to use http BASIC authentication to login as an authorized QuickBuild user if the anonymous does not have permission to access builds of any of the child configurations.
Demo
â
Below
curl
command demostrates how to access latest builds for all child configurations of root configuration non-recursively:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
latest_builds
?
parent_configuration_id
=
1
&
recursive
=
false
Last updated
on
Oct 23, 2024

================================================================================

Title: Interact with Build Requests
URL: https://wiki.pmease.com/display/QB14/Interact+with+Build+Requests
Breadcrumb:  > Developer's Guide > RESTful API

Developer's Guide
RESTful API
Interact with Build Requests
Version: QB14
On this page
Interact with Build Requests
Build request object can be used to request new build or cancel running build.
List build requests
â
Syntax
â
Build requests of a particular configuration can be listed via below url:
http
:
/
/
localhost
:
8810
/
rest
/
build_requests
?
configuration_id
=
<
configuration id
>
&
trigger_user_id
=
<
trigger user id
>
Where:
<configuration id>
should be replaced with identifier of a configuration. If this query parameter is missing, QB will return all build requests in the system.
<trigger user id>
should be replaced with identifier of the user triggering the request. If this query param is missing, QB will return build requests triggered by all users in the system.
The response is of mime type
text/plain
and the content is XML representation of list of build requests.
Security
â
You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have permission to access requested configuration.
Demo
â
We use
curl
to demonstrate how to list all build requests in configuration
root/test
requested by user
robin
:
Get configuration id using
id service
:
curl http
:
/
/
localhost
:
8810
/
rest
/
ids
?
configuration_path
=
root
/
test
Assume returned identifier of configuration
root/test
is
2
,
Get user id using
id service
:
curl http
:
/
/
localhost
:
8810
/
rest
/
ids
?
user_name
=
robin
Assume returned identifier of user
robin
is
100
,
execute below command to get all build requests of
root/test
triggered by
robin
:
curl
-
u admin
:
admin
"http://localhost:8810/rest/build_requests?configuration_id=2&trigger_user_id=100"
{#InteractwithBuildRequests-requestnewbuild}
Request new build
â
Syntax
â
New build can be requested by posting XML representation of the build request object to below url:
http
:
/
/
localhost
:
8810
/
rest
/
build_requests
A sample XML of build request object is like below (the sample build request can be retrieved via url "
http://localhost:8810/rest/build_requests/sample
"):
<
com
.
pmease
.
quickbuild
.
BuildRequest
>
<
!
--
This
element tells
QuickBuild
in what configuration
to
trigger
build
.
--
>
<
configurationId
>
10
<
/
configurationId
>
<
!
--
This
element tells whether or not
to
respect
build condition of the
configuration
.
If
this
is set
to
true
,
and
if
the build condition evaluates
to
false
,
build will
not be triggered
.
--
>
<
respectBuildCondition
>
false
<
/
respectBuildCondition
>
<
!
--
This
optional element specifies priority of the build request
,
with
value
ranging from
1
to
10.
The
bigger
this
value is
,
the higher the priority is
--
>
<
priority
>
10
<
/
priority
>
<
!
--
This
element is optional and is used
to
specify
variables
for
build
triggering
.
If
specified
,
it will override the variable
with
the
same name defined in configuration
basic setting
.
--
>
<
variables
>
<
entry
>
<
string
>
var_name1
<
/
string
>
<
string
>
var_value1
<
/
string
>
<
/
entry
>
<
entry
>
<
string
>
var_name2
<
/
string
>
<
string
>
var_value2
<
/
string
>
<
/
entry
>
<
/
variables
>
<
!
--
This
element is optional and is used
to
specify
content of file
to
be
uploaded
.
In
below example
,
file content will be attached
to
variable
"var_name1"
,
and
value of
this
variable specified in variables section will be the file
name
.
One
can access full path
to
the
file at
QuickBuild
side via vars
.
getValue
(
"var_name1"
)
--
>
<
fileContents
>
<
entry
>
<
string
>
var_name1
<
/
string
>
<
string
>
base64 encoding of file content
<
/
string
>
<
/
entry
>
<
/
fileContents
>
<
!
--
This
element is optional and is used
to
tell
QuickBuild
to
request
a build promotion
.
--
>
<
promotionSource
>
<
!
--
This
element is optional and is used
to
tell
QuickBuild
that the source build resides on another
QuickBuild
server
.
--
>
<
server
>
<
url
>
http
:
/
/
another
-
qb
-
server
:
8810
<
/
url
>
<
userName
>
admin
<
/
userName
>
<
password
>
admin
<
/
password
>
<
/
server
>
<
!
--
Identifier
of the source build
to
promote
from
--
>
<
buildId
>
697
<
/
buildId
>
<
!
--
This
element is optional and used
to
specify
files
to
promote
--
>
<
deliveries
>
<
com
.
pmease
.
quickbuild
.
FileDelivery
>
<
srcPath
>
artifacts
/
dir1
<
/
srcPath
>
<
filePatterns
>
*
*
/*.jar</filePatterns>
</com.pmease.quickbuild.FileDelivery>
<com.pmease.quickbuild.FileDelivery>
<srcPath>artifacts/dir2</srcPath>
<filePatterns>**/
*
.
war
<
/
filePatterns
>
<
/
com
.
pmease
.
quickbuild
.
FileDelivery
>
<
/
deliveries
>
<
/
promotionSource
>
<
/
com
.
pmease
.
quickbuild
.
BuildRequest
>
The response is of mime type
text/plain
and the content is XML representation of request result including the generated build request id. Http status code 204 (No Content) will be returned if the request is aggregated.
Since QuickBuild 6.0.14, one can also trigger new build via GET request by accessing below url:
http
:
/
/
localhost
:
8810
/
rest
/
trigger
?
configuration_id
=
<
configuration id
>
Where
<configuration id>
should be replaced with identifier of a configuration. The response is of mime type
text/plain
and the content is XML representation of newly created request result. Note that this approach does not accept variables or promotions information.
Security
â
You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have
RUN_BUILD
permission for the requested configuration.
Demo
â
We use
curl
to demonstrate how to request a build in configuration
root/test
:
Get configuration id using
id service
:
curl http
:
/
/
localhost
:
8810
/
rest
/
ids
?
configuration_path
=
root
/
test
Save the sample build request XML described above to file
tempfile.xml
, and modify configuration id to use value returned by the first step.
Post content of
tempfile.xml
to QuickBuild using below command:
curl
-
X
POST
-
u admin
:
admin
-
d
@tempfile.xml
http
:
/
/
localhost
:
8810
/
rest
/
build_requests
{#InteractwithBuildRequests-deletebuildrequest}
Delete a Build Request
â
Syntax
â
Existing build request can be deleted using http DELETE method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
build_requests
/
<
build request id
>
warning
If the build associated with the build request is already running, it will be forcibly stopped.
Security
â
You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have
STOP_BUILD
permission for the associated configuration.
Demo
â
We use
curl
to demonstrate how to delete build request
0136ed89-d47f-4307-8e69-c8535fae0e84
:
curl
-
X
DELETE
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
build_requests
/
0136
ed89
-
d47f
-
4307
-
8e69
-
c8535fae0e84
Last updated
on
Oct 23, 2024

================================================================================

Title: Trigger Build via GET Request
URL: https://wiki.pmease.com/display/QB14/Trigger+Build+via+GET+Request
Breadcrumb:  > Developer's Guide > RESTful API

Developer's Guide
RESTful API
Trigger Build via GET Request
Version: QB14
Trigger Build via GET Request
Build can be triggered by posting build request as described in page
Interact with Build Requests
. Sometimes it is useful to trigger build via GET request, and here is how:
Create a build request XML file, say
request.xml
Refer to
request new build
section of
Interact with Build Requests
on how to create build request XML
Base64 and urlencode the xml file
base64 request
.
xml
|
xargs urlencode
On Ubuntu, you will need to call
sudo apt install gridsite-clients
if
urlencode
is not available
Trigger build via below url:
http
:
/
/
localhost
:
8810
/
rest
/
trigger
?
build_request
=
<
output of above step
>
You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have RUN_BUILD permission for the requested configuration.
Last updated
on
Oct 23, 2024

================================================================================

Title: Interact with Users
URL: https://wiki.pmease.com/display/QB14/Interact+with+Users
Breadcrumb:  > Developer's Guide > RESTful API

Developer's Guide
RESTful API
Interact with Users
Version: QB14
On this page
Interact with Users
Get all users in the system
â
Syntax
â
Users in the system can be accessed using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
users
The response is of mime type
application/xml
and the content is XML representation of all users in the system.
Security
â
You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have adminstrative right.
Demo
â
Below
curl
command demonstrates how to get all users:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
users
Access user by id
â
Syntax
â
User can be accessed by id using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
users
/
<
user id
>
The response is of mime type
application/xml
and the content is XML representation of the user.
Security
â
You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have adminstrative right.
Demo
â
Below
curl
command demonstrates how to get user of id
1
:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
users
/
1
Get user display name by id
â
Syntax
â
User display name can be accessed by id using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
users
/
<
user id
>
/
display_name
The response is of mime type
text/plain
and the content is string representation of the user.
Security
â
You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have adminstrative right.
Demo
â
Below
curl
command demonstrates how to get display name of user with id
1
:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
users
/
1
/
display_name
Update user
â
Syntax
â
User can be updated by posting XML representation of the user to below url:
http
:
/
/
localhost
:
8810
/
rest
/
users
Normally you do not need to create the xml from scratch: you may retrieve XML representation of the user using http GET method, modify certain parts of the XML and post back to above url.
The response is of mime type
text/plain
and the content is string representation of the user id being updated.
warning
If you want to change user password, please remove the "secret=hash" attribute from the password element and replace the element text with a plain text password; otherwise, QuickBuild will think that the supplied password has already been hashed.
Security
â
You will need to use http BASIC authentication to login as administrator if the anonymous does not have administrative right.
Demo
â
We will use
curl
to demonstrate how to modify password of user
robin
to be
12345
:
Retrieve id of user
robin
using
id service
:
curl http
:
/
/
localhost
:
8810
/
rest
/
ids
?
user_name
=
robin
Assume returned id is
2
.
Retrieve XML representation of user
robin
into a temp file using below command:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
users
/
2
>
tempfile
.
xml
Edit
tempfile.xml
to set content of
password
element as
12345
, and remove attribute
secret="hash"
. The password element should look like below after modification:
<
password
>
12345
<
/
password
>
Post back modified content using below command:
curl
-
X
POST
-
u admin
:
admin
-
d
@tempfile.xml
http
:
/
/
localhost
:
8810
/
rest
/
users
Create user
â
Syntax
â
User can be created by posting XML representation of the user to below url:
http
:
/
/
localhost
:
8810
/
rest
/
users
Please note that the posted XML should NOT contain the
id
element; otherwise, QuickBuild will treat the post as an update to the user with that id.
Normally you do not need to create the XML from scratch: you may retrieve XML representation of a templating user using http GET method, remove the
id
element, modify certain parts and post back to above url.
The response is of mime type
text/plain
and the content is string representation of the newly created user id.
warning
The password element will contain the attribute "secret" when retrieve the XML representation of an existing user. This attribute should be removed when a new user is created. This tells QuickBuild that the password is in plain text form and should be hashed. However, if you are creating user by copying existing one and want to remain the password, the "secret" attribute should then be preserved.
Security
â
You will need to use http BASIC authentication to login as administrator if the anonymous does not have administrative rights.
Demo
â
We will use
curl
to demonstrate how to create a new user
robin
by copying the existing user
admin
, and change the password to
12345
.
Get id of user
admin
with
id service
curl http
:
/
/
localhost
/
rest
/
ids
?
user_name
=
admin
Assume returned id is
1
.
Retrieve XML representation of user
admin
into a temp file using below command:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
users
/
1
>
tempfile
.
xml
Edit
tempfile.xml
to do the following:
Remove the
id
element.
Change content of the
name
element to be
robin
.
Change content of
password
element to be
12345
.
Remove attribute
secret="hash"
from the password element.
Post back modified content using below command:
curl
-
X
POST
-
u admin
:
admin
-
d
@tempfile.xml
http
:
/
/
localhost
:
8810
/
rest
/
users
Delete user
â
Syntax
â
User can be deleted using http DELETE method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
users
/
<
user id
>
Here
<user id}
stands for id of the user to be deleted.
Security
â
You will need to use http BASIC authentication to login as administrator if the anonymous does not have administrative right.
Demo
â
Below
curl
command demonstrates how to delete the user with id
2
:
curl
-
X
DELETE
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
users
/
2
Last updated
on
Oct 23, 2024

================================================================================

Title: Interact with Groups
URL: https://wiki.pmease.com/display/QB14/Interact+with+Groups
Breadcrumb:  > Developer's Guide > RESTful API

Developer's Guide
RESTful API
Interact with Groups
Version: QB14
On this page
Interact with Groups
Get all groups in the system
â
Syntax
â
Groups in the system can be accessed using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
groups
The response is of mime type
application/xml
and the content is XML representation of all groups in the system.
Security
â
You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have adminstrative right.
Demo
â
Below
curl
command demonstrates how to get all groups:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
groups
Access group by id
â
Syntax
â
Group can be accessed by id using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
groups
/
<
group id
>
The response is of mime type
application/xml
and the content is XML representation of the group.
Security
â
You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have adminstrative right.
Demo
â
Below
curl
command demonstrates how to get group of id
1
:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
groups
/
1
Update group
â
Syntax
â
Group can be updated by posting xml representation of the group to below url:
http
:
/
/
localhost
:
8810
/
rest
/
groups
Normally you do not need to create the XML from scratch: you may retrieve XML representation of the group using http GET method, modify certain parts of the XML and post back to above url.
The response is of mime type
text/plain
and the content is string representation of the group id being updated.
Security
â
You will need to use http BASIC authentication to login as administrator if the anonymous does not have administrative right.
Demo
â
We will use
curl
to demonstrate how to modify description of group
developer
:
Get id of group
developer
with
id service
curl http
:
/
/
localhost
/
rest
/
ids
?
group_name
=
developer
Assume returned id is
1
.
Retrieve xml representation of group
developer
into a temp file using below command:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
groups
/
1
>
tempfile
.
xml
Edit
tempfile.xml
and change
description
element to desired value (or add the
description
element if it does not already exist).
Post back modified content using below command:
curl
-
X
POST
-
u admin
:
admin
-
d
@tempfile.xml
http
:
/
/
localhost
:
8810
/
rest
/
groups
Create group
â
Syntax
â
Group can be created by posting XML representation of the group to below url:
http
:
/
/
localhost
:
8810
/
rest
/
groups
Please note that the posted XML should NOT contain the
id
element; otherwise, QuickBuild will treat the post as an updating to the group with that id.
Normally you do not need to create the XML from scratch: you may retrieve XML representation of a templating group using http GET method, remove the
id
element, modify certain parts and post back to above url.
The response is of mime type
text/plain
and the content is string representation of the newly created group id.
Security
â
You will need to use http BASIC authentication to login as administrator if the anonymous does not have administrative right.
Demo
â
We will use
curl
to demonstrate how to create a new group
tester
by copying the existing group
developer
.
Get id of group
developer
with
id service
curl http
:
/
/
localhost
/
rest
/
ids
?
group_name
=
developer
Assume returned id is
1
.
Retrieve xml representation of group
developer
into a temp file using below command:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
groups
/
1
>
tempfile
.
xml
Edit
tempfile.xml
, remove the
id
element, and change the
name
element to be
tester
Post back modified content using below command:
curl
-
X
POST
-
u admin
:
admin
-
d
@tempfile.xml
http
:
/
/
localhost
:
8810
/
rest
/
groups
Delete group
â
Syntax
â
Group can be deleted using http DELETE method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
groups
/
<
group id
>
Here
<group id>
stands for id of the group to be deleted.
Security
â
You will need to use http BASIC authentication to login as administrator if the anonymous does not have administrative right.
Demo
â
Below
curl
command demonstrates how to delete the group with id
2
:
curl
-
X
DELETE
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
groups
/
2
Last updated
on
Oct 23, 2024

================================================================================

Title: Interact with Group Memberships
URL: https://wiki.pmease.com/display/QB14/Interact+with+Group+Memberships
Breadcrumb:  > Developer's Guide > RESTful API

Developer's Guide
RESTful API
Interact with Group Memberships
Version: QB14
On this page
Interact with Group Memberships
Get all memberships in the system
â
Syntax
â
Memberships in the system can be accessed using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
memberships
The response is of mime type
application/xml
and the content is XML representation of all memberships in the system.
Security
â
You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have adminstrative right.
Demo
â
Below
curl
command demonstrates how to get all memberships:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
memberships
Access membership by id
â
Syntax
â
Membership can be accessed by id using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
memberships
/
<
membership id
>
The response is of mime type
application/xml
and the content is XML representation of the membership.
Security
â
You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have adminstrative right.
Demo
â
Below
curl
command demonstrates how to get membership of id
1
:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
memberships
/
1
Access memberships of a particular user
â
Syntax
â
Memberships of particular user can be accessed using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
memberships
?
user_id
=
<
user id
>
The response is of mime type
application/xml
and the content is XML representation of all memberships of specified user.
Security
â
You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have adminstrative right.
Demo
â
Below
curl
command demonstrates how to get memberships of user with id
2
:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
memberships
?
user_id
=
2
Access memberships of a particular group
â
Syntax
â
Memberships of particular group can be accessed using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
memberships
?
group_id
=
<
group id
>
The response is of mime type
application/xml
and the content is XML representation of all memberships of specified group.
Security
â
You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have adminstrative right.
Demo
â
Below
curl
command demonstrates how to get memberships of group with id
1
:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
memberships
?
group_id
=
1
Update membership
â
Syntax
â
Membership can be updated by posting xml representation of the membership to below url:
http
:
/
/
localhost
:
8810
/
rest
/
memberships
Normally you do not need to create the XML from scratch: you may retrieve XML representation of the membership using http GET method, modify certain parts of the XML and post back to above url.
The response is of mime type
text/plain
and the content is string representation of the membership id being updated.
Security
â
You will need to use http BASIC authentication to login as administrator if the anonymous does not have administrative right.
Demo
â
We will use
curl
to demonstrate how to move user
robin
from
developer
group to
tester
group:
Assume id of user
robin
is
2
, id of group
developer
is
1
, and id of group
tester
is
2
. Ids of these entities can be accessed using
id service
.
Run below command to get memberships of user
robin
:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
memberships
?
user_id
=
2
Analyze response of above command to find out the membership with group id
1
. Save xml snippet of found membership to a temp file, say
tempfile.xml
.
Modify
tempfile.xml
and change the
group
element to use value of
2
.
Post content of
tempfile.xml
back to QuickBuild using below command:
curl
-
X
POST
-
u admin
:
admin
-
d
@tempfile.xml
http
:
/
/
localhost
:
8810
/
rest
/
memberships
Create membership
â
Syntax
â
Membership can be created by posting XML representation of the membership to below url:
http
:
/
/
localhost
:
8810
/
rest
/
memberships
A sample membership XML representation is like below:
<
com
.
pmease
.
quickbuild
.
model
.
Membership
>
<
!
--
id of associated user of
this
membership
.
--
>
<
user
>
2
<
/
user
>
<
!
--
id of associated group of
this
membership
.
--
>
<
group
>
1
<
/
group
>
<
/
com
.
pmease
.
quickbuild
.
model
.
Membership
>
The response is of mime type
text/plain
and the content is string representation of the newly created membership id.
Security
â
You will need to use http BASIC authentication to login as administrator if the anonymous does not have administrative right.
Demo
â
We will use
curl
to demonstrate how to add user
robin
(assume id is
2
) to group
tester
(assume the id is
3
).
Save below content into file
tempfile.xml
:
<
com
.
pmease
.
quickbuild
.
model
.
Membership
>
<
user
>
2
<
/
user
>
<
group
>
3
<
/
group
>
<
/
com
.
pmease
.
quickbuild
.
model
.
Membership
>
Post content of
tempfile.xml
to QuickBuild using below command:
curl
-
X
POST
-
u admin
:
admin
-
d
@tempfile.xml
http
:
/
/
localhost
:
8810
/
rest
/
memberships
Delete membership
â
Syntax
â
Membership can be deleted using http DELETE method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
memberships
/
<
membership id
>
Here
<membership id>
stands for id of the membership to be deleted.
Security
â
You will need to use http BASIC authentication to login as administrator if the anonymous does not have administrative right.
Demo
â
Below
curl
command demonstrates how to remove user
robin
(assume id is
2
) from group
tester
(assume the id is
3
).
Get memberships of user
robin
with below command:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
memberships
?
user_id
=
2
Analyze response of above command to find out id of the membership associated with group id
3
, assume id of the found membership is
100
.
Delete the found membership with below command:
curl
-
X
DELETE
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
memberships
/
100
Last updated
on
Oct 23, 2024

================================================================================

Title: Interact with Dashboards
URL: https://wiki.pmease.com/display/QB14/Interact+with+Dashboards
Breadcrumb:  > Developer's Guide > RESTful API

Developer's Guide
RESTful API
Interact with Dashboards
Version: QB14
On this page
Interact with Dashboards
Get all dashboards in the system
â
Syntax
â
Dashboards in the system can be accessed using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
dashboards
The response is of mime type
application/xml
and the content is XML representation of all dashboards in the system.
Security
â
You will need to use http BASIC authentication to login as administrator.
Demo
â
Below
curl
command demonstrates how to get all dashboards:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
dashboards
Access dashboard by id
â
Syntax
â
Dashboard can be accessed by id using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
dashboards
/
<
dashboard id
>
The response is of mime type
application/xml
and the content is XML representation of the dashboard.
Security
â
You will need to use http BASIC authentication to login as user able to access the dashboard.
Demo
â
Below
curl
command demonstrates how to get dashboard of id
1
:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
dashboards
/
1
Update dashboard
â
Syntax
â
Dashboard can be updated by posting xml representation of the dashboard to below url:
http
:
/
/
localhost
:
8810
/
rest
/
dashboards
Normally you do not need to create the XML from scratch: you may retrieve XML representation of the dashboard using http GET method, modify certain parts of the XML and post back to above url.
The response is of mime type
text/plain
and the content is string representation of the dashboard id being updated.
Security
â
You will need to use http BASIC authentication to login as user able to access the dashboard.
Demo
â
We will use
curl
to demonstrate how to modify description of dashboard
project1
for user with id
5
:
Get id of dashboard
project1
with
id service
curl http
:
/
/
localhost
/
rest
/
ids
?
dashboard_fqn
=
5.
project1
Here you need to query with dashboard fqn (fully qualified name) which is of form <user id>.<dashboard name>. Assume returned id is
1
.
Retrieve xml representation of group
project1
into a temp file using below command:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
dashboards
/
1
>
tempfile
.
xml
Edit
tempfile.xml
and change
description
element to desired value (or add the
description
element if it does not already exist).
Post back modified content using below command:
curl
-
X
POST
-
u admin
:
admin
-
d
@tempfile.xml
http
:
/
/
localhost
:
8810
/
rest
/
dashboards
Create dashboard
â
Syntax
â
Dashboard can be created by posting XML representation of the dashboard to below url:
http
:
/
/
localhost
:
8810
/
rest
/
dashboards
Please note that the posted XML should NOT contain the
id
element; otherwise, QuickBuild will treat the post as an updating to the dashboard with that id.
Normally you do not need to create the XML from scratch: you may retrieve XML representation of a templating dashboard using http GET method, remove the
id
element, modify certain parts and post back to above url.
The response is of mime type
text/plain
and the content is string representation of the newly created dashboard id.
Security
â
You will need to use http BASIC authentication to login as administrator or the user owning the dashboard.
Demo
â
We will use
curl
to demonstrate how to create a new dashboard
project1
by copying the existing dashboard
project2
under user with id
5
.
Get id of dashboard
project1
with
id service
curl http
:
/
/
localhost
/
rest
/
ids
?
dashboard_fqn
=
5.
project1
Assume returned id is
1
.
Retrieve xml representation of dashboard
project1
into a temp file using below command:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
dashboards
/
1
>
tempfile
.
xml
Edit
tempfile.xml
, remove the
id
element, and change the
name
element to be
project2
Post back modified content using below command:
curl
-
X
POST
-
u admin
:
admin
-
d
@tempfile.xml
http
:
/
/
localhost
:
8810
/
rest
/
dashboards
Delete dashboard
â
Syntax
â
Dashboard can be deleted using http DELETE method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
dashboards
/
<
dashboard id
>
Here
<dashboard id>
stands for id of the dashboard to be deleted.
Security
â
You will need to use http BASIC authentication to login as administrator or the user owning the dashboard.
Demo
â
Below
curl
command demonstrates how to delete the dashboard with id
2
:
curl
-
X
DELETE
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
dashboards
/
2
Last updated
on
Oct 23, 2024

================================================================================

Title: Interact with Group Share
URL: https://wiki.pmease.com/display/QB14/Interact+with+Group+Share
Breadcrumb:  > Developer's Guide > RESTful API

Developer's Guide
RESTful API
Interact with Group Share
Version: QB14
On this page
Interact with Group Share
info
Group share is the object used to control dashboard sharing with groups
Get all group shares in the system
â
Syntax
â
Group shares in the system can be accessed using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
group_shares
The response is of mime type
application/xml
and the content is XML representation of all group shares in the system.
Security
â
You will need to use http BASIC authentication to login as administrator.
Demo
â
Below
curl
command demonstrates how to get all group shares:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
group_shares
info
group share with no group information means to share with everyone
Access group share by id
â
Syntax
â
Group share can be accessed by id using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
group_shares
/
<
group_share id
>
The response is of mime type
application/xml
and the content is XML representation of the group share.
Security
â
You will need to use http BASIC authentication to login as administrator or user owning dashboard of the group share.
Demo
â
Below
curl
command demonstrates how to get group share of id
1
:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
group_shares
/
1
Access group shares of a particular dashboard
â
Syntax
â
Group shares of particular dashboard can be accessed using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
group_shares
?
dashboard_id
=
<
dashboard id
>
The response is of mime type
application/xml
and the content is XML representation of all group shares of specified dashboard.
Security
â
You will need to use http BASIC authentication to login as administrator or the user owning queried dashboard.
Demo
â
Below
curl
command demonstrates how to get group shares of dashboard with id
2
:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
group_shares
?
dashboard_id
=
2
Access group shares of a particular group
â
Syntax
â
Group shares of particular group can be accessed using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
group_shares
?
group_id
=
<
group id
>
Here <group id> represents id of the group to query group share information for. Particularly, use id
0
to query group
shares targeting everyone.
The response is of mime type
application/xml
and the content is XML representation of all group shares of specified group.
Security
â
You will need to use http BASIC authentication to login as administrator.
Demo
â
Below
curl
command demonstrates how to get group shares of group with id
1
:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
group_shares
?
group_id
=
1
Update group share
â
Syntax
â
Group share can be updated by posting xml representation of the group share to below url:
http
:
/
/
localhost
:
8810
/
rest
/
group_shares
Normally you do not need to create the XML from scratch: you may retrieve XML representation of the group share using http GET method, modify certain parts of the XML and post back to above url.
The response is of mime type
text/plain
and the content is string representation of the group share id being updated.
Security
â
You will need to use http BASIC authentication to login as administrator or user owning dashboard of the group share.
Demo
â
We will use
curl
to demonstrate how to share dashboard
project1
with
group1
instead of
group2
:
Assume id of dashboard
project1
is
2
, id of group
group1
is
1
, and id of group
group2
is
2
. Ids of these entities can be accessed using
id service
.
Run below command to get group shares of dashboard
project1
:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
group_shares
?
dashboard_id
=
2
Analyze response of above command to find out the group share with group id
1
. Save xml snippet of found group share to a temp file, say
tempfile.xml
.
Modify
tempfile.xml
and change the
group
element to use value of
2
.
Post content of
tempfile.xml
back to QuickBuild using below command:
curl
-
X
POST
-
u admin
:
admin
-
d
@tempfile.xml
http
:
/
/
localhost
:
8810
/
rest
/
group_shares
Create group share
â
Syntax
â
Group share can be created by posting XML representation of the group share to below url:
http
:
/
/
localhost
:
8810
/
rest
/
group_shares
A sample group share XML representation is like below:
<
com
.
pmease
.
quickbuild
.
model
.
GroupShare
>
<
!
--
id of associated group of
this
group
share
.
If
group element does not exist
,
QuickBuild
will share the dashboard
with
everyone
--
>
<
group
>
2
<
/
group
>
<
!
--
id of associated dashboard of
this
group share
.
--
>
<
dashboard
>
1
<
/
dashboard
>
<
/
com
.
pmease
.
quickbuild
.
model
.
GroupShare
>
The response is of mime type
text/plain
and the content is string representation of the newly created group share id.
Security
â
You will need to use http BASIC authentication to login as administrator or user owning dashboard of the group share.
Demo
â
We will use
curl
to demonstrate how to share dashboard
project1
(assume id is
2
) with group
group1
(assume the id is
3
).
Save below content into file
tempfile.xml
:
<
com
.
pmease
.
quickbuild
.
model
.
GroupShare
>
<
dashboard
>
2
<
/
dashboard
>
<
group
>
3
<
/
group
>
<
/
com
.
pmease
.
quickbuild
.
model
.
GroupShare
>
Post content of
tempfile.xml
to QuickBuild using below command:
curl
-
X
POST
-
u admin
:
admin
-
d
@tempfile.xml
http
:
/
/
localhost
:
8810
/
rest
/
group_shares
Delete group share
â
Syntax
â
Group share can be deleted using http DELETE method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
group_shares
/
<
group share id
>
Here
<group share id>
stands for id of the group share to be deleted.
Security
â
You will need to use http BASIC authentication to login as administrator or user owning dashboard of the group share.
Demo
â
Below
curl
command demonstrates how to remove group
group1
(assume id is
3
) from share list of dashboard
project1
(assume the id is
2
).
Get group shares of dashboard
project1
with below command:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
group_shares
?
dashboard_id
=
2
Analyze response of above command to find out id of the group share associated with group id
3
, assume id of the found group share is
100
.
Delete the found group share with below command:
curl
-
X
DELETE
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
group_shares
/
100
Last updated
on
Oct 23, 2024

================================================================================

Title: Interact with User Share
URL: https://wiki.pmease.com/display/QB14/Interact+with+User+Share
Breadcrumb:  > Developer's Guide > RESTful API

Developer's Guide
RESTful API
Interact with User Share
Version: QB14
On this page
Interact with User Share
info
User share is the object used to control dashboard sharing with users
Get all user shares in the system
â
Syntax
â
User shares in the system can be accessed using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
user_shares
The response is of mime type
application/xml
and the content is XML representation of all user shares in the system.
Security
â
You will need to use http BASIC authentication to login as administrator.
Demo
â
Below
curl
command demonstrates how to get all user shares:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
user_shares
Access user share by id
â
Syntax
â
User share can be accessed by id using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
user_shares
/
<
user_share id
>
The response is of mime type
application/xml
and the content is XML representation of the user share.
Security
â
You will need to use http BASIC authentication to login as administrator or user owning dashboard of the user share.
Demo
â
Below
curl
command demonstrates how to get user share of id
1
:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
user_shares
/
1
Access user shares of a particular dashboard
â
Syntax
â
User shares of particular dashboard can be accessed using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
user_shares
?
dashboard_id
=
<
dashboard id
>
The response is of mime type
application/xml
and the content is XML representation of all user shares of specified dashboard.
Security
â
You will need to use http BASIC authentication to login as administrator or the user owning queried dashboard.
Demo
â
Below
curl
command demonstrates how to get user shares of dashboard with id
2
:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
user_shares
?
dashboard_id
=
2
Access user shares of a particular user
â
Syntax
â
User shares of particular user can be accessed using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
user_shares
?
user_id
=
<
user id
>
The response is of mime type
application/xml
and the content is XML representation of all user shares of specified user.
Security
â
You will need to use http BASIC authentication to login as administrator or the user being queried.
Demo
â
Below
curl
command demonstrates how to get user shares of user with id
1
:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
user_shares
?
user_id
=
1
Update user share
â
Syntax
â
User share can be updated by posting xml representation of the user share to below url:
http
:
/
/
localhost
:
8810
/
rest
/
user_shares
Normally you do not need to create the XML from scratch: you may retrieve XML representation of the user share using http GET method, modify certain parts of the XML and post back to above url.
The response is of mime type
text/plain
and the content is string representation of the user share id being updated.
Security
â
You will need to use http BASIC authentication to login as administrator or user owning dashboard of the user share.
Demo
â
We will use
curl
to demonstrate how to share dashboard
project1
with
user1
instead of
user2
:
Assume id of dashboard
project1
is
2
, id of user
user1
is
1
, and id of user
user2
is
2
. Ids of these entities can be accessed using
id service
.
Run below command to get user shares of dashboard
project1
:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
user_shares
?
dashboard_id
=
2
Analyze response of above command to find out the user share with user id
1
. Save xml snippet of found user share to a temp file, say
tempfile.xml
.
Modify
tempfile.xml
and change the
user
element to use value of
2
.
Post content of
tempfile.xml
back to QuickBuild using below command:
curl
-
X
POST
-
u admin
:
admin
-
d
@tempfile.xml
http
:
/
/
localhost
:
8810
/
rest
/
user_shares
Create user share
â
Syntax
â
User share can be created by posting XML representation of the user share to below url:
http
:
/
/
localhost
:
8810
/
rest
/
user_shares
A sample user share XML representation is like below:
<
com
.
pmease
.
quickbuild
.
model
.
UserShare
>
<
!
--
id of associated user of
this
user share
.
--
>
<
user
>
2
<
/
user
>
<
!
--
id of associated dashboard of
this
user share
.
--
>
<
dashboard
>
1
<
/
dashboard
>
<
/
com
.
pmease
.
quickbuild
.
model
.
GroupShare
>
The response is of mime type
text/plain
and the content is string representation of the newly created user share id.
Security
â
You will need to use http BASIC authentication to login as administrator or user owning dashboard of the user share.
Demo
â
We will use
curl
to demonstrate how to share dashboard
project1
(assume id is
2
) with user
user1
(assume the id is
3
).
Save below content into file
tempfile.xml
:
<
com
.
pmease
.
quickbuild
.
model
.
UserShare
>
<
dashboard
>
2
<
/
dashboard
>
<
user
>
3
<
/
user
>
<
/
com
.
pmease
.
quickbuild
.
model
.
UserShare
>
Post content of
tempfile.xml
to QuickBuild using below command:
curl
-
X
POST
-
u admin
:
admin
-
d
@tempfile.xml
http
:
/
/
localhost
:
8810
/
rest
/
user_shares
Delete user share
â
Syntax
â
User share can be deleted using http DELETE method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
user_shares
/
<
user share id
>
Here
<user share id>
stands for id of the user share to be deleted.
Security
â
You will need to use http BASIC authentication to login as administrator or user owning dashboard of the user share.
Demo
â
Below
curl
command demonstrates how to remove user
user1
(assume id is
3
) from share list of dashboard
project1
(assume the id is
2
).
Get user shares of dashboard
project1
with below command:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
user_shares
?
dashboard_id
=
2
Analyze response of above command to find out id of the user share associated with user id
3
, assume id of the found user share is
100
.
Delete the found user share with below command:
curl
-
X
DELETE
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
user_shares
/
100
Last updated
on
Oct 23, 2024

================================================================================

Title: Interact with Cloud Profiles
URL: https://wiki.pmease.com/display/QB14/Interact+with+Cloud+Profiles
Breadcrumb:  > Developer's Guide > RESTful API

Developer's Guide
RESTful API
Interact with Cloud Profiles
Version: QB14
On this page
Interact with Cloud Profiles
Get all cloud profiles in the system
â
Syntax
â
Cloud profiles in the system can be accessed using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
cloud_profiles
The response is of mime type
application/xml
and the content is XML representation of all cloud profiles in the system.
Security
â
You will need to use http BASIC authentication to login as QuickBuild administrator if the anonymous does not have adminstrative right.
Demo
â
Below
curl
command demonstrates how to get all cloud profiles:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
cloud_profiles
Access cloud profile by id
â
Syntax
â
Cloud profile can be accessed by id using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
cloud_profiles
/
<
cloud profile id
>
The response is of mime type
application/xml
and the content is XML representation of the cloud profile.
Security
â
You will need to use http BASIC authentication to login as QuickBuild administrator if the anonymous does not have adminstrative right.
Demo
â
Below
curl
command demonstrates how to get cloud profile of id
1
:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
cloud_profiles
/
1
Update cloud profile
â
Syntax
â
Cloud profile can be updated by posting xml representation of the cloud profile to below url:
http
:
/
/
localhost
:
8810
/
rest
/
cloud_profiles
Normally you do not need to create the XML from scratch: you may retrieve XML representation of the cloud profile using http GET method, modify certain parts of the XML and post back to above url.
The response is of mime type
text/plain
and the content is string representation of the cloud profile id being updated.
Security
â
You will need to use http BASIC authentication to login as QuickBuild administrator if the anonymous does not have administrative right.
Demo
â
We will use
curl
to demonstrate how to modify description of cloud profile
profile1
:
Get id of cloud profile
profile1
with
id service
curl http
:
/
/
localhost
/
rest
/
ids
?
cloud_profile_name
=
profile1
Assume returned id is
1
.
Retrieve xml representation of cloud profile
profile1
into a temp file using below command:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
cloud_profiles
/
1
>
tempfile
.
xml
Edit
tempfile.xml
and change
description
element to desired value (or add the
description
element if it does not already exist).
Post back modified content using below command:
curl
-
X
POST
-
u admin
:
admin
--
data
-
binary
"@tempfile.xml"
http
:
/
/
localhost
:
8810
/
rest
/
cloud_profiles
Create cloud profile
â
Syntax
â
Cloud profile can be created by posting XML representation of the cloud profile to below url:
http
:
/
/
localhost
:
8810
/
rest
/
cloud_profiles
Please note that the posted XML should NOT contain the
id
element; otherwise, QuickBuild will treat the post as an updating to the cloud profile with that id.
Normally you do not need to create the XML from scratch: you may retrieve XML representation of a templating cloud profile using http GET method, remove the
id
element, modify certain parts and post back to above url.
The response is of mime type
text/plain
and the content is string representation of the newly created cloud profile id.
Security
â
You will need to use http BASIC authentication to login as QuickBuild administrator if the anonymous does not have administrative right.
Demo
â
We will use
curl
to demonstrate how to create a new cloud profile
profile2
by copying the existing cloud profile
profile1
.
Get id of cloud profile
profile1
with
id service
curl http
:
/
/
localhost
/
rest
/
ids
?
cloud_profile_name
=
profile1
Assume returned id is
1
.
Retrieve xml representation of cloud profile
profile1
into a temp file using below command:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
cloud_profiles
/
1
>
tempfile
.
xml
Edit
tempfile.xml
, remove the
id
element, and change the
name
element to be
profile2
Post back modified content using below command:
curl
-
X
POST
-
u admin
:
admin
--
data
-
binary
"@tempfile.xml"
http
:
/
/
localhost
:
8810
/
rest
/
cloud_profiles
Test cloud profile (added since 11.0.24)
â
Syntax
â
Cloud profile can be tested using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
cloud_profiles
/
<
cloud profile id
>
/
test
Here
<cloud profile id>
stands for id of the cloud profile to be tested.
Security
â
You will need to use http BASIC authentication to login as QuickBuild administrator if the anonymous does not have administrative right.
Demo
â
Below
curl
command demonstrates how to test the cloud profile with id
2
:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
cloud_profiles
/
2
/
test
Delete cloud profile
â
Syntax
â
Cloud profile can be deleted using http DELETE method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
cloud_profiles
/
<
cloud profile id
>
Here
<cloud profile id>
stands for id of the cloud profile to be deleted.
Security
â
You will need to use http BASIC authentication to login as QuickBuild administrator if the anonymous does not have administrative right.
Demo
â
Below
curl
command demonstrates how to delete the cloud profile with id
2
:
curl
-
X
DELETE
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
cloud_profiles
/
2
Last updated
on
Oct 23, 2024

================================================================================

Title: Interact with Configuration Authorizations
URL: https://wiki.pmease.com/display/QB14/Interact+with+Configuration+Authorizations
Breadcrumb:  > Developer's Guide > RESTful API

Developer's Guide
RESTful API
Interact with Configuration Authorizations
Version: QB14
On this page
Interact with Configuration Authorizations
Get all authorizations in the system
â
Syntax
â
Authorizations in the system can be accessed using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
authorizations
The response is of mime type
application/xml
and the content is XML representation of all authorizations in the system.
Security
â
You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have adminstrative right.
Demo
â
Below
curl
command demonstrates how to get all authorizations:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
authorizations
Access authorization by id
â
Syntax
â
Authorization can be accessed by id using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
authorizations
/
<
authorization id
>
The response is of mime type
application/xml
and the content is XML representation of the authorization.
Security
â
You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have adminstrative right.
Demo
â
Below
curl
command demonstrates how to get authorization of id
1
:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
authorizations
/
1
Access authorizations of a particular group
â
Syntax
â
Authorizations of particular group can be accessed using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
authorizations
?
group_id
=
<
group id
>
The response is of mime type
application/xml
and the content is XML representation of all authorizations of specified group.
Security
â
You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have adminstrative right.
Demo
â
Below
curl
command demonstrates how to get authorizations of group with id
2
:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
authorizations
?
group_id
=
2
Access authorizations of a particular configuration
â
Syntax
â
Authorizations of particular configuration can be accessed using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
authorizations
?
configuration_id
=
<
configuration id
>
The response is of mime type
application/xml
and the content is XML representation of all authorizations of specified configuration.
Security
â
You will need to use http BASIC authentication to login as authorized QuickBuild user if the anonymous does not have adminstrative right.
Demo
â
Below
curl
command demonstrates how to get authorizations of configuration with id
1
:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
authorizations
?
configuration_id
=
1
Update authorization
â
Syntax
â
Authorization can be updated by posting xml representation of the authorization to below url:
http
:
/
/
localhost
:
8810
/
rest
/
authorizations
Normally you do not need to create the XML from scratch: you may retrieve XML representation of the authorization using http GET method, modify certain parts of the XML and post back to above url.
The response is of mime type
text/plain
and the content is string representation of the authorization id being updated.
Security
â
You will need to use http BASIC authentication to login as administrator if the anonymous does not have administrative right.
Demo
â
We will use
curl
to demonstrate how to change authorization of group
developer
from configuration
root/project1
to
root/project2
:
Assume id of group
developer
is
1
, id of configuration
root/project1
is
5
, and id of configurtion
root/project2
is
6
. Ids of these entities can be retrieved with
id service
.
Run below command to get authorizations of group
developer
:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
authorizations
?
group_id
=
1
Analyze response of above command to find out the authorization associated with configuration id
5
. Save xml snippet of found authorization to a temp file, say
tempfile.xml
.
Modify
tempfile.xml
and change the
configuration
element to take value
6
.
Post content of
tempfile.xml
back to QuickBuild using below command:
curl
-
X
POST
-
u admin
:
admin
-
d
@tempfile.xml
http
:
/
/
localhost
:
8810
/
rest
/
authorizations
Create authorization
â
Syntax
â
Authorization can be created by posting XML representation of the authorization to below url:
http
:
/
/
localhost
:
8810
/
rest
/
authorizations
Please note that the posted XML should NOT contain the id element; otherwise, QuickBuild will treat the post as an updating to the authorization with that id.
Normally you do not need to create the XML from scratch: you may retrieve XML representation of a templating authorization using http GET method, remove the
id
element, modify certain parts and post back to above url.
The response is of mime type
text/plain
and the content is string representation of the newly created authorization id.
Security
â
You will need to use http BASIC authentication to login as administrator if the anonymous does not have administrative right.
Demo
â
We will use
curl
to demonstrate how to authorize group
tester
(assume the id is
3
) with
RUN_BUILD
and
STOP_BUILD
permission in configuration
root/test
(assume the id is
2
).
Save below content into file
tempfile.xml
:
<
com
.
pmease
.
quickbuild
.
model
.
Authorization
>
<
group
>
3
<
/
group
>
<
configuration
>
3
<
/
configuration
>
<
permissions
>
<
string
>
RUN_BUILD
<
/
string
>
<
string
>
STOP_BUILD
<
/
string
>
<
/
permissions
>
<
/
com
.
pmease
.
quickbuild
.
model
.
Authorization
>
Post content of
tempfile.xml
to QuickBuild using below command:
curl
-
X
POST
-
u admin
:
admin
-
d
@tempfile.xml
http
:
/
/
localhost
:
8810
/
rest
/
authorizations
Delete authorization
â
Syntax
â
Authorization can be deleted using http DELETE method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
authorizations
/
<
authorization id
>
Here
<authorization id}
stands for id of the authorization to be deleted.
Security
â
You will need to use http BASIC authentication to login as administrator if the anonymous does not have administrative right.
Demo
â
Below
curl
command demonstrates how to unauthorize configuration
root/test
(assume id is
2
) for group
tester
(assume the id is
3
).
Get authorizations of group
tester
with below command:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
authorizations
?
group_id
=
3
Analyze response of above command to find out id of the authorization associated with configuration id
2
, assume id of the found authorization is
100
.
Delete the found authorization with below command:
curl
-
X
DELETE
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
authorizations
/
100
Last updated
on
Oct 23, 2024

================================================================================

Title: Interact with Resources
URL: https://wiki.pmease.com/display/QB14/Interact+with+Resources
Breadcrumb:  > Developer's Guide > RESTful API

Developer's Guide
RESTful API
Interact with Resources
Version: QB14
On this page
Interact with Resources
Get all resources in the system
â
Syntax
â
Resources in the system can be accessed using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
resources
The response is of mime type
application/xml
and the content is XML representation of all resources in the system.
Security
â
You will need to use http BASIC authentication to login as administrator.
Demo
â
Below
curl
command demonstrates how to get all resources:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
resources
Access resource by id
â
Syntax
â
Resource can be accessed by id using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
resources
/
<
resource id
>
The response is of mime type
application/xml
and the content is XML representation of the resource.
Security
â
You will need to use http BASIC authentication to login as administrator.
Demo
â
Below
curl
command demonstrates how to get resource of id
1
:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
resources
/
1
Get total resource count across nodes
â
Syntax
â
Total resource count across different nodes can be retrieved using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
resources
/
<
resource id
>
/
total
Here
<resource id>
stands for id of the resource.
Security
â
You will need to use http BASIC authentication to login as administrator.
Demo
â
Below
curl
command demonstrates how to get total resource count across different nodes for resource id
2
:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
resources
/
2
/
total
Get available resource count across nodes
â
Syntax
â
Available resource count across different nodes can be retrieved using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
resources
/
<
resource id
>
/
available
Here
<resource id>
stands for id of the resource.
Security
â
You will need to use http BASIC authentication to login as administrator.
Demo
â
Below
curl
command demonstrates how to get available resource count across different nodes for resource id
2
:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
resources
/
2
/
available
Update resource
â
Syntax
â
Resource can be updated by posting xml representation of the resource to below url:
http
:
/
/
localhost
:
8810
/
rest
/
resources
Normally you do not need to create the XML from scratch: you may retrieve XML representation of the resource using http GET method, modify certain parts of the XML and post back to above url.
The response is of mime type
text/plain
and the content is string representation of the resource id being updated.
Security
â
You will need to use http BASIC authentication to login as administrator.
Demo
â
We will use
curl
to demonstrate how to modify description of resource
ubuntu
:
Get id of resource
ubuntu
with
id service
curl http
:
/
/
localhost
/
rest
/
ids
?
resource_name
=
ubuntu
Assume returned id is
1
.
Retrieve xml representation of resource
ubuntu
into a temp file using below command:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
resources
/
1
>
tempfile
.
xml
Edit
tempfile.xml
and change
description
element to desired value (or add the
description
element if it does not already exist).
Post back modified content using below command:
curl
-
X
POST
-
u admin
:
admin
-
d
@tempfile.xml
http
:
/
/
localhost
:
8810
/
rest
/
resources
Create resource
â
Syntax
â
Resource can be created by posting XML representation of the resource to below url:
http
:
/
/
localhost
:
8810
/
rest
/
resources
Please note that the posted XML should NOT contain the
id
element; otherwise, QuickBuild will treat the post as an updating to the resource with that id.
Normally you do not need to create the XML from scratch: you may retrieve XML representation of a templating resource using http GET method, remove the
id
element, modify certain parts and post back to above url.
The response is of mime type
text/plain
and the content is string representation of the newly created resource id.
Security
â
You will need to use http BASIC authentication to login as administrator.
Demo
â
We will use
curl
to demonstrate how to create a new resource
suse
by copying the existing resource
ubuntu
.
Get id of resource
ubuntu
with
id service
curl http
:
/
/
localhost
/
rest
/
ids
?
resource_name
=
ubuntu
Assume returned id is
1
.
Retrieve xml representation of resource
ubuntu
into a temp file using below command:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
resources
/
1
>
tempfile
.
xml
Edit
tempfile.xml
, remove the
id
element, and change the
name
element to be
suse
Post back modified content using below command:
curl
-
X
POST
-
u admin
:
admin
-
d
@tempfile.xml
http
:
/
/
localhost
:
8810
/
rest
/
resources
Delete resource
â
Syntax
â
Resource can be deleted using http DELETE method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
resources
/
<
resource id
>
Here
<resource id>
stands for id of the resource to be deleted.
Security
â
You will need to use http BASIC authentication to login as administrator.
Demo
â
Below
curl
command demonstrates how to delete the resource with id
2
:
curl
-
X
DELETE
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
resources
/
2
Last updated
on
Oct 23, 2024

================================================================================

Title: Interact with Agent Tokens
URL: https://wiki.pmease.com/display/QB14/Interact+with+Agent+Tokens
Breadcrumb:  > Developer's Guide > RESTful API

Developer's Guide
RESTful API
Interact with Agent Tokens
Version: QB14
On this page
Interact with Agent Tokens
By operating tokens, one can authorize/unauthorize agents, or access agent details including token value and latest usage information.
Authorize build agent
â
Syntax
â
New build agent can be authorized to join the build grid by accessing below url:
http
:
/
/
localhost
:
8810
/
rest
/
tokens
/
authorize
?
ip
=
<
ip address of build agent
>
&
port
=
<
port of build agent
>
The response is of mime type
text/plain
and the content is identifier of the newly created token for the build agent.
Security
â
You will need to use http BASIC authentication to login as administrator to authorize the build agent.
Demo
â
We use
curl
to demonstrate how to authorize the build agent:
Download the build agent package from Grid page and run it from a machine not authorized to join the grid. Assume IP address of the build agent is
192.168.2.100
and port is
8811
.
Open grid page of QuickBuild server and you should see the new build agent appearing in unauthorized agent list.
Now run below command from anywhere:
curl
-
u admin
:
admin
"http://<QB server>:8810/rest/tokens/authorize?ip=192.168.2.100&port=8811"
If above command succeeds, the newly connected agent will appear in active node list after a while in grid page.
Unauthorize build agent
â
Syntax
â
Authorized build agent can be unauthorized by accessing below url:
http
:
/
/
localhost
:
8810
/
rest
/
tokens
/
unauthorize
?
ip
=
<
ip address of build agent
>
&
port
=
<
port of build agent
>
The response is of mime type
text/plain
and the content is identifier of the removed token representing the build agent.
Security
â
You will need to use http BASIC authentication to login as administrator to unauthorize the build agent.
Demo
â
We use
curl
to demonstrate how to unauthorize the build agent:
Assume you have an existing active build agent with ip address
192.168.2.100
and port
8811
.
Now run below command from anywhere:
curl
-
u admin
:
admin
"http://<QB server>:8810/rest/tokens/unauthorize?ip=192.168.2.100&port=8811"
If above command succeeds, the build agent will be removed from active node list after a while.
Get token value and latest used information of agents
â
Syntax
â
Agent details can be accessed by accessing below url:
http
:
/
/
localhost
:
8810
/
rest
/
tokens
?
address
=
<
address of build agent
>
If param
address
is not supplied, details of all agents will be returned.
The response is of mime type
text/plain
and the content is XML representation of the agent details.
Security
â
You will need to use http BASIC authentication to login as administrator to get agent details.
Demo
â
We use
curl
to demonstrate how to access details of the build agent:
Assume you have an active build agent with address
matrix:8811
.
Now run below command from anywhere:
curl
-
u admin
:
admin
"http://<QB server>:8810/rest/tokens?address=matrix:8811"
If above command succeeds, you will get XML representation of build agent details
Last updated
on
Oct 23, 2024

================================================================================

Title: Get System Attributes of Grid Node
URL: https://wiki.pmease.com/display/QB14/Get+System+Attributes+of+Grid+Node
Breadcrumb:  > Developer's Guide > RESTful API

Developer's Guide
RESTful API
Get System Attributes of Grid Node
Version: QB14
On this page
Get System Attributes of Grid Node
System attributes of grid node can be fetched via RESTful call.
warning
This feature is available since QuickBuild 5.1.22
Syntax
â
System attributes can be fetched by accessing below url:
http
:
/
/
localhost
:
8810
/
rest
/
system_attributes
/
<
node address
>
Here
<node address>
should be replaced with address of the grid node, for instance:
agent:8811
. The response is of mime type
text/xml
and the content is XML representation of system attributes for specified grid node.
Security
â
You will need to use http BASIC authentication to login as user with node attribute access permission to get system attributes of a grid node.
Demo
â
We use
curl
to demonstrate how to get system attributes:
Connect a build agent to your grid and get it authorized. Assume the agent address is
agent1:8811
.
Run below command:
curl
-
u admin
:
admin http
:
/
/
<
QB server
>
:
8810
/
rest
/
system_attributes
/
agent1
:
8811
If above command succeeds, XML representation of the system attributes map will be printed.
Last updated
on
Oct 23, 2024

================================================================================

Title: Get and Set User Attributes of Grid Node
URL: https://wiki.pmease.com/display/QB14/Get+and+Set+User+Attributes+of+Grid+Node
Breadcrumb:  > Developer's Guide > RESTful API

Developer's Guide
RESTful API
Get and Set User Attributes of Grid Node
Version: QB14
On this page
Get and Set User Attributes of Grid Node
User attributes of grid node can be fetched/modified via RESTful API.
warning
This feature is available since QuickBuild 5.0.26
Get user attributes of a grid node
â
Syntax
â
User attributes can be fetched by accessing below url:
http
:
/
/
localhost
:
8810
/
rest
/
user_attributes
/
<
node address
>
Here
<node address>
should be replaced with address of the grid node, for instance:
agent:8811
. The response is of mime type
text/xml
and the content is XML representation of defined user attributes for specified grid node.
Security
â
You will need to use http BASIC authentication to login as user with node attribute access permission to get user attributes of a grid node.
Demo
â
We use
curl
to demonstrate how to get user attributes:
Connect a build agent to your grid and get it authorized. Assume the agent address is
agent1:8811
.
Edit user attributes tab of agent
agent1:8811
to define some user attributes.
Now run below command:
curl
-
u admin
:
admin http
:
/
/
<
QB server
>
:
8810
/
rest
/
user_attributes
/
agent1
:
8811
If above command succeeds, XML representation of the user attributes map will be printed.
Set user attributes of a grid node
â
Syntax
â
User attributes can be specified by posting XML representation of the user attributes map to below url:
http
:
/
/
localhost
:
8810
/
rest
/
user_attributes
/
<
node address
>
Here
<node address>
should be replaced with address of the grid node, for instance:
agent:8811
. XML representation of user attributes map should follow below format:
<
linked
-
hash
-
map
>
<
entry
>
<
string
>
attribute1
<
/
string
>
<
string
>
value1
<
/
string
>
<
/
entry
>
<
entry
>
<
string
>
attribute2
<
/
string
>
<
string
>
value2
<
/
string
>
<
/
entry
>
.
.
.
<
/
linked
-
hash
-
map
>
Security
â
You will need to use http BASIC authentication to login as administrator to set user attributes of a grid node.
Demo
â
We use
curl
to demonstrate how to set user attributes:
Connect a build agent to your grid and get it authorized. Assume the agent address is
agent1:8811
.
Create a file say "attributes.xml" with below content:
<
linked
-
hash
-
map
>
<
entry
>
<
string
>
attribute1
<
/
string
>
<
string
>
value1
<
/
string
>
<
/
entry
>
<
entry
>
<
string
>
attribute2
<
/
string
>
<
string
>
value2
<
/
string
>
<
/
entry
>
<
/
linked
-
hash
-
map
>
Now run below command:
curl
-
u admin
:
admin
-
X
POST
-
d
@attributes.xml
http
:
/
/
<
QB server
>
:
8810
/
rest
/
user_attributes
/
agent1
:
8811
If above command succeeds, check user attributes tab of agent1 from QuickBuild web UI to verify if they have been defined correctly.
Last updated
on
Oct 23, 2024

================================================================================

Title: Interact with Reports
URL: https://wiki.pmease.com/display/QB14/Interact+with+Reports
Breadcrumb:  > Developer's Guide > RESTful API

Developer's Guide
RESTful API
Interact with Reports
Version: QB14
On this page
Interact with Reports
For those reports supported by QuickBuild, you can retrieve the report data via RESTful APIs. The supported reports included:
Report Category
Base URI
Build Stats
/rest/buildstats
SCM Changes
/rest/changes
CheckStyle
/rest/checkstyle
Cobertura
/rest/cobertura
JaCoCo
/rest/jacoco
CPD
/rest/cpd
EMMA
/rest/emma
FindBugs
/rest/findbugs
Fxcop
/rest/fxcop
JUnit
/rest/junit
MBUnit
/rest/mbunit
MSTest
/rest/mstest
NCover
/rest/ncover
NUnit
/rest/nunit
PMD
/rest/pmd
TestNG
/rest/testng
Boost Test
/rest/boost
NOTE
All report related RESTful APIs use http GET method.
List all supported APIs
â
URI
Response Format
Params
$baseURI/help
application/html
for example, all available RESTful functions for JUnit can be accessed by visiting the following URL:
http
:
/
/
quickbuild
:
8810
/
rest
/
junit
/
help
Get the version of category
â
URI
Response Format
Params
$baseURI/version
text/plain
For example, you can get the current data version of the JUnit category.
http
:
/
/
quickbuild
:
8810
/
rest
/
junit
/
version
and it will return the data version
2.1
(example only) in text/plain format.
List reports stored in the category
â
URI
Response Format
Params
$baseURI/reports
text/xml
For example, visit below URL to list all reports in JUnit category:
http
:
/
/
quickbuild
:
8810
/
rest
/
junit
/
reports
and the response looks like:
<
list
>
<
string
>
unprocessed
<
/
string
>
<
string
>
tests
<
/
string
>
<
string
>
testsuites
<
/
string
>
<
string
>
packages
<
/
string
>
<
string
>
stats
<
/
string
>
<
string
>
agg_overview
<
/
string
>
<
string
>
agg_stats
<
/
string
>
<
string
>
tests_trends
<
/
string
>
<
/
list
>
Get the report definition (meta data)
â
URI
Response Format
Params
$baseURI/meta/{report_name}
text/xml
*
report_name
: Specify the report name you want.
for example, when visit:
http
:
/
/
quickbuild
:
8810
/
rest
/
junit
/
meta
/
stats
the response looks like:
<
meta name
=
"stats"
group
=
"STATISTICS"
>
<
column name
=
"ID"
isKey
=
"false"
indexed
=
"false"
nullable
=
"false"
updatable
=
"false"
sqlType
=
"BIGINT"
dataType
=
"ID"
/
>
<
column name
=
"buildId"
isKey
=
"true"
indexed
=
"false"
nullable
=
"true"
updatable
=
"true"
sqlType
=
"BIGINT"
dataType
=
"ID"
/
>
<
column name
=
"duration"
isKey
=
"false"
indexed
=
"false"
nullable
=
"true"
updatable
=
"true"
sqlType
=
"BIGINT"
dataType
=
"DURATION"
/
>
<
column name
=
"tests"
isKey
=
"false"
indexed
=
"false"
nullable
=
"true"
updatable
=
"true"
sqlType
=
"INT"
dataType
=
"INTEGER"
/
>
.
.
.
.
.
.
<
/
meta
>
You may consider the report meta data as the schema of a table in database.
Each report has an attribute
group
and in QuickBuild, the following groups are used:
BUILD
STATISTICS
HISTORY
AGGREGATION
the group attribute tells QuickBuild where to find the report, for example, if a report belongs to BUILD group, then this report is stored in build related directory, otherwise, the report is stored in configuration related directory.
List all report sets / aggregations
â
In QuickBuild, the report data are stored by report sets or by aggregations. The report set is specified in the publish step, and the aggregation name is specified in the aggregation definition.
URI
Response Format
Params
/rest/junit/reportsets/{report_group}/{configuration_or_build_id}
text/xml
*
report_group
: The report group, can be one of the following: BUILD, STATISTICS, HISTORY, AGGREGATION *
configuration_or_build_id:
for BUILD group, the id should be a valid build id, otherwise, the configuration id should be specified.
for example, when visit below URL:
http
:
/
/
quickbuild
:
8810
/
rest
/
junit
/
reportsets
/
BUILD
/
103
the response looks like:
<
list
>
<
string
>
DEFAULT
<
/
string
>
<
string
>
On
Linux
<
/
string
>
<
string
>
On
Windows
<
/
string
>
<
/
list
>
Get the build stats
â
URI
Response Format
Params
/rest/junit/buildstats/{build_id}/{reportset}
text/xml
*
build_id
: Specify the build id. *
reportset
: the report set you want
for example, when visit:
http
:
/
/
quickbuild
:
8810
/
rest
/
buildstats
/
103
/
DEFAULT
the response looks like:
<
report name
=
"stats"
version
=
"0.0.0"
locale
=
"en_US"
>
<
row
ID
=
"1"
buildId
=
"103"
duration
=
"261466"
tests
=
"1006"
errors
=
"5"
failures
=
"7"
skips
=
"0"
added
=
"994"
newFailed
=
"12"
notFixed
=
"0"
fixed
=
"0"
successes
=
"994"
success_rate
=
"0.9880715705765407"
/
>
<
/
report
>
Get the report records
â
QuickBuild supply two functions to retrieve the detailed report records:
/size
: get number of total records
/records
: retrieve the report records by page
URI
Response Format
Params
/rest/junit/size/{report_name}/{configuration_or_build_id}/{reportset}
text/plain
*
report_name
Specify the report name *
configuration_or_build_id
According to the report you specified, supply a valid build id when report belongs to BUILD group, otherwise, configuration id is needed. *
reportset
Specify the report set or aggregation name *
filters
- QUERY_PARAM Specify filters based on SQL to filter the records, for example, duration>5 and duration<10, the fields available can be found in the report meta data definition.
/rest/junit/records/{report_name}/{configuration_or_build_id}/{reportset}
text/xml
*
report name
Specify the report name. *
configuration_or_build_id
According to the report you specified, the id is a build id when report belongs to BUILD group, otherwise, configuration id is needed. *
reportset
The report set or aggregation name *
offset
- QUERY_PARAM The first record you want to retrieve. By default, the offset is 0, i.e., from the first record. *
limit
- QUERY_PARAM The number of records you want to retrieve. By default, the number of limit is 50. *
filters
- QUERY_PARAM Specify filters based on SQL to filter the records, for example, duration>5 and duration<10, the fields available can be found in the report meta data definition.
for example, first we get a total tests in our JUnit for build 103 by visiting below URL:
http
:
/
/
quickbuild
:
8810
/
rest
/
junit
/
size
/
tests
/
103
/
DEFAULT
and
1005
is returned, that is, there are 1005 records total, and then we retrive the records from 100 to 119 by visiting below URL:
http
:
/
/
quickbuild
:
8810
/
rest
/
junit
/
records
/
tests
/
103
/
DEFAULT
?
offset
=
100
&
limit
=
20
the response looks like:
<
report name
=
"tests"
version
=
"0.0"
locale
=
"en_US"
>
<
row
ID
=
"100"
packageName
=
"org.hibernate.test.entitymode.multi"
className
=
"MultiRepresentationTest"
testName
=
"testPojoRetreival"
status
=
"PASS"
duration
=
"40"
hasSysout
=
"true"
totalRuns
=
"2"
failedRuns
=
"0"
passedRuns
=
"2"
diffStatus
=
"ADDED"
/
>
<
row
ID
=
"101"
packageName
=
"org.hibernate.test.entitymode.multi"
className
=
"MultiRepresentationTest"
testName
=
"testDom4jRetreival"
status
=
"PASS"
duration
=
"58"
hasSysout
=
"true"
totalRuns
=
"2"
failedRuns
=
"0"
passedRuns
=
"2"
diffStatus
=
"FIXED"
/
>
<
row
ID
=
"102"
packageName
=
"org.hibernate.test.entitymode.multi"
className
=
"MultiRepresentationTest"
testName
=
"testDom4jSave"
status
=
"PASS"
duration
=
"34"
hasSysout
=
"true"
totalRuns
=
"2"
failedRuns
=
"0"
passedRuns
=
"2"
diffStatus
=
"FIXED"
/
>
<
row
ID
=
"103"
packageName
=
"org.hibernate.test.entitymode.multi"
className
=
"MultiRepresentationTest"
testName
=
"testDom4jHQL"
status
=
"PASS"
duration
=
"30"
hasSysout
=
"true"
totalRuns
=
"2"
failedRuns
=
"0"
passedRuns
=
"2"
diffStatus
=
"ADDED"
/
>
.
.
.
.
.
.
<
/
report
>
If you want to use some filters to filter the records, for example, to retrieve all failed tests, you may:
http
:
/
/
quickbuild
:
8810
/
rest
/
junit
/
size
/
tests
/
103
/
DEFAULT
?
filters
=
(
status
=
'ERROR'
)
or
(
status
=
'
FAILURE
'
)
here, we use filter:
status='ERROR' or status='FAILURE'
, the response is
12
, that is, we have 12 failed tests total, and you can retrieve the records now by visiting:
http
:
/
/
quickbuild
:
8810
/
rest
/
junit
/
records
/
tests
/
103
/
DEFAULT
?
filters
=
(
status
=
'ERROR'
)
or
(
status
=
'
FAILURE
'
)
Last updated
on
Oct 23, 2024

================================================================================

Title: Interact with Changes
URL: https://wiki.pmease.com/display/QB14/Interact+with+Changes
Breadcrumb:  > Developer's Guide > RESTful API

Developer's Guide
RESTful API
Interact with Changes
Version: QB14
On this page
Interact with Changes
Since QuickBuild 4.0, you can retrieve changes via RESTful APIs. The base URI for changes RESTful APIs is:
/
rest
/
changes
List all supported APIs
â
URI
Response Type
Params
/rest/changes/help
text/html
Get the data version of changes
â
URI
Response Type
Params
/rest/changes/version
text/plain
Get the commit stats
â
URI
Response Type
Params
/rest/changes/stats/{configuration}
text/xml
*
configuration
Specify the configuration. By default, specify configuration id here, also, you can specify the configuration path directly *
build
Specify the build id you want. *
from_build
Specify the from build when finding changes in a build range. *
to_build
Specify the to build when finding changes in a build range. *
from_date
Specify the from date when finding changes in a build range. *
to_date
Specify the to date when finding changes in a build range. *
date_pattern
Specify the date pattern when query by a date range, by default, the pattern is yyyyMMdd. *
repository
Get the changes only in a specific repository. *
committer
Get the changes only committed by a specified committer
Query stats of a specific build
http
:
/
/
quickbuild
:
8810
/
rest
/
changes
/
stats
/
25
?
build
=
102
the response looks like:
<
stats commits
=
"5"
modifications
=
"7"
added
=
"2"
modified
=
"3"
deleted
=
"2"
/
>
Query commit stats in a build range
http
:
/
/
quickbuild
:
8810
/
rest
/
changes
/
stats
/
25
?
from_build
=
100
&
to_build
=
120
Query commit stats in a date range
http
:
/
/
quickbuild
:
8810
/
rest
/
changes
/
stats
/
25
?
from_date
=
20110501
&
to_date
=
20110601
by default, the date pattern is
yyyyMMdd
, you can also specify the date pattern by adding parameter
date_pattern
, the valid date pattern can be found
here
, for example:
http
:
/
/
quickbuild
:
8810
/
rest
/
changes
/
stats
/
25
?
from_date
=
2011
-
05
-
01
&
to_date
=
2011
-
06
-
01
&
date_pattern
=
yyyy
-
MM
-
dd
Query commit stats of a specific repository or committer
By adding
repository
or
committer
parameter, you can get the stats of a specific repository or committer, for example:
http
:
/
/
quickbuild
:
8810
/
rest
/
changes
/
stats
/
25
?
build
=
102
&
repository
=
mysvn
this will get the stats data for repository mysvn.
Data structure of the changes
â
In QuickBuild, we use Changeset and Modification to represent a SCM commit. A changeset is an atomic collection of changes to files in a repository and it usually contains several modifications. A modification means developer made a specific action to a file when committed to a repository. In QuickBuild, the actions include:
ADD
MODIFY
DELETE
The action in some SCM, for example, git, mercurial, have more actions, like rename, in QuickBuild, it will be speared into two actions, i.e. DELETE first, and then ADD, and maybe there are also other actions, QuickBuild will use MODIFY action to represent.
Below is the data structure of Changeset:
Changeset
{
String
user
;
// committer
Date
date
;
// commit date
String
id
;
// change id
String
comment
;
// commit comment
String
repositoryName
;
// the repository name defined in QuickBuild
String
repositoryType
;
// the repository type, for example, Subversion, Mercurial, Git
String
additional
;
// the additional information for a commit, for example, revision number for mercurial
Long
buildId
;
// the build this commit belongs to
private
List
<
Modification
>
modifications
;
}
data structure of Modification:
Modification
{
public
enum
Action
{
ADD
,
DELETE
,
MODIFY
}
;
public
enum
PathType
{
TEXT
,
BINARY
,
DIR
}
;
Action
action
;
String
path
;
// File path
String
edition
;
String
previousEdition
;
PathType
pathType
;
String
additional
;
// Additional information of a modificaiton, for example, revision number for mercurial
}
Retrieve changesets
â
URI
Response Type
Params
/rest/changes/{configuration}
text/xml
*
configuration
Specify the configuration. By default, specify configuration id here, also, you can specify the configuration path directly. *
build
Specify the build id you want. *
from_build
Specify the from build when finding changes in a build range, must be specified with to_build. *
to_build
Specify the to build when finding changes in a build range, must be specified with from_build. *
date_pattern
Specify the date pattern when query by a date range, by default, the pattern is yyyyMMdd. *
from_date
Specify the from date when finding changes in a build range. *
to_date
Specify the to date when finding changes in a build range. *
repository
Get the changes only in a specific repository. *
committer
Get the changes only committed by the specified committer. *
offset
Specify the first record when iterate the records, by default, the offset is 0. *
limit
Specify the number of total records you want to retrieve, by default, the limit is 50. *
asc
Boolean type, specify the order by commit date ascendent or descendent, by default, it is descendent.
Query the changesets of a build
http
:
/
/
quickbuild
:
8810
/
rest
/
changes
/
19
?
build
=
102
&
offset
=
10
&
limit
=
20
the response looks like:
<
list
>
<
changeset
>
<
user
>
steve
<
/
user
>
<
date
>
2011
-
06
-
03
T15
:
11
:
40.000
+
08
:
00
<
/
date
>
<
id
>
913f
cbcdbe8f80d6c1fe5fce3bb49e1f0040a943
<
/
id
>
<
comment
>
Fix
TST
-
23
:
2
-
phase load components
<
/
comment
>
<
repositoryName
>
hg
<
/
repositoryName
>
<
repositoryType
>
Mercurial
<
/
repositoryType
>
<
additional
>
14
<
/
additional
>
<
buildId
>
321
<
/
buildId
>
<
modifications
>
<
modification
>
<
action
>
MODIFY
<
/
action
>
<
path
>
Test
.
java
<
/
path
>
<
edition
>
913f
cbcdbe8f80d6c1fe5fce3bb49e1f0040a943
<
/
edition
>
<
previousEdition
>
f090cd04725c5551f8a439fe0a53591193ea79c3
<
/
previousEdition
>
<
additional
>
14
<
/
additional
>
<
/
modification
>
<
modification
>
<
action
>
MODIFY
<
/
action
>
<
path
>
big
.
java
<
/
path
>
<
edition
>
913f
cbcdbe8f80d6c1fe5fce3bb49e1f0040a943
<
/
edition
>
<
previousEdition
>
f090cd04725c5551f8a439fe0a53591193ea79c3
<
/
previousEdition
>
<
additional
>
14
<
/
additional
>
<
/
modification
>
<
/
modifications
>
<
/
changeset
>
.
.
.
.
.
.
<
/
list
>
the format of commit date here is using
ISO8601 standard
. The
additional
column stores some extra information of the commits. For mercurial (hg) or bazaar, the
additional
stores the revision no.
Query the changesets in a build range
http
:
/
/
quickbuild
:
8810
/
rest
/
changes
/
19
?
from_build
=
10
&
to_build
=
20
Query the changesets in a date range
http
:
/
/
quickbuild
:
8810
/
rest
/
changes
/
19
?
from_date
=
20110501
&
to_date
=
20110601
Query the changesets of a specific repository or committer
By adding
repository
or
committer
parameter, you can get the commits of a specific repository or committer, for example:
http
:
/
/
quickbuild
:
8810
/
rest
/
changes
/
root
/
My
/
DEV
?
build
=
102
&
repository
=
mysvn
here, we use configuration path instead of configuration id.
warning
if you are using URL directly, you may need escape '/' to %2F (this only applied to QuickBuild 5.0.13 or before), since QuickBuild 5.0.14, you needn't escape the slash '/', just specify the configuration path directly.
Get build changesets (lively)
â
Most of the aforementioned APIs are only callable when build finish. Sometimes, you may want to query the changesets during the build is still running, the following APIs are for this purpose:
To query the changesets of this build lively:
http
:
/
/
quickbuild
:
8810
/
rest
/
changes
/
commits
/
build
/
buildId
To query the stats of the changesets of this build lively:
http
:
/
/
quickbuild
:
8810
/
rest
/
changes
/
stats
/
build
/
buildId
replace the QuickBuild server host to your own address.
replace the buildId to the actual build id you want to query.
Last updated
on
Oct 23, 2024

================================================================================

Title: Interact with Issues
URL: https://wiki.pmease.com/display/QB14/Interact+with+Issues
Breadcrumb:  > Developer's Guide > RESTful API

Developer's Guide
RESTful API
Interact with Issues
Version: QB14
On this page
Interact with Issues
Since QuickBuild 4.0, you can retrieve issues via RESTful APIs. The base URI for changes RESTful APIs is:
/
rest
/
{
tracker
}
Here, tracker is the type of your issue tracker, in QuickBuild, includes:
Jira - /rest/jira
Trac - /rest/trac
Bugzilla - /rest/bugzilla
below, we will use $baseURI to represent the URI: /rest/{tracker}.
List all supported APIs
â
URI
Response Type
Params
$baseURI/help
text/html
Get the data version of issues
â
URI
Response Type
Params
$baseURI/version
text/plain
Retrieve the issues related to a configuration
â
Get the size
URI
Response Type
Params
$baseURI/size/{configuration}
text/plain
*
configuration
- PATH_PARAM Specify the configuration. By default, specify configuration id here, if you want to specify a configuration path, you need add prefix PATH:, for example,
PATH:root/My/DEV
.
SINCE 5.0.14
, specify the configuration path directly, for example root/My/DEV, no need PATH: prefix anymore. *
build
- QUERY_PARAM The id of a specific build. *
from_build
- QUERY_PARAM Specify the from build when finding changes in a build range. *
to_build
- QUERY_PARAM Specify the to build when finding changes in a build range.
for example, below url will retrieve the count of JIRA issues in a specified build:
http
:
/
/
quickbuild
:
8810
/
rest
/
jira
/
size
/
PATH
:
root
%
2F
My
%
2F
DEV
?
build
=
100
Since
5.0
.14
http
:
/
/
quickbuild
:
8810
/
rest
/
jira
/
size
/
root
/
My
/
DEV
?
build
=
100
or find issue count in a build range:
http
:
/
/
quickbuild
:
8810
/
rest
/
jira
/
size
/
19
?
from_build
=
100
&
to_build
=
200
Retrieve the issues
URI
Response Type
Params
rest/jira/issues/{configuration}
text/xml
*
configuration
- PATH_PARAM Specify the configuration. By default, specify configuration id here, if you want to specify a configuration path, you need add prefix PATH:, for example, PATH:root/My/DEV.
Since 5.0.14
, specify the configuration path directly, no PATH: prefix any more. *
build
- QUERY_PARAM Specify the build id you want. *
from_build
- QUERY_PARAM Specify the from build when finding changes in a build range. *
to_build
- QUERY_PARAM Specify the to build when finding changes in a build range. *
offset
- QUERY_PARAM Specify the first record when iterate the records, by default, the offset is 0 *
limit
- QUERY_PARAM Specify the total records you want to retrieve, by default, the limit is 50 *
asc
- QUERY_PARAM Boolean type, specify order by issue key ascendent or descendent, by default, it is ascendent.
For example, below example retrieves the first 50 issues of build 100:
http
:
/
/
quickbuild
:
8810
/
rest
/
jira
/
issues
/
19
?
build
=
100
the response looks like:
<
report name
=
"issues"
version
=
"0.0"
locale
=
"en_US"
>
<
row
ID
=
"15"
issueKey
=
"TST-23"
buildId
=
"321"
issueType
=
"New Feature"
summary
=
"2-phase load components"
status
=
"Resolved"
priority
=
"Major"
created
=
"2011-06-03T14:58:47.445+08:00"
updated
=
"2011-06-03T15:27:39.418+08:00"
resolution
=
"Fixed"
assignee
=
"admin"
reporter
=
"admin"
modifications
=
"3"
>
<
changeIds
>
913f
cbcdbe8f80d6c1fe5fce3bb49e1f0040a943
,
f090cd04725c5551f8a439fe0a53591193ea79c3
<
/
changeIds
>
<
repositories
>
hg
,
hg
<
/
repositories
>
<
/
row
>
.
.
.
.
.
.
<
/
report
>
Each row element is a record of an issue related to a specified build, the data structure is:
class
Issue
{
Long
ID
;
// No use, only used in QuickBuild internally
String
issueKey
;
Long
buildId
;
String
issueType
;
String
summary
;
String
status
;
String
priority
;
Date
created
;
// Formated in ISO8601
Date
updated
;
String
resolution
;
String
assignee
;
String
reporter
;
int
modifications
;
// related modifications
String
changeIds
;
// related change set ids in CSV format
String
repositories
;
// related repository names in CSV format
Retrieve the builds of an issue
â
Before 5.0.14:
URI
Response Type
Params
$baseURI/builds/{configuration}/{issuekey}/
text/xml
*
configuration
- PATH_PARAM Specify the configuration. By default, specify configuration id here, if you want to specify a configuration path, you need add prefix PATH:, for example,
PATH:root/My/DEV
. *
issuekey
- PATH PARAM The issue key you want to search. *
count
- QUERY_PARAM Specify at most how many records you want. If not specified, all records found will return.
http
:
/
/
quickbuild
:
8810
/
rest
/
jira
/
builds
/
5
/
QB
-
123
Since 5.0.14
URI
Response Type
Params
$baseURI//{issuekey}/builds/{configuration}
text/xml
*
configuration
- PATH_PARAM Specify the configuration. By default, specify configuration id here, or specify the configuration path *
issuekey
- PATH PARAM The issue key you want to search. *
count
- QUERY_PARAM Specify at most how many records you want. If not specified, all records found will return.
http
:
/
/
quickbuild
:
8810
/
rest
/
QB
-
123
/
jira
/
builds
/
5
or
http
:
/
/
quickbuild
:
8810
/
rest
/
QB
-
123
/
jira
/
builds
/
root
/
My
/
DEV
The response looks like:
<
list
>
<
build
>
<
id
>
321
<
/
id
>
<
version
>
1.0
.15
<
/
version
>
<
status
>
SUCCESSFUL
<
/
status
>
<
beginDate
>
2011
-
06
-
10
T17
:
11
:
35.662
+
08
:
00
<
/
beginDate
>
<
duration
>
3409
<
/
duration
>
<
scheduled
>
false
<
/
scheduled
>
<
requester
>
Administrator
<
/
requester
>
<
deleted
>
false
<
/
deleted
>
<
/
build
>
.
.
.
.
.
.
<
/
list
>
Here, the build element is just a fragment of the build object in QuickBuild, if you need more detailed information about the build, please use build RESTful API.
Retrieve the changes of an issue
â
Before 5.0.14
URI
Response Type
Params
$baseURI/changes/{configuration}/{issuekey}
text/xml
*
configuration
- PATH_PARAM Specify the configuration. By default, specify configuration id here, if you want to specify a configuration path, you need add prefix PATH:, for example, PATH:root/My/DEV *
key
- PATH_PARAM The issue key you want to search. *
count
- QUERY_PARAM Specify at most how many records you want. If not specified, all records found will return.
http
:
/
/
quickbuild
:
8810
/
rest
/
jira
/
changes
/
5
/
TST
-
123
or
http
:
/
/
quickbuild
:
8810
/
rest
/
jira
/
changes
/
PATH
:
root
/
My
Dev
/
TST
-
123
Since 5.0.14
URI
Response Type
Params
$baseURI/{key}/changes/{configuration}
text/xml
*
configuration
- PATH_PARAM Specify the configuration. By default, specify configuration id here. You can also specify the configuration path directly *
key
- PATH_PARAM The issue key you want to search. *
count
- QUERY_PARAM Specify at most how many records you want. If not specified, all records found will return.
http
:
/
/
quickbuild
:
8810
/
rest
/
jira
/
TST
-
123
/
changes
/
5
or
http
:
/
/
quickbuild
:
8810
/
rest
/
jira
/
TST
-
123
/
changes
/
root
/
My
/
DEV
The response looks like:
<
list
>
<
changeset
>
<
user
>
steve
<
/
user
>
<
date
>
2011
-
05
-
31
T03
:
45
:
55.000
+
08
:
00
<
/
date
>
<
id
>
f090cd04725c5551f8a439fe0a53591193ea79c3
<
/
id
>
<
repositoryName
>
hg
<
/
repositoryName
>
<
repositoryType
>
Mercurial
<
/
repositoryType
>
<
additional
>
13
<
/
additional
>
<
buildId
>
321
<
/
buildId
>
<
comment
>
add a big file
to
related
to
issue
TST
-
23
,
TST
-
24
TST
-
25
<
/
comment
>
<
modifications
>
<
modification
>
<
action
>
ADD
<
/
action
>
<
path
>
big
.
java
<
/
path
>
<
edition
>
f090cd04725c5551f8a439fe0a53591193ea79c3
<
/
edition
>
<
previousEdition
>
c11a08aa7525a01e35239b8b6f34d4f8f3bf770b
<
/
previousEdition
>
<
additional
>
13
<
/
additional
>
<
/
modification
>
<
/
modifications
>
<
/
changeset
>
.
.
.
.
.
.
<
/
list
>
Last updated
on
Oct 23, 2024

================================================================================

Title: Query Build Notifications
URL: https://wiki.pmease.com/display/QB14/Query+Build+Notifications
Breadcrumb:  > Developer's Guide > RESTful API

Developer's Guide
RESTful API
Query Build Notifications
Version: QB14
On this page
Query Build Notifications
Syntax
â
Build notifications can be queried using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
notifications
?
last_notified_build_id
=
<
last notified build id
>
QuickBuild uses http BASIC authentication information to determine the user who queries the notification, and only returns notifications belonging to that user. The parameter
last_notified_build_id
is optional. If not specified, the most recent notification will be returned; otherwise, all notifications after specified build will be returned. The response is of mime type
application/xml
and the content is xml representation of list of builds to be notified. A sample response is like below:
<
list
>
<
com
.
pmease
.
quickbuild
.
model
.
Build
>
<
id
>
16
<
/
id
>
<
configuration
>
2
<
/
configuration
>
<
version
>
1.0
.15
<
/
version
>
<
requester
>
1
<
/
requester
>
<
scheduled
>
false
<
/
scheduled
>
<
status
>
SUCCESSFUL
<
/
status
>
<
statusDate
>
2010
-
06
-
09
T21
:
46
:
11.627
+
08
:
00
<
/
statusDate
>
<
beginDate
>
2010
-
06
-
09
T21
:
46
:
11.131
+
08
:
00
<
/
beginDate
>
<
duration
>
496
<
/
duration
>
<
stepRuntimes
>
<
entry
>
<
string
>
master
<
/
string
>
<
com
.
pmease
.
quickbuild
.
stepsupport
.
StepRuntime
>
<
status
>
SUCCESSFUL
<
/
status
>
<
nodeAddress
>
matrix
:
8810
<
/
nodeAddress
>
<
duration
>
424
<
/
duration
>
<
/
com
.
pmease
.
quickbuild
.
stepsupport
.
StepRuntime
>
<
/
entry
>
<
entry
>
<
string
>
master
&
gt
;
checkout
<
/
string
>
<
com
.
pmease
.
quickbuild
.
stepsupport
.
StepRuntime
>
<
status
>
SUCCESSFUL
<
/
status
>
<
nodeAddress
>
matrix
:
8810
<
/
nodeAddress
>
<
duration
>
380
<
/
duration
>
<
/
com
.
pmease
.
quickbuild
.
stepsupport
.
StepRuntime
>
<
/
entry
>
<
/
stepRuntimes
>
<
repositoryRuntimes
>
<
entry
>
<
string
>
svn
<
/
string
>
<
com
.
pmease
.
quickbuild
.
repositorysupport
.
RepositoryRuntime
>
<
revisionDOM
>
<
com
.
pmease
.
quickbuild
.
plugin
.
scm
.
svn
.
SvnRevision
revision
=
"0.0"
>
<
value
>
101
<
/
value
>
<
/
com
.
pmease
.
quickbuild
.
plugin
.
scm
.
svn
.
SvnRevision
>
<
/
revisionDOM
>
<
checkout
>
true
<
/
checkout
>
<
/
com
.
pmease
.
quickbuild
.
repositorysupport
.
RepositoryRuntime
>
<
/
entry
>
<
/
repositoryRuntimes
>
<
variableValues
/
>
<
/
com
.
pmease
.
quickbuild
.
model
.
Build
>
<
com
.
pmease
.
quickbuild
.
model
.
Build
>
<
id
>
17
<
/
id
>
<
configuration
>
2
<
/
configuration
>
<
version
>
1.0
.16
<
/
version
>
<
requester
>
1
<
/
requester
>
<
scheduled
>
false
<
/
scheduled
>
<
status
>
SUCCESSFUL
<
/
status
>
<
statusDate
>
2010
-
06
-
09
T21
:
46
:
13.448
+
08
:
00
<
/
statusDate
>
<
beginDate
>
2010
-
06
-
09
T21
:
46
:
12.854
+
08
:
00
<
/
beginDate
>
<
duration
>
594
<
/
duration
>
<
stepRuntimes
>
<
entry
>
<
string
>
master
<
/
string
>
<
com
.
pmease
.
quickbuild
.
stepsupport
.
StepRuntime
>
<
status
>
SUCCESSFUL
<
/
status
>
<
nodeAddress
>
matrix
:
8810
<
/
nodeAddress
>
<
duration
>
535
<
/
duration
>
<
/
com
.
pmease
.
quickbuild
.
stepsupport
.
StepRuntime
>
<
/
entry
>
<
entry
>
<
string
>
master
&
gt
;
checkout
<
/
string
>
<
com
.
pmease
.
quickbuild
.
stepsupport
.
StepRuntime
>
<
status
>
SUCCESSFUL
<
/
status
>
<
nodeAddress
>
matrix
:
8810
<
/
nodeAddress
>
<
duration
>
492
<
/
duration
>
<
/
com
.
pmease
.
quickbuild
.
stepsupport
.
StepRuntime
>
<
/
entry
>
<
/
stepRuntimes
>
<
repositoryRuntimes
>
<
entry
>
<
string
>
svn
<
/
string
>
<
com
.
pmease
.
quickbuild
.
repositorysupport
.
RepositoryRuntime
>
<
revisionDOM
>
<
com
.
pmease
.
quickbuild
.
plugin
.
scm
.
svn
.
SvnRevision
revision
=
"0.0"
>
<
value
>
101
<
/
value
>
<
/
com
.
pmease
.
quickbuild
.
plugin
.
scm
.
svn
.
SvnRevision
>
<
/
revisionDOM
>
<
checkout
>
true
<
/
checkout
>
<
/
com
.
pmease
.
quickbuild
.
repositorysupport
.
RepositoryRuntime
>
<
/
entry
>
<
/
repositoryRuntimes
>
<
variableValues
/
>
<
/
com
.
pmease
.
quickbuild
.
model
.
Build
>
<
/
list
>
Security
â
You will need to use http BASIC authentication to login as authorized QuickBuild user to use this API. QuickBuild only returns notifications belonging to that user.
Demo
â
Below
curl
command demonstrates how to get notifications for user
admin
after build with id
100
:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
notifications
?
last_notified_build_id
=
100
Last updated
on
Oct 23, 2024

================================================================================

Title: Query Grid Measurements
URL: https://wiki.pmease.com/display/QB14/Query+Grid+Measurements
Breadcrumb:  > Developer's Guide > RESTful API

Developer's Guide
RESTful API
Query Grid Measurements
Version: QB14
On this page
Query Grid Measurements
Grid measurements can be fetched from REST API.
Available Functions
â
The base URI for grid measuremetns REST API is:
/
rest
/
grid
/
measurements
The support functions include:
URI
Description
Params
/rest/grid/measurements/help
Get help for all available functions
NO PARAMS
/rest/grid/measurements/version
Get current version for the measurements related REST API
NO PARAMS
/rest/grid/measurements
Query for the measurements you want
* source -
QUERY_PARAM
Specify the node you want to query. If not specifed, then all nodes will be used. * period -
QUERY_PARAM
Specify the time range you want to query. by default, period is LAST_HOUR, this param can be one of: LAST_HOUR, LAST_2_HOURS, LAST_4_HOURS, LAST_DAY, LAST_WEEK, LAST_MONTH * start_time -
QUERY_PARAM
Specify the start time you want to query. If not specified, then an hour ago of to_date will be used. * end_time -
QUERY_PARAM
Specify the end time you want to query. If not specified, then current time will be used. * metric -
QUERY_PARAM
Specify the metric name you want to query. See below section for all available metric names * date_pattern -
QUERY_PARAM
Specify the date pattern you are using for from_date and to_date. By default, ISO 8601 is used.
Below, we'd like to give some examples for how to query the measurements:
With no params
â
If you call below query, QuickBuild will return all measurements collected from all nodes in the last one hour.
/
rest
/
grid
/
measurements
Query for a specified node
â
Below query will return all measurements from
myagent:8811
in the last one hour.
/
rest
/
grid
/
measurements
?
source
=
myagent
:
8811
Query for a specified metric
â
Below query will return measurements of
disk usage
for all nodes in the last one hour.
/
rest
/
grid
/
measurements
?
metric
=
disk
.
usage
Query for a specified time range
â
Below query returns all measurements for all nodes in the last 2 hours.
/
rest
/
grid
/
measurements
?
period
=
LAST_2_HOURS
Below query returns all measurements for all nodes from time: 2013-02-25T09:47:00+08:00, note by default, you need format your time in ISO8601 format, that is, in pattern: yyyy-MM-dd'T'HH:mm:ss.SSSZ, we will give a custom date pattern in later sample.
/
rest
/
grid
/
measurements
?
start_time
=
2013
-
02
-
25
T09
:
47
:
00.000
%
2
B08
:
00
Below query returns all measurements for all nodes in a specified time range with a custom date format pattern:
/
rest
/
grid
/
measurements
?
start_time
=
2013
/
02
/
25
+
09
:
47
&
end_time
=
2013
/
02
/
27
+
09
:
47
&
date_pattern
=
yyyy
/
MM
/
dd
+
HH
:
mm
Example return result
â
For all query above, below is an example return result:
<
list
>
<
com.pmease.quickbuild.model.MeasurementDataR00
>
<
id
>
350
</
id
>
<
timestamp
>
1361854800000
</
timestamp
>
<
source
>
Zhenyu-MBP.local:8811
</
source
>
<
metricName
>
memory.usage
</
metricName
>
<
value
>
0.743398666381836
</
value
>
</
com.pmease.quickbuild.model.MeasurementDataR00
>
<
com.pmease.quickbuild.model.MeasurementDataR00
>
<
id
>
335
</
id
>
<
timestamp
>
1361854800000
</
timestamp
>
<
source
>
Zhenyu-MBP.local:8810
</
source
>
<
metricName
>
web.rpc.oneMinuteRate
</
metricName
>
<
value
>
10.3903417298681
</
value
>
</
com.pmease.quickbuild.model.MeasurementDataR00
>
<
com.pmease.quickbuild.model.MeasurementDataR00
>
<
id
>
334
</
id
>
<
timestamp
>
1361854800000
</
timestamp
>
<
source
>
Zhenyu-MBP.local:8810
</
source
>
<
metricName
>
web.rpc.fiveMinuteRate
</
metricName
>
<
value
>
8.90793420070343
</
value
>
</
com.pmease.quickbuild.model.MeasurementDataR00
>
</
list
>
Here, timestamp is the milliseconds in Java time (the time from midnight, January 1, 1970 UTC.), you can simply create your own Date instance by
new Date(timestamp)
in Java.
Available Measurement Metrics
â
Below table shows all available measurement metrics:
Virtual Machine Measurements
â
Metric Id
Metric Name
Applied to
jvm.memoryUsage
Virtual Machine :: Memory Usage
All Nodes
jvm.heapUsage
Virtual Machine :: Heap Usage
Server Only
jvm.gcRuns
Virtual Machine :: GC Runs
Server Only
jvm.gcTime
Virtual Machine :: GC Time
Server Only
jvm.threadCount
Virtual Machine :: Thread Count
Server Only
CPU Measurements
â
Metric Id
Metric Name
Applied to
cpu.totalUsage
CPU :: Total Usage
All Nodes
Physical Memory Measurements
â
Metric Id
Metric Name
Applied to
memory.usage
Physical Memory :: Memory Usage
Server Only
Disk Measurements
â
Metric Id
Metric Name
Applied to
disk.usage
Disk :: Usage
All Nodes
Network Measurements
â
Metric Id
Metric Name
Applied to
network.txBytes
Network :: txBytes
Server Only
network.rxBytes
Network :: rxBytes
Server Only
Swap Measurements
â
Metric Id
Metric Name
Applied to
swap.usage
Swap :: Usage
Server Only
Resource Measurements
â
Metric Id
Metric Name
Applied to
resources.percentage
Resource :: Used%
Server Only
resources.frees
Resource :: Frees
Server Only
resources.used
Resource :: Used
Server Only
Build Requests Measurements
â
Metric Id
Metric Name
Applied to
buildrequests.processingsTotal
Build Requests :: Processings Total
Server Only
buildrequests.waitingsTotal
Build Requests :: Waitings Total
Server Only
buildrequests.processedTotal
Build Requests :: Processed Total
Server Only
buildrequests.processings
Build Requests :: Processings on Node
All Nodes
buildrequests.waitings
Build Requests :: Waitings on Node
All Nodes
Builds Measurements
â
Metric Id
Metric Name
Applied to
builds.total
Builds :: Total Builds
Server Only
builds.failed
Builds :: Failed Builds
Server Only
builds.successfulRate
Builds :: Successful Rate
Server Only
builds.averageDuration
Builds :: Average Duration
Server Only
builds.averageWaitingDuration
Builds :: Average Waiting Duration
Server Only
Steps Measurements
â
Metric Id
Metric Name
Applied to
steps.runningsTotal
Steps :: Runnings Total
Server Only
steps.waitingsTotal
Steps :: Waitings Total
Server Only
steps.runnings
Steps :: Runnings on Node
All Nodes
Database Measurements
â
Metric Id
Metric Name
Applied to
db.numConnections
Database :: Total Connections
Server Only
db.busyConnections
Database :: Busy Connections
Server Only
Jetty(web server) Measurements
â
Metric Id
Metric Name
Applied to
jetty.totalConnections
Jetty :: Total Connections
Server Only
jetty.usedConnections
Jetty :: Used Connections
Server Only
UI Visits Measurements
â
Metric Id
Metric Name
Applied to
web.ui.oneMinuteRate
UI Visits :: One-minute Rate
Server Only
web.ui.fiveMinuteRate
UI Visits :: Five-minute Rate
Server Only
web.ui.fifteenMinuteRate
UI Visits :: Fifteen-minute Rate
Server Only
web.ui.requests
UI Visits :: Requests
Server Only
web.ui.averageDuration
UI Visits :: Average Duration
Server Only
REST Visits Measurements
â
Metric Id
Metric Name
Applied to
web.rest.oneMinuteRate
REST Visits :: One-minute Rate
Server Only
web.rest.fiveMinuteRate
REST Visits :: Five-minute Rate
Server Only
web.rest.fifteenMinuteRate
REST Visits :: Fifteen-minute Rate
Server Only
web.rest.requests
REST Visits :: Requests
Server Only
web.rest.averageDuration
REST Visits :: Average Duration
Server Only
RPC Visits Measurements
â
Metric Id
Metric Name
Applied to
web.rpc.oneMinuteRate
RPC Visits :: One-minute Rate
Server Only
web.rpc.fiveMinuteRate
RPC Visits :: Five-minute Rate
Server Only
web.rpc.fifteenMinuteRate
RPC Visits :: Fifteen-minute Rate
Server Only
web.rpc.requests
RPC Visits :: Requests
Server Only
web.rpc.averageDuration
RPC Visits :: Average Duration
Server Only
Download Visits Measurements
â
Metric Id
Metric Name
Applied to
web.download.oneMinuteRate
Download Visits :: One-minute Rate
Server Only
web.download.fiveMinuteRate
Download Visits :: Five-minute Rate
Server Only
web.download.fifteenMinuteRate
Download Visits :: Fifteen-minute Rate
Server Only
web.download.requests
Download Visits :: Requests
Server Only
web.download.averageDuration
Download Visits :: Average Duration
Server Only
Upload Visits Measurements
â
Metric Id
Metric Name
Applied to
web.upload.oneMinuteRate
Upload Visits :: One-minute Rate
Server Only
web.upload.fiveMinuteRate
Upload Visits :: Five-minute Rate
Server Only
web.upload.fifteenMinuteRate
Upload Visits :: Fifteen-minute Rate
Server Only
web.upload.requests
Upload Visits :: Requests
Server Only
web.upload.averageDuration
Upload Visits :: Average Duration
Server Only
Security
â
No, Any user can use the functions.
Last updated
on
Oct 23, 2024

================================================================================

Title: Access Information of Published Files
URL: https://wiki.pmease.com/display/QB14/Access+Information+of+Published+Files
Breadcrumb:  > Developer's Guide > RESTful API

Developer's Guide
RESTful API
Access Information of Published Files
Version: QB14
On this page
Access Information of Published Files
Syntax
â
Information of published files can be accessed by build id using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
files
?
build_id
=
<
build id
>
&
path
=
<
path
>
Here
<path>
represents the relative path under
publish directory
of the specified build. The response is of mime type
application/xml
and the content is XML representation of the information about files and directories under the specified path. If specified path does not exist, http status code 204 (no content) will be returned. A sample response is like below:
<
list
>
<
com
.
pmease
.
quickbuild
.
FileInfo
>
<
name
>
file1
.
zip
<
/
name
>
<
!
--
size in bytes
--
>
<
size
>
287111
<
/
size
>
<
!
--
number of milliseconds since
January
1
,
1970
,
00
:
00
:
00
GMT
--
>
<
lastModified
>
1258091663171
<
/
lastModified
>
<
directory
>
false
<
/
directory
>
<
/
com
.
pmease
.
quickbuild
.
rest
.
FileInfo
>
<
com
.
pmease
.
quickbuild
.
rest
.
FileInfo
>
<
name
>
dir1
<
/
name
>
<
size
>
0
<
/
size
>
<
lastModified
>
1258091663171
<
/
lastModified
>
<
directory
>
true
<
/
directory
>
<
/
com
.
pmease
.
quickbuild
.
rest
.
FileInfo
>
<
/
list
>
Security
â
You will need to use http BASIC authentication to login as an authorized QuickBuild user if the anonymous is not allowed to access artifacts of specified build.
Demo
â
Below
curl
command demonstrates how to get information of artifacts in build with id
100
:
curl
-
u admin
:
admin
"http://localhost:8810/rest/files?build_id=100&path=artifacts"
Last updated
on
Oct 23, 2024

================================================================================

Title: Interact with Build Agents
URL: https://wiki.pmease.com/display/QB14/Interact+with+Build+Agents
Breadcrumb:  > Developer's Guide > RESTful API

Developer's Guide
RESTful API
Interact with Build Agents
Version: QB14
On this page
Interact with Build Agents
Get list of active build agents
â
Syntax
â
List of active build agents can be fetched by issuing GET request to below url:
http
:
/
/
localhost
:
8810
/
rest
/
buildagents
/
active
The response is of mime type
text/plain
and the content is XML representation of list of active build agents.
Security
â
Only user with permission
VIEW GRID PAGE
can access list of active build agents.
Demo
â
Below
curl
command demonstrates how to get list of active build agents:
curl http
:
/
/
localhost
:
8810
/
rest
/
buildagents
/
active
Get list of inactive build agents
â
Syntax
â
List of inactive build agents can be fetched by issuing GET request to below url:
http
:
/
/
localhost
:
8810
/
rest
/
buildagents
/
inactive
The response is of mime type
text/plain
and the content is XML representation of list of inactive build agents.
Security
â
Only user with permission
VIEW GRID PAGE
can access list of active build agents.
Demo
â
Below
curl
command demonstrates how to get list of active build agents:
curl http
:
/
/
localhost
:
8810
/
rest
/
buildagents
/
inactive
Get list of unauthorized build agents
â
Syntax
â
List of unauthorized build agents can be fetched by issuing GET request to below url:
http
:
/
/
localhost
:
8810
/
rest
/
buildagents
/
unauthorized
The response is of mime type
text/plain
and the content is XML representation of list of unauthorized build agents.
Security
â
Only user with permission
VIEW GRID PAGE
can access list of active build agents.
Demo
â
Below
curl
command demonstrates how to get list of unauthorized build agents:
curl http
:
/
/
localhost
:
8810
/
rest
/
buildagents
/
unauthorized
Get list of running steps on specified build agent (since 5.1.24)
â
Syntax
â
List of running steps can be fetched by issuing GET request to below url:
http
:
/
/
localhost
:
8810
/
rest
/
buildagents
/
<
node address
>
/
running_steps
The response is of mime type
text/plain
and the content is XML representation of list of running steps.
Security
â
Only user with permission
VIEW GRID PAGE
can access list of active build agents.
Demo
â
Below
curl
command demonstrates how to get list of running steps on agent "myagent:8811":
curl
"http://localhost:8810/rest/buildagents/myagent:8811/running_steps"
Last updated
on
Oct 23, 2024

================================================================================

Title: Backup Database
URL: https://wiki.pmease.com/display/QB14/Backup+Database
Breadcrumb:  > Developer's Guide > RESTful API

Developer's Guide
RESTful API
Backup Database
Version: QB14
On this page
Backup Database
QuickBuild database backup can be taken via RESTful call.
Syntax
â
The backup can be taken by posting XML representation of the database backup request object to below url:
http
:
/
/
localhost
:
8810
/
rest
/
backup
A sample XML of backup request object is like below:
<
com
.
pmease
.
quickbuild
.
web
.
page
.
administration
.
BackupNowOption
>
<
!
--
Destination
file
for
the backup
--
>
<
backupTo
>
/
path
/
to
/
backup
.
zip
<
/
backupTo
>
<
!
--
Whether
or not
to
exclude
builds in the backup
--
>
<
excludeBuilds
>
false
<
/
excludeBuilds
>
<
!
--
Whether
or not
to
exclude
measurement data in the backup
--
>
<
excludeMeasurements
>
false
<
/
excludeMeasurements
>
<
!
--
Whether
or not
to
exclude
audits in the backup
--
>
<
excludeAudits
>
false
<
/
excludeAudits
>
<
!
--
Whether
or not
to
clear
passwords in the backup
--
>
<
clearPasswords
>
false
<
/
clearPasswords
>
<
/
com
.
pmease
.
quickbuild
.
web
.
page
.
administration
.
BackupNowOption
>
The response is of mime type
text/plain
and the content is absolute path to the backup file.
Security
â
You will need to use http BASIC authentication to login as administrator to do the backup.
Demo
â
We use
curl
to demonstrate how to backup the database:
Save the sample backup request XML described above to file
tempfile.xml
.
Post content of
tempfile.xml
to QuickBuild using below command:
curl
-
X
POST
-
u admin
:
admin
-
d
@tempfile.xml
http
:
/
/
localhost
:
8810
/
rest
/
backup
Last updated
on
Oct 23, 2024

================================================================================

Title: Pause System
URL: https://wiki.pmease.com/display/QB14/Pause+System
Breadcrumb:  > Developer's Guide > RESTful API

Developer's Guide
RESTful API
Pause System
Version: QB14
On this page
Pause System
QuickBuild can be paused to prevent builds from running via RESTful call.
Syntax
â
QuickBuild can be paused by issuing GET request to below url:
http
:
/
/
localhost
:
8810
/
rest
/
pause
The response is of mime type
text/plain
and the content is simply
paused
if successful.
Security
â
You will need to use http BASIC authentication to login as administrator to pause the system.
Demo
â
We use
curl
to demonstrate how to paused the system:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
pause
Last updated
on
Oct 23, 2024

================================================================================

Title: Resume System
URL: https://wiki.pmease.com/display/QB14/Resume+System
Breadcrumb:  > Developer's Guide > RESTful API

Developer's Guide
RESTful API
Resume System
Version: QB14
On this page
Resume System
QuickBuild can be resumed to allow builds from running via RESTful call.
Syntax
â
QuickBuild can be resumed by issuing GET request to below url:
http
:
/
/
localhost
:
8810
/
rest
/
resume
The response is of mime type
text/plain
and the content is simply
resumed
if successful.
Security
â
You will need to use http BASIC authentication to login as administrator to resume the system.
Demo
â
We use
curl
to demonstrate how to resume the system:
curl
-
u admin
:
admin http
:
/
/
localhost
:
8810
/
rest
/
resume
Last updated
on
Oct 23, 2024

================================================================================

Title: Check System Pause Information
URL: https://wiki.pmease.com/display/QB14/Check+System+Pause+Information
Breadcrumb:  > Developer's Guide > RESTful API

Developer's Guide
RESTful API
Check System Pause Information
Version: QB14
On this page
Check System Pause Information
Get system pause information including pause reason.
Syntax
â
System pause information can be fetched by issuing GET request to below url:
http
:
/
/
localhost
:
8810
/
rest
/
paused
The response is of mime type
text/xml
and the content is xml representation of the system pause object if system is paused. Http status code 204 (no content) will be returned if system is not paused.
Security
â
Any one including anonymous user can check the system pause information.
Demo
â
We use
curl
to demonstrate how to get system pause information:
curl http
:
/
/
localhost
:
8810
/
rest
/
paused
Last updated
on
Oct 23, 2024

================================================================================

Title: Retrieve Object Identifier
URL: https://wiki.pmease.com/display/QB14/Retrieve+Object+Identifier
Breadcrumb:  > Developer's Guide > RESTful API

Developer's Guide
RESTful API
Retrieve Object Identifier
Version: QB14
On this page
Retrieve Object Identifier
Most of QuickBuild RESTful API relies on identifier of the object, which can be retrieved with the id service explained here.
Get configuration id by path
â
Syntax
â
Configuration id can be retrieved by path name using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
ids
?
configuration_path
=
<
configuration path name
>
Here
<configuration path name>
represents full path of a configuration. The response is of mime type
text/plain
and the content is string representation of configuration id. Status code 204 (No Content) will be returned if configuration is not found.
Security
â
Any user including anonymous can use this service.
Get resource id by name
â
warning
This feature is available since 6.1.35
Syntax
â
Resource id can be retrieved by name using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
ids
?
resource_name
=
<
resource name
>
Here
<resource name>
represents name of a resource. The response is of mime type
text/plain
and the content is string representation of resource id. Status code 204 (No Content) will be returned if resource is not found.
Security
â
Any user including anonymous can use this service.
Demo
â
Below
curl
command demonstrates how to get id of configuration
root/test
:
curl http
:
/
/
localhost
:
8810
/
rest
/
ids
?
configuration_path
=
root
/
test
Get user id by name
â
Syntax
â
User id can be retrieved by user name using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
ids
?
user_name
=
<
user name
>
Here
<user name>
represents name of a QuickBuild user. The response is of mime type
text/plain
and the content is string representation of user id. Status code 204 (No Content) will be returned if user is not found.
Security
â
Any user including anonymous can use this service.
Demo
â
Below
curl
command demonstrates how to get id of user
robin
:
curl http
:
/
/
localhost
:
8810
/
rest
/
ids
?
user_name
=
robin
Get group id by name
â
Syntax
â
Group id can be retrieved by group name using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
ids
?
group_name
=
<
group name
>
Here
<group name>
represents name of a QuickBuild group. The response is of mime type
text/plain
and the content is string representation of group id. Status code 204 (No Content) will be returned if group is not found.
Security
â
Any user including anonymous can use this service.
Demo
â
Below
curl
command demonstrates how to get id of group
developers
:
curl http
:
/
/
localhost
:
8810
/
rest
/
ids
?
group_name
=
developers
Get queue id by name
â
Syntax
â
Queue id can be retrieved by queue name using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
ids
?
queue_name
=
<
queue name
>
Here
<queue name>
represents name of a QuickBuild queue. The response is of mime type
text/plain
and the content is string representation of queue id. Status code 204 (No Content) will be returned if queue is not found.
Security
â
Any user including anonymous can use this service.
Demo
â
Below
curl
command demonstrates how to get id of queue
default
:
curl http
:
/
/
localhost
:
8810
/
rest
/
ids
?
queue_name
=
default
Get build id by request id
â
Syntax
â
Build id can be retrieved by request id using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
ids
?
request_id
=
<
request id
>
Here
<request id>
represents id of a build request. The response is of mime type
text/plain
and the content is string representation of build id. Status code 204 (No Content) will be returned if build is not generated yet.
Security
â
Any user including anonymous can use this service.
Demo
â
Below
curl
command demonstrates how to get build id of request
0136ed89-d47f-4307-8e69-c8535fae0e84
:
curl http
:
/
/
localhost
:
8810
/
rest
/
ids
?
request_id
=
0136
ed89
-
d47f
-
4307
-
8e69
-
c8535fae0e84
Get build id by build name
â
Syntax
â
Build id can be retrieved by
build name
using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
ids
?
build_name
=
<
build name
>
Here
<build name>
represents
name of a build
. The response is of mime type
text/plain
and the content is string representation of build id. Status code 204 (No Content) will be returned if build of the name is not found.
Security
â
Any user including anonymous can use this service.
Demo
â
Below
curl
command demonstrates how to get id of latest build in configuration with id
1
:
curl http
:
/
/
localhost
:
8810
/
rest
/
ids
?
build_name
=
1.l
atest
Get dashboard id by dashboard fqn (fully qualified name)
â
Syntax
â
Dashboard id can be retrieved by dashboard fqn using http GET method through below url:
http
:
/
/
localhost
:
8810
/
rest
/
ids
?
dashboard_fqn
=
<
dashboard fqn
>
<dashboard fqn>
is of the form
<user id>.<dashboard name>
. The response is of mime type
text/plain
and the content is string representation of dashboard id. Status code 204 (No Content) will be returned if dashboard of the fqn is not found.
Security
â
Any user including anonymous can use this service.
Demo
â
Below
curl
command demonstrates how to get id of dashboard
project1
belonging to user with id
1
:
curl http
:
/
/
localhost
:
8810
/
rest
/
ids
?
dashboard_fqn
=
1.
project1
Last updated
on
Oct 24, 2024

================================================================================

Title: Bean Editor
URL: https://wiki.pmease.com/display/QB14/Bean+Editor
Breadcrumb:  > Developer's Guide > Develop Plugins > Development References

Developer's Guide
Develop Plugins
Development References
Bean Editor
Version: QB14
On this page
Bean Editor
We use plugin setting to explain how to use the bean editor to generate plugin UI. As introduced in
Write a Simple Plugin
, user can provide a plugin setting class by overriding
getPluginSettingClass()
method in the plugin class. If provided, this class will be used by QuickBuild to generate plugin setting user interface. The setting will be saved as an instance of this class and can be retrieved later through
getPluginSetting()
method when this plugin runs. Let's start with a very simple plugin setting class:
A simple editor
â
public
class
PluginSetting
{
public
enum
FaithType
{
CHRISTIANISM
,
CATHOLICISM
,
BUDDHISM
,
ISLAMISM
,
JUDAISM
}
;
private
String
name
;
private
FaithType
faith
;
private
boolean
married
;
private
Date
birthday
;
private
int
workingYears
;
@Editable
(
order
=
100
,
description
=
"Specify the name"
)
public
String
getName
(
)
{
return
name
;
}
public
void
setName
(
String
name
)
{
this
.
name
=
name
;
}
@Editable
(
order
=
200
,
description
=
"Choose your faith"
)
public
FaithType
getFaith
(
)
{
return
faith
;
}
public
void
setFaith
(
FaithType
faith
)
{
this
.
faith
=
faith
;
}
@Editable
(
order
=
300
,
name
=
"Are You Married?"
)
public
boolean
isMarried
(
)
{
return
married
;
}
public
void
setMarried
(
boolean
married
)
{
this
.
married
=
married
;
}
@Editable
(
order
=
400
)
public
Date
getBirthday
(
)
{
return
birthday
;
}
public
void
setBirthday
(
Date
birthday
)
{
this
.
birthday
=
birthday
;
}
@Editable
(
order
=
500
)
public
int
getWorkingYears
(
)
{
return
workingYears
;
}
public
void
setWorkingYears
(
int
workingYears
)
{
this
.
workingYears
=
workingYears
;
}
}
By specifying the
@Editable
annotation for getter method, that property will be editable with user interface. The generated interface to edit this plugin setting looks as following:
Please note:
The bean for which the editor is generated must have a
default constructor.
order
attribute need to be specified for
@Editable
annotation to make sure that properties are displayed in the correct order.
The
name
and
description
attribute of the
@Editable
annotation is optional.
Name
attribute is used to specify the display name of the property and
description
is used to specify the description of this property which will be displayed when a user hovers the mouse over the question mark icon next to the the property name in the user interface.
Validation annotations can be applied to the properties in order to put constraint on the values of the certain properties. Refer to Bean Validator for details.
Some helper annotation can be added to specify how the property should be edited. For example:
@Editabel
(
order
=
100
,
description
=
"Specify the name"
)
@ChoiceProvider
(
"getAvailableNames"
)
@Multiline
(
lines
=
8
)
public
String
getName
(
)
{
Return
name
;
}
private
List
<
String
>
getAvailableNames
(
)
{
return
Arrays
.
asList
(
new
String
[
]
{
"Alvin"
,
"robin"
}
)
;
}
By specifying
@Multiline
annotation for the name property, the editor for the name property will be displayed as textarea with specified number of rows.
By specifying
@ChoiceProvider
for the name property, the editor for the name property will have a dropdown icon next to the input box, to help user to choose from the set of predefined values of this property. The predefined values are provided by calling a method specified as
value
attribute of the
@ChoiceProvider
annotation.
Some other helper annotations are:
@Password
: by specifying this annotation, the property will be displayed as a password field.
@Color
: by specifying this annotation, a color picker will be displayed next to the input box, and the input value will be validated against color formats, in the form of
rrggbb
.
List editor
â
QuickBuild editor is able to generate user interface to edit list if the list element is of the same type. For example in the above plugin, we add a new property of type List to this class as follows:
public
class
PluginSetting
{
.
.
.
private
List
<
Dog
>
dogs
;
.
.
.
@Editable
(
order
=
600
)
public
List
getDogs
(
)
{
return
dogs
;
}
public
void
setDogs
(
List
<
Dog
>
dogs
)
{
this
.
dogs
=
dogs
;
}
}
And the Dog bean is defined as:
public
class
Dog
{
public
enum
DogType
{
HUNTAWAY
,
MASTIFF
,
CHOWCHOW
,
MALAMUTE
}
;
private
String
name
;
private
int
age
;
private
DogType
type
;
@Editable
(
order
=
100
)
public
String
getName
(
)
{
return
name
;
}
public
void
setName
(
String
name
)
{
this
.
name
=
name
;
}
@Editable
(
order
=
200
)
public
int
getAge
(
)
{
return
age
;
}
public
void
setAge
(
int
age
)
{
this
.
age
=
age
;
}
@Editable
(
order
=
300
)
public
DogType
getType
(
)
{
return
type
;
}
public
void
setType
(
DogType
type
)
{
this
.
type
=
type
;
}
}
The resulting edit page will look like:
Please note that:
Element type of the list needs to be specified. There are two ways to specify the element type: by using Java generics or by specifying
elementType
attribute of the
@Editable
annotation. For Dogs bean above, we use the Java generics declaration, that is, the return type of
getDogs()
method is
List<Dog>
. This tells QuickBuild that the element type of the list is
Dog
. In cases you cannot specify Java generics return type (for example if you are overriding a method whose return type is List), you will need to specify the element type as follows:
Editable
(
order
=
600
,
elementType
=
Dog
.
class
)
All elements in the list should be of the same concrete type.
You may also attach Hibernate validator annotations to the list, for example you may attach
@Size
annotation to the
getDogs()
method to limit the list size.
Polymorphic editor
â
QuickBuild editor is able to generate user interface to edit polymorphic properties. For example, for the plugin setting class above:
public
class
PluginSetting
{
.
.
.
Private
Vehicle
vehicle
;
.
.
.
@Editable
(
order
=
700
)
public
Vehicle
getVehicle
(
)
{
return
vehicle
;
}
public
void
setVehicle
(
Vehicle
vehicle
)
{
this
.
vehicle
=
vehicle
;
}
}
Vehicle class is defined as:
public
abstract
class
Vehicle
{
private
String
manufacturer
;
private
int
price
;
@Editable
(
order
=
100
)
@NotEmpty
public
String
getManufacturer
(
)
{
return
manufacturer
;
}
public
void
setManufacturer
(
String
manufacturer
)
{
this
.
manufacturer
=
manufacturer
;
}
@Editable
(
order
=
200
)
@Range
(
min
=
100
,
max
=
1000000
)
public
int
getPrice
(
)
{
return
price
;
}
public
void
setPrice
(
int
price
)
{
this
.
price
=
price
;
}
}
and Vehicle class has two implementations subclasses in the same package as the Vehicle class: SUV and Car:
@Editable
(
name
=
"SUV"
)
public
class
SUV
extends
Vehicle
{
private
int
size
;
@Editable
(
order
=
1000
)
public
int
getSize
(
)
{
return
size
;
}
public
void
setSize
(
int
size
)
{
this
.
size
=
size
;
}
}
@Editable
(
name
=
"Car"
)
public
class
Car
extends
Vehicle
{
private
int
maxSpeed
;
@Editable
(
order
=
1000
)
public
int
getMaxSpeed
(
)
{
return
maxSpeed
;
}
public
void
setMaxSpeed
(
int
maxSpeed
)
{
this
.
maxSpeed
=
maxSpeed
;
}
}
Then the user interface for the plugin will be:
Please note that:
In order to get the polymorphic editor to work, the return type of the getter method needs to be an abstract class or an interface.
The implementation types can be specified
by elementTypes
attribute of the Editable annotation. If this attribute does not exist, QuickBuild will load all implementation classes from the package where the abstract class (or interface) resides in.
The
@Editable
annotation applied to the implementation class provides display name of the implementation.
When you specify
@Edtiable
annotation for the properties defined in
Car
and
SUV
classes, the order attribute is starts from 1000. This is to make sure that the properties defined in these implementation classes come after the properties defined in the abstract class.
Edit variables
â
Variables are widely used in QuickBuild to add flexibility. To define variables:
public
class
PluginSetting
{
.
.
.
private
List
<
Variable
>
attributes
;
.
.
.
@Editable
(
order
=
800
,
description
=
"Specify some attributes"
)
public
List
<
Variable
>
getAttributes
{
return
attributes
;
}
public
void
setAttributes
(
List
<
Variable
>
attributes
)
{
this
.
attributes
=
attributes
;
}
}
The editor recognizes a variable definition automatically and provides following interface to define variables (the last property
attributes
):
Expression edit helper
â
Sometimes the bean defines property that expects expressions. Proving some predefined expressions will be convenient for the user. The annotation PresetExpressions serves this purpose. For example:
public
class
PluinSetting
{
.
.
.
private
String
runCondition
;
.
.
.
@Editable
(
order
=
600
,
name
=
"Condition to Run"
)
@Expressions
(
{
"always run"
,
"true"
,
"do not run"
,
"false"
}
)
public
String
getRunCondition
(
)
{
return
runCondition
;
}
public
void
setRunCondition
(
String
runCondition
)
{
this
.
runCondition
=
runCondition
;
}
}
The generated user interface will be:
As you can see, the preset values provided
by @PresetExpressions
appears as a menu next to the input box. Menu items are presented with meaningful text, and selecting these menu items will set corresponding expression in the input box.
Sometimes the expressions cannot be hard-coded inside the annotation, if we want to provide expressions generated dynamically at runtime, for example an input box for users to enter a valid node address in the build grid. In this case, the
@ExpressionProvider
annotation can be used as follows:
public
class
PluginSetting
{
.
.
.
private
String
runNode
;
.
.
.
@Editable
(
order
=
700
,
name
=
"Node Address to Run"
)
@ExpressionProvider
(
"getAvailableNodes"
)
public
String
getRunNode
(
)
{
return
runNode
;
}
public
void
setRunNode
(
String
runNode
)
{
this
.
runNode
=
runNode
;
}
private
Map
<
String
,
String
>
getAvailableNodes
(
)
{
Map
<
String
,
String
>
availableNodes
=
new
LinkedHashMap
<
String
,
String
>
(
)
;
Collection
<
BuildGridNode
>
allNodes
=
Quickbuild
.
getInstance
(
BuildGrid
.
class
)
.
getAllNodes
(
)
;
for
(
BuildGridNode
node
:
allNodes
)
{
availableNodes
.
put
(
"node '"
+
node
.
getAddress
(
)
+
"'"
,
node
.
getAddress
(
)
)
;
}
return
availableNodes
;
}
}
As the code demonstrates, the
@ExpressionProvider
annotation specifies a method in the bean, which QuickBuild can call to get the expressions associated with the menu and the generated user interface looks as follows:
Input validation
â
Validate single property
You may specify validation annotation(s) to the properties to put restraint on values of these properties. For example:
@Editable
(
order
=
200
,
description
=
"Specify the faith"
)
@NotNull
public
FaithType
getFaith
(
)
{
Return
faith
;
}
@Editable
(
order
=
500
)
@Range
(
0
,
100
)
public
int
getWorkingYears
(
)
{
return
workingYears
;
}
The validation annotations are the annotation validations defined in
Hibernate validation framework
.
Besides
Hibernate
based validation, QuickBuild also has a facility to validate properties mutually through the
Validatable
interface.
Validate multiple properties all together
Enable scripting support
â
Last updated
on
Oct 28, 2024

================================================================================

Title: Use Version Stored in Maven POM
URL: https://wiki.pmease.com/display/QB14/Use+Version+Stored+in+Maven+POM
Breadcrumb:  > Build Setup Tutorials > Control Build Versions

Build Setup Tutorials
Control Build Versions
Use Version Stored in Maven POM
Version: QB14
On this page
Use Version Stored in Maven POM
Situation
â
When run a Maven build, instruct QuickBuild to use version stored in POM.
Demonstration
â
Run the
demo configuration
. At start of the build, the version is taking from
next build version
of the configuration, however when the maven build step finishes, build version will be set to
1.1-SNAPSHOT
, which is the same as stored in POM.
Resolution
â
Check
step definition of the demo configuration
, the
maven build
step is defined with
sync build version
option checked. This tells QuickBuild to sync build version to the version stored in POM when this step finishes.
Last updated
on
Oct 23, 2024

================================================================================

Title: Read Version from File
URL: https://wiki.pmease.com/display/QB14/Read+Version+from+File
Breadcrumb:  > Build Setup Tutorials > Control Build Versions

Build Setup Tutorials
Control Build Versions
Read Version from File
Version: QB14
On this page
Read Version from File
Situation
â
Control build version with a text file stored in SCM.
Demonstration
â
Run the
demo configuration
.
Navigate to
workspace area of the configuration
and check content of version.txt. Version of the newly generated build will remain the same as content of this file.
Resolution
â
Check
general setting of the demo configuration
, the next version is defined as below:
$
{
groovy
:
import
com
.
pmease
.
quickbuild
.
util
.
FileUtils
FileUtils
.
createDir
(
configuration
.
workspaceDir
)
def repo
=
repositories
.
get
(
"repo"
)
repo
.
takeSnapshot
(
)
return
repo
.
sourceViewSupport
.
readSourceAsString
(
"build/version.txt"
)
}
This tells QuickBuild to read content of file
/demos/componentA/trunk/version.txt
from SCM repository and return it as version of next build.
Last updated
on
Oct 23, 2024

================================================================================

Title: Control Release Candidate and Release Version
URL: https://wiki.pmease.com/display/QB14/Control+Release+Candidate+and+Release+Version
Breadcrumb:  > Build Setup Tutorials > Control Build Versions

Build Setup Tutorials
Control Build Versions
Control Release Candidate and Release Version
Version: QB14
On this page
Control Release Candidate and Release Version
Situation
â
Assume we have:
A release candidate configuration which is used to build release candidates of your software.
A release configuration which is used to release your software.
Now we want to control build version of these two configurations so that:
Version of builds in release candiciate configuration is composed of the release part and the candidate part, with the release part using the version to be released, and candiciate part increasing automatically for each build. For example, we are going to release
1.0
, and candidate builds should use versions in form of:
1.0-rc1
,
1.0-rc2
,
1.0-rc3
, ...
When a release candidate build is promoted as release build, the release version should be automatically increased, and the candidate version should be reset to
1
. For example, after
1.0
is released, new builds in release candidate configuration should use versions in form of:
1.1-rc1
,
1.1-rc2
,
1.1-rc3
, ...
Demonstration
â
Click here
and press the run button to generate new release candidate builds. The
rc
part of the build version will be automatically increased.
After the build finishes, switch to
latest release candidate build
, and click the promote button to promote a release candidate build as release build. A new release build will be generated in the
release configuration
.
Return back to
release candidate configuration
and run it to generate a new build. The
release
part of the new build version will take value of next release number, and the
rc
part will reset to
1
.
Resolution
â
Define three variables in
variable setting of project level configuration
, respectively:
rc
This variable is used control
rc
part of release candidate builds.
major
This variable is used to control major part of the release version.
minor
This variable is used to control minor part of the release version.
Define next build version in
general setting of release candidate configuration
like below:
$
{
vars
.
get
(
"major"
)
}
.
$
{
vars
.
get
(
"minor"
)
}
-
rc$
{
vars
.
get
(
"rc"
)
.
increase
(
)
}
This tells QuickBuild to use current value of variable
major
,
minor
, and
rc
to construct release candidate build version, and increase the
rc
variable by one after usage.
Define next build version in
general setting of release configuration
like below:
$
{
vars
.
get
(
"major"
)
}
.
$
{
vars
.
get
(
"minor"
)
.
increase
(
)
}
This tells QuickBuild to use current value of variable
major
and
minor
to construct release build version.
Configure a step in
step setting of release configuration
to execute below script:
vars
.
get
(
"rc"
)
.
setValue
(
1
)
This script is executed by the master step in the demo site for simpliticy reasons, and it tells QuickBuild to reset
rc
variable to
1
when a new release is generated.
Last updated
on
Oct 23, 2024

================================================================================

Title: Include SCM Revision in Build Version
URL: https://wiki.pmease.com/display/QB14/Include+SCM+Revision+in+Build+Version
Breadcrumb:  > Build Setup Tutorials > Control Build Versions

Build Setup Tutorials
Control Build Versions
Include SCM Revision in Build Version
Version: QB14
On this page
Include SCM Revision in Build Version
Situation
â
Include SCM revision of the source code used for checkout into version of generated build.
Demonstration
â
Visit the
demo configuration
, and trigger a build. Version of the newly generated build will include the SCM revision corresponding to the code being checked out.
Resolution
â
Visit
general setting of the demo configuration
. The property
next build version
is defined as:
4.2
.
$
{
vars
.
get
(
"patch"
)
.
increase
(
)
}
-
commit
-
$
{
repositories
.
get
(
"commons-collections"
)
.
revision
.
value
.
substring
(
0
,
6
)
}
There are two expressions included in the version:
The first expression increases the patch part of the version.
The second expression retrieves current revision of repository
commons-collections
, which is used to check out source code for the build.
Last updated
on
Oct 23, 2024

================================================================================

Title: Prompt for Build Version when Manually Triggered
URL: https://wiki.pmease.com/display/QB14/Prompt+for+Build+Version+when+Manually+Triggered
Breadcrumb:  > Build Setup Tutorials > Control Build Versions

Build Setup Tutorials
Control Build Versions
Prompt for Build Version when Manually Triggered
Version: QB14
On this page
Prompt for Build Version when Manually Triggered
Situation
â
Prompt for build version when a configuration is manually triggered.
Demonstration
â
Click here
and press the run button, QuickBuild will present a build option window asking for version of the build. Click "OK" to continue, and the specified value will be used as version of the newly generated build (please wait a short while before the new build appears).
Resolution
â
Edit
general setting of the release configuration
:
Define next build version as
${vars.get("version")}
This tells QuickBuild to use value of variable
version
as version of the new build. Please note that the variable name can be arbitrary as long as the same name is defined below.
Add a variable named
version
and specify the prompt setting as
prompt as text input
Last updated
on
Oct 23, 2024

================================================================================

Title: Use Same Version When Promote Builds
URL: https://wiki.pmease.com/display/QB14/Use+Same+Version+When+Promote+Builds
Breadcrumb:  > Build Setup Tutorials > Control Build Versions

Build Setup Tutorials
Control Build Versions
Use Same Version When Promote Builds
Version: QB14
On this page
Use Same Version When Promote Builds
Situation
â
During a promotion process, make sure that the new build has the same version as the source build.
Demonstration
â
Visit
latest build of QA configuration
, and click the promote button.
Wait a short while, and refresh the page, a new build will be generated as result of the promotion, and the version will be the same as the source build.
Resolution
â
Visit
promotion setting of QA configuration
. A variable named
version
is defined for promotion
release
with the value
${build.version}
. This tells QuickBuild to pass variable
version
to the release configuration using version of current build during the promotion process.
Visit
general setting of Release configuration
. The property
next build version
is defined as
${vars.get("version")}
. This tells QuickBuild to use value of variable as version of the build being generated during promotion process.
info
The variable name does not need to be
version
. You may use any other variable name as long as they are consistent in step 1 and step 2.
Last updated
on
Oct 23, 2024

================================================================================

Title: Set up Builds for Multiple Branches
URL: https://wiki.pmease.com/display/QB14/Set+up+Builds+for+Multiple+Branches
Breadcrumb:  > Build Setup Tutorials > Inherit and Override

Build Setup Tutorials
Inherit and Override
Set up Builds for Multiple Branches
Version: QB14
On this page
Set up Builds for Multiple Branches
Situation
â
Set up multiple configurations to build multiple branches of a project. Common settings of these branch configurations such as SCM and step definitions should be shared to reduce build setup work and maintenance headache.
Resolution
â
Navigate to the
demo project
. It has three child configurations:
Configuration
1.x
builds against the 1.0 branch.
Configuration
2.x
builds against the 2.0 branch.
Configuration
3.x
builds against the 3.0 branch.
All these child configurations inherit repository and step definitions from the parent configuration. However the property
Url to Checkout
of
repository definition in parent configuration
is parameterized as below:
https
:
/
/
svn
.
pmease
.
com
/
demos
/
componentA
/
branches
/
$
{
vars
.
get
(
"branch"
)
}
This tells QuickBuild to use value of variable
branch
to construct the url at checkout time. This variable is defined in each child configuration to reflect the real branch to build against. For example, for configuration
1.x
, the branch variable is defined as
1.0
at
variable setting of the configuration
.
With this setup, common settings of these branches are maintained at the parent configuration, while different branch configurations can still build against different branches. Modifications of the common settings will affect all child branch configurations.
Last updated
on
Oct 23, 2024

================================================================================

Title: Build Multi-platform Projects
URL: https://wiki.pmease.com/display/QB14/Build+Multi-platform+Projects
Breadcrumb:  > Build Setup Tutorials > Distributed Builds

Build Setup Tutorials
Distributed Builds
Build Multi-platform Projects
Version: QB14
On this page
Build Multi-platform Projects
Scenario
â
Setup build automation for projects that consist of components which need to be compiled and/or tested on different platforms.
Solution
â
This scenario can be solved in QuickBuild by running different component build steps on different agents, and then transferring files between agents by declaring file requirements for appropriate steps. We will use an example to explain the idea. Let's assume that we need to build a project with
component1
and
component2
.
component1
needs to be compiled on Linux platform with gcc installed, while
component2
needs to be compiled on Windows platform with Visual Studio installed. We will use a following step layout:
node match condition of each step is designated as follows:
â
master
: node.isAgent()
This tells the master step to run on an agent node.
checkout
: node==current.parent.node
This tells the checkout step to run on the same agent as the master step.
compile component1
: (node.getAttribute("os.name").startsWith("Linux") || node.getAttribute("os.name").startsWith("LINUX")) && node.hasAttribute("gcc")
This tells the step
compile component1
to run on a Linux node with attribute
gcc
defined. The system attribute
os.name
is used to determine operating system of the node, and
gcc
is an user attribute which is defined to point to gcc installation path. Refer to [node attributes](Working with Build Grid.html#WorkingwithBuildGrid-nodeattributes) on how to examine system attributes and how to define the user attributes for a node.
compile component2
: node.getAttribute("os.name").startsWith("Windows") && node.hasAttribute("visualstudio")
This tells the step
compile component2
to run on a Windows node with attribute
visualstudio
defined. The system attribute
os.name
is used to determine operating system of the node, and
visualstudio
is an user attribute which is defined to point to Visual Studio installation path. Refer to [node attributes](Working with Build Grid.html#WorkingwithBuildGrid-nodeattributes)on how to examine system attributes and how to define user attributes for a node.
package
: node==current.parent.node
This tells the package step to run on the same agent as the master step.
publish
: node==current.parent.node
This tells the publish step to run on the same agent as the master step.
File requirements are specified like below:
â
for step
compile component1
for step
compile component2
We assume that:
component1-src
is checked out by the step
checkout
to compile compnent1, and the compilation output is placed in the directory
component1-binary
component2-src
is checked out by the step
checkout
to compile compnent2, and the compilation output is placed in the directory
component2-binary
Last updated
on
Oct 28, 2024

================================================================================

Title: Reduce Server Load
URL: https://wiki.pmease.com/display/QB14/Reduce+Server+Load
Breadcrumb:  > Build Setup Tutorials > Distributed Builds

Build Setup Tutorials
Distributed Builds
Reduce Server Load
Version: QB14
On this page
Reduce Server Load
Scenario
â
In a continuous integration environment, it is important that builds can run as frequently as possible. A server could be configured with dozens of projects, with each project having several branches, with each branch having dozens of developers committing their code and requesting verification builds. This could impose a heavy load on the build server if all builds are executed on the single machine.
Solution
â
You can delegate build jobs from server to agents by running build steps only on the agent nodes. Let's take a typical build process for example, it has four steps,
checkout
,
build
,
publish
, and a
default
step to execute the other steps sequentially. By default, all three steps have property
node match condition
being set to following value:
current
.
parent
==
null
?
node
.
isServer
(
)
:
(
node
==
current
.
parent
.
node
)
This means that if the step does not have parent (in the case of the master step), it should be run on the server node; otherwise, it should be running on the same node as its parent node. The effect is that all steps are by default executed on the server node. To make all steps running on the agent nodes, just set the
node match condition
of the
master
step to be:
node
.
isAgent
(
)
Other steps remain unchanged. When build starts, the master step will try to look for a compatible node available for execution. In this case, all agents are compatible, and one of the agents will be selected based on a load balancing algorithm. All other steps will use the same agent as the
node match condition
tells them to use the same node as their parent step.
In a real environment, it is possible that not all agent nodes are compatible with the build, and you can adjust the
node match condition
of the master step to filter off incompatible nodes. For example by using the expression
node.isAgent() && (node.getAttribute("os.name").startsWith("Linux") || node.getAttribute("os.name").startsWith("LINUX"))
, which only accepts Linux agents.
Last updated
on
Oct 23, 2024

================================================================================

Title: Speed up Build Process
URL: https://wiki.pmease.com/display/QB14/Speed+up+Build+Process
Breadcrumb:  > Build Setup Tutorials > Distributed Builds

Build Setup Tutorials
Distributed Builds
Speed up Build Process
Version: QB14
On this page
Speed up Build Process
Scenario
â
In a continuous integration environment, it is very important that a build can complete as quick as possible to provide feedback to developers as early as possible after they submit a build verification request.
Solution
â
You can execute CPU intensive build steps in parallel, and run them on different agent nodes. The results from different nodes can be collected back to server for further processing. Let's assume a product comprises of component1 and component2, and both of them take a long time to build. You can build component1 and component2 in parallel as follows:
The
node match condition
property for these steps can be specified as follows:
master:
node.isAgent()
this tells the master step to run only on agent node (in order to
reduce server load
)
checkout:
node==current.parent.node
this tells the step
checkout
to run on the same agent as the master step
build components:
node==current.parent.node
this tells the step
build components
to run on the same agent as the master step
build component1
: node.isAgent()
this tells the step
build component1
to run on agent node selected by load balancing algorithm
build component2
: node.isAgent()
this tells the step
build component2
to run on agent node selected by load balancing algorithm
package
: node==current.parent.node
this tells the step
package
to run on the same agent as the master step
publish:
node==current.parent.node
this tells the step
publish
to run on the same agent as the master step
The idea here is that step
build component1
and
build component2
are designed to run on the least loaded agent nodes, while all other steps are running on the same agent node.
There are still a few problems. The nodes running step
build component1
and
build component2
are not guaranteed to execute on the same node that executes the step
checkout
. How can we make sure that the necessary files are available when component1 and component2 starts to build? The same issue exists when running step
package
, how can we make sure that build results of component1 and component2 are available for packaging if the build steps and package step do not run on the same agent?
This is solved by specifying input files and output files for steps. Let's assume that the agent node to run master step is
agent1
, and the
checkout
step retrieves files into two folders into workspace that resides on
agent1
:
component1-src
, and
component2-src
. Folder
component1-src
contains all files used to build component1, while folder
component2-src
contains all files used to build component2. Build results of comonent1 are saved to folder
component1-binary
, and build results of component2 are saved to folder
component2-binary
. Now we can specify following file requirements:
for step
build component1
Specified input files will be transfered from workspace of the node running parent step to workspace of the node running current step. In this case, all source files of component1 will be transfered from
agent1
to the node running step
build component1
. If the same nodes are used for parent and child step, no file transfer will be done.
Specified out files will be transfered from workspace of the node running current step to workspace of the node running parent step. In this case, all generated binary files by step
build component1
will be put back into workspace of
agent1
. In case of same nodes are used for parent and child step, no file transfer will be done.
for step
build component2
Refer to input files and out files explanation of step
build component1
above.
Last updated
on
Oct 28, 2024

================================================================================

Title: Test on All Applicable Agents
URL: https://wiki.pmease.com/display/QB14/Test+on+All+Applicable+Agents
Breadcrumb:  > Build Setup Tutorials > Distributed Builds

Build Setup Tutorials
Distributed Builds
Test on All Applicable Agents
Version: QB14
On this page
Test on All Applicable Agents
Situation
â
Send built artifacts to all Linux x86 32bit agents for testing. After test finishes, publish test reports on these agents to QuickBuild server.
Demonstration
â
To demonstrate this, two agents are set up at the demo site, with below grid user attributes:
arch
=
linux
-
x86
-
32
Our purpose is to run tests on all agents with this attribute. In our demonstration, agents matching this criteria are
plex.pmease.com:8811
and
plex.pmease.com:8812
.
Switch to the
test configuration
, and hit the run button.
Change to
overview page of latest build
after build finishes, and you will see two set of test reports are published, one is for agent
plex.pmease.com:8811
, and another is for agent
plex.pmease.com:8812
.
The
step status page of latest build
also indicates that tests have been run on these two agents.
Resolution
â
Switch to
steps page of the test configuration
:
The
checkout
step pulls project source code out of SCM.
The
compile
step compiles the project to produce class files to be tested
The
test on all applicable agents
step is a parallel composition step, and it will run all contained steps concurrently. It will also repeat child steps in a concurrent way if child steps are configured with repeating params.
The
test on agent
step is a sequential composition step:
This step is configured with a repeat param. The param name is set as
agent
, and param values is set as addresses of all build agents with attribute
arch
equals to
linux-x86-32
.
This step is set to run on grid node with address equals to param
agent
. This is done through property
node selection
.
This step is configured to fetch necessary test files from parent node (the node running parent step) to current node (the selected agent) through the property
fetch input files
.
The above settings effectively makes the
test on agent
step running on all linux-x86-32 agents, and these agents will run this step concurrently since it is contained in a parallel composition step.
The step
test on agent
contains two child steps, respectively
run test
and
publish test reports
. Since step
test on agent
is set to run on all applicable agents, these two child steps will also run on those agents to do the actual work. Specifically, the
publish test reports
step uses
${params.get("agent").replace(':', '
')}
as report set name to group test reports by agents (character ':' is replaced with '' since this character is not allowed in report set name).
Last updated
on
Oct 23, 2024

================================================================================

Title: Exclusive Deployment
URL: https://wiki.pmease.com/display/QB14/Exclusive+Deployment
Breadcrumb:  > Build Setup Tutorials > Resource Management

Build Setup Tutorials
Resource Management
Exclusive Deployment
Version: QB14
On this page
Exclusive Deployment
Situation
â
Assume there are only one machine for deployment. Set up the build so that only one deployment step can run on the deployment machine even if multiple builds try to deploy.
Demonstration
â
Visit the
demo project
, and hit the run button to trigger all children configurations concurrently.
Check latest build of
child project1
and
child project2
respectively: only
deploy
step of the one build will run, another will be put into wait state until current running deploy step finishes.
Resolution
â
Switch to
resources tab
and a resource named "Deployment Environment" is defined with only one agent providing the resource.
Switch to steps definition of
child project1
and
child project2
, and check definition of step
deploy
. The node selection property is set to run on the node with resource
Deployment Environment
.
Last updated
on
Oct 23, 2024

================================================================================

Title: Set up Static Dependency
URL: https://wiki.pmease.com/display/QB14/Set+up+Static+Dependency
Breadcrumb:  > Build Setup Tutorials > Build Dependencies

Build Setup Tutorials
Build Dependencies
Set up Static Dependency
Version: QB14
On this page
Set up Static Dependency
Situation
â
ProductA and componentA build independently as different projects. During build process of productA, build result of specified version of componentA should be retrieved and used. This specified version will not change even if componentA has a new version.
Demonstration
â
Visit
latest build of productA
, and hover mouse over the dependencies link in the build summary section, and you will see that current build depends on version
1.0.10
of componentA.
Switch to
componentA
, and click the run button to generate a new version of componentA.
Switch back to
productA
, and click the run button to build productA. When build finishes, examine dependency of the new build again, and it is still using version
1.0.10
of componentA.
Resolution
â
Visit
repository setting of productA
. There are two repositories defined:
componentA
and
productA
. Repository
productA
is used to retrieve source code of productA from SCM, while repository
componentA
is used to retrieve build result of componentA. Repository
componentA
is defined to retrieve all published jars from version
1.0.10
of componentA.
Visit
step setting of productA
. Two checkout steps are defined to checkout repository
productA
and
componentA
respectively.
Last updated
on
Oct 23, 2024

================================================================================

Title: Set up Passive Dependency
URL: https://wiki.pmease.com/display/QB14/Set+up+Passive+Dependency
Breadcrumb:  > Build Setup Tutorials > Build Dependencies

Build Setup Tutorials
Build Dependencies
Set up Passive Dependency
Version: QB14
On this page
Set up Passive Dependency
Situation
â
ComponentA and productA build independently as different projects. During build process of ProductA , build result of latest version of componentA should be retrieved and used.
Demonstration
â
Visit
latest build of productA
. Hover mouse over the dependencies link in the build summary section, and you will see that current build of productA depends on most recent version of componentA.
Switch to
componentA
, and click the run button to generate a new version of componentA.
Switch back to
productA
, and click the run button to build productA. When the new build finishes, examine its dependency again, and it is now dependent on the newly generated version of componentA.
Resolution
â
Visit
repository setting of productA
. There are two repositories defined:
componentA
and
productA
. Repository
productA
is used to retrieve source code of productA from SCM, while repository
componentA
is used to retrieve build result of componentA. Repository
componentA
is defined to retrieve all published jars from latest build of componentA.
Visit
step setting of productA
. Two checkout steps are defined to checkout repository
productA
and
componentA
respectively.
Last updated
on
Oct 23, 2024

================================================================================

Title: Set up Active Dependency
URL: https://wiki.pmease.com/display/QB14/Set+up+Active+Dependency
Breadcrumb:  > Build Setup Tutorials > Build Dependencies

Build Setup Tutorials
Build Dependencies
Set up Active Dependency
Version: QB14
On this page
Set up Active Dependency
Situation
â
ComponentA and productA build independently as different projects. During build process of productA, componentA will be checked for changes: if there are new changes in componentA, a new componentA version will be generated, and the new build result will be used to construct productA; otherwise, build result of latest version of componentA will be used instead.
Demonstration
â
To simulate new changes in componentA,
build condition
of the
demo componentA configuration
is set to
always build
so that a new componentA version will be generated whenever it is triggered.
Visit
latest build of productA
. Hover mouse over the dependencies link in the build summary section, and you will see that current build of productA depends on most recent version of componentA.
Click the run button to build productA. A new version will be generated in
componentA
besides the new version in
productA
. When new build of productA finishes, examine its dependency again, and it is now dependent on the newly generated version of componentA.
Resolution
â
Visit
repository setting of productA
. There are two repositories defined:
componentA
and
productA
. Repository
productA
is used to retrieve source code of productA from SCM, while repository
componentA
is used to retrieve build result of componentA. Repository
componentA
is defined to retrieve all published jars from componentA, with the build defined as
latest build (generate new if necessary)
.
Visit
step setting of productA
. Two checkout steps are defined to checkout repository
productA
and
componentA
respectively.
Last updated
on
Oct 23, 2024

================================================================================

Title: Auto-Trigger Dependent Maven Builds
URL: https://wiki.pmease.com/display/QB14/Auto-Trigger+Dependent+Maven+Builds
Breadcrumb:  > Build Setup Tutorials > Build Dependencies

Build Setup Tutorials
Build Dependencies
Auto-Trigger Dependent Maven Builds
Version: QB14
On this page
Auto-Trigger Dependent Maven Builds
Situation
â
When a new snapshot version of a Maven library is generated, triggers all configurations using this snapshot library automatically.
Demonstration
â
In the demo set up, configuration
Product1
and
Product2
are maven configurations whose POM declared dependency to the library artifact which is built by configuration
Library
.
Run the
Library
configuration to generate a new snapshot of the library artifact.
After the build finishes, new build of
Product1
and
Product2
will be fired automatically to do the verification.
Resolution
â
Check maven plugin setting in page
Administration/Plugin Management
, and make sure that the option
Resolve Effective POM
has been enabled.
Visit
general setting of the Library configuration
, the
Trigger Dependents
option is checked.
Visit
step definition of the Library configuration
, the
maven build
step simply calls Maven to build the library artifact. Maven goal does not matter here.
Visit
step definition of the Product1 configuration
, the
maven build
step simply calls Maven to build product1. POM file of product1 (brough to workspace by checkout step) contains dependency declaration to library artifact. Maven goal does not matter here.
Visit
step definition of the Product2 configuration
, the
maven build
step simply calls Maven to build product2. POM file of product2 (brough to workspace by checkout step) contains dependency declaration to library artifact. Maven goal does not matter here.
Last updated
on
Oct 23, 2024

================================================================================

Title: Plugin Tutorials
URL: https://wiki.pmease.com/display/QB14/Plugin+Tutorials
Breadcrumb: 

Version: QB14
Plugin Tutorials
A set of tutorials are created here demonstrating how to write a plugin. Please go through them one by one and final version of the example plugin used in the tutorial can be found
here
.
Set up Plugin Development Workspace
Write Your First Plugin
Working with Plugin UI
Working with Plugin Settings
Plugin Data Storage
Migrate Plugin Data
Last updated
on
Oct 23, 2024

================================================================================

Title: Generate Release Build from the Source Used by QA Build
URL: https://wiki.pmease.com/display/QB14/Generate+Release+Build+from+the+Source+Used+by+QA+Build
Breadcrumb:  > Build Setup Tutorials > Promote Builds

Build Setup Tutorials
Promote Builds
Generate Release Build from the Source Used by QA Build
Version: QB14
On this page
Generate Release Build from the Source Used by QA Build
Scenario
â
Promote a QA build as release build. Instead of simply copying the QA artifacts, the release build artifacts should be generated by building from the source used by the QA build.
Demonstration
â
Visit
latest build of QA configuration
. A jar file is published as artifacts.
Click the promote button, and refresh the page after a while, a promotion arrow will appear at right side of the QA build version pointing to the newly generated release build.
Click the newly generated release build. When the build finishes, you will see that a new jar file is generated in the release build.
Resolution
â
Edit
promotion setting of the QA configuration
and define a promotion. The property "destination configuration" should be defined as the release configuration. We do not need to define property "files to promote" since we will not use QA artifacts, instead, we will build artifacts directly from source in the release build.
Most steps of the QA and release configuration are the same, and we can define them
at project level
to avoid duplication. Pay attention to the label step, we changed the step condition so that it only executes when release configuration is running.
info
Please make sure that the same repositories are used in QA and release configuration. This makes sure that all repository related steps in the release configuration operate against the repository revision used in the QA build. In our example, we define the repository directly
at the project level
and it is inherited by both QA and release configurations.
Optionally you may set up the release configuration to disallow direct triggering, so that new releases can only be promoted from QA build. This can be done by editing
general setting of the release configuration
and set the
Run Mode
property as
DISABLED
.
Last updated
on
Oct 23, 2024

================================================================================

Title: Generate Release Build using Artifacts of QA Build
URL: https://wiki.pmease.com/display/QB14/Generate+Release+Build+using+Artifacts+of+QA+Build
Breadcrumb:  > Build Setup Tutorials > Promote Builds

Build Setup Tutorials
Promote Builds
Generate Release Build using Artifacts of QA Build
Version: QB14
On this page
Generate Release Build using Artifacts of QA Build
Scenario
â
Promote build from QA configuration to release configuration. The release build should use the same artifacts of the QA build being promoted.
Demonstration
â
Visit
latest build of QA configuration
. A jar file is published as artifacts.
Click the promote button, and refresh the page after a while, a promotion arrow will appear at right side of the QA build version pointing to the newly generated release build.
Click the newly generated release build. When the build finishes, you will see that the jar file is now copied from QA build and renamed to reflect the release version.
Resolution
â
Edit
promotion setting of the QA configuration
and define a promotion, with property
destination configuration
defined as release configuration, and property
files to promote
defined as desired files need to be promoted. All promoted files will be copied to workspace of node running the master step of destination configuration.
Edit
step setting of the release configuration
to define desired steps need to be executed during the release process. In this demo, we add steps to change name of promoted artifacts, publish promoted artifacts, and at last create label in the SCM.
info
Please make sure that the same repositories are used in QA and release configuration. This makes sure that all repository related steps in the release configuration operate against the repository revision used in the QA build. In our example, we define the repository directly
at the project level
and it is inherited by both QA and release configurations.
Optionally you may set up the release configuration to disallow direct triggering, so that new releases can only be promoted from QA build. This can be done by editing
general setting of the release configuration
and set the
Run Mode
property as
DISABLED
.
Last updated
on
Oct 23, 2024

================================================================================

Title: Authenticate through Active Directory
URL: https://wiki.pmease.com/display/QB14/Authenticate+through+Active+Directory
Breadcrumb:  > Build Setup Tutorials > LDAP Authentication

Build Setup Tutorials
LDAP Authentication
Authenticate through Active Directory
Version: QB14
On this page
Authenticate through Active Directory
Scenario
â
Authenticate users through Active Directory and retrieve associated groups to determine user permission. We assume that:
Domain of the Active Directory is example.com.
This Active Directory can be accessed through address
ldap://ad.example.com:389
Users and groups are managed under LDAP entry
cn=Users,dc=example,dc=com
.
User
quickbuild
is used to search user and group information in this Active Directory.
Resolution
â
For each Active Directory group you want to assign QuickBuild permissions, create a group with the same name in QuickBuild, and set proper permissions.
Login as Administrator, switch to menu
Authentication->Security Settings
, and add an authenticator of
Active Directory
type like below:
Your users should now be able to login to QuickBuild and access to QuickBuild functionalities will be controlled using the group information from Active Directory.
Last updated
on
Oct 28, 2024

================================================================================

Title: Authenticate through Fedora Directory Server
URL: https://wiki.pmease.com/display/QB14/Authenticate+through+Fedora+Directory+Server
Breadcrumb:  > Build Setup Tutorials > LDAP Authentication

Build Setup Tutorials
LDAP Authentication
Authenticate through Fedora Directory Server
Version: QB14
On this page
Authenticate through Fedora Directory Server
Scenario
â
Authenticate users through Fedora directory server and retrieve associated groups to determine user permission. We assume that:
This directory server can be accessed through address
ldaps://ds.example.com:636
Users are managed under LDAP entry
ou=people,dc=example,dc=com
.
Groups are managed under LDAP entry
ou=groups,dc=example,dc=com
.
Resolution
â
For each LDAP group you want to assign QuickBuild permissions, create a group with the same name in QuickBuild, and set proper permissions.
Login as Administrator, switch to menu
Authentication->Security Settings
, and add an authenticator of LDAP type like below:
Your users should now be able to login to QuickBuild and access to QuickBuild functionalities will be controlled using the group information from the fedora directory server.
info
To browse directory server user and group information in a LDAP friendly way (that is, be able to browse DN and various attribute names/values), you may need to install a LDAP client (such as
Apache Directory Studio
), and connect it to your directory server using LDAP url, user and password information listed above.
Last updated
on
Oct 28, 2024

================================================================================

Title: Single Sign-On with Azure AD (SAML)
URL: https://wiki.pmease.com/display/QB14/Single+Sign-On+with+Azure+AD++SAML+
Breadcrumb:  > Build Setup Tutorials > Single Sign-On

Build Setup Tutorials
Single Sign-On
Single Sign-On with Azure AD (SAML)
Version: QB14
On this page
Single Sign-On with Azure AD (SAML)
Purpose
â
This tutorial demonstrates how to set up QuickBuild to authenticate via Azure AD using SAML protocol
Assumptions
â
QuickBuild is accessed via
https://build.example.com
Steps
â
Create an application in Azure AD:
Assign users/groups to created application
Open SAML SSO setup page:
Edit basic SAML configuration, change
Identifier
as
https://build.example.com/saml_
, and _Reply URL
as _
https://build.example.com/sso-login_
, and then save the setting:
Edit user attributes and claims to add group claim:
Download and save the Idp meta data:
Login to QuickBuild, navigate to page
Administration/Security Setting
and select
SSO via SAML2
as
SSO Provider
. Paste content of downloaded metadata from above step into field
IdP Metadata
Run below commands to generate SP private key and self-signed SP certificate:
openssl req
-
x509
-
nodes
-
days
365
-
newkey rsa
:
4096
-
keyout sp
-
key
.
pem
-
out sp
-
cert
.
crt
openssl pkcs8
-
topk8
-
inform
PEM
-
outform
PEM
-
nocrypt
-
in sp
-
key
.
pem
-
out sp
-
key
-
pkcs8
.
pem
Copy content of file
sp-key-pkcs8.pem
into field
SP Private Key
, and content of file
sp-cert.crt
into field
SP Cert
Continue to specify below fields in SAML setting:
Email Attribute:
https://schemas.xmlsoap.org/ws/2005/05/identity/claims/emailaddress
Full Name Attribute:
https://schemas.microsoft.com/identity/claims/displayname
Group Names Attribute:
https://schemas.microsoft.com/ws/2008/06/identity/claims/groups
Specify a default group if necessary and save the setting
Navigate to
Group Management
page and define groups with same name as we've defined in Azure AD, and assign appropriate permissions
Navigate to page
Administration/System Setting
, and make sure property
Url to Access QuickBuild
is specified as _
https://build.example.com_
Now logout and visit _
https://build.example.com_
(make sure to visit the url specified in system setting), the sign in page should display a SSO login button
Click this button and you will be taken to Azure AD for authentication. If authenticated successfully, you will be logged into QuickBuild.
warning
You can still login to QuickBuild with normal user/password without clicking the SSO button
Last updated
on
Oct 28, 2024

================================================================================

Title: Single Sign-On with Okta (SAML)
URL: https://wiki.pmease.com/display/QB14/Single+Sign-On+with+Okta++SAML+
Breadcrumb:  > Build Setup Tutorials > Single Sign-On

Build Setup Tutorials
Single Sign-On
Single Sign-On with Okta (SAML)
Version: QB14
On this page
Single Sign-On with Okta (SAML)
Purpose
â
This tutorial demonstrates how to set up QuickBuild to authenticate via
Okta
using SAML protocol
Assumptions
â
QuickBuild is accessed via
https://build.example.com
Steps
â
Login to your organization account at Okta, and switch to Classic UI from
Developer Console
Add appropriate groups for QuickBuild, for instance qb.developers and qb.testers, and add your current Okta account into these groups
Create new application in Okta, with platform being
Web
and sign in method being
SAML 2.0
:
Fill in general setting of the application, and click next:
Fill in SAML settings as below and click next:
Select appropriate options in feedback page and click finish:
Okta will bring you to the
Sign On
tab after clicking finish button above. From here, click the
Identity Provider Metadata
link to show the content:
Copy the metadata XML into clipboard
Navigate to
Assignments
tab and make sure you've been assigned to the application:
Now login to QuickBuild, navigate to page
Administration/Security Setting
and select
SSO via SAML2
as
SSO Provider
. Paste the copied metadata from above step into field
IdP Metadata
Run below commands to generate SP private key and self-signed SP certificate:
openssl req
-
x509
-
nodes
-
days
365
-
newkey rsa
:
4096
-
keyout sp
-
key
.
pem
-
out sp
-
cert
.
crt
openssl pkcs8
-
topk8
-
inform
PEM
-
outform
PEM
-
nocrypt
-
in sp
-
key
.
pem
-
out sp
-
key
-
pkcs8
.
pem
Copy content of file
sp-key-pkcs8.pem
into field
SP Private Key
, and content of file
sp-cert.crt
into field
SP Cert
warning
For Okta SAML integration, SP cert is actually not used as it does not verify authentication request signature. However other SAML integrations may require you to upload the SP cert to verify the signature.
Specify
email
for field
Email Attribute
, and
group
for
Group Names Attribute
. Attributes specified here should be the same as you've specified at Okta side
Specify a default group if necessary and save the setting
Navigate to
Group Management
page and define groups with same name as we've defined in Okta, and assign appropriate permissions:
Navigate to page
Administration/System Setting
, and make sure property
Url to Access QuickBuild
is specified as _
https://build.example.com_
Now logout and visit _
https://build.example.com_
(make sure to visit the url specified in system setting), the sign in page should display a SSO login button
Click this button and you will be taken to Okta site for authentication. If authenticated successfully, you will be logged into QuickBuild.
warning
You can still login to QuickBuild with normal user/password without clicking the SSO button
Last updated
on
Oct 28, 2024

================================================================================

Title: Single Sign-On with Okta (OpenID)
URL: https://wiki.pmease.com/display/QB14/Single+Sign-On+with+Okta++OpenID+
Breadcrumb:  > Build Setup Tutorials > Single Sign-On

Build Setup Tutorials
Single Sign-On
Single Sign-On with Okta (OpenID)
Version: QB14
On this page
Single Sign-On with Okta (OpenID)
Purpose
â
This tutorial demonstrates how to set up QuickBuild to authenticate via
Okta
using OpenID protocol
Basic Setup
â
Make sure your QuickBuild instance is publicly accessible, and configure the public server url in system setting:
Login to Okta to add an application integration with sign-in method as OIDC and type as web application
Continue to set up the application and specify sign-in redirect url as below:
For assignment option in this page, just use
Allow everyone in your organization to access
for simplicity purpose
Save the application and copy out the client id and client secret to be used later:
From Okta menu, select Security/Api to display authorization servers. Copy out the issuer url of default server to be used later:
At QuickBuild side, setup SSO via OpenID like below. Copy issuer url, client id and client secret from Okta. Specify
Groups Claim
as
groups
Save the provider, and sign out QuickBuild. Visit QuickBuild again
via the public url
, and then you should be able to login via Okta
Authorize Users Based On Okta Group Membership Information
â
Now we continue to set up Okta to send group membership information so that user can be authorized with appropriate permissions
Visit detail page of the default authorization server we seen before, switch to scopes tab and add a scope of name
groups
with default options:
Switch to claims tab and add a claim of name
groups
to be included in ID token and groups scope like below:
At QuickBuild side, switch to group management page, add necessary Okta groups (same name) and assign appropriate permissions
Now users signed in via Okta will be authorized with permissions available in corresponding groups
Last updated
on
Oct 28, 2024

================================================================================

Title: Single Sign-On with Windows Domain Account (Trusted Http Header)
URL: https://wiki.pmease.com/display/QB14/Single+Sign-On+with+Windows+Domain+Account++Trusted+Http+Header+
Breadcrumb:  > Build Setup Tutorials > Single Sign-On

Build Setup Tutorials
Single Sign-On
Single Sign-On with Windows Domain Account (Trusted Http Header)
Version: QB14
On this page
Single Sign-On with Windows Domain Account (Trusted Http Header)
Purpose
â
This tutorial explains how to set up an environment so that Windows domain user can access QuickBuild without using password.
Assumptions
â
Windows domain is
example.com
Windows domain controller server is Windows 2012 R2, and can be accessed via LDAP protocol:
ldap://dc.example.com:389
QuickBuild server is installed at Ubuntu 3.13.0-40-generic, with DNS name
build.example.com
, and running on port 8810
Steps
â
Login to ubuntu server, and make sure below commands work as expected:
*
$ nslookup build
.
example
.
com
This command should return ip address of the ubuntu server
*
$ nslookup
<
ip address of ubuntu server
>
This command should return
build.example.com
Make sure
build.example.com
is the only host record in your DNS pointing to the ubuntu server, and vice versa for the reverse lookup dns records (PTR). Otherwise, single sign-on may not work for some unknown reason.
Create a domain user
quickbuild
in your domain controller, with following options:
Create another domain user
apache
with same options as above
On domain controller, open powershell as Administrator, and run below command to generate keytab for apache user:
ktpass
-
princ
HTTP
/
build
.
example
.
com
@EXAMPLE.COM
-
mapuser apache
-
crypto
RC4
-
HMAC
-
NT
-
ptype
KRB5_NT_PRINCIPAL
-
pass
<
password of apache user
>
-
out apache
.
keytab
The generated
apache.keytab
will be used later.
Login to ubuntu server to install and configure kerberos client package:
sudo apt
-
get install krb5
-
user
Input
EXAMPLE.COM
when installation procedure asks for default Kerberos realm. After installing Kerberos, modify
/etc/krb5.conf
:
add below under section
[realms]
:
EXAMPLE
.
COM
=
{
kdc
=
dc
.
example
.
com
default_domain
=
example
.
com
}
add below under section
[domain_realm]
.
example
.
com
=
EXAMPLE
.
COM
example
.
com
=
EXAMPLE
.
COM
Now test if Kerberos client works by runnig command
kinit _<your Windows domain logon name>
. If configured correctly, it should prompt you to input your domain password to get the ticket. Then you should be able to list the ticket by running
klist
.
Continue to configure apache httpd server on the ubuntu server:
Install apache httpd server if it is not already installed:
sudo apt
-
get install apache2
Install apache kerberos module if it is not already installed:
sudo apt
-
get install libapache2
-
mod
-
auth
-
kerb
Enable below apache modules:
$ sudo a2enmod proxy_http rewrite headers
Copy file
apache.keytab
generated above from your domain controller to ubuntu server and place it under directory
/etc/apache2
, and then run below commands against the file:
$ sudo chown www
-
data apache
.
keytab
$ sudo chgrp www
-
data apache
.
keytab
$ sudo chmod
600
apache
.
keytab
Create file
/etc/apache/sites-available/build.example.com.conf
with below content to define virtual host for QuickBuild:
<
VirtualHost
*
:
80
>
#
if
you are configuring reverse proxy
with
https
enabled
,
make sure
to
prepend
the
ServerName
# directive
with
"https://"
schema
,
for
example
:
https
:
/
/
build
.
example
.
com
:
443
ServerName
build
.
example
.
com
ProxyRequests
Off
# turn off
this
option
.
We
will rely on
ProxyPassReverse
to
translate
# urls in
Http
response
headers
.
ProxyPreserveHost
Off
<
Proxy
*
>
Order
allow
,
deny
Allow
from all
<
/
Proxy
>
ProxyPass
/
http
:
/
/
localhost
:
8810
/
ProxyPassReverse
/
http
:
/
/
localhost
:
8810
/
<
Location
/
>
AuthType
Kerberos
AuthName
"Build Server"
KrbAuthRealms
EXAMPLE
.
COM
KrbServiceName
HTTP
Krb5Keytab
/
etc
/
apache2
/
apache
.
keytab
KrbMethodNegotiate
on
#
Turn
on
this
option in
case
the browser does not support
Kerberos
authentication
,
# in that
case
,
it will fall back
to
http
basic authentication
to
prompt
user
for
#
password
.
KrbMethodK5Passwd
on
Require
valid
-
user
#
Below
directives puts logon name of authenticated user into http header _X
-
Forwarded
-
User_
# so that
QuickBuild
can use it
RequestHeader
unset
X
-
Forwarded
-
User
RewriteEngine
On
RewriteCond
%
{
LA
-
U
:
REMOTE_USER
}
(
.
+
)
RewriteRule
.
*
-
[
E
=
RU
:
%
1
,
NS
]
RequestHeader
set
X
-
Forwarded
-
User
%
{
RU
}
e
#
Remove
domain suffix
to
get
the simple logon name
RequestHeader
edit
X
-
Forwarded
-
User
"@EXAMPLE.COM$"
""
<
/
Location
>
#
Below
directives turn off
Kerberos
authentication
for
various
QuickBuild
services as their clients
# are not able
to
handle
Kerberos
authentication
.
QuickBuild
will use the traditional http basic
# authentication in
this
case
.
<
LocationMatch
"/(rest|service|agent_update|file_transfer|download|batch_download)"
>
AuthType
None
Order
allow
,
deny
Allow
from all
RequestHeader
unset
X
-
Forwarded
-
User
<
/
LocationMatch
>
ErrorLog
$
{
APACHE_LOG_DIR
}
/
quickbuild
-
error
.
log
CustomLog
$
{
APACHE_LOG_DIR
}
/
quickbuild
-
access
.
log combined
LogLevel
warn
<
/
VirtualHost
>
Run below commands to enable virtual host created above and restart Apache:
$ a2ensite build
.
example
.
com
.
conf
$ sudo service apache2 restart
Login to QuickBuild as administrator, switch to page
Administration/Security Settings
, and specify SSO provider as
SSO via Trusted Http Header
with http header set to
X-Forwarded-User
passed from Apache reverse proxy like below:
Here we only trust this header if it originates from ip
127.0.0.1
as Apache is installed on the same server
Now everything has been configured at server side, logon to a Windows workstation with your domain account and open your browser. Before visiting
build.example.com
, we still need to configure the browser to trust url example.com:
on Internet Explorer, open
Internet Options/Security /Local intranet
to add
.example.com
:
Chrome internet option is pretty much the same as Internet Explorer
on Firefox, input
about:config
on the address bar, and search for
negotiate
in the config. Then add
example.com
to config
network.negotiate-auth.delegation-uris
and
network.negotiate-auth.trusted-uris
like below:
Now visit QuickBuild sign-in page, there should exist a SSO login button to let users login without username/password. Permission of users logged in this way will be determined by default group configured at SSO provider page.
warning
You can still login to QuickBuild with normal user/password without clicking the SSO button
Last updated
on
Oct 28, 2024

================================================================================

Title: LDAP Authentication
URL: https://wiki.pmease.com/display/QB14/LDAP+Authentication
Breadcrumb: 

Version: QB14
LDAP Authentication
Table Of Contents
Authenticate through Active Directory
Authenticate through Fedora Directory Server
Last updated
on
Oct 23, 2024

================================================================================

Title: GCP Integration
URL: https://wiki.pmease.com/display/QB14/GCP+Integration
Breadcrumb:  > Build Setup Tutorials > Launch Build Agent On Demand

Build Setup Tutorials
Launch Build Agent On Demand
GCP Integration
Version: QB14
On this page
GCP Integration
Situation
â
Set up QuickBuild the same as tutorial
One Build For One Agent
, except that build agents should be started in GCP as necessary. Launched build agents should be able to be closed if they are idle for specified amount of time to save cost.
Resolution
â
Set up QuickBuild according to resolution section of tutorial
One Build For One Agent
.
Login to QuickBuild as administrator and switch to administration menu, then follow the
plugin management
link, and edit plugin setting of
GCP Plugin
to provide a json file containing private key of a GCP service account. The GCP service account should have permission to launch/access/delete compute instances in particular GCP projects. Check
here
on how to create service account and
here
on how to obtain json file containing private key of the service account
Make sure to
enable GCP compute engine API
Create appropriate build agent instance template following [this guide](Launch Node in GCP.html#LaunchNodeinGCP-createbuildagentinstancetemplate) if necessary.
Switch to grid page and follow the
Cloud Profiles
link to bring out the cloud profiles page. Add a cloud profile with
node launch setting
specified as
Launch Node into GCP
and fill relevant GCP node launch options. Specifically the
GCP instance template
should be filled with full name of the build agent instance template you created previously.
QuickBuild will proceed to do a test launch of your defined cloud profile to grab system/user attribute of node launched by your profile. Grabbed system/user attributes will be used afterwards to match against node matcher setting of build steps to determine which profile has to be used to launch node if no active agents satisfy the criteria. Only after test launch the profile can be used by builds to launch node on demand. Normally the test launch should be done in two or three minutes, if it takes too long, please check instance status as well as agent log at EC2 side.
Now run the build. If configured correctly, QuickBuild will launch build agent using your defined cloud profile to run the build. By default the launched build agent will stay active for 30 minutes before terminating. If more builds are set to run in the same time, more agents will be launched to accommodate the concurrency. You may check all launched instances by examining the
active launched nodes
tab of certain cloud profile, and may manually terminate them there.
Last updated
on
Oct 23, 2024

================================================================================

Title: Retry Step On Spot VM
URL: https://wiki.pmease.com/display/QB14/Retry+Step+On+Spot+VM
Breadcrumb:  > Build Setup Tutorials > Launch Build Agent On Demand

Build Setup Tutorials
Launch Build Agent On Demand
Retry Step On Spot VM
Version: QB14
On this page
Retry Step On Spot VM
Situation
â
QuickBuild supports to launch Amazon/Azure spot VM on demand to reduce cost. Since spot VM can be terminated at any time, the build should be retried on other nodes upon VM termination.
Resolution
â
QuickBuild steps can be retried via retry setting in advanced section of step definition. However this retry only happens on current node. So if you specify retry setting for the step running on spot VM, it will not work. Instead, we should retry the parent step and the parent step should run on non-spot VM. A
demo configuration
is set up to explain the idea:
Step
build
is set up to run on any build agent, and we assume that build agents will be launched on demand using spot VM
Step
master
is configured to run on server which is not a spot VM, and master step will be retried 3 times upon step error message
.*Error testing job.*
which will be reported if node running any child step is terminated
Last updated
on
Oct 23, 2024

================================================================================

Title: Amazon EC2 Integration
URL: https://wiki.pmease.com/display/QB14/Amazon+EC2+Integration
Breadcrumb:  > Build Setup Tutorials > Launch Build Agent On Demand

Build Setup Tutorials
Launch Build Agent On Demand
Amazon EC2 Integration
Version: QB14
On this page
Amazon EC2 Integration
Situation
â
Set up QuickBuild the same as tutorial
One Build For One Agent
, except that build agents should be started in EC2 as necessary. Launched build agents should be able to be closed if they are idle for specified amount of time to save cost.
Resolution
â
Set up QuickBuild according to resolution section of tutorial
One Build For One Agent
.
Login to QuickBuild as administrator and switch to administration menu, then follow the
plugin management
link, and edit plugin setting of
Amazon EC2 Plugin
to provide a file containing your EC2 access keys.
Create appropriate build agent AMI following [this guide](Launch Node in EC2.html#LaunchNodeinEC2-createbuildagentAMI) if necessary.
Switch to grid page and follow the
Cloud Profiles
link to bring out the cloud profiles page. Add a cloud profile with
node launch setting
specified as
Launch Node into Amazon EC2
and fill relevant EC2 node launch options. Specifically the
AMI ID
should be filled with the identifier of the build agent AMI you created previously.
QuickBuild will proceed to do a test launch of your defined cloud profile to grab system/user attribute of node launched by your profile. Grabbed system/user attributes will be used afterwards to match against node matcher setting of build steps to determine which profile has to be used to launch node if no active agents satisfy the criteria. Only after test launch the profile can be used by builds to launch node on demand. Normally the test launch should be done in two or three minutes, if it takes too long, please check instance status as well as agent log at EC2 side.
Now run the build. If configured correctly, QuickBuild will launch build agent using your defined cloud profile to run the build. By default the launched build agent will stay active for 30 minutes before terminating. If more builds are set to run in the same time, more agents will be launched to accommodate the concurrency. You may check all launched instances by examining the
active launched nodes
tab of certain cloud profile, and may manually terminate them there.
Last updated
on
Oct 23, 2024

================================================================================

Title: Microsoft Azure Integration
URL: https://wiki.pmease.com/display/QB14/Microsoft+Azure+Integration
Breadcrumb:  > Build Setup Tutorials > Launch Build Agent On Demand

Build Setup Tutorials
Launch Build Agent On Demand
Microsoft Azure Integration
Version: QB14
On this page
Microsoft Azure Integration
Situation
â
Set up QuickBuild the same as tutorial
One Build For One Agent
, except that build agents should be started in Azure as necessary. Launched build agents should be able to be closed if they are idle for specified amount of time to save cost.
Resolution
â
Set up QuickBuild according to resolution section of tutorial
One Build For One Agent
.
Login to QuickBuild as administrator and switch to administration menu, then follow the
plugin management
link, and edit plugin setting of
Azure Plugin
to provide Azure authentication file.
Create appropriate build agent custom image following [this guide](Launch Node in Azure.html#LaunchNodeinAzure-createbuildagentimage) if necessary.
Switch to grid page and follow the
Cloud Profiles
link to bring out the cloud profiles page. Add a cloud profile with
node launch setting
specified as
Launch Windows Node into Azure
or
Launch Linux Node into Azure
and fill relevant node launch options. Specifically the
custom image resource id
should be filled with resource id of the build agent image you created previously.
QuickBuild will proceed to do a test launch of your defined cloud profile to grab system/user attribute of node launched by your profile. Grabbed system/user attributes will be used afterwards to match against node matcher setting of build steps to determine which profile has to be used to launch node if no active agents satisfy the criteria. Only after test launch the profile can be used by builds to launch node on demand. Normally the test launch should be done within five minutes, if it takes too long, please check resource status as well as agent log at Azure side.
Now run the build. If configured correctly, QuickBuild will launch build agent using your defined cloud profile to run the build. By default the launched build agent will stay active for 30 minutes before terminating. If more builds are set to run in the same time, more agents will be launched to accommodate the concurrency. You may check all launched instances by examining the
active launched nodes
tab of certain cloud profile, and may manually terminate them there.
Last updated
on
Oct 23, 2024

================================================================================

Title: Installation Guide
URL: https://wiki.pmease.com/display/QB14/Installation+Guide
Breadcrumb: 

Version: QB14
Installation Guide
Installation Guide
Install QuickBuild Server
Install QuickBuild Build Agent
(required if you want to configure build grid)
Install QuickBuild User Agent
(required if you want to set up proof build)
Install As System Service
Last updated
on
Oct 23, 2024

================================================================================

Title: Distributed Builds
URL: https://wiki.pmease.com/display/QB14/Distributed+Builds
Breadcrumb: 

Version: QB14
Distributed Builds
Table Of Contents
Build Multi-platform Projects
Reduce Server Load
Speed up Build Process
Test on All Applicable Agents
Last updated
on
Oct 23, 2024

================================================================================

Title: Publish Build Reports
URL: https://wiki.pmease.com/display/QB14/Publish+Build+Reports
Breadcrumb: 

Version: QB14
On this page
Publish Build Reports
Introduction
â
Build reports are very important for detecting a project health. By adding your build reports to QuickBuild, the project health can be tracked very easily, and the most importantly QuickBuild can collect the statistics data from those reports. This will help you to analyze the project
build statistics
later. You may have a look at this
quick example
for how to publish the reports.
Following screenshot shows a typical Java project overview by adding some reports to QuickBuild:
Supported Reports
â
Following table lists all the reports supported in QuickBuild:
Java Category
â
Report Name
Version
JUnit Report
3.8+
TestNG Report
5.7
Findbugs Report
1.3.5+
CheckStyle Report
4.1+
EMMA Report
2.1+
Cobertura Report
1.9.2+
JaCoCo Report
0.6.1+
PMD Report
4.2.2
CPD Report
Clover Report
3.2.2+
Coverity Report
JMeter Performance Report
.NET Category
â
Report Name
Version
MSTest Report
NUnit Report
2.0
MBUnit Report
2.4+
Fxcop Report
1.35+
NCover Report
3.0+
Coverity Report
3rd Party Reports
â
For reports not directly supported in QuickBuild, you can
publish HTML reports
. If you want to collect the statistics data, you can publish your
customized statistics reports
.
Generic Step for Publishing Build Report
â
To publish a build report in QuickBuild, you just need two steps:
Generate the build report by using
Ant
,
Maven
,
NAnt
, etc. When generating the build reports with those tools, the XML format should be used. QuickBuild only recognizes XML reports.
Add a publish step for the specific report. For example, for JUnit, add a publish junit step, for TestNG, add a publish TestNG step.
That is all you need to do! Both the reports and the statistics data for the reports will be collected automatically, and you can
view them in QuickBuild
directly instead of generating external HTML report.
Publish Report Step Attributes
â
Below lists the specific attributes for publish report step:
Attribute
Description
Source Directory
Specify the directory under which to search xml files containing report data. A non-absolute path is considered to be relative to current workspace directory . If left empty, the workspace directory itself will be used.
Files to Process
Use a
file pattern
to specify the files need be published. Path specified here is relative to specified source directory, for example
reports/junit/*.xml
means you want to publish all the files with
.xml
suffix under the
reeports/junit
sub-directory.
Step Failure Condition
A BOOLEAN expression. Used to determine whether this step will be failed or not.
Step Failure Message
Used to display a failure message on build overview tab when step is failed.
Report Set Name
Sometimes, we need publish reports in different report set. For example, when we run tests with different platforms, such as Windows, Linux, Solaris, we can define several publish steps to collect the reports for each of them, we may define a step named
Publish Tests On Windows
and specify the report set name here as
On Windows
, and define another publish step named
Publish Tests on Linux
with the report set name here as
On Linux
, etc. Quickbulid will collect those reports seperately and aggregate them together on Dashboard, report tab and statistics page.
* The report set name should be unique in one configuration for one kind of publish report step. * One and only one can be empty. For example, if serveral steps for publish junit reports are defined, one can be empty for the report set name this will be recognized as 'default' report set in Quickbuild, and others should have different report set names. * For different kinds of publish step, the report set name can be the same. For example, 'With Tomcat' for Publish JUnit Step, and 'With Tomcat' for Publish TestNG step, this is allowed in QuickBuild.
::: |
Last updated
on
Oct 28, 2024

================================================================================

Title: Working with Cloud Profiles
URL: https://wiki.pmease.com/display/QB14/Working+with+Cloud+Profiles
Breadcrumb: 

Version: QB14
On this page
Working with Cloud Profiles
Overview
â
QuickBuild 5.0 introduces the
Cloud Profile
concept to support launching build agents on demand into cloud environment. A cloud profile defines characteristics of the build agent and knows how to launch the build agent. Build agents launched by the same cloud profile will have the same characteristics including operating system, installed software,
environments, system and user attributes etc. So if you have builds with different agent requirements, you will need to define multiple cloud profiles. After a cloud profile is defined, QuickBuild will try to launch a temporal agent to grab agent system and user attributes and store them into the profile. Internally QuickBuild treats cloud profiles as virtual agents, and in case there is no existing agents satisfying requirements of a build step, QuickBuild will match these virtual agents against the step. If a match is found, QuickBuild will launch a concrete agent using the profile to run the step. A launched build agent will be terminated automatically if it is idle for certain period of time, and the administrator can also terminate them manually if necessary.
Define cloud profile
â
Cloud profiles need to be defined by administrators in
Grid/Cloud Profiles
page like below:
After pressing the add button, QuickBuild will present the profile definition screen as below:
Then you can select desired cloud provider via
Node Launcher Setting
in the screen and define how to launch agent in that cloud. QuickBuild will do a test launch of the defined cloud profile to grab build agent characteristics including system and user attributes to form the virtual node. The test launch screen is as below:
The test launch should normally complete within two or three minutes. If successful, QuickBuild will present below screen to user:
Use cloud profiles
â
Once cloud profiles are defined and test launch passed, they will be used as virtual nodes to match node requirement of steps if no existing agents matches. You may also define grid resources to match characteristics of certain cloud profiles, so that agents referenced by these profiles can be launched on demand if the resource is exhausted. For a particular cloud profile, launched nodes will be listed in active nodes tab of the profile like below:
Nodes listed here will be terminated automatically if it is not being used by any steps for the timeout value defined by the profile, and you may also terminate them manually as demonstrated in the screenshot.
From time to time, you might see odd entries in inactive node list like below:
These entries are created by cloud profiles in order to auto-authenticate launched nodes and the unknown fields will be filled by info of launched nodes when they are active. So do not remove them in normal cases.
Diagnose cloud profile issues
â
If test launch fails, you may check the server log to see detailed message about the launch error.
If test launch does not report any error but just sit there never completes, you may follow below steps to examine the status:
Check at cloud provider side to see if the test agent has been launched successfully.
If test agent has been launched, login to the agent to check QuickBuild agent console log to see if there are any errors being printed. The agent console log can be found in
<agent install dir>/logs
directory.
If no obvious errors found in agent console log, check
Grid/Active Nodes
page at QuickBuild server side to see if the launched node appears there. If yes, most probably the node is launched with an image already containing the authentication token, which is NOT suggested. The fix is simple, just unauthorize the launched node and the test launch should be successful shortly.
If build step is in WAITING_NODE status, and relevant cloud profile does not launch node as expected, please check if virtual node represented by the profile really matches the step. To verify, you may launch a node manually at cloud provider side to see if it can be picked up by the step.
If cloud profile takes too long to launch an agent, please check if the agent tries to update plugins when it starts up. If yes, please re-create the agent image for the profile after plugins have been updated. Note that you should first unauthorize the agent before creating the image; otherwise, test launch for your updated profile will never complete as described above.
Last updated
on
Oct 28, 2024

================================================================================

Title: SSO via Trusted Http Header
URL: https://wiki.pmease.com/display/QB14/SSO+via+Trusted+Http+Header
Breadcrumb:  > Administrator's Guide > Security Management > Single Sign On

Administrator's Guide
Security Management
Single Sign On
SSO via Trusted Http Header
Version: QB14
On this page
SSO via Trusted Http Header
How it works
â
QuickBuild supports single sign-on by trusting specified http header from specified ip address like below:
In this case, you should configure a front end such as Apache httpd to actually authenticate users and then forward the request to QuickBuild via mechanisms such as reverse proxy. The front-end should be configured appropriately to contain user logon name in specified http header, and QuickBuild will use that to identify authenticated user.
Examples
â
Check here for an
example setup
.
Impacts on user agent, RESTful API access, and tray monitor
â
SSO only takes effect when visit the web UI. User agent, RESTful API access and tray monitor have to authenticate to QuickBuild with normal user name and password.
Last updated
on
Oct 28, 2024

================================================================================

Title: SSO via SAML
URL: https://wiki.pmease.com/display/QB14/SSO+via+SAML
Breadcrumb:  > Administrator's Guide > Security Management > Single Sign On

Administrator's Guide
Security Management
Single Sign On
SSO via SAML
Version: QB14
On this page
SSO via SAML
How it works
â
QuickBuild supports single sign-on via SAML2 protocol like below:
With this setup, QuickBuild works as SAML service provider, and you should at least configure it with SP private key, SP certificate and metadata from SAML identify provider.
Examples
â
Check here for example setup for
Okta
or
Azure AD
Impacts on user agent, RESTful API access, and tray monitor
â
SSO only takes effect when visit the web UI. User agent, RESTful API access and tray monitor have to authenticate to QuickBuild with normal user name and password.
Last updated
on
Oct 28, 2024

================================================================================

Title: SSO via OpenID
URL: https://wiki.pmease.com/display/QB14/SSO+via+OpenID
Breadcrumb:  > Administrator's Guide > Security Management > Single Sign On

Administrator's Guide
Security Management
Single Sign On
SSO via OpenID
Version: QB14
On this page
SSO via OpenID
How it works
â
QuickBuild can be configured to perform single sign on via OpenID like below:
Examples
â
Check here for example setup for
OpenID
Impacts on user agent, RESTful API access, and tray monitor
â
SSO only takes effect when visit the web UI. User agent, RESTful API access and tray monitor have to authenticate to QuickBuild with normal user name and password.
Last updated
on
Oct 28, 2024

================================================================================

Title: Set up Plugin Development Workspace
URL: https://wiki.pmease.com/display/QB14/Set+up+Plugin+Development+Workspace
Breadcrumb:  > Developer's Guide > Develop Plugins > Plugin Tutorials

Developer's Guide
Develop Plugins
Plugin Tutorials
Set up Plugin Development Workspace
Version: QB14
Set up Plugin Development Workspace
Make sure JDK version 1.8 or higher is installed on your development machine.
Download QuickBuild
for your platform and extract to a directory, say
C:\quickbuild
. Please note that QuickBuild binary distribution should be used here instead of source distribution.
Make sure Eclipse Galileo (or higher)
CLASSIC
version is installed.
Create a empty workspace directory to hold the plugin projects, and open Eclipse using this workspace.
Open Eclipse preference window and select menu
Java->Installed JRE
, make sure a JDK 1.8 or higher is available and selected as default JRE like below:
Keep the preference window open, and switch to menu
Compiler
. Make sure the property
Compiler compliance level
is set to 1.8 as below:
From Eclipse, select menu
File->Import
, and import window will appear. Select
Plugins and Fragments
as import source like below:
Click next to bring out a dialog with a set of import options. Specify directory
C:\quickbuild\plugins
(change to other directory as necessary if you've installed QuickBuild to other place in step 3) as import directory, and select the
Binary projects with linked content
option like below:
Click next and a dialog will be presented to let you select plugins to import. Select plugin
com.pmease.quickbuild
,
com.pmease.quickbuild.bootstrap
,
com.pmease.quickbuild.equinoxadapter
and
com.pmease.quickbuild.plugin.report.engine
like below:
Four QuickBuild projects will be imported into the workspace, respectively
com.pmease.quickbuild
,
com.pmease.quickbuild.bootstrap
,
com.pmease.quickbuild.equinoxadapter
(only necessary for QuickBuild 4.0.61 or higher), and
com.pmease.quickbuild.plugin.report.engine
. Check Eclipse problems view to make sure it does not report any warnings and errors. If there are errors, the most probable reason is that you've selected to import these plugins as
binary projects
instead of
Binary projects with linked content
in step 8.
From package explorer view, right click the project
com.pmease.quickbuild.bootstrap
, and select menu
Run As -> Java Application
from the popup menu as below:
The
select java application
window will appear. From there, select Bootstrap and click OK like below:
QuickBuild will be launched from Eclipse. Follow printed instructions to set up QuickBuild server if necessary. Make sure there is no any errors printed out in Eclipse console.
Stop QuickBuild server. If you want to launch QuickBuild from Eclipse later, just run the configuration
Bootstrap
which should already be created. Now the plugin development environment has been set up successfully.
Last updated
on
Oct 23, 2024

================================================================================

Title: Write Your First Plugin
URL: https://wiki.pmease.com/display/QB14/Write+Your+First+Plugin
Breadcrumb:  > Developer's Guide > Develop Plugins > Plugin Tutorials

Developer's Guide
Develop Plugins
Plugin Tutorials
Write Your First Plugin
Version: QB14
Write Your First Plugin
To start simple, we will create a plugin adding a "hello world" step to the step choice menu. A "hello world" message will be printed in the build log if this step is executed.
Open the plugin development workspace mentioned in the
workspace setup
page.
Create a new plugin project as demonstrated below:
Click next to bring out the
Plugin Project
screen. Specify project name and select
Equinox
as target platform as shown below:
Click next to bring out plugin content screen. Fill various properties and click finish as below:
The plugin overview screen will be presented. Switch to dependencies tab and add plugin
com.pmease.quickbuild
as required plugins like below:
Press
Ctrl-S
to save the setting.
Create a new class
MyStep
like below:
package
com
.
example
.
myplugin
;
import
com
.
pmease
.
quickbuild
.
Context
;
import
com
.
pmease
.
quickbuild
.
annotation
.
Editable
;
import
com
.
pmease
.
quickbuild
.
stepsupport
.
Step
;
@Editable
(
category
=
"examples"
,
name
=
"say hello world"
,
description
=
"This step simply prints \"hello world\" into the build log."
)
public
class
MyStep
extends
Step
{
private
static
final
long
serialVersionUID
=
1L
;
@Override
public
void
run
(
)
{
Context
.
getLogger
(
)
.
info
(
"hello world"
)
;
}
}
Here we define a step class and log a "hello world" messsage in its
run
method. The annotation
@Editable
provides some meta information about the step, such as its category, name and description. Refer to
Working with Plugin UI
for more information on how to control user interface by annotating classes.
info
Press
F1
over the
Step
class (or any other framework classes defined in QuickBuild) will display its documentation since javadoc is automatically associated with the framework plugins when you set up the plugin workspace.
Open the class
MyPlugin
, and change it as below:
package
com
.
example
.
myplugin
;
import
com
.
pmease
.
quickbuild
.
extensionpoint
.
StepProvider
;
import
com
.
pmease
.
quickbuild
.
pluginsupport
.
AbstractPlugin
;
import
com
.
pmease
.
quickbuild
.
stepsupport
.
Step
;
public
class
MyPlugin
extends
AbstractPlugin
{
@Override
public
Object
[
]
getExtensions
(
)
{
return
new
Object
[
]
{
new
StepProvider
(
)
{
@Override
public
Class
<
?
extends
Step
>
getStepClass
(
)
{
return
MyStep
.
class
;
}
}
}
;
}
}
Here class
AbstractPlugin
is defined in project
com.pmease.quickbuild
, and every plugin needs to extend this class. The
getExtensions
method returns an array of extensions, and each extension needs to extend an extension point defined in QuickBuild framework or other plugins. Here we extend the extension point
StepProvider
to provide a new step type. Open file
<QuickBuild install dir>/plugins/com.pmease.quickbuild.bootstrap/javadoc.zip/com/pmease/quickbuild/extensionpoint/package-summary.html
for all extension points defined in the framework.
{#WriteYourFirstPlugin-exportpackage} Save above classes, bring up the plugin manifest editing UI by double clicking file
META-INF/MANIFEST.MF
of the plugin, switch to the runtime tab and export all packages of the plugin like below:
Now we've finished developing of our first plugin. Let's examine the result by launching QuickBuild through the Bootstrap configuration like below:
Open a browser and point to address
http://localhost:8810
_ (or any other port you've configured in file _<QuickBuild install dir>/conf/node.properties
). Set up the server if necessary, and select the root configuration in QuickBuild. Switch to
steps
tab and click the
add
icon at right side of the master step, you will be presented with below screen:
A new category
examples
appears in the step menu containing a new step type
say hello world
. Select this step and click save on the step definition screen.
Click run button to run
root
configuration, a new build will be generated after a while. Select
log
tab of the newly generated build, you will find the logged "hello world" message like below:
After you've finished writing and testing the plugin, you can export the plugin to QuickBuild server's installation directory for production use. To do so:
Right click desired plugin projects and select
export
menu item from the popup menu like below:
Select
Deployable plugins and fragments
in the next dialog like below:
Click next, and specify QuickBuild server's installation directory in the next dialog as below:
Click the finish button, and the plugin will be exported to the
plugins
sub directory under QuickBuild server's installation directory. Now you can run command
bin/server.(bat|sh) console
to start QuickBuild outside of Eclipse, and the newly exported plugins will be loaded. The plugin will also be propogated to all connected agents automatically upon server startup.
info
Exporting to QuickBuild server's installation directory is not mandatory, you can also deploy the plugin by exporting it to some other directories, and manually copy exported plugin to
plugins
folder under QuickBuild server's installation directory later.
{#WriteYourFirstPlugin-headlessbuild}To build plugin in headless mode:
Make sure you have
Ant
installed.
Place all your plugin projects in a directory, and copy file
<QuickBuild server install dir>/dev/plugin/samples/build.xml
to that directory. The directory should then look like this:
build
.
xml
com
.
example
.
myplugin
com
.
example
.
anotherplugin
Open a command prompt window and change to that directory. Define environment variable
QUICKBUILD_HOME
to point to installation directory of QuickBuild.
Run command
ant
to build the plugins. If successful, you will find your plugins packaged in sub directory
stage/plugins
.
You may run command
ant clean
to optionally clean generated directories and files.
Last updated
on
Oct 28, 2024

================================================================================

Title: Working with Plugin UI
URL: https://wiki.pmease.com/display/QB14/Working+with+Plugin+UI
Breadcrumb:  > Developer's Guide > Develop Plugins > Plugin Tutorials

Developer's Guide
Develop Plugins
Plugin Tutorials
Working with Plugin UI
Version: QB14
On this page
Working with Plugin UI
Generate UI with annotations
â
QuickBuild has a
Bean Editor
which is able to generate UI through annotations for below situations:
View or edit steps.
View or edit repositories.
View or edit plugin settings.
Let's demonstrate this by enhancing myplugin to log the message supplied by user instead of just a hard coded "hello world". To do so, we create another class
MyAnotherStep.java
like below:
package
com
.
example
.
myplugin
;
import
org
.
hibernate
.
validator
.
NotEmpty
;
import
com
.
pmease
.
quickbuild
.
Context
;
import
com
.
pmease
.
quickbuild
.
annotation
.
Editable
;
import
com
.
pmease
.
quickbuild
.
annotation
.
Scriptable
;
import
com
.
pmease
.
quickbuild
.
stepsupport
.
Step
;
@Editable
(
category
=
"examples"
,
name
=
"print message"
,
description
=
"This step prints an user defined message into the build log."
)
public
class
MyAnotherStep
extends
Step
{
private
static
final
long
serialVersionUID
=
1L
;
private
String
message
;
// UI annotations must be applied to the getter method
@Editable
(
order
=
100
,
name
=
"Your Message"
,
description
=
"Specify your message here."
)
@NotEmpty
@Scriptable
public
String
getMessage
(
)
{
return
message
;
}
public
void
setMessage
(
String
message
)
{
this
.
message
=
message
;
}
@Override
public
void
run
(
)
{
// Make sure to call getters to access scriptable fields, otherwise,
// the enclosed script will not be executed
Context
.
getLogger
(
)
.
info
(
getMessage
(
)
)
;
}
}
And modify
MyPlugin.java
to include this newly created step type as another extension:
package
com
.
example
.
myplugin
;
import
com
.
pmease
.
quickbuild
.
extensionpoint
.
StepProvider
;
import
com
.
pmease
.
quickbuild
.
pluginsupport
.
AbstractPlugin
;
import
com
.
pmease
.
quickbuild
.
stepsupport
.
Step
;
public
class
MyPlugin
extends
AbstractPlugin
{
@Override
public
Object
[
]
getExtensions
(
)
{
return
new
Object
[
]
{
new
StepProvider
(
)
{
@Override
public
Class
<
?
extends
Step
>
getStepClass
(
)
{
return
MyStep
.
class
;
}
}
,
new
StepProvider
(
)
{
@Override
public
Class
<
?
extends
Step
>
getStepClass
(
)
{
return
MyAnotherStep
.
class
;
}
}
}
;
}
}
Save these classes, and start QuickBuild from Eclipse. You should now be able to see a new step type
print message
in the
examples
category. Edit this step by adding it to build execution sequence. Below UI will be presented:
Run the build and your supplied message will be printed into build log.
Now let's look at annotations applied to method
MyAnotherStep#getMessage()
:
UI annotations must be applied to field's getter method.
The annotation
@Editable
marks a field as editable and defines display name, order, and description of the field. These attributes are optional:
If name is left empty, the field name will be used.
If description is left empty, no description will be displayed when you edit the property.
If order is left empty, a default value of MAX_INTEGER will be assumed.
@NotEmpty
is an optional constraint annotation telling QuickBuild that this field does not accept empty value.
@Scriptable
is optional and is normally applied to field of String type. It allows the field to make use of QuickBuild's scripting facility. For example, when define the
print message
step, you may specify the message as
hello ${user.name}
to say hello to current QuickBuild user. Scriptable field needs to be accessed through getter method; otherwise the embedded scripts will not be executed. Method
MyAnotherStep.java#run()
obeys this rule by executing
Context.getLogger().info(getMessage());
instead of
Context.getLogger().info(message);
.
For more information on how to annotate classes to generate customized UI, please refer to
Bean Editor
.
Create UI with Wicket
â
QuickBuild uses
Wicket
as its presentation layer. If your plugin contributes tabs/panels to QuickBuild, you will need to have some knowledge of this framework. We demonstrate this by adding a new panel to build overview screen printing "hello world".
First create a class
MyPanel.java
like below:
package
com
.
example
.
myplugin
;
import
org
.
apache
.
wicket
.
markup
.
html
.
basic
.
Label
;
import
org
.
apache
.
wicket
.
markup
.
html
.
panel
.
Panel
;
import
com
.
pmease
.
quickbuild
.
Context
;
public
class
MyPanel
extends
Panel
{
private
static
final
long
serialVersionUID
=
1L
;
public
MyPanel
(
String
id
)
{
super
(
id
)
;
String
userName
;
if
(
Context
.
getUser
(
)
!=
null
)
userName
=
Context
.
getUser
(
)
.
getName
(
)
;
else
userName
=
"guest"
;
add
(
new
Label
(
"message"
,
"hello "
+
userName
)
)
;
}
}
And add its html template
MyPanel.html
like below:
<
wicket
:
panel
>
<
div wicket
:
id
=
"message"
class
=
"round-corner"
style
=
"padding:16px;"
/
>
<
/
wicket
:
panel
>
Finally modify
MyPlugin.java
to implement extension point
BuildOverviewContribution
:
package
com
.
example
.
myplugin
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
List
;
import
org
.
apache
.
wicket
.
markup
.
html
.
panel
.
Panel
;
import
com
.
pmease
.
quickbuild
.
extensionpoint
.
BuildOverviewContribution
;
import
com
.
pmease
.
quickbuild
.
extensionpoint
.
StepProvider
;
import
com
.
pmease
.
quickbuild
.
extensionpoint
.
support
.
PanelCreator
;
import
com
.
pmease
.
quickbuild
.
pluginsupport
.
AbstractPlugin
;
import
com
.
pmease
.
quickbuild
.
stepsupport
.
Step
;
public
class
MyPlugin
extends
AbstractPlugin
{
@Override
public
Object
[
]
getExtensions
(
)
{
return
new
Object
[
]
{
new
StepProvider
(
)
{
@Override
public
Class
<
?
extends
Step
>
getStepClass
(
)
{
return
MyStep
.
class
;
}
}
,
new
StepProvider
(
)
{
@Override
public
Class
<
?
extends
Step
>
getStepClass
(
)
{
return
MyAnotherStep
.
class
;
}
}
,
new
BuildOverviewContribution
(
)
{
public
List
<
PanelCreator
>
getPanelCreators
(
)
{
List
<
PanelCreator
>
creators
=
new
ArrayList
<
PanelCreator
>
(
)
;
creators
.
add
(
new
PanelCreator
(
)
{
public
Panel
getPanel
(
String
id
)
{
return
new
MyPanel
(
id
)
;
}
}
)
;
return
creators
;
}
public
int
getOrder
(
)
{
return
500
;
}
}
}
;
}
}
Start QuickBuild and switch to build overview screen, you will see a new panel saying hello to current user.
For more details of creating plugin UI with Wicket, refer to plugin
com.pmease.quickbuild.plugin.sample.javancss
in
Plugin Examples
.
Last updated
on
Oct 28, 2024

================================================================================

Title: Working with Plugin Settings
URL: https://wiki.pmease.com/display/QB14/Working+with+Plugin+Settings
Breadcrumb:  > Developer's Guide > Develop Plugins > Plugin Tutorials

Developer's Guide
Develop Plugins
Plugin Tutorials
Working with Plugin Settings
Version: QB14
On this page
Working with Plugin Settings
Global plugin setting
â
Plugin might have settings global to the system. For example, the
Ant
plugin defines path to Ant executable in the global plugin setting. In this tutorial, we will continue to evolve myplugin to define a message prefix in the plugin setting so that all user specified messages are automatically prefixed with certain string.
First let's define the plugin setting class
MyPluginSetting.java
:
package
com
.
example
.
myplugin
;
import
org
.
hibernate
.
validator
.
NotEmpty
;
import
com
.
pmease
.
quickbuild
.
annotation
.
Editable
;
// Plugin setting class must contains a default constructor and implement Serializable interface
public
class
MyPluginSetting
implements
Serializable
{
private
String
prefix
;
@Editable
(
description
=
"Specify a message prefix here."
)
@NotEmpty
public
String
getPrefix
(
)
{
return
prefix
;
}
public
void
setPrefix
(
String
prefix
)
{
this
.
prefix
=
prefix
;
}
}
And then tell QuickBuild about this class by modifying
MyPlugin.java
as below:
.
.
.
// omitted for brevity
public
class
MyPlugin
extends
AbstractPlugin
{
@Override
public
Object
[
]
getExtensions
(
)
{
.
.
.
// omitted for brevity
}
@Override
public
Class
<
?
>
getSettingClass
(
)
{
return
MyPluginSetting
.
class
;
}
}
Finally we modify
MyAnotherStep.java
to make use of the prefix:
import
com
.
pmease
.
quickbuild
.
pluginsupport
.
PluginSettingHelper
;
.
.
.
// omitted for brevity
public
class
MyAnotherStep
extends
Step
{
.
.
.
// omitted for brevity
@Override
public
void
run
(
)
{
MyPluginSetting
pluginSetting
=
(
MyPluginSetting
)
PluginSettingHelper
.
getSetting
(
MyPlugin
.
class
,
true
)
;
Context
.
getLogger
(
)
.
info
(
pluginSetting
.
getPrefix
(
)
+
": "
+
getMessage
(
)
)
;
}
}
Now start QuickBuild and it prints a warning message complaining that plugin
com.example.myplugin
needs to be configured. The plugin will temporarily be disabled if stored plugin setting object vilolates constraints of the plugin class. For newly installed plugins, the plugin setting object is initially created by calling default constructor of the plugin setting class.
Run the root configuration, and you will see that all messages will start with the specified prefix.
info
Refer to
Bean Editor
for more information of how to annotate plugin setting class to generate appropriate UI.
Configuration level plugin setting
â
Configuration level plugin setting is defined at configuration level. The setting will be inherited from parent configuration if it is not defined. Continue with myplugin, now assume that we need to specify message prefix per configuration, we can then modify
MyPlugin.java
as below:
.
.
.
// omitted for brevity
public
class
MyPlugin
extends
AbstractPlugin
{
@Override
public
Object
[
]
getExtensions
(
)
{
.
.
.
// omitted for brevity
}
/*
@Override
public Class<?> getSettingClass() {
return MyPluginSetting.class;
}
*/
@Override
public
Class
<
?
>
getConfigurationSettingClass
(
)
{
return
MyPluginSetting
.
class
;
}
}
Also please modify
MyPluginSetting.java
to provide a description:
.
.
.
// omitted for brevity
@Editable
(
description
=
"Specify plugin setting for myplugin."
)
public
class
MyPluginSetting
implements
Serializable
{
.
.
.
// omitted for brevity
}
Finally modify
MyAnotherStep.java
to make use of the configuration level prefix:
import
com
.
pmease
.
quickbuild
.
pluginsupport
.
PluginSettingHelper
;
.
.
.
// omitted for brevity
public
class
MyAnotherStep
extends
Step
{
.
.
.
// omitted for brevity
@Override
public
void
run
(
)
{
MyPluginSetting
pluginSetting
=
(
MyPluginSetting
)
PluginSettingHelper
.
findConfigurationSetting
(
MyPlugin
.
class
,
Context
.
getConfiguration
(
)
,
true
)
;
Context
.
getLogger
(
)
.
info
(
pluginSetting
.
getPrefix
(
)
+
": "
+
getMessage
(
)
)
;
}
}
Save above classes, start QuickBuild, and edit advanced setting of the root configuration. You will see that the advanced setting of the configuration includes a section contributed by myplugin as below:
All child configurations will by default inherit myplugin setting and can choose to override it by enabling myplugin setting.
Run the root configuration, and you will see that all messages will start with the prefix specified at root configuration level.
info
Refer to
Bean Editor
for more information of how to annotate plugin configuration setting class to generate appropriate UI.
User level plugin setting
â
Now we change the plugin setting from configuration level to user level: users define their own prefixes in the profile and printed message will start with the user specific prefix. To do so, first modify
MyPlugin.java
as below:
.
.
.
// omitted for brevity
public
class
MyPlugin
extends
AbstractPlugin
{
@Override
public
Object
[
]
getExtensions
(
)
{
.
.
.
// omitted for brevity
}
/*
@Override
public Class<?> getSettingClass() {
return MyPluginSetting.class;
}
@Override
public Class<?> getConfigurationSettingClass() {
return MyPluginSetting.class;
}
*/
@Override
public
Class
<
?
>
getUserSettingClass
(
)
{
return
MyPluginSetting
.
class
;
}
}
To make use of the user level prefix, please modify
MyAnotherStep.java
as below:
import
com
.
pmease
.
quickbuild
.
pluginsupport
.
PluginSettingHelper
;
.
.
.
// omitted for brevity
public
class
MyAnotherStep
extends
Step
{
.
.
.
// omitted for brevity
@Override
public
void
run
(
)
{
if
(
Context
.
getUser
(
)
!=
null
)
{
MyPluginSetting
pluginSetting
=
(
MyPluginSetting
)
PluginSettingHelper
.
getUserSetting
(
MyPlugin
.
class
,
Context
.
getUser
(
)
,
true
)
;
Context
.
getLogger
(
)
.
info
(
pluginSetting
.
getPrefix
(
)
+
": "
+
getMessage
(
)
)
;
}
}
}
Save above modifications, start QuickBuild, and switch to my setting page. It will include a section contributed by myplugin as below:
Run the root configuration, and you will see that all messages will start with the prefix specified by current user.
info
Refer to
Bean Editor
for more information of how to annotate plugin user setting class to generate appropriate UI.
Group level plugin setting
â
Group level plugin setting is very similar to user level plugin setting, except that:
It is attached to each group and will be displayed and edited if you view or edit particular group.
The setting class is specified by overriding method
getGroupSettingClass
The setting object can be retrieved by calling
PluginSettingHelper.getPluginSetting(<Plugin Main Class>, <group instance>)
info
Refer to
Bean Editor
for more information of how to annotate plugin group setting class to generate appropriate UI.
Combine different levels of plugin settings
â
Different levels of plugin settings can be combined together. The plugin
com.pmease.quickbuild.plugin.notifier.msn
in
Plugin Examples
demonstrates this:
It includes a global plugin setting class
MsnSetting.java
to define MSN account used to login and send out build notifications through MSN messenger.
It includes an user level plugin setting class
MsnUserSetting.java
to define MSN account for each user, which will be used to receive build notifications sent out by QuickBuild server through MSN messenger.
Last updated
on
Oct 28, 2024

================================================================================

Title: Plugin Data Storage
URL: https://wiki.pmease.com/display/QB14/Plugin+Data+Storage
Breadcrumb:  > Developer's Guide > Develop Plugins > Plugin Tutorials

Developer's Guide
Develop Plugins
Plugin Tutorials
Plugin Data Storage
Version: QB14
On this page
Plugin Data Storage
Store build related data
â
Plugin might need to have a place on server to store build related data. For example, JUnit plugin stores processed JUnit test data for each build into the build storage area after JUnit publish step runs, and use that data to render JUnit report upon UI access. Normally this place is a directory choosed by plugins under the
Build Publish Directory
, and files can be stored into the place by calling publish method of the build object.
Again we demonstrate this by enhancing myplugin to store the user specified message at server when the step runs so that it can be rendered into build overview screen.
First modify
MyAnotherStep.java
as below to save message into a file and got it published to server.
package
com
.
example
.
myplugin
;
import
java
.
io
.
File
;
import
org
.
hibernate
.
validator
.
NotEmpty
;
import
com
.
pmease
.
quickbuild
.
annotation
.
Editable
;
import
com
.
pmease
.
quickbuild
.
annotation
.
Scriptable
;
import
com
.
pmease
.
quickbuild
.
stepsupport
.
Step
;
import
com
.
pmease
.
quickbuild
.
util
.
FileUtils
;
import
com
.
pmease
.
quickbuild
.
Context
;
@Editable
(
category
=
"examples"
,
name
=
"publish message"
,
description
=
"This step publishes an user defined message and render them on build overview screen."
)
public
class
MyAnotherStep
extends
Step
{
private
static
final
long
serialVersionUID
=
1L
;
private
String
message
;
@Editable
@NotEmpty
@Scriptable
public
String
getMessage
(
)
{
return
message
;
}
public
void
setMessage
(
String
message
)
{
this
.
message
=
message
;
}
@Override
public
void
run
(
)
{
File
tempDir
=
FileUtils
.
createTempDir
(
)
;
FileUtils
.
writeFile
(
new
File
(
tempDir
,
"message.txt"
)
,
getMessage
(
)
)
;
try
{
// call publish to transfer files to server node. Do not simply
// copy files here since the step might be running on an agent
// node.
Context
.
getBuild
(
)
.
publish
(
tempDir
.
getAbsolutePath
(
)
,
null
,
"myplugin"
)
;
}
finally
{
FileUtils
.
deleteDir
(
tempDir
)
;
}
}
}
And then modify
MyPanel.java
like below to render the message in published file.
package
com
.
example
.
myplugin
;
import
java
.
io
.
File
;
import
org
.
apache
.
wicket
.
markup
.
html
.
basic
.
Label
;
import
org
.
apache
.
wicket
.
markup
.
html
.
panel
.
Panel
;
import
com
.
pmease
.
quickbuild
.
Context
;
import
com
.
pmease
.
quickbuild
.
util
.
FileUtils
;
public
class
MyPanel
extends
Panel
{
private
static
final
long
serialVersionUID
=
1L
;
public
MyPanel
(
String
id
)
{
super
(
id
)
;
String
message
=
FileUtils
.
readFileAsString
(
new
File
(
Context
.
getBuild
(
)
.
getPublishDir
(
)
,
"myplugin/message.txt"
)
)
;
add
(
new
Label
(
"message"
,
message
)
)
;
}
}
Finally modify
MyPlugin.java
to contribute the message panel only when sub directory
myplugin
exists.
package
com
.
example
.
myplugin
;
import
java
.
io
.
File
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
List
;
import
org
.
apache
.
wicket
.
markup
.
html
.
panel
.
Panel
;
import
com
.
pmease
.
quickbuild
.
extensionpoint
.
BuildOverviewContribution
;
import
com
.
pmease
.
quickbuild
.
extensionpoint
.
StepProvider
;
import
com
.
pmease
.
quickbuild
.
extensionpoint
.
support
.
PanelCreator
;
import
com
.
pmease
.
quickbuild
.
pluginsupport
.
AbstractPlugin
;
import
com
.
pmease
.
quickbuild
.
stepsupport
.
Step
;
import
com
.
pmease
.
quickbuild
.
Context
;
public
class
MyPlugin
extends
AbstractPlugin
{
@Override
public
Object
[
]
getExtensions
(
)
{
return
new
Object
[
]
{
new
StepProvider
(
)
{
@Override
public
Class
<
?
extends
Step
>
getStepClass
(
)
{
return
MyStep
.
class
;
}
}
,
new
StepProvider
(
)
{
@Override
public
Class
<
?
extends
Step
>
getStepClass
(
)
{
return
MyAnotherStep
.
class
;
}
}
,
new
BuildOverviewContribution
(
)
{
public
List
<
PanelCreator
>
getPanelCreators
(
)
{
List
<
PanelCreator
>
creators
=
new
ArrayList
<
PanelCreator
>
(
)
;
if
(
new
File
(
Context
.
getBuild
(
)
.
getPublishDir
(
)
,
"myplugin"
)
.
exists
(
)
)
{
creators
.
add
(
new
PanelCreator
(
)
{
public
Panel
getPanel
(
String
id
)
{
return
new
MyPanel
(
id
)
;
}
}
)
;
}
return
creators
;
}
public
int
getOrder
(
)
{
return
500
;
}
}
}
;
}
}
Now start QuickBuild, and run the root configuration. You will see the published message file under directory
<global storage directory>/builds/<build id>/myplugin
, where
<global storage directory>
is the directory you specified when set up QuickBuild server, and
<build id>
refers to id of the newly generated build and is displayed at the build overview screen.
Overview screen of the newly generated build will also contains a panel displaying your specified message when define the step.
Store configuration related data
â
Besides storing build related data, plugin may also need to store configuation related data to server. Still taking the JUnit plugin for example, it accumulates test statistics information for a configuration overtime and use it to render JUnit statistics chart upon UI access. The
Configuration Publish Directory
is a good place to store such data, and plugins can create sub directories under this place to hold their own data if necessary.
We demonstrate this by enhancing myplugin to introduce a new statistics tab displaying a line chart to draw the trend of number of chars in the message across different builds.
First define a new class
MyStatistics.java
to hold statistics data as below:
package
com
.
example
.
myplugin
;
import
java
.
util
.
LinkedHashMap
;
import
java
.
util
.
Map
;
public
class
MyStatistics
{
// map build version to message length
private
Map
<
String
,
Integer
>
msgLens
=
new
LinkedHashMap
<
String
,
Integer
>
(
)
;
public
Map
<
String
,
Integer
>
getMsgLens
(
)
{
return
msgLens
;
}
public
void
setMsgLens
(
Map
<
String
,
Integer
>
msgLens
)
{
this
.
msgLens
=
msgLens
;
}
}
And add a new class
MyMetricsCollector.java
as below to collect message char count for current build and update the statistics data:
package
com
.
example
.
myplugin
;
import
java
.
io
.
File
;
import
com
.
pmease
.
quickbuild
.
extensionpoint
.
StatisticsSupport
;
import
com
.
pmease
.
quickbuild
.
model
.
Build
;
import
com
.
pmease
.
quickbuild
.
util
.
BeanUtils
;
import
com
.
pmease
.
quickbuild
.
util
.
FileUtils
;
import
com
.
pmease
.
quickbuild
.
Context
;
public
class
MyMetricsCollector
implements
StatisticsSupport
{
public
String
getStatisticsName
(
)
{
return
"My Statistics"
;
}
public
void
collectStatistics
(
Build
build
)
{
/*
* This method will be called from server after build finishes. So we can
* access the message file and statistics file directly.
*/
File
msgFile
=
new
File
(
build
.
getPublishDir
(
)
,
"myplugin/message.txt"
)
;
// collect metrics only if message publishing step was executed for this build.
if
(
msgFile
.
exists
(
)
)
{
int
msgLen
=
FileUtils
.
readFileAsString
(
msgFile
)
.
length
(
)
;
File
statsFile
=
new
File
(
build
.
getConfiguration
(
)
.
getPublishDir
(
)
,
"myplugin/statistics.xml"
)
;
MyStatistics
stats
;
if
(
statsFile
.
exists
(
)
)
stats
=
(
MyStatistics
)
BeanUtils
.
readFile
(
statsFile
)
;
else
stats
=
new
MyStatistics
(
)
;
stats
.
getMsgLens
(
)
.
put
(
build
.
getVersion
(
)
,
msgLen
)
;
BeanUtils
.
writeFile
(
stats
,
statsFile
)
;
}
}
/* This method will be called before rebuilding the statistics upon request */
public
void
cleanupStatistics
(
Configuration
configuration
)
{
File
statsFile
=
new
File
(
build
.
getConfiguration
(
)
.
getPublishDir
(
)
,
"myplugin/statistics.xml"
)
;
if
(
statsFile
.
exists
(
)
)
statsFile
.
delete
(
)
;
}
}
Then add
MyStatisticsPanel.java
and
MyStatisticsPanel.html
to draw the chart using statistics data.
MyStatisticsPanel.java
package
com
.
example
.
myplugin
;
import
java
.
io
.
File
;
import
java
.
util
.
Map
;
import
org
.
apache
.
wicket
.
markup
.
html
.
panel
.
Panel
;
import
org
.
jfree
.
chart
.
ChartFactory
;
import
org
.
jfree
.
chart
.
JFreeChart
;
import
org
.
jfree
.
chart
.
plot
.
PlotOrientation
;
import
org
.
jfree
.
data
.
category
.
DefaultCategoryDataset
;
import
com
.
pmease
.
quickbuild
.
Context
;
import
com
.
pmease
.
quickbuild
.
util
.
BeanUtils
;
import
com
.
pmease
.
quickbuild
.
web
.
chart
.
JFreeChartPanel
;
public
class
MyStatisticsPanel
extends
Panel
{
private
static
final
long
serialVersionUID
=
1L
;
public
MyStatisticsPanel
(
String
id
)
{
super
(
id
)
;
File
statsFile
=
new
File
(
Context
.
getConfiguration
(
)
.
getPublishDir
(
)
,
"myplugin/statistics.xml"
)
;
MyStatistics
stats
=
(
MyStatistics
)
BeanUtils
.
readFile
(
statsFile
)
;
DefaultCategoryDataset
dataset
=
new
DefaultCategoryDataset
(
)
;
for
(
Map
.
Entry
<
String
,
Integer
>
entry
:
stats
.
getMsgLens
(
)
.
entrySet
(
)
)
dataset
.
addValue
(
entry
.
getValue
(
)
,
""
,
entry
.
getKey
(
)
)
;
JFreeChart
chart
=
ChartFactory
.
createLineChart
(
"Message Char Count Statistics"
,
"build"
,
"count"
,
dataset
,
PlotOrientation
.
VERTICAL
,
false
,
false
,
false
)
;
add
(
new
JFreeChartPanel
(
"chart"
,
800
,
400
,
chart
)
)
;
}
}
MyStatisticsPanel.html
<
wicket
:
panel
>
<
div wicket
:
id
=
"chart"
>
<
/
div
>
<
/
wicket
:
panel
>
Finally modify
MyPlugin.java
to implement extension point
StatisticsSupport
and
StatisticsTabContribution
:
package
com
.
example
.
myplugin
;
import
java
.
io
.
File
;
import
java
.
util
.
ArrayList
;
import
java
.
util
.
List
;
import
java
.
util
.
Map
;
import
org
.
apache
.
wicket
.
markup
.
html
.
panel
.
Panel
;
import
com
.
pmease
.
quickbuild
.
extensionpoint
.
BuildOverviewContribution
;
import
com
.
pmease
.
quickbuild
.
extensionpoint
.
StatisticsTabContribution
;
import
com
.
pmease
.
quickbuild
.
extensionpoint
.
StepProvider
;
import
com
.
pmease
.
quickbuild
.
extensionpoint
.
support
.
PanelCreator
;
import
com
.
pmease
.
quickbuild
.
pluginsupport
.
AbstractPlugin
;
import
com
.
pmease
.
quickbuild
.
stepsupport
.
Step
;
import
com
.
pmease
.
quickbuild
.
web
.
component
.
tabbedpanel
.
Tab
;
import
com
.
pmease
.
quickbuild
.
Context
;
public
class
MyPlugin
extends
AbstractPlugin
{
@Override
public
Object
[
]
getExtensions
(
)
{
return
new
Object
[
]
{
new
StepProvider
(
)
{
@Override
public
Class
<
?
extends
Step
>
getStepClass
(
)
{
return
MyStep
.
class
;
}
}
,
new
StepProvider
(
)
{
@Override
public
Class
<
?
extends
Step
>
getStepClass
(
)
{
return
MyAnotherStep
.
class
;
}
}
,
new
BuildOverviewContribution
(
)
{
public
List
<
PanelCreator
>
getPanelCreators
(
)
{
List
<
PanelCreator
>
creators
=
new
ArrayList
<
PanelCreator
>
(
)
;
if
(
new
File
(
Context
.
getBuild
(
)
.
getPublishDir
(
)
,
"myplugin"
)
.
exists
(
)
)
{
creators
.
add
(
new
PanelProvider
(
)
{
public
Panel
getPanel
(
String
id
)
{
return
new
MyPanel
(
id
)
;
}
}
)
;
}
return
creators
;
}
public
int
getOrder
(
)
{
return
500
;
}
}
,
new
MyMetricsCollector
(
)
,
new
StatisticsTabContribution
(
)
{
public
List
<
Tab
>
getTabs
(
)
{
List
<
Tab
>
tabs
=
new
ArrayList
<
Tab
>
(
)
;
if
(
new
File
(
Context
.
getConfiguration
(
)
.
getPublishDir
(
)
,
"myplugin"
)
.
exists
(
)
)
{
tabs
.
add
(
new
Tab
(
"message char count"
)
{
private
static
final
long
serialVersionUID
=
1L
;
@Override
public
Panel
getPanel
(
String
id
,
Map
<
String
,
String
>
params
)
{
return
new
MyStatisticsPanel
(
id
)
;
}
}
)
;
}
return
tabs
;
}
public
int
getOrder
(
)
{
return
500
;
}
}
}
;
}
}
Save modifications, start QuickBuild, and run the root configuation several times (remember to change the message length a little bit before each run to make the line chart varies). Switch to statistics tab of the root configuration, and you will see the "message char count" tab displaying statistics chart of number of message chars.
Last updated
on
Oct 23, 2024

================================================================================

Title: Migrate Plugin Data
URL: https://wiki.pmease.com/display/QB14/Migrate+Plugin+Data
Breadcrumb:  > Developer's Guide > Develop Plugins > Plugin Tutorials

Developer's Guide
Develop Plugins
Plugin Tutorials
Migrate Plugin Data
Version: QB14
Migrate Plugin Data
Now your plugin is used by a lot of users and they've configured your plugin and used steps contributed by your plugin. This leads to a problem: you might need to change fields of plugin setting and step classes in new version of your plugin and the change could be incompatible with existing steps and plugin settings. We certainly do not want to have users re-define their steps and plugin settings.
To solve this problem, QuickBuild utilizes
XMT
to handle plugin data migration. Taking the plugin setting class in
Working with Plugin Settings
chapter for example, let's assume that we want to introduce a non-empty suffix field in new version of our plugin. The new plugin setting class can be written as:
package
com
.
example
.
myplugin
;
import
org
.
hibernate
.
validator
.
NotEmpty
;
import
com
.
pmease
.
quickbuild
.
annotation
.
Editable
;
// Plugin setting class must contains a default constructor
public
class
MyPluginSetting
{
private
String
prefix
;
private
String
suffix
;
@Editable
(
description
=
"Specify a message prefix here."
)
@NotEmpty
public
String
getPrefix
(
)
{
return
prefix
;
}
public
void
setPrefix
(
String
prefix
)
{
this
.
prefix
=
prefix
;
}
@Editable
(
description
=
"Specify a message suffix here."
)
@NotEmpty
public
String
getSuffix
(
)
{
return
suffix
;
}
public
void
setSuffix
(
String
suffix
)
{
this
.
suffix
=
suffix
;
}
@SuppressWarnings
(
"unused"
)
private
void
migrate1
(
VersionedDocument
dom
,
Stack
<
Integer
>
versions
)
{
dom
.
getRootElement
(
)
.
addElement
(
"suffix"
)
.
setText
(
"thanks"
)
;
}
}
The method
migrate1
handles migration of the class from version "0" to version "1", and plugin setting created previously will automatically have the suffix set to "thanks". This migration approach also applies for step and repository classes contributed by the plugin. For details of migration, please refer to
XMT documentation
.
At last, do not forget to increase version of your plugin so that QuickBuild can detect the change and propagate new version of your plugin to all agents. Plugin version can be changed by editing plugin MANIFEST in Eclipse like below:
danger
During upgrade of your plugin, the old version also needs to be removed from directory
<QuickBuild server install dir>/plugins
.
Last updated
on
Oct 28, 2024

================================================================================

Title: Write Custom Gadget
URL: https://wiki.pmease.com/display/QB14/Write+Custom+Gadget
Breadcrumb:  > Developer's Guide > Develop Plugins > Plugin Examples

Developer's Guide
Develop Plugins
Plugin Examples
Write Custom Gadget
Version: QB14
Write Custom Gadget
In this example, we will enhance the plugin in tutorial
Write Your First Plugin
to add a custom gadget to display a specified message. Firstable, we create our gadget class as below:
package
com
.
example
.
myplugin
;
import
org
.
apache
.
wicket
.
Component
;
import
org
.
apache
.
wicket
.
behavior
.
AttributeAppender
;
import
org
.
apache
.
wicket
.
markup
.
html
.
basic
.
Label
;
import
org
.
hibernate
.
validator
.
constraints
.
NotEmpty
;
import
com
.
pmease
.
quickbuild
.
annotation
.
Editable
;
import
com
.
pmease
.
quickbuild
.
extensionpoint
.
support
.
Gadget
;
import
com
.
pmease
.
quickbuild
.
extensionpoint
.
support
.
GadgetCategory
;
@Editable
(
name
=
"My Message"
,
order
=
100001
,
category
=
GadgetCategory
.
OTHERS
)
public
class
MyMessageGadget
extends
Gadget
{
private
static
final
long
serialVersionUID
=
1L
;
private
String
message
;
@Editable
(
name
=
"Message"
,
description
=
"Specify a message to display."
)
@NotEmpty
public
String
getMessage
(
)
{
return
message
;
}
@Override
public
String
getCssClass
(
)
{
return
"window"
;
}
public
void
setMessage
(
String
message
)
{
this
.
message
=
message
;
}
@Override
public
Component
renderBody
(
String
componentId
)
{
return
new
Label
(
componentId
,
getMessage
(
)
)
.
add
(
new
AttributeAppender
(
"class"
,
"p8p"
)
)
;
}
}
Then modify class
MyPlugin
to contribute the message gadget:
package
com
.
example
.
myplugin
;
import
com
.
pmease
.
quickbuild
.
extensionpoint
.
StepProvider
;
import
com
.
pmease
.
quickbuild
.
extensionpoint
.
GadgetProvider
;
import
com
.
pmease
.
quickbuild
.
pluginsupport
.
AbstractPlugin
;
import
com
.
pmease
.
quickbuild
.
stepsupport
.
Step
;
import
com
.
pmease
.
quickbuild
.
extensionpoint
.
support
.
Gadget
;
public
class
MyPlugin
extends
AbstractPlugin
{
@Override
public
Object
[
]
getExtensions
(
)
{
return
new
Object
[
]
{
new
StepProvider
(
)
{
@Override
public
Class
<
?
extends
Step
>
getStepClass
(
)
{
return
MyStep
.
class
;
}
}
,
new
GadgetProvider
(
)
{
@Override
public
Class
<
?
extends
Gadget
>
getGadgetClass
(
)
{
return
MyMessageGadget
.
class
;
}
}
;
}
}
With this change, the custom gadget will appear in the
OTHERS
category after running QuickBuild.
Besides the common gadget class, QuickBuild provides BuildBasedGadget and ConfigurationBasedGadget to facilitate creating gadgets displaying build or configuration info. Refer to the Javadoc for these classes in Eclipse for details.
Last updated
on
Oct 23, 2024

================================================================================

Title: The Example Plugin in Tutorial
URL: https://wiki.pmease.com/display/QB14/The+Example+Plugin+in+Tutorial
Breadcrumb:  > Developer's Guide > Develop Plugins > Plugin Examples

Developer's Guide
Develop Plugins
Plugin Examples
The Example Plugin in Tutorial
Version: QB14
The Example Plugin in Tutorial
Source code of this plugin can be found in project
com.example.myplugin
after you
import the example plugins
, and this is the final version of the example plugin used in the
Plugin Tutorials
Last updated
on
Oct 23, 2024

================================================================================

Title: The JavaNCSS Plugin
URL: https://wiki.pmease.com/display/QB14/The+JavaNCSS+Plugin
Breadcrumb:  > Developer's Guide > Develop Plugins > Plugin Examples

Developer's Guide
Develop Plugins
Plugin Examples
The JavaNCSS Plugin
Version: QB14
The JavaNCSS Plugin
This example plugin analyzes
JavaNCSS
report to count source and comment lines of your project and if comment to source ratio is under a specified threshold, it reports a build error. It also adds a pie chart to build overview page displaying source and comment lines, and adds a stack bar chart to statistics page to display trends of comment to source ratio over time.
Before diving into the source code, please follow below steps to see how this plugin works:
Make sure
Apache Ant
is installed.
Open the
plugin development workspace
and make sure the example project
com.example.javancss
is imported into the workspace following
this guide
.
Download
this test project
and extract it to a directory, say
/path/to/componentA
.
Start QuickBuild by running Eclipse configuration
Bootstrap
.
Open the browser and point to
http://localhost:8810
_ (or any other port you configured in _<QuickBuild install dir>/conf/node.properties
), select the
root
configuration and switch to steps tab.
Define the master step as a sequential composition step, and add below child steps into it:
A step of type
Build/Ant
. Give this step a name, and specify the property
Ant build file
as
/path/to/componentA/build/build.xml
.
A step of type
Publish/JavaNCSS Report
. Give this step a name, and specify the property
JavaNCSS report path
as
/path/to/componentA/build/metrics.xml
.
Switch to page
Administration->Plugin Management
, and configure the Ant plugin to specify path to Ant executable if it is not in the system path.
Run root configuration to build the test project. After the build finishes:
A pie chart will appear in the build overview screen displaying source and comment lines of the test project.
A build tab named "javancss" will appear. This tab is created only for demonstration purpose, and does not include any content.
Switch to dashboard, and hover mouse over
more...
link of the newly generated build to bring up the build summary. The build summary will include source and comment line information. Clicking on this information will lead to javancss build tab.
Switch to menu
Administration->Plugin Management
and configure property
comment threshold
of the JavaNCSS plugin as
20
. This tells QuickBuild to fail the build if comment to source ratio is less than 20%.
Edit file
/path/to/componentA/src/com/example/componentA/ComponentA.java
to remove all comments.
Switch back to QuickBuild and run the root configuration again. The build will fail with a message
Source comments are less than 20%
.
Edit file
/path/to/componentA/src/com/example/componentA/ComponentA.java
to add comments, and run the root configuration again to generate a new build.
Switch to menu
Statistics->JavaNCSS
, and you will see a stack bar chart displaying trends of source and comment lines for all builds.
Last updated
on
Oct 28, 2024

================================================================================

Title: Creating a Test Report Plugin
URL: https://wiki.pmease.com/display/QB14/Creating+a+Test+Report+Plugin
Breadcrumb:  > Developer's Guide > Develop Plugins > Plugin Examples

Developer's Guide
Develop Plugins
Plugin Examples
Creating a Test Report Plugin
Version: QB14
On this page
Creating a Test Report Plugin
Since 4.0, you can add your own test report plugin by using report plugin APIs. Normally, a test report plugin contributes below extension-points to QuickBuild:
PermissionContribution
(adds a permission to control whether a user/group can access the report or not)
Step
(adds publish report step)
StatisticsSupport
(collects test statistics)
BuildTabContribution
(displays the report to build page)
BuildOverviewContribution
(displays the report overview to build overview tab)
BuildSummaryContribution
(displays a summary information of the tests in build dropdown)
StatisticsTabContribution
(displays the report statistics data in configuration statistics tab)
Gadget
(displays the report in dashboard)
AggregationSupport
(aggregates the test information)
ConfigurationOverviewContribution
(displays the aggregation data in configuration overview tab)
RestResourceContribution
(accesses the report data from RESTful APIs)
Below we will use boost test report as an example to show you how simple it is to create a test plugin for QuickBuild. Please first reference
Plugin Tutorials
page on how to setup your development environment if you are not familiar with how to create a plugin for QuickBuild.
In QuickBuild, plugin com.pmease.quickbuild.plugin.report.xunit has already implemented and encapsulated most of unit test report related functions, so when creating a unit test report plugin, just use this plugin as dependency. Below shows the dependencies in your plugin MANIFEST.MF:
Basic Functions
â
Below we will show you how to add the basic functions including:
Add a permission to system (PermissionContribution)
Parse the original XML reports to generate test report (Step)
Collect the test metrics (StatisticsSupport)
Display test overview in build overview (BuildOverviewContribution)
Display test summary in build summary popped up from build dropdown (BuildSummaryContribution)
Display the reports including: failed tests, by suite, by test (BuildTabContribution)
Display the test metrics in configuration statistics page (StatisticsTabContribution)
Actually, plugin com.pmease.quickbuild.plugin.report.xunit already implemented most of them, and you only need inherit from the base class accordingly.
Report Definition
â
In QuickBuild, ReportCategory encapsulates the definitions and most of the operations of a specific report. Below is how we define Boost test report:
public
class
BoostTestCategory
extends
XUnitCategory
{
// return the name of your category
public
String
getName
(
)
{
return
"Boost Report"
;
}
// return an unique id of your category in QuickBuild
public
String
getId
(
)
{
return
"boost"
;
}
// return the order when displaying category
public
int
getOrder
(
)
{
return
500
;
}
// return the processor on how to parse your original XML report
public
AbstractProcessor
getTestProcessor
(
)
{
return
new
BoostTestProcessor
(
this
)
;
}
}
for BoostTestProcessor, we implemented like below:
public
class
BoostTestProcessor
extends
AbstractTestProcessor
{
public
BoostTestProcessor
(
BoostTestCategory
category
)
{
super
(
category
)
;
}
// return the XPath on how to select your test case nodes
public
String
getXPathOfTestCase
(
)
{
return
"//TestCase"
;
}
// return the test suite name
protected
String
getSuiteName
(
Element
testcaseNode
)
{
.
.
.
}
// return the test name
protected
String
getTestName
(
Element
testcaseNode
)
{
.
.
.
}
// return the test status, PASS/FAIL/SKIP
protected
TestStatus
getStatus
(
Element
testcaseNode
)
{
.
.
.
}
// return the duration in milli-seconds
protected
long
getDuration
(
Element
testcaseNode
)
{
.
.
.
}
// return the error types if available
protected
List
<
String
>
getErrorTypes
(
Element
testcaseNode
)
{
.
.
.
}
// return the error messages if available
protected
List
<
String
>
getErrorMessages
(
Element
testcaseNode
)
{
.
.
.
}
// return the normal messages or outputs if available
protected
List
<
String
>
getMessages
(
Element
testcaseNode
)
{
.
.
.
}
}
Report Publish Step
â
Below class defines the publish boost test step:
@Editable
(
category
=
"Publish"
,
name
=
"Boost Test Report"
,
description
=
"Publish Boost Test reports"
)
@ScriptApi
(
"This step publishes the original Boost Test XML files."
)
public
class
BoostTestPublisher
extends
XUnitPublisher
{
private
static
final
long
serialVersionUID
=
1L
;
}
Plugin Activator
â
The boost plugin activator class, here, for example BoostTestPlugin, should inherit from AbstractTestReportPlugin:
public
class
BoostTestPlugin
extends
AbstractTestReportPlugin
{
protected
Class
<
?
extends
Step
>
getPublishStepClass
(
)
{
return
BoostTestPublisher
.
class
;
}
protected
ReportCategory
createCategory
(
)
{
return
new
BoostTestCategory
(
)
;
}
}
OK, now it is the time to package them all and place the plugin to QuickBuild plugins directory, run QuickBuild, in Steps menu, you will find a new publish step named
Boost Test Report
is available, and you can add it to your build workflow. After running a build without error, you can find boost test report is displayed in your build overview, and a new tab named
Boost Report
is displayed which includes three sub-tabs:
Failed Test
By Suite
By Test
just like what we did for JUnit.
Go to configuration statistics page, a tab named
Boost Report
is also there which displays the trends of your test.
Report Aggregation
â
From QuickBuild 4.0, report can be aggregated from child configurations so that user can easily know the status of child configurations. To support aggregation, the plugin need implements below two extension point:
AggregationSupport (collect the aggregation data)
ConfigurationOverviewContribution (displays the aggregation data in configuration overview)
To implement aggregation support, you just need inherit from XUnitAggregator:
@Editable
(
name
=
"Boost Report"
,
description
=
"Aggregate all boost metrics from child configurations."
)
public
class
BoostAggregator
extends
XUnitAggregator
{
}
and add below definition to your plugin activator:
public
class
BoostTestPlugin
extends
AbstractTestReportPlugin
{
.
.
.
.
.
.
@Override
public
Class
<
?
extends
Aggregation
>
getAggregatorClass
(
)
{
return
BoostAggregator
.
class
;
}
Now, the aggregation support is added, again, define an aggregation in your configuration and run a build, the aggregated report will be displayed in the configuration overview tab, also, the aggregated report statistics will be displayed in configuration statistics page.
Gadget Support
â
In plugin com.pmease.quickbuild.plugin.report.xunit, below gadget classes are available:
XUnitOverviewGadget (displays a pie chart for passed/failed/skipped tests)
XUnitSummaryGadget (displays a summary for success rate, duration, new failed, fixed, not fixed)
XUnitAggregatedOverviewGadget (displays a pie chart for aggregated tests)
XUnitAggregatedSummaryGadget (displays a summary for aggregated tests)
You just need inherit from them and add a Editable annotation to illustrate the gadget, for example:
@Editable
(
name
=
"Boost Test Overview"
,
category
=
GadgetCategory
.
UNIT_TEST_REPORTS
)
public
class
BoostOverviewGadget
extends
XUnitOverviewGadget
{
}
and add gadget support to your plugin class:
public
class
BoostTestPlugin
extends
AbstractTestReportPlugin
{
.
.
.
.
.
.
protected
Class
<
?
extends
Gadget
>
[
]
getGadgetClasses
(
)
{
return
new
Class
[
]
{
BoostOverviewGadget
.
class
,
BoostSummaryGadget
.
class
,
BoostAggregatedOverviewGadget
.
class
,
BoostAggregatedStatsGadget
.
class
}
;
}
}
RESTful API Support
â
If you want to expose the reports by REST, inherit from BaseReportRest like below:
@Path
(
"/boost"
)
public
class
BoostTestRest
extends
BaseReportRest
{
}
and add your REST support to plugin class:
public
class
BoostTestPlugin
extends
AbstractTestReportPlugin
{
.
.
.
.
.
.
protected
Class
<
?
>
[
]
getRestResourceClasses
(
)
{
return
new
Class
<
?
>
[
]
{
BoostTestRest
.
class
}
;
}
}
And now you can access the reports from below url:
http
:
/
/
your
-
quickbuild
/
rest
/
boost
See
Interact with Reports
page for available functions.
Last updated
on
Oct 28, 2024

================================================================================

Title: Creating an Issue Tracker Plugin
URL: https://wiki.pmease.com/display/QB14/Creating+an+Issue+Tracker+Plugin
Breadcrumb:  > Developer's Guide > Develop Plugins > Plugin Examples

Developer's Guide
Develop Plugins
Plugin Examples
Creating an Issue Tracker Plugin
Version: QB14
On this page
Creating an Issue Tracker Plugin
Since 4.0, you can add your own test report plugin by using report plugin APIs. Normally, an typical issue tracker plugin contributes below extension points:
BuildTabContribution
displays a tab in build page to show related issues
BuildSummaryContribution
displays a summary section to show how many issues are related in a build in build dropdown
Gadget
displays the related issues of a configuration in Dashboard page
CommentTransformer
hyperlink the issues occurred in commit comment by a pattern
StatisticsSupport
collects issues by build so that we can compare with a specified build
even more, contribute some steps to create/update issues.
You needn't write the plugin from ground up, plugin com.pmease.quickbuild.tracker.core implements and encapsulates most of them already, just follow below instructions to create an issue tracker plugin. If you are not familiar with how to set up your development environment or how to create and test a plugin, please read plugin tutorials and
some plugin examples
first. Or you may read the Redmine plugin source code directly. Below we will show you how to add a Redmine plugin.
Plugin Activator
â
Every issue tracker plugin needs a plugin activator. As plugin com.pmease.quickbuild.tracker.core has already done a lot of things, add it to plugin dependencies in MANIFEST.MF, and actually, in most cases, you only need this dependency.
And then, implement the activator by extending AbstractTrackerPlugin:
public
class
RedminePlugin
extends
AbstractTrackerPlugin
{
public
IssueTracker
createTracker
(
)
{
return
new
RedmineTracker
(
)
;
}
protected
IssueCategory
createCategory
(
)
{
return
new
RedmineCategory
(
)
;
}
public
Class
<
?
>
getConfigurationSettingClass
(
)
{
return
RedmineSetting
.
class
;
}
}
It is fairly simple, and we will discuss more detailed below.
IssueTracker
â
IssueTracker is an interface which tell QuickBuild how to fetch issue related information from remote server:
public
interface
IssueTracker
extends
CommentTransformer
{
/**
* Return the total issues in a build
*/
int
getIssueCount
(
Build
build
)
;
/**
* Get the issue pattern which will be used to match issue key in commit message
* @return
*/
Pattern
getIssuePattern
(
)
;
/**
* Extract the issue key from a matched issue key, for example: extract bug:123 to 123, #456 to 456
*
* @param matched
* @return
*/
String
extractIssueKey
(
String
matched
)
;
/**
* Batch fetching issues data from remote.
*
* @param keys need be fetched
* @return a map of fetched issues data
*/
Map
<
String
,
Issue
>
fetchIssues
(
Collection
<
String
>
keys
)
;
/**
* Get the issue url pattern which will be used to hyperlink the issue key, for example, for JIRA issue,
* the pattern would be: http://jira-server/browse/$KEY.
* Note: always use <b>$KEY</b> as we will use it to replace with the actual issue key.
*
* The server url can be retrieved from the tracker setting. So, for JIRA, this function can be
* simply implemented like below:
* <code>
* public String getIssueUrlPattern() {
*     JiraSetting setting = JiraSetting.get(); // Retrieve JIRA setting of current configuration
*     return StringHelper.normalizeUrl(setting.getHost()) + "/browse/$KEY";
* }
* </code>
*
* @return the pattern of issue url
*/
String
getIssueUrlPattern
(
)
;
}
To implement IssueTracker, extend
com.pmease.quickbuild.plugin.tracker.core.AbstractIssueTracker
which implements most of the functions above:
public
class
RedmineTracker
extends
AbstractIssueTracker
{
public
Map
<
String
,
Issue
>
fetchIssues
(
Collection
<
String
>
keys
)
{
.
.
.
.
.
.
}
public
String
getIssueUrlPattern
(
)
{
RedmineSetting
setting
=
RedmineSetting
.
get
(
)
;
return
StringHelper
.
normalizeUrl
(
setting
.
getHost
(
)
)
+
"/issues/$KEY"
;
}
@Override
public
String
extractIssueKey
(
final
String
matched
)
{
Long
id
=
TrackerHelper
.
extractLong
(
matched
)
;
if
(
id
==
null
)
{
return
null
;
}
else
{
return
id
.
toString
(
)
;
}
}
}
fetchIssues()
is tracker related, you need implement according to your issue tracker API.
Class Issue includes below properties:
public
class
Issue
implements
Serializable
{
private
String
issueKey
;
private
String
issueType
;
private
String
summary
;
private
String
status
;
private
String
priority
;
private
String
resolution
;
private
Calendar
created
;
private
Calendar
updated
;
private
String
assignee
;
private
String
reporter
;
}
IssueCategory
â
All issues report will be saved to your configuration or build reports directory. The IssueCategory encapsulates the issue related operations, like save/load from H2 database, displays to user, etc. So implement your IssueCategory like below:
public
class
RedmineCategory
extends
IssueCategory
{
// return the name of the category
public
String
getName
(
)
{
return
"Redmine"
;
}
// return the unique id of category
public
String
getId
(
)
{
return
"redmine"
;
}
// return the order which you want to display in QuickBuild
public
int
getOrder
(
)
{
return
150
;
}
}
Configuration Setting
â
You need add a configuration setting class let user define the issue tracker server:
@Editable
(
name
=
"Redmine Server"
,
order
=
1000
,
category
=
"Issue Tracker"
)
public
class
RedmineSetting
extends
AbstractTrackerSetting
{
public
RedmineSetting
(
)
{
// default issue pattern
issuePattern
=
"(?<!\\:)(?:#|bug:)\\d+"
;
}
}
AbstractTrackerSetting
defines below properties:
public
abstract
class
AbstractTrackerSetting
implements
TrackerSetting
{
String
host
;
String
user
;
String
password
;
String
issuePattern
;
}
Just add as more fields as you need to the setting class, and apply some annotations to your getter method, QuickBuild will display the form without writing one line for GUI. See this page for details. For example, we add associate project to RedmineSetting:
public
class
RedmineSetting
extends
AbstractTrackerSetting
{
private
String
associatedProject
;
.
.
.
.
.
.
@Editable
(
name
=
"Associated Project"
,
order
=
500
)
@NotEmpty
@Scriptable
public
String
getAssociatedProject
(
)
{
return
associatedProject
;
}
}
Now, in Redmine setting, a new field
Associated Project
is added which is a required field and also user can use script to provide this property.
Finally, package the plugin and copy to QuickBuild server plugins directory, restart QuickBuild. To test your plugin, here is Redmine, you need:
configure the Redmine Server in configuration settings
add a repository to the configuration
add a checkout step
trigger a build
submit some modifications to your repository, in the commit message, add some issues you want
trigger a build again
If you are lucky, you can find all issues mentioned in commit messages are hyperlinked and a tab named Redmine which displays all issues mentioned in commit messages is added in build page.
Exposing Issues Report
â
You can also expose your issues report via REST:
@Path
(
"/redmine"
)
public
class
RedmineRestResource
extends
TrackerResource
{
}
and then add this class to the plugin activator so QuickBuild can know you want to expose it:
public
class
RedminePlugin
extends
AbstractTrackerPlugin
{
.
.
.
.
.
.
protected
Class
<
?
>
[
]
getRestResourceClasses
(
)
{
return
new
Class
[
]
{
RedmineRestResource
.
class
}
;
}
And now you can visit below URL to access your issues report:
http
:
/
/
your
-
quickbuild
/
rest
/
redmine
See
Interact with Issues
for all RESTful functions.
Contributing to Dashboard
â
If you want to display your issues report to Dashboard, you can create a Gadget class:
@Editable
(
name
=
"Redmine Issues"
,
category
=
GadgetCategory
.
CHANGES_AND_ISSUES
)
public
class
RedmineGadget
extends
AbstractIssueGadget
{
}
and then add to your plugin activator like:
public
class
RedminePlugin
extends
AbstractTrackerPlugin
{
.
.
.
.
.
.
protected
Class
<
?
extends
Gadget
>
[
]
getGadgetClasses
(
)
{
return
new
Class
[
]
{
RedmineGadget
.
class
}
;
}
Now, in Dashboard page, you can find a gadget named
Redmine Issues
is available. When add it to your dashboard, you may see the gadget like below:
Create/Update Issue
â
If you want to create/update issues, you can add some step class to do this, and add them to your plugin activator like below:
public
class
RedminePlugin
extends
AbstractTrackerPlugin
{
.
.
.
.
.
.
protected
Object
[
]
getExtraExtensions
(
)
{
return
new
Object
[
]
{
new
StepProvider
(
)
{
public
Class
<
?
extends
Step
>
getStepClass
(
)
{
return
CreateIssueStep
.
class
;
}
}
,
new
StepProvider
(
)
{
public
Class
<
?
extends
Step
>
getStepClass
(
)
{
return
UpdateIssueStep
.
class
;
}
}
}
;
}
}
Last updated
on
Oct 28, 2024

================================================================================

Title: Extension Points
URL: https://wiki.pmease.com/display/QB14/Extension+Points
Breadcrumb:  > Developer's Guide > Develop Plugins > Development References

Developer's Guide
Develop Plugins
Development References
Extension Points
Version: QB14
Extension Points
For documentation of plugin extension points defined in the system, please extract the file
<QuickBuild server install dir>/plugins/com.pmease.quickbuild.bootstrap/javadoc.zip/com/pmease/quickbuild/extensionpoint/package-summary.html
.
Last updated
on
Oct 23, 2024

================================================================================

Title: Working with Reports
URL: https://wiki.pmease.com/display/QB14/Working+with+Reports
Breadcrumb: 

Version: QB14
On this page
Working with Reports
Overview
â
The build reports in QuickBuild are published by using
publish build reports step
. The build report will be generated after the build finishes. After the build reports is published, you can:
View an overview status in
build dashboard
.
View the details report by clicking the related category in
Build
Tab.
View the trends of the current report in
Statistics tab
.
QuickBuild also support publishing HTML reports if your reports are not supported directly.
Supported Reports
â
Following table lists all the reports supported in QuickBuild:
Java Category
â
Report Name
Version
JUnit Report
3.8+
TestNG Report
5.7
Fidbugs Report
1.3.5+
CheckStyle Report
4.1+
EMMA Report
2.1+
Cobertura Report
1.9.2+
PMD Report
4.2.2
.NET Category
â
Report Name
Version
MSTest Report
NUnit Report
2.0
MBUnit Report
2.4+
Fxcop Report
1.35+
NCover Report
3.0+
Report Table
â
QuickBuild is using a grid table to display the records of a build report as follows:
Below is a fast overview of the actions in the report table:
Re-order The Report
â
By clicking the header of the table, you can re-order the report results by selected column.
Display The History Statistics Chart
â
When clicking a column with
, the history statistics of this data will be displayed. This will help you to track your builds more accurately.
NOTE: Only last 25 builds will be displayed
Filtering/Navigating The Report
â
At the top/bottom of the report table, controls are available to filter/navigate the report.
Filter the records
â
Some reports contains sub reports, for example, in JUnit Packages report, you can click each link of the Package Name, then all the test suites in this packages will be displayed. Or if you are viewing tests report ('By Tests' tab), then click the link(s) will help you to filter the reports.
You may also enter any words you want to filter in the input box, and press 'Go' button, the report will be filtered. Clear the filter input field, and press 'Go' button, and all records will be shown again.
By selecting 'containing' or 'excluding', the records will include or exclude the word(s) you have entered.
Last updated
on
Oct 28, 2024

================================================================================

Title: Plugin Examples
URL: https://wiki.pmease.com/display/QB14/Plugin+Examples
Breadcrumb: 

Version: QB14
Plugin Examples
QuickBuild ships with some plugin examples located in directory
<QuickBuild install dir>/dev/plugin/samples
. You may follow below steps to import these example plugin projects into the
plugin development workspace
to explore them more easily:
Bring up the import dialog by selecting Eclipse menu item
File -> Import
. Select
Existing Projects into Workspace
as import source like below:
Click next to bring up the import projects dialog. Specify root directory as
<QuickBuild install dir>/dev/plugin/samples
, and check the option
Copy projects into workspace
like below:
Click finish, and all example plugin projects will be imported into the workspace.
Check Eclipse problems view to see if there is any errors. If there is, rebuild imported projects by selecting menu item
Project -> Clean
, and click OK on the appeared dialog.
Now let's introduce more plugin concepts and extension points by exploring some of these example projects:
Write Custom Gadget
The Example Plugin in Tutorial
The JavaNCSS Plugin
Creating a Test Report Plugin
Creating an Issue Tracker Plugin
Last updated
on
Oct 28, 2024

================================================================================

